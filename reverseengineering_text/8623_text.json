{
    "title": "When to use Windbg and Ollydbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/8623/when-to-use-windbg-and-ollydbg",
    "content": "According to what I know :WinDbg uses debugging information (pdb/symbol files) for debugging.So ,for example say I get a unknown exe (malicious) can I debug it since I'll not be having its .pdb. Is WinDbg best suited to analyze memory dumps and crash issues only?\nOllydbg being a ring 3 debugger is good to analyze/debug malicious exe's but doens't support unknown dlls(there is loaddll but you have to know which function the dll exports and there parameters) and rootkits(sys files).\nSo If I have a dll and a .sys file how can I debug it using olly or winDbg?\nNote:I am a noob I may be wrong in what I know.I don't have the resources to buy IDAPro :-).\n",
    "votes": "4",
    "answers": 2,
    "views": "11k",
    "tags": [
        "debugging",
        "windbg",
        "vulnerability-analysis",
        "malware"
    ],
    "user": "rebel87",
    "time": "Apr 2, 2015 at 6:36",
    "comments": [],
    "answers_data": [
        {
            "content": "Even the free version of IDA Pro is worth having. Finding the general structure of an unknown binary is much easier with it than with anything else. If you have an unknown DLL, it will show you which exports it has, and looking at the assembly code helps you guess the parameters.\nIn most cases, to debug a .dll, you'll want to write a small program to call several of its exports one after another anyway. You can use ollydbg or windbg to load your .exe and trace through the .dll code.\nMy personal experience is that in many cases, the best approach would be using IDA first to get an overview over the unknown binary, then use ollydbg or the IDA debugger to trace on the processor instruction level, and only use a high level debugger when i have some symbols to trace on the source code level.\nI have bought IDA and i think the current version of the debugger is much better than the free 5.0 one, so you might want to skip the IDA debugger entirely, but you'll still use it for static analysis. And i tend to use Linux much more than Windows (and if on windows, use IDA or Ollydbg), so i have a lot more experience with gdb than with windbg.\nStill, each of these tools has its strenghs and weaknesses, and if you seriously want to go into binary analysis, you'll need each of them in the long run. If i were you, i'd invest a day or two into each of them. Once you're comfortable with them, you'll find you'll use each of them depending depending on your specific situation.\n",
            "votes": "6",
            "user": "Guntram Blohm",
            "time": "Apr 2, 2015 at 8:00",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Caleb Fenton",
                    "text": "<span class=\"comment-copy\"><code>c:\\windows\\system32\\rundll32.exe &lt;dll path&gt; [entry point function]</code>  E.g. <a href=\"https://technet.microsoft.com/en-us/library/ee624057(v=ws.11).aspx\" rel=\"nofollow noreferrer\">technet.microsoft.com/en-us/library/ee624057(v=ws.11).aspx</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "WinDbg uses debugging information (pdb/symbol files) for debugging. So ,for example say I get a unknown exe (malicious) can I debug it since I'll not be having its .pdb\n\nYes. Symbols are one of Windbg's main strength, but it can also debug anything without symbolic information.\n\nIs WinDbg best suited to analyze memory dumps and crash issues only?\n\nOnce again, it can do that, but that's not its sole use.\n\nOllydbg being a ring 3 debugger is good to analyze/debug malicious\n  exe's but doens't support unknown dlls(there is loaddll but you have\n  to know which function the dll exports and there parameters)\n\nIf you need to analyse a DLL, you'll need a program to load it and then debug this program, thus you can't debug a DLL by itself (DLLs, as their name imply are dynamic libraries used by a main program). That's a system requirement.\n\nand rootkits(sys files).\n\nYes, you'll need a ring0 debugger.\nYou can also mix static (disassembler) and runtime (debugger) analysis  for your DLL and driver (*.sys) file. Hex rays has a free version of IDA.\n\nBoth debuggers can be used for Ring3 (user-land) debugging, and only Windbg can do Ring0 (kernel-land) but they have their own strengths and weaknesses.\nFrom my point of view (I'm using both a lot):\n\nOllyDbg: \n\nPros: great for displaying information to the end-user; Color schemes, Well organised displaying windows.\nCons: symbolic information is minimal; no command line; GUI only\n\nWindbg:\n\nPros: extremely powerful with symbolic information; Ring0 debugging; windows internals; bare metal stuffs\nCons: not really user-friendly; steep learning curve\n\n\nThey both have a native plugin system (C / C++); windbg have a scripting language which is a real PITA (but pykd [Windbg scripting in python] can alleviate this problem).\nNote that windbg can't do in-place live ring0 debugging (Ã  la Softice or Syser) except with \"livekd\" (but this works on a system snpashot, not live): you need a host system (the debugger) and another machine which will be the debuggee (either a virtual machine or another physical machine).\n",
            "votes": "4",
            "user": "Neitsa",
            "time": "Apr 2, 2015 at 8:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}