{
    "title": "How do I determine code coverage when fuzzing",
    "link": "https://reverseengineering.stackexchange.com/questions/1405/how-do-i-determine-code-coverage-when-fuzzing",
    "content": "Let's say I'd like to begin fuzzing Acme Corp's PDF Reader.  I'd like to try to follow what Miller did by downloading a bunch of benign PDFs and mutate them.  \nMiller began by reducing his corpus of PDF samples to a minimum by pruning samples that had similar code coverage.\nHow is that specific step done?  That is, how did he determine what was a similar code coverage? \nI can imagine a tool that traces execution and records JMP/CALLs to get an execution graph, and I suppose you could diff those graphs.  But what about JIT code?  Wouldn't those graphs be very different since the JIT would likely be in different locations in memory?\n",
    "votes": "12",
    "answers": 2,
    "views": "863",
    "tags": [
        "tools",
        "fuzzing"
    ],
    "user": "mrduclaw",
    "time": "Mar 31, 2013 at 1:10",
    "comments": [],
    "answers_data": [
        {
            "content": "Not sure how it fares against application with JIT compiled code, but peach has a minset utility to make a minimal set of files with highest code coverage:\n\nThis tool will run each sample file through a target program and determine code coverage. It will then find the least number of files needed to cover the most code. This will be the minimum set of files that should be used when fuzzing.\n\nBut as far as I can see it uses the method you proposed, monitoring hits of all basic blocks of the application. It uses a pintool to do this.\n",
            "votes": "5",
            "user": "0xea",
            "time": "Mar 30, 2013 at 20:49",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Although it is heavily coupled with GCC, the <pre><code>gcov</code></pre> project is popular as a Linux code coverage tool.  It however requires compiling your program with the <pre><code>-fprofile-arcs -ftest-coverage</code></pre> flags, which may not be an option if targeting closed source software.  More information may be found here: http://gcc.gnu.org/onlinedocs/gcc/Gcov.html\n",
            "votes": "5",
            "user": "mncoppola",
            "time": "Mar 30, 2013 at 20:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">This is a great suggestion, but I was hoping on suggestions for closed-source software.</span>",
                    "time": null
                }
            ]
        }
    ]
}