{
    "title": "Discovering byte array obfuscation function",
    "link": "https://reverseengineering.stackexchange.com/questions/12586/discovering-byte-array-obfuscation-function",
    "content": "I'm in the middle of reverse engineering SafeNet (formerly Rainbow) iKey 1000 USB dongle protocol, in order to create Linux driver for it. I'm using Windows as guest in virtual machine on Linux host and Wireshark to examine USB packets. The protocol is quite simple, however I'm stuck with challenge-response MD5 authentication (<pre><code>ikey_MD5_CHAP</code></pre>).\nThe challenge is sent do the dongle in plain text then device calculates MD5 of challenge and key stored in device and sends it back to host. However, MD5 value transmitted back in control packet seems to be obfuscated for some reason.\nThe example value send via USB is:\n<pre><code>09 77 e6 be 59 44 22 bc ef 60 47 da 4f bd be 80\n</code></pre>\nwhen value returned by <pre><code>ikey_MD5_CHAP</code></pre> function by original software is\n<pre><code>0a 9a 2b 26 e2 ef ef ab ed 3d 02 73 c5 11 f1 90\n</code></pre>\nMy goal is to discover the transformation function. There's great possibility that it consists of some XORs and additions since something similar was used in security officer password obfuscation as described in  http://www.securityfocus.com/advisories/2440. I noticed that first byte is always incremented by one in all hashes that I had generated.\nSince I'm reverse engineering newbie I'm asking for directions which should I follow to discover the transformation function. I can generate as many hashes as needed.\n",
    "votes": "1",
    "answers": 0,
    "views": "373",
    "tags": [
        "hardware",
        "obfuscation",
        "deobfuscation",
        "usb"
    ],
    "user": "yuiu",
    "time": "May 3, 2016 at 10:50",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "See here, here, and here.\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "I'm afraid your question isn't very clear. Do you send the <pre><code>09 77 ...</code></pre> string to the USB dongle, which makes it respond with <pre><code>0a 9a ...</code></pre>? In that case, do what's being described in the CVE .. send a bunch of  <pre><code>00</code></pre> bytes. Or does the dongle send <pre><code>09 77 ...</code></pre>, but the original windows software translates this to <pre><code>0a 9a ...</code></pre>? Then, disassemble the software. Or is it something else? Please clarify - what do you send? What does the dongle send? What do you expect? What does the original windows software transform?\n",
            "time": null
        },
        {
            "user": "yuiu",
            "text": "@GuntramBlohm yes - hardware sends back obfuscated data (<pre><code>09 77...</code></pre>) which is then translated by the original software to clear one (<pre><code>0a 9a...</code></pre>). I need to discover the transformation function.\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "Run the original software with a debugger. Put a breakpoint on the function that reads from USB. Check the stack trace and/or single step from there and check what happens to the data.\n",
            "time": null
        },
        {
            "user": "user19420",
            "text": "I've one of those ikey 1000 keys. If it helps, I can send it to you :) wmontes\n",
            "time": null
        }
    ],
    "answers_data": []
}