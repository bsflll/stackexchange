{
    "title": "Who does construct the stack on process creation in Windows?",
    "link": "https://reverseengineering.stackexchange.com/questions/5923/who-does-construct-the-stack-on-process-creation-in-windows",
    "content": "When I start <pre><code>notepad.exe</code></pre> with ollydbg in Windows XP, the initial register was <pre><code>esp:7FFC4</code></pre> and <pre><code>ebp:7FFF0</code></pre>.\n<pre><code>stack\n\n...\n0007FFC4  7C817067  kernel32.7C817067 <--- ESP\n0007FFC8  7C940208  ntdll.7C940208\n0007FFCC  FFFFFFFF\n0007FFD0  7FFDB000\n0007FFD4  80546BFD\n0007FFD8  0007FFC8\n0007FFDC  81D22DA8\n0007FFE0  FFFFFFFF                    <--- EBP\n0007FFE4  7C839AC0  kernel32.7C839AC0\n0007FFE8  7C817070  kernel32.7C817070\n0007FFEC  00000000\n0007FFF0  00000000\n0007FFF4  00000000\n0007FFF8  0100739D notepad.<ModuleEntryPoint>\n0007FFFC  00000000\n...\n</code></pre>\nI first guessed the initial stack was empty,\nbut by the process argument (e.g., <pre><code>argc</code></pre>, <pre><code>argv</code></pre>), I thought it can have some values.\n\nwhat is meaning of the initial stack between <pre><code>EBP</code></pre> and <pre><code>ESP</code></pre>?\nthe stack <pre><code>ESP</code></pre> can be lower than <pre><code>7FFE0</code></pre> (over than as value) while <pre><code>notepad.exe</code></pre> is running ? In other words, can esp point at <pre><code>0007FFF8</code></pre>?\n",
    "votes": "1",
    "answers": 2,
    "views": "508",
    "tags": [
        "windows",
        "x86",
        "stack-variables"
    ],
    "user": "greenfish",
    "time": "Jul 24, 2014 at 8:00",
    "comments": [],
    "answers_data": [
        {
            "content": "Visit these two webpages for information about stack and stack frames \n\nwhat is meaning of the initial stack between EBP and ESP?\n\n<pre><code>EBP</code></pre> and <pre><code>ESP</code></pre> are used in conjunction to create a stack frame. To allow for many unknowns in the execution environment, functions are frequently set up with a \"stack frame\" to allow access to both function parameters, and automatic function variables. The idea behind a stack frame is that each subroutine can act independently of its location on the stack, and each subroutine can act as if it is the top of the stack.\n\nthe stack ESP can be lower than 7FFE0 (over than as value) while\n  notepad.exe running? in other words, can esp point at 0007FFF8?\n\n<pre><code>ESP</code></pre> is a simple x86 register just like any other. So it can be modified in the same ways like other. If you write a command like <pre><code>sub esp, 100</code></pre> then <pre><code>ESP</code></pre> will be modified\nand it is true that <pre><code>ESP</code></pre> can have a lower value than 7FFE0. The value of <pre><code>ESP</code></pre> shown in Ollydbg is when the application is at its entry point. Before that considerable operations takes place which modify the stack. So definitely, <pre><code>ESP</code></pre> can have a lower value than that.\n",
            "votes": "3",
            "user": "0xec",
            "time": "Jul 23, 2014 at 2:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "greenfish",
                    "text": "<span class=\"comment-copy\">What i want to know is the meaning of 0007FFC4 ~ 0007FFE0.  Why the stack is not empty on the process creation? And, i wonder that the esp is under 0007FFE0, by POP instruction. It's not SUB instruction. That's the stack underflow than start EBP(=0FFFE0). I'm afraid of it.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">Stack overflow/underflow is a completely different concept. <a href=\"http://msdn.microsoft.com/en-us/library/8cxs58a6.aspx\" rel=\"nofollow noreferrer\">The default value of stack size is 1 MB in x86</a>. Error will occur only when you overcome this limit. In fact this feature has been exploited in the past to create several  vulnerabilities. Nowadays, compilers emit prologue/epilogue stack check code for functions to prevent such things.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<pre><code>RtlCreateUserStack()</code></pre> creates the stack on thread creation (And every process has the main thread). Or more generally: The Windows PE loader. \nWhat is the PE loader? That thing that creates a process out of an executable file on disk (or adds that executable file to a process in case of DLLs)  \nYour other question is why, by the time Olly breaks, there already are values on the stack.\nThat is because your <pre><code>main()</code></pre> entrypoint is not the first thing that will be executed in the process. Before <pre><code>main()</code></pre> there is a lot of internal CRT setup, maybe even setting up global classes, ...\nBut even before any code of your executable is executed the DLLs still need to do some initalization of their own.\nAs you use OllyDbg, go to Options->Debugging->Start and play around with that to get a feeling about what needs to be done before your code runs.\n",
            "votes": "1",
            "user": "perror",
            "time": "Jul 24, 2014 at 8:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "greenfish",
                    "text": "<span class=\"comment-copy\">You said about internal CRT functions and global class (it may be the construction of the global class intance). Question : Are these executed before entering the PE entry point?</span>",
                    "time": null
                },
                {
                    "user": "Dmitry Janushkevich",
                    "text": "<span class=\"comment-copy\">No. CRT init routines take care of global objects instantiation when they run on process startup. The entry point actually points to one of those routines. PE loader doesn't know and doesn't care what sort of runtime support library the program uses and which language it was written in; the program takes care of all that init by itself.</span>",
                    "time": null
                }
            ]
        }
    ]
}