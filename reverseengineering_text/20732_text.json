{
    "title": "What is this function doing?",
    "link": "https://reverseengineering.stackexchange.com/questions/20732/what-is-this-function-doing",
    "content": "I have this function, named <pre><code>__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm</code></pre>.\nAnd this is the relevant assembly:\n<pre><code>mov     rdi, [rbp+var_A80]\nmov     rsi, [rbp+var_A88] \nmov     rdx, [rbp+string_length]\ncall    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm \n</code></pre>\nFrom what I've noticed by looking at the registers before and after calling the function, the address of RSI is incremented by string_length, but I still have no idea what RDI is doing.\nAnother weird thing is that the string length reported by the register is 0x046, but the address is incremented by 0x040.\nThe RDI is <pre><code>00007FFEEFBFF240</code></pre> before the call, <pre><code>0000000100400040</code></pre> after it.\nEDIT:\nIDA is not letting me debug the function, as it throws SIGBUS.\nI am slowly reversing the function, i'll update here with progress.\nRDI is compared with 0FFFFFFFFFFFFFFF0h (Why?)\n",
    "votes": "0",
    "answers": 0,
    "views": "295",
    "tags": [
        "ida",
        "binary-analysis"
    ],
    "user": "G. Ramistella",
    "time": "Feb 27, 2019 at 16:05",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "This is most likely just a <pre><code>std::string</code></pre> constructor. From personal experience with STL code, take educated guesses and move on. You'll turn crazy if you reverse all of it. I usually just check xrefs to some function and if it looks like it may be simply creating an <pre><code>std::string</code></pre> from a C string, I treat the function as such until further context shows it doesn't.\n",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "One more tip to make code more readable: Go to <pre><code>Options -> Demangled names -> Select names</code></pre> so you don't have to look at 500 character mangled names all day.\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "it is a gcc demangled name _std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init(char const*, unsigned long) as suggested turn on demangling in options and iirc ida should probably show it as standard function using flirt\n",
            "time": null
        }
    ],
    "answers_data": []
}