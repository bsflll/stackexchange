{
    "title": "ARM Thumb2 register usage",
    "link": "https://reverseengineering.stackexchange.com/questions/18529/arm-thumb2-register-usage",
    "content": "I am reversing ARM Thumb2 code.\nI am looking for a table that shows which registers are used to pass arguments to functions, and which registers must be saved after the function ends.\nBy the way, if I see <pre><code>push r5-r9</code></pre> at the beginning of the function and <pre><code>pop r5-r9</code></pre> at the end of function,  are those registers saved?\n",
    "votes": "3",
    "answers": 2,
    "views": "343",
    "tags": [
        "disassembly",
        "assembly",
        "arm",
        "thumb2"
    ],
    "user": "Keystone",
    "time": "Jun 15, 2018 at 15:55",
    "comments": [],
    "answers_data": [
        {
            "content": "This is all documented in the ARM Architecture Procedure Call Standard (AAPCS) ARM IHI0042.  There may be more recent versions.  The short version: R0-R3 are for passing arguments, R12 is a scratch register for procedure calls (linker things, etc) and everything else must be preserved by functions that use it.\n",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "Nov 10, 2018 at 17:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">Do you have a link to the Arm Procedure Call Standard (AAPCS) Arm IHI 0042F doc? I would like to take a look at it</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Typically, the <pre><code>push r5-r9</code></pre> instruction is a way to save the content of these registers (ie <pre><code>r5</code></pre>, <pre><code>r6</code></pre>, <pre><code>r7</code></pre>, <pre><code>r8</code></pre>, <pre><code>r9</code></pre>) on the stack, then the <pre><code>pop r5-r9</code></pre> is restoring the saved values before leaving the function stack-frame.\nThis is quite common behavior when you want to manipulate non-volatile registers within your stack-frame and be compliant to the ABI. It is extremely frequent to see these way of doing in compiler generated assembly code.\n",
            "votes": "2",
            "user": "perror",
            "time": "Jun 15, 2018 at 16:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">So are these typically the registers used to pass arguments to a function (first part of the question!)?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">It depends of the ABI, the question is not precise enough to answer properly. We need to know the OS used (and thus the ABI used).</span>",
                    "time": null
                },
                {
                    "user": "Keystone",
                    "text": "<span class=\"comment-copy\">@perror, I talking about embbeded without os</span>",
                    "time": null
                }
            ]
        }
    ]
}