{
    "title": "Confusion about LEA and why it means what it does in this context",
    "link": "https://reverseengineering.stackexchange.com/questions/21874/confusion-about-lea-and-why-it-means-what-it-does-in-this-context",
    "content": "I am reading Eldad Eilam's reverse engineering book and trying to follow his RtlInitializeGenericTable example.\nThe first part of it is fairly straightfoward-\n<pre><code>7C921A39 MOV EDI,EDI\n7C921A3B PUSH EBP\n7C921A3C MOV EBP,ESP\n7C921A3E MOV EAX,DWORD PTR SS:[EBP+8] ; eax = UnknownStruct->Member1\n7C921A41 XOR EDX,EDX\n7C921A43 LEA ECX,DWORD PTR DS:[EAX+4] ; ecx = UnknownStruct->Member2\n\n7C921A46 MOV DWORD PTR DS:[EAX],EDX   ; UnknownStruct->Member1 = 0;\n7C921A48 MOV DWORD PTR DS:[ECX+4],ECX ; UnknownStruct->Member3 = &UnknownStruct->Member2;\n7C921A4B MOV DWORD PTR DS:[ECX],ECX   ; UnkownStruct->Member2  = &UnknownStruct->Member2;\n7C921A4D MOV DWORD PTR DS:[EAX+C],ECX ; UnknownStruct->Member4 = &UnknownStruct->Member2;\n</code></pre>\nWhere I get confused is in the second part:\n<pre><code>7C921A50 MOV ECX,DWORD PTR SS:[EBP+C] ; ecx = UnknownStruct->Member2\n7C921A53 MOV DWORD PTR DS:[EAX+18],ECX; UnknownStruct->Member7 = UnknownStruct->Member2;\n7C921A56 MOV ECX,DWORD PTR SS:[EBP+10]; ecx = UnknownStruct->Member3\n7C921A59 MOV DWORD PTR DS:[EAX+1C],ECX; UnknownStruct->Member8 = UnknownStruct->Member3; \n</code></pre>\nIn this part, offsets to the EBP are used to access variables and set their value. However, in his decompiled-c-equivalent output, it is shown that memory addresses are not being used as the initialization value, i.e. \n<pre><code>UnknownStruct->Member7 = UnknownStruct->Member2;\n</code></pre>\nwhereas in the first part, they are:\n<pre><code>UnknownStruct->Member3 = &UnknownStruct->Member2;\n</code></pre>\nWhy is this the case? As far as I can tell both parts should be the same- the only difference between the first and second is the LEA instruction, but that should only calculate the offset to the base pointer, the same as what is done in the second part.\nThanks.\n",
    "votes": "1",
    "answers": 1,
    "views": "946",
    "tags": [
        "disassembly",
        "decompilation"
    ],
    "user": "MisterMister",
    "time": "Aug 10, 2019 at 21:05",
    "comments": [
        {
            "user": "perror",
            "text": "Note that some compilers are use <pre><code>lea</code></pre> to encode arithmetic operations. It allows to perform an addition together with a multiplication by a constant at once and it is known to be much quicker than calling the <pre><code>add</code></pre> or <pre><code>imul</code></pre> instructions. It seems to be the case here.\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "You may also take a look at this answer on Stack-Overflow.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "if eax = 1000 ecx will be 1004 in first part\nuf  ebp = 1000  ecx will be  *(dword *) 100c in second part\nsimply put  in pseudo c\necx = foo in first part  it is simple assignment\necx  = * foo in second part  it is dereferencing \nnotice the difference of  & ( addressof operator) in both comments  \nthe Function in Question Has A prototype of \n<pre><code>NTSYSAPI VOID RtlInitializeGenericTable(\n  PRTL_GENERIC_TABLE            Table,\n  PRTL_GENERIC_COMPARE_ROUTINE  CompareRoutine,\n  PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine,\n  PRTL_GENERIC_FREE_ROUTINE     FreeRoutine,\n  PVOID                         TableContext\n);\n</code></pre>\nso some one calling that function will be doing some thing like this \n<pre><code>rettype callingconv comp(...);  //prototype for actual function implemented elsewhere\nrettype callingconv alloc(...);\nrettype callingconv free(...);\n\nRTL_GENERIC_TABLE mytable = {0}; \n\nRtlInitializeGenericTable(&mytable,comp,alloc,free,NULL);\n</code></pre>\nso [ebp + 8] the FirstArgument to the Function  will hold the address of mytable\nor by design the Address of first member of that Structure\nwhich is PRTL_SPLAY_LINKS              TableRoot;  which is documented to be SystemResereved\nso a NULL is filled in there (xor edx,edx , mov [eax],edx)\nlea ecx is Load Effective Address of [eax+4] \nso ecx will by design be the address of <pre><code>LIST_ENTRY                    InsertOrderList;</code></pre>\nso there ecx, ecx+4 which point to Flink and Blink of the LIST_ENTRY are initialised with ecx \neax + c the third member of RTL_GENERIC_TABLE is    \nPLIST_ENTRY                   OrderedPointer;   which is initialised with ecx too\n",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 12, 2019 at 6:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">are you asking about the function name RtlInitializeGenericTable  if yes I did not guess it the op mentions it at start I just looked up the documentation for the function</span>",
                    "time": null
                }
            ]
        }
    ]
}