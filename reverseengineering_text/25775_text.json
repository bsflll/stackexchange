{
    "title": "How to make Ghidra recognize bit fields?",
    "link": "https://reverseengineering.stackexchange.com/questions/25775/how-to-make-ghidra-recognize-bit-fields",
    "content": "Suppose we have the following C source:\n<pre><code>typedef struct {\n  int bit0 : 1;\n  int bit1 : 1;\n  int bit2 : 1;\n  int bit3 : 1;\n} bit_struct;\n\nbit_struct a;\n\nvoid setBit3()\n{\n  a.bit3 = 1;\n}\n</code></pre>\nWhen we compile it and open the result in Ghidra, the decompilation window shows\n<pre><code>void setBit3(void)\n{\n  a = a | 8;\n  return;\n}\n</code></pre>\nIf we give Ghidra the declaration of <pre><code>bit_struct</code></pre> (using <pre><code>File</code></pre> -> <pre><code>Parse C Source</code></pre>), and then go to the location of <pre><code>a</code></pre> and set its data type to <pre><code>bit_struct</code></pre>, the decompilation changes to\n<pre><code>a = (bit_struct)((byte)a | 8);\n</code></pre>\nwhich still doesn't access <pre><code>bit3</code></pre> by declared name.\nHow can we make Ghidra properly decompile it?\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "decompilation",
        "ghidra"
    ],
    "user": "Maxim",
    "time": "Aug 29, 2020 at 12:24",
    "comments": [],
    "answers_data": [
        {
            "content": "Looks like full bitfield support for the decompiler is slated for a future release according to a comment on Ghidra's github issues: Bitfields don't seem to decompile very well #1059\n",
            "votes": "0",
            "user": "nopnopgoose",
            "time": "Aug 30, 2020 at 21:36",
            "is_accepted": true,
            "comments": []
        }
    ]
}