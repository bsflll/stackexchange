{
    "title": "Redirecting/Remapping/Rerouting a Memory Access",
    "link": "https://reverseengineering.stackexchange.com/questions/4453/redirecting-remapping-rerouting-a-memory-access",
    "content": "I need a little help from you guys! At present, I'm working on an IDA Pro Database in order to create a patch for an executable, and I'm totally stuck on editing the following sub:\n<pre><code>.text:008EC420 ; char __thiscall sub_8EC420(MyClass *this)\n.text:008EC420 sub_8EC420      proc near\n.text:008EC420 var_8           = dword ptr -8\n.text:008EC420 var_4           = dword ptr -4\n.text:008EC420                 sub     esp, 8\n.text:008EC423                 push    ebx\n.text:008EC424                 mov     ebx, ecx\n.text:008EC426                 cmp     dword ptr [ebx+79954h], 0\n.text:008EC42D                 mov     [esp+0Ch+var_4], ebx\n.text:008EC431                 mov     [esp+0Ch+var_8], 0\n.text:008EC439                 jle     loc_8EC4F2\n.text:008EC43F                 push    ebp\n.text:008EC440                 push    esi\n.text:008EC441                 push    edi\n.text:008EC442                 lea     edi, [ebx+114h]\n.text:008EC448                 jmp     short loc_8EC450\n.text:008EC44A                 align 10h\n.text:008EC450 loc_8EC450:\n.text:008EC450                 lea     eax, [edi-0Ch]\n.text:008EC453                 push    eax\n.text:008EC454                 call    sub_A00890\n.text:008EC459                 mov     esi, eax\n.text:008EC45B                 add     esp, 4\n.text:008EC45E                 cmp     esi, 0FFFFFFFFh\n.text:008EC461                 jnz     short loc_8EC472\n.text:008EC463                 mov     dword ptr [edi], 0\n.text:008EC469                 mov     dword ptr [edi-4], 0FFFFh\n.text:008EC470                 jmp     short loc_8EC480\n.text:008EC472 loc_8EC472:\n.text:008EC472                 push    esi\n.text:008EC473                 call    sub_A00870\n.text:008EC478                 add     esp, 4\n.text:008EC47B                 mov     [edi], eax\n.text:008EC47D                 mov     [edi-4], esi\n.text:008EC480 loc_8EC480:\n.text:008EC480                 xor     ebp, ebp\n.text:008EC482                 cmp     [edi+0ECh], ebp\n.text:008EC488                 jbe     short loc_8EC4D2\n.text:008EC48A                 lea     esi, [edi+0BCh]\n.text:008EC490 loc_8EC490:\n.text:008EC490                 lea     ecx, [esi-0Ch]\n.text:008EC493                 push    ecx\n.text:008EC494                 call    sub_A00890\n.text:008EC499                 mov     ebx, eax\n.text:008EC49B                 add     esp, 4\n.text:008EC49E                 cmp     ebx, 0FFFFFFFFh\n.text:008EC4A1                 jnz     short loc_8EC4B2\n.text:008EC4A3                 mov     dword ptr [esi], 0\n.text:008EC4A9                 mov     dword ptr [esi-4], 0FFFFh\n.text:008EC4B0                 jmp     short loc_8EC4C0\n.text:008EC4B2 loc_8EC4B2:\n.text:008EC4B2                 push    ebx\n.text:008EC4B3                 call    sub_A00870\n.text:008EC4B8                 add     esp, 4\n.text:008EC4BB                 mov     [esi], eax\n.text:008EC4BD                 mov     [esi-4], ebx\n.text:008EC4C0 loc_8EC4C0:\n.text:008EC4C0                 add     ebp, 1\n.text:008EC4C3                 add     esi, 14h\n.text:008EC4C6                 cmp     ebp, [edi+0ECh]\n.text:008EC4CC                 jb      short loc_8EC490\n.text:008EC4CE                 mov     ebx, [esp+18h+var_4]\n.text:008EC4D2 loc_8EC4D2:\n.text:008EC4D2                 mov     eax, [esp+18h+var_8]\n.text:008EC4D6                 add     eax, 1\n.text:008EC4D9                 add     edi, 3E4h\n.text:008EC4DF                 cmp     eax, [ebx+79954h]\n.text:008EC4E5                 mov     [esp+18h+var_8], eax\n.text:008EC4E9                 jl      loc_8EC450\n.text:008EC4EF                 pop     edi\n.text:008EC4F0                 pop     esi\n.text:008EC4F1                 pop     ebp\n.text:008EC4F2 loc_8EC4F2:\n.text:008EC4F2                 mov     al, 1\n.text:008EC4F4                 pop     ebx\n.text:008EC4F5                 add     esp, 8\n.text:008EC4F8                 retn\n.text:008EC4F8 sub_8EC420      endp\n</code></pre>\nThe <pre><code>MyClass</code></pre> entity looks like this:\n<pre><code>struct MyClass // 502076 bytes\n{\n  void *VFT; // 4 bytes\n  MyStruct Structs[500]; // 498000 bytes = sizeof(MyStruct)=996 * 500\n  // more data...\n};\n</code></pre>\nIn order to allow <pre><code>MyClass</code></pre> to parse and manage more <pre><code>MyStruct</code></pre> instances, I enlarged the <pre><code>.data</code></pre> segment of the executable by <pre><code>sizeof(MyStruct1)=996 * 1000 = 996000 bytes</code></pre> and I appended a new <pre><code>MyStruct[1000]</code></pre> at the end of it. Now, all what I need to do is to shift every memory pointer trying to access the <pre><code>MyClass.Structs</code></pre> memory region to the <pre><code>MyStruct[1000]</code></pre> memory region. Many modifications were pretty easy to achieve, but I really don't know how to deal with this one.\nThe method <pre><code>sub_8EC420</code></pre> iterates through every <pre><code>MyStruct</code></pre> instance in <pre><code>MyClass.Structs</code></pre> getting a specific field and doing some operations with it:\n<pre><code>char *v2 = &this->Structs[0].ValueAt272;\n// offset = MyClass + 276 | MyClass->Structs + 272\n\ndo\n{\n    // operations...\n    v2 += 996; // sizeof(MyStruct)\n}\nwhile ( ... );\n</code></pre>\nIn order to successfully redirect the memory pointer to the new <pre><code>MyStruct[1000]</code></pre> array located at the end of the <pre><code>.data</code></pre> segment, I must change the following instruction:\n<pre><code>.text:008EC442                 lea     edi, [ebx+114h]\n// offset = MyClass + 276 | MyClass->Structs + 272\n// bytes = 8D BB 14 01 00 00\n</code></pre>\n<pre><code>EBX</code></pre> is the register that points to my <pre><code>MyClass</code></pre> instance offset. But I can't transform it into this:\n<pre><code>.text:008EC442                 mov edi, 2DABF84h; nop;\n</code></pre>\nBecause, as you can see, just after, the <pre><code>EDI</code></pre> register value is being used and this would lead to bad results:\n<pre><code>.text:008EC450                 lea     eax, [edi-0Ch]\n</code></pre>\nI also tried an edited <pre><code>LEA</code></pre> approach but it's not producing good results either:\n<pre><code>.text:008EC442                 lea     edi, [ebx+14A027Ch]\n// offset = MyStruct[1000] (0x02DABE74) - MyClass Instance (0x190BD08) + 272\n// bytes = 8D BB 7C 02 4A 01\n</code></pre>\nOn the top of that, inserting additional bytes to this sub completly breaks my IDA Pro database. So... how should I deal with this?\n",
    "votes": "2",
    "answers": 2,
    "views": "763",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "memory"
    ],
    "user": "Zarathos",
    "time": "May 26, 2014 at 15:30",
    "comments": [
        {
            "user": "Willem Hengeveld",
            "text": "did you try converting it to C completely, and then re-compiling, maybe your compiler ends up with shorter code than the original?  then you could just replace the entire function\n",
            "time": null
        },
        {
            "user": "Zarathos",
            "text": "Well, the executable is something like 20Mb. And the pseudo-code that the decompiler produces is always almost impossible to recompile.\n",
            "time": null
        },
        {
            "user": "Willem Hengeveld",
            "text": "if it is only one function that needs modification it is an option to correct the decompiled code by hand.\n",
            "time": null
        },
        {
            "user": "Zarathos",
            "text": "How... exactly?\n",
            "time": null
        },
        {
            "user": "Willem Hengeveld",
            "text": "there is a file \"defs.h\" in the ida plugin directory, include that with your decompiler generated c code,  and start fixing compiler errors.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "One way to patch the instruction <pre><code>lea     eax, [edi-0Ch]</code></pre>, is to create an advanced detour inside the code to your own custom .text segment and then back again to the code.\nFor a regular <pre><code>mov reg32, imm32</code></pre> opcode you need at least 5 bytes of space which will obviously never fit into the 3 byte opcode.\nFor a detour opcode sequence, you need to either craft your own relative jump (5 bytes), or use the shortest syntax for absolute jump (6 bytes):\n<pre><code>PatchStart:\n    push  loc_patch1  ;; push address of the patch code\n    ret               ;; pop address and jump to it\n</code></pre>\nSo if the code originally looked like this:\n<pre><code>.text:008EC44A                 align 10h\n.text:008EC450 loc_8EC450:\n.text:008EC450                 lea     eax, [edi-0Ch] ;; 3 bytes\n.text:008EC453                 push    eax            ;; 1 byte\n.text:008EC454                 call    sub_A00890     ;; 5 bytes\n.text:008EC459                 \n</code></pre>\nYou can replace it with:\n<pre><code>.text:008EC44A                 align 10h\n.text:008EC450 loc_8EC450:\n.text:008EC450                 push    loc_patch1     ;; 5 bytes\n.text:008EC455                 ret                    ;; 1 byte\n.text:008EC456                 nop                    ;; pad other 3 bytes\n.text:008EC457                 nop  \n.text:008EC458                 nop\n.text:008EC459                 \n</code></pre>\nAnd now for the patch itself:\n<pre><code>           loc_patch1:\n                           mov     eax, PatchedValue ;; lea eax,[edi-0Ch]\n                           push    eax            \n                           call    sub_A00890     \n                           push    loc_8EC459     ;; jump back to source\n                           ret\n</code></pre>\nThere are some performance penalties for long absolute jumps, but in the end it will get your executable patched without any tedious relocation needed.\nIf you wish to craft your own long relative jumps/calls then the opcodes (5 bytes) look like this:\n<pre><code>;; call +0xCAFE\nE8 FE CA 00 00\n;; jmp  +0xCAFE\nE9 FE CA 00 00\n</code></pre>\nThe bonus is that relative jumps require only 5 bytes. So if you create a new second text segment or replace some unused code inside the original .text segment, you'll be good to go.\n",
            "votes": "3",
            "user": "Jorma Rebane",
            "time": "May 29, 2014 at 22:14",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "You use a local unconditional jmp to another memory location then do what you want there. Ideally there's space before or after the function for you to put your instructions there. Otherwise you're looking at either relocating the entire function (a bit like a re-alloc, only in the .text section, which you can make bigger overall if you need to) and then long jmp to your code and long jmp back. Don't forget to make those jumps relative long jumps so that ASLR in it's various forms won't shaft you.\nIf you MUST do it inline then you're left optimising the code by enough bytes. Remember to keep locations for relative jumps the same.\n",
            "votes": "1",
            "user": "offbyseveral",
            "time": "May 29, 2014 at 15:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}