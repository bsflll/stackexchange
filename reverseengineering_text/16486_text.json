{
    "title": "STL map and map entry structures for IDA/HexRays",
    "link": "https://reverseengineering.stackexchange.com/questions/16486/stl-map-and-map-entry-structures-for-ida-hexrays",
    "content": "I have several binaries (Visual Studio 2005, amd64/x86_64) that I need a portion of each reversed in order to better understand the reasons for their malfunction in certain edge cases (they are long since unmaintained, there is nowhere to get support by now).\nThese binaries do not make use of 3rd party libraries, only VC++ runtime and Win32 API and hence make heavy use of STL containers.\nIt was quite easy to create general-purpose IDA <pre><code>struct</code></pre> definitions for things like <pre><code>std::vector</code></pre> or <pre><code>std::string</code></pre>. However, these binaries do have plenty of <pre><code>std::map</code></pre> usages, and well, the way msvc generates assembly for <pre><code>std::map</code></pre>s is particularly annoying.\nNamely, the whole binary is stuffed with countless methods to allocate map entries (one method per <pre><code>map<k, v></code></pre>), the entries all have different sizes, with the entry structure having the same few fields at the beginning and the end and a variable sized middle part. All the methods that are used on a particular map (e.g. <pre><code>find</code></pre>) are thus then generated with regards to these entry types, so it is a huge pain to manage this.\nI can infer the underlying logic in many cases where a map is being accessed, but I still would prefer to have a struct/many structs for better readability, preferably not needing to manually define literally all of the different structs.\nIf someone could share their own experience/findings related to reversing a large amount of <pre><code>std::map</code></pre>s efficiently, that would be great.\n",
    "votes": "3",
    "answers": 0,
    "views": "2k",
    "tags": [
        "ida",
        "c++",
        "hexrays",
        "msvc"
    ],
    "user": "Tadas S",
    "time": "Oct 5, 2017 at 18:28",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "welcome to the horrors of template-based programming! :)\n",
            "time": null
        },
        {
            "user": "Tadas S",
            "text": "Somehow, I expected there might be no better option. Still, one can hope :). Noticed that I somehow forgot to add compiler info. - that's fixed now.\n",
            "time": null
        },
        {
            "user": "Ray",
            "text": "Related: reverseengineering.stackexchange.com/questions/3889/â€¦ And yeah, I don't know any automagics here to help you too. I always write code using the STL methods that come in question, compile it with the exact same toolchain as the original executable, hope they didnt use whole program optimizations, and compare both. It's tiresome, repetitive, and unthankful work, but if some code really breaks your mind, the only way to help you out of the dire situations.\n",
            "time": null
        }
    ],
    "answers_data": []
}