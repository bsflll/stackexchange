{
    "title": "Hooking the BootClassLoader [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8269/hooking-the-bootclassloader",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about reverse engineering within the scope defined in the help center.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nAccording to Wikipedia, there are 3 class loaders.\nThe Boot Class-Loader which loads everything in RT.jar and /../jre/lib\nThen the extensions class loader and the system class loader.\nI'm only interested in the Boot class loader because I want to hook it and redefine a class in RT.jar without all the legality issues that come with <pre><code>-Xbootclasspath:/p</code></pre>. \nDocs: http://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html\n\nNote: Applications that use this option to override a class in rt.jar\n  should not be deployed. Doing so would contravene the Java 2 Runtime\n  Environment binary code license.\n\nAnd the license here: http://www.oracle.com/technetwork/java/javase/downloads/jre-6u21-license-159054.txt\nstates:\n\nC.  Java  Technology  Restrictions.  You may not  create,  modify,  or\n  change the behavior of, or authorize your licensees to create, modify,\n  or change the behavior of, classes,  interfaces, or  subpackages  that\n  are in any  way  identified  as  \"java\",  \"javax\",  \"sun\"  or  similar\n  convention   as   specified   by  Oracle  in  any  naming   convention\n  designation.\n\nSo I'm thinking that if I can hook the boot class loader from native code via C++, I can replace a class in by hooking the <pre><code>JVM_DefineClass</code></pre> function from <pre><code>JVM.dll</code></pre> without any legal trouble.\nThe function has the signature: \n<pre><code>JNIEXPORT jclass JNICALL JVM_DefineClass(JNIEnv *env, const char *name, jobject _loader, const jbyte *buf, jsize len, jobject pd)</code></pre>\n\n1: Does this function actually get call when a JVM is starting up?\n2: Would I still be breaking the license if I hook it?\n3: Am I hooking the right function or should I be doing something else(better method maybe?)?\n",
    "votes": "3",
    "answers": 0,
    "views": "676",
    "tags": [
        "c++",
        "java",
        "winapi",
        "function-hooking"
    ],
    "user": "user11780",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "Not a lawyer, but using the boot class loader to replace a class would probably still qualify as changing the behaviour of that class. Besides, very probably you don't have the resources to defend yourself against oracle should they sue you.\n",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "I'm voting to close this question as off-topic because it is asking for legal advice.\n",
            "time": null
        },
        {
            "user": "user11780",
            "text": "Well.. I did it anyway. It turns out the JVM calls the above function (<pre><code>JVM_DefineClass</code></pre> from <pre><code>JNI.dll</code></pre>) to define a class. It also calls <pre><code>Java_lang_lang_DefineClassX</code></pre> from <pre><code>Java.dll</code></pre> where X is a number from 0 to 2 inclusive. Replacing the bytes with your own allows you to redefine any class. Of course, <pre><code>Xbootclasspath</code></pre> is easier though.\n",
            "time": null
        }
    ],
    "answers_data": []
}