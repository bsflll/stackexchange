{
    "title": "What changes in MS Windows system libraries after restart?",
    "link": "https://reverseengineering.stackexchange.com/questions/3895/what-changes-in-ms-windows-system-libraries-after-restart",
    "content": "I'm running a 64-bit MS Windows 7 with all updates installed. About 1 or 2 weeks ago I've noticed that whenever I restart the OS, the virtual memory pages (of whatever process), corresponding to system libraries like <pre><code>ntdll.dll</code></pre> and <pre><code>kernel32.dll</code></pre> are slightly different. \nI'm not talking about the base address of the loaded modules, because I know that changes due to ASLR. I'm talking about the actual contents of the loaded modules, which as far as I know was not affected by ASLR implementations on Windows.\nTo illustrate what I mean, let me show you the following screenshot that compares 2 binary instances of <pre><code>ntdll.dll</code></pre> captured before (top-half) and after (bottom-halt) one OS restart:\n\nThe picture shows just a small part of <pre><code>ntdll.dll</code></pre> and therefore just a few differences. However, there are more. The size of these DLLs don't change, only some bytes at particular locations.\nI obtained the 2 binary instances which are compared in the previous picture using Process Hacker like so:\n\nRight-click a process and select Properties\nGo to the Memory tab and scroll-down until you find several entries having the name: ntdll.dll: Image (Commit)\nDouble-click one of these entries (I chose the one that had 856kB)\nPress the Save... button to store the contents to a binary file on the HDD.\n\nQuestion 1: What is causing these bytes to change? \n\nSub-question 1.1: Is is some sort of protection mechanism? \nSub-question 1.2: Was it recently introduced?  \nSub-question 1.3: Can it be disabled?\n\nQuestion 2: What do these changing bytes represent in the code of the DLLs?\n",
    "votes": "8",
    "answers": 2,
    "views": "329",
    "tags": [
        "windows",
        "dll"
    ],
    "user": "Benny",
    "time": "Mar 18, 2014 at 13:32",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "Run <pre><code>dumpbin /relocations ntdll.dll</code></pre> and compare the listed addresses against the changes.\n",
            "time": null
        },
        {
            "user": "Benny",
            "text": "@IgorSkochinsky I did run <pre><code>dumpbin</code></pre> as you indicated and compared the listed addresses against the changes. As a matter of fact it seems that no relocations were applied on <pre><code>ntdll.dll</code></pre>. And the changes that are visible in my picture are due to the system DLLs being linked with <pre><code>/DYNAMICBASE</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Question 1: What is causing these bytes to change?\n\nThese appear to be standard relocation fixups applied based on the DLL's Relocation Table.\n\nSub-question 1.1: Is is some sort of protection mechanism?\n\nNo.\n\nSub-question 1.2: Was it recently introduced?\n\nNo.\n\nSub-question 1.3: Can it be disabled?\n\nNot easily, no.\n\nQuestion 2: What do these changing bytes represent in the code of the DLLs?\n\nAddresses.\n",
            "votes": "7",
            "user": "Jason Geffner",
            "time": "Mar 18, 2014 at 13:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for your answer. Would you be so kind as to also mention the addresses of what change? Is it the addresses of all functions or just some?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">It's not just for function addresses; it also applies to global variable addresses, etc. Simply put, any time the code or data references a virtual address instead of a relative virtual address, that reference needs to have a Relocation Table entry. See Sections 4.2 and 5.6 of <a href=\"http://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/pecoff_v83.docx\" rel=\"nofollow noreferrer\">download.microsoft.com/download/9/c/5/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "Benny",
                    "text": "<span class=\"comment-copy\">Thanks for clarifying that. One last question regarding this issue: is there a win32 API which can map/convert all the VAs to RVAs of a mapped image file? Or is this a question for stackoverflow?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">No API needed... <code>VA - Image Base Address = RVA</code> (since the \"Relative\" part of \"RVA\" is relative to the Image Base Address).</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">The code you posted in your comment above is not using the Relocation Table. Please refer to the PE COFF document to which I linked above, and ask further software development questions on <a href=\"http://stackoverflow.com/\">stackoverflow.com</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "What you see is offsets modified to reflect a changed base address. Anything that's not relative to the base (be it global variables or calls or whatever) needs to be adjusted if the image base changes.\nPE files can have a relocation table for that. Can, as in standard .exe files usually don't have it, as it was not necessary until ASLR (random base addresses for modules) came along.\nFor DLLs the base address is likely to change as it depends on what other files are already loaded so they almost always have a base relocation table that says \"If the base address differs from XYZ, add the delta to the following locations\".\nIf you are curios how that base relocation table looks like, I'll recommend checking out the following:\n\nSee the following code implementing a custom PE file loader.\nSearch for <pre><code>IMAGE_DIRECTORY_ENTRY_BASERELOC</code></pre> to see code handling the relocation directory.\n",
            "votes": "3",
            "user": "perror",
            "time": "Mar 19, 2014 at 21:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}