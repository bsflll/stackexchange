{
    "title": "Mapping a high level statement back in assembly dump",
    "link": "https://reverseengineering.stackexchange.com/questions/10967/mapping-a-high-level-statement-back-in-assembly-dump",
    "content": "Say, I have compiled a large code base, e.g. gzip/gmp/python/php etc. on Linux. Is there any means to map a high level C construct, e.g. assignment/if-else/for/while/Math expression back in the assembly dump produced by <pre><code>objdump</code></pre> or something similar? Please let me know how far it is possible in both the cases when debug information is present and absent.\n",
    "votes": "0",
    "answers": 1,
    "views": "336",
    "tags": [
        "disassembly",
        "decompilation",
        "c",
        "objdump"
    ],
    "user": "sherlock",
    "time": "Sep 26, 2015 at 12:15",
    "comments": [
        {
            "user": "w s",
            "text": "Do you want to decompile the code or map assembly to original source ?\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "It sounds like what you're asking is, \"is it possible to reverse engineer software?\" So if I'm understanding you correctly, the answer is, \"yes.\"\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "Note that just about any of your original \"ssignment/if-else/for/while/Math expression\" in the C source may be optimized beyond recognition, or even entirely be omitted. I.e., even with the lowest compiler optimization settings, you won't find the \"5\" of a statement <pre><code>i = 100/5;</code></pre> back in your executable. (Assuming any 21st century compiler was used.)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I'll try to outline a possible ways you can go:\n\nIf you compile with debug symbols, you can use objdump to produce a more readable disassembly.\nif you give gcc the flag <pre><code>-fverbose-asm</code></pre>, the assembler it emits will be a lot clearer to read.\nUse the <pre><code>-S</code></pre> (note: capital S) switch to gcc, and it will emit the assembly code to a file with a .s extension. For example, the following command:\n<pre><code>gcc -O2 -S -c foo.c</code></pre> will leave the generated assembly code on the file foo.s. \n\nAlso, you can generate this in AT&T syntax as well as in Intel syntax: <pre><code>gcc -S -masm=att code.c</code></pre> <pre><code>gcc -S -masm=intel code.c</code></pre>\nFrankly, I've digested the info from here. Hope it will help.\nEDIT: some useful links:\nThe info that's more specific to your question\nLooks very promising except that the project is abandoned\n",
            "votes": "1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}