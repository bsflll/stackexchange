{
    "title": "Reversing a key-gen firmware for RISC-V",
    "link": "https://reverseengineering.stackexchange.com/questions/22558/reversing-a-key-gen-firmware-for-risc-v",
    "content": "I would like to study this firmware for Sipeed MAix, a RISC-V development board. You can download it here: <pre><code>key_gen_v1.2.zip</code></pre>. As the name suggests, its purpose is to\n\ncalculate and print a \"machine key\" to the serial port,\nclose JTAG port forever, and\nwrite one-off AES key.\n\nThe machine key is required when downloading other demo firmware, reversing which is NOT the primary target of this post. For more context, see this thread. The point of the reversing is to figure out how to get the machine key without disabling JTAG permanently.\nA quick analysis by <pre><code>binwalk</code></pre> yields nothing interesting.\n<pre><code>$ binwalk -e key_gen_v1.2.bin\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n</code></pre>\nEntropy analysis suggests that the firmware uses no obfuscation\n\nHere is the output of <pre><code>strings</code></pre>\n<pre><code>sP00sP 0sP@0sP@4\n&#41'#0A'#<Q%#8a%#4q%#0\n$#8A##4Q##0a##8\n\"#0!##<1!#8A!#<\n$#8A##4Q##0a##8\n                0000000000000000\n0123456789abcdef\n0123456789ABCDEF\n                0000000000000000\n                0000000000000000C\n                0000000000000000\n         (((((\nV (%lu) %s: misaligned load recovered at %08lx. len:%02d,addr:%08lx,reg:%02d,data:%016lx,signed:%1d,float:%1d\nV (%lu) %s: misaligned store recovered at %08lx. len:%02d,addr:%08lx,reg:%02d,data:%016lx,float:%1d\n[0;31mE (%lu) %s: Out of memory\n[0;33mW (%lu) %s: sys_exit called by core %ld with 0x%lx\n[0;31mE (%lu) %s: Unsupported syscall %ld: a0=%lx, a1=%lx, a2=%lx!\n?Error:  No workable settings found.\nError:  No appropriate ratio found.\n</code></pre>\nIn Reversing the WRT120Nâ€™s Firmware Obfuscation, the breakthrough was made by observing the output on the serial port. However, this particular firmware doesn't output much useful information to the serial port. In addition, I have yet find a decent disassembler for RISC-V (like IDA for ARM).\nWhat can I do next?\n",
    "votes": "1",
    "answers": 1,
    "views": "676",
    "tags": [
        "binary-analysis",
        "firmware",
        "hardware",
        "deobfuscation",
        "embedded"
    ],
    "user": "nalzok",
    "time": "Nov 17, 2019 at 15:57",
    "comments": [],
    "answers_data": [
        {
            "content": "https://github.com/NationalSecurityAgency/ghidra\nAs of early December Ghidra has RISC-V support in master.  It should be added to the 9.2 release, until then you would have to build from source.\n",
            "votes": "2",
            "user": "mumbel",
            "time": "Jan 7, 2020 at 22:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}