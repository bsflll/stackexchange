{
    "title": "How to find the native library for a specific native method in android Java code?",
    "link": "https://reverseengineering.stackexchange.com/questions/33257/how-to-find-the-native-library-for-a-specific-native-method-in-android-java-code",
    "content": "I am having a function in an apk that looks like this:\n\nI want to find the .so file that contains executable code for this function.\nWhat I tried:\n\nI tried looking for calls to <pre><code>System.loadlibrary()</code></pre> in the same class but found none.\nI enumerated loaded libraries using frida but none of them contain any hint about this method (or I have not known what to look for).\nI found classes that extended this <pre><code>k</code></pre> class, but found none.\n\nPlease help!\n",
    "votes": "0",
    "answers": 0,
    "views": "23",
    "tags": [
        "decompilation",
        "android"
    ],
    "user": "Duy Thành Vũ",
    "time": "Oct 10, 2024 at 11:23",
    "comments": [
        {
            "user": "Robert",
            "text": "Native method implementations can be contained in any loaded .so file. They just have to be present (loaded) when the native method is called. I would first check the .so files for exported methods that match the JNI method naming scheme (start with <pre><code>Java_</code></pre> and the package and class name). Note that AFAIK it is also possible to define native methods in an .so e.g. in <pre><code>JNI_OnLoad</code></pre>, therefore native method implementations are not always exported functions.\n",
            "time": null
        }
    ],
    "answers_data": []
}