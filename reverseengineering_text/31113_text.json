{
    "title": "What are these functions for?",
    "link": "https://reverseengineering.stackexchange.com/questions/31113/what-are-these-functions-for",
    "content": "Sometimes when reversing the code - I see that each linked file is separated by these functions:\n\n<pre><code>_$E19</code></pre>\n<pre><code>_$E18</code></pre>\n\nsometimes - there is no such separation (depending on the degree of compiler optimization).\nWhat is their meaning?\n<pre><code>.text:0000021C\n.text:0000021C ; =============== S U B R O U T I N E =======================================\n.text:0000021C\n.text:0000021C\n.text:0000021C _$E19           proc near               ; DATA XREF: .CRT$XCU:_$S20o\n.text:0000021C                 mov     cl, byte ptr ds:??_B?1???id@?$ctype@G@std@@$D@@9@51\n.text:00000222                 mov     al, 1\n.text:00000224                 test    al, cl\n.text:00000226                 jnz     short loc_230\n.text:00000228                 or      cl, al\n.text:0000022A                 mov     byte ptr ds:??_B?1???id@?$ctype@G@std@@$D@@9@51, cl\n.text:00000230\n.text:00000230 loc_230:                                ; CODE XREF: _$E19+Aj\n.text:00000230                 jmp     _$E18\n.text:00000230 _$E19           endp\n.text:00000230\n.text:00000230 ; ---------------------------------------------------------------------------\n.text:00000235                 db 7 dup(90h)\n.text:00000235 _text           ends\n.text:00000235\n.text:0000023C ; ===========================================================================\n.text:0000023C\n.text:0000023C ; Segment type: Pure code\n.text:0000023C ; Segment permissions: Read/Execute\n.text:0000023C _text           segment para public 'CODE' use32\n.text:0000023C                 assume cs:_text\n.text:0000023C                 ;org 23Ch\n.text:0000023C ; COMDAT (pick no duplicate)\n.text:0000023C                 assume es:nothing, ss:nothing, ds:_CRT$XCU, fs:nothing, gs:nothing\n.text:0000023C\n.text:0000023C ; =============== S U B R O U T I N E =======================================\n.text:0000023C\n.text:0000023C\n.text:0000023C _$E18           proc near               ; CODE XREF: _$E19:loc_230j\n.text:0000023C                 push    offset ?id@?$ctype@G@std@@$E ; void (__cdecl *)()\n.text:00000241                 call    _atexit\n.text:00000246                 pop     ecx\n.text:00000247                 retn\n.text:00000247 _$E18           endp\n.text:00000247\n.text:00000247 ; ---------------------------------------------------------------------------\n.text:00000248                 db 4 dup(90h)\n.text:00000248 _text           ends\n.text:00000248\n</code></pre>\nfor example:\n<pre><code>class aa\n{\npublic:\n    aa();\n    ~aa();\n    void fun();\n};\n\n\nclass bb\n{\npublic:\n    bb();\n    ~bb();\n    void fun();\n};\n\n\nclass cc\n{\npublic:\n    cc();\n    ~cc();\n    void fun();\n};\n\n// IMPLEMENTATION\n\naa::aa()\n{\n\n}\n\naa::~aa()\n{\n\n}\n\nvoid aa::fun()\n{\n    printf(\"aa called\");\n}\n// ------------------------\nbb::bb()\n{\n\n}\n\nbb::~bb()\n{\n\n}\n\nvoid bb::fun()\n{\n    printf(\"bb called\");\n    std::string s = \"asd\";  // <------------ reason\n}\n// --------------------------\ncc::cc()\n{\n\n}\n\ncc::~cc()\n{\n\n}\n\nvoid cc::fun()\n{\n    printf(\"cc called\");\n}\n</code></pre>\ngenerates this list of functions:\n<pre><code>aa::aa(void)   \naa::~aa(void)  \naa::fun(void)  \nbb::bb(void)   \nbb::~bb(void)  \nbb::fun(void)  \nstd::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)\nstd::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint)\n$E19      \n$E18      \n[thunk]:std::ctype<ushort>::id`template static data member destructor helper'   \ncc::cc(void)\ncc::~cc(void) \ncc::fun(void) \n_main         \n_printf       \n</code></pre>\nBut, the global variable initialized by the functions (<pre><code>_$E19</code></pre>, <pre><code>_$E18</code></pre>)\nis never used.\n\ni'm vote for the new tag: <pre><code>code-generation</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "257",
    "tags": [
        "disassembly",
        "compilers",
        "code-generation"
    ],
    "user": null,
    "time": "May 1, 2023 at 20:20",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Now I do not know about the other surrounding code. Is this C++ code originally? The mangled names would suggest it. Either way given the available context, I would wager that some sort of static initializer (or a ctor) is involved here and that <pre><code>_$E19</code></pre> is the code that registers or unregisters (00000224 with subsequent <pre><code>jnz</code></pre> or \"fallthrough\") the routine referenced at 0000023C with atexit. Now, I could be wrong and without further context I won't dare to answer this, but perhaps it helps you on your way to find out.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Also, could it be that this only appears in objects built with RTTI enabled?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "you should potentially provide what tool was used to disassemble the code in query (ida , dumpbin , others etc )\nalso you should give the compiler unit (gcc, clang , vc etc )\nis that an object file you have disassembled ?\nanyway .CRT$XCU: section is a ms specific section where  vs puts the user defined global initializers are  (others like  .CRT$XCA and .CRT$XCZ. also exist\n<pre><code>_$E19\njmp     _$E18\n_$E18           proc near \n</code></pre>\nthese are labels\n",
            "votes": "2",
            "user": "blabb",
            "time": "Nov 10, 2022 at 15:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">But the section names would <i>not</i> be in the .exe anymore. AFAIK they get all merged and the sole point of the <code>.CRT</code> section along with the respective <code>$</code>-specifiers is to influence ordering of objects at link time.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@blabb this is really more commentary than an answer. And I really appreciate and enjoy reading your answers normally. I agree with rce that from the context it's clear this <i>must</i> be an object file and that it's likely MSVC-specific.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">as the linked article says .crtcxu  is likely to be placed at the end after .crtcxa ... and normally these labels that would be visible on object file disassembly tend to disappear in binary  ( i see this notion is contradicted in comment )  try compiling the code in linked article  the whole .crtcxu section which will be visible in object file iwill disappear after linking into  binary</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I merely meant to point out that the section names may change within the .exe, not that the object file wouldn't contain the original names. It was more aimed at the comment from @rce.</span>",
                    "time": null
                }
            ]
        }
    ]
}