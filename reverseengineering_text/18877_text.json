{
    "title": "android unity intercept w/ Frida",
    "link": "https://reverseengineering.stackexchange.com/questions/18877/android-unity-intercept-w-frida",
    "content": "I'm trying to extract symbols from an Android Unity game to detect something related to the game which I can intercept and replace variables.\nThe following code will enumerate symbols from libmain.so, libmono.so & libunity.so but not UnityEngine.*.dll.so, it seems they did not get addresses (retval equals 0x0), \nI'm assuming they did not load yet (that's way no address), what function is in-charge on loading them ? can I hook it and than enumerate symbols ?\nany help ?\n<pre><code>Interceptor.attach(Module.findExportByName(null, 'dlopen'), {\n    onEnter: function(args) {\n        this.lib = Memory.readUtf8String(args[0]);\n    },\n    onLeave: function(retval) {\n        console.log(\n            this.lib.substr(this.lib.lastIndexOf('/') + 1, this.lib.length) +\n            ' [ ' + retval + ' ] \n' +\n            Module.enumerateExportsSync(this.lib).map(function(x) {\n                return x.name\n            })\n        );\n    }\n});\n</code></pre>\noutput:\n<pre><code>libmain.so [ 0xac651e74 ] \n__aeabi_unwind_cpp_pr0,JNI_OnLoad,__aeabi_unwind_cpp_pr1,__aeabi_unwind_cpp_pr2,__gnu_Unwind_Restore_VFP_D,__gnu_Unwind_Restore_VFP,__gnu_Unwind_Restore_VFP_D_16_to_31,__gnu_Unwind_Restore_WMMXD,__gnu_Unwind_Restore_WMMXC,restore_core_regs,_Unwind_GetCFA,__gnu_Unwind_RaiseException,__gnu_Unwind_ForcedUnwind,__gnu_Unwind_Resume,__gnu_Unwind_Resume_or_Rethrow,_Unwind_Complete,_Unwind_DeleteException,_Unwind_VRS_Get,_Unwind_VRS_Set,__gnu_Unwind_Backtrace,__gnu_unwind_execute,_Unwind_VRS_Pop,__gnu_Unwind_Save_VFP_D,__gnu_Unwind_Save_VFP,__gnu_Unwind_Save_VFP_D_16_to_31,__gnu_Unwind_Save_WMMXD,__gnu_Unwind_Save_WMMXC,__restore_core_regs,___Unwind_RaiseException,_Unwind_RaiseException,___Unwind_Resume,_Unwind_Resume,___Unwind_Resume_or_Rethrow,_Unwind_Resume_or_Rethrow,___Unwind_ForcedUnwind,_Unwind_ForcedUnwind,___Unwind_Backtrace,_Unwind_Backtrace,__gnu_unwind_frame,_Unwind_GetRegionStart,_Unwind_GetLanguageSpecificData,_Unwind_GetDataRelBase,_Unwind_GetTextRelBase\nlibunity.so [ 0xb399b004 ] \n_ZNSt6vectorIcSaIcEE17_M_default_appendEj,_ZNSt6vectorIjSaIjEE17_M_default_appendEj,_ZdaPv,_ZdlPv,_Znaj,_Znwj,_ZdlPvRKSt9nothrow_t,_ZnwjRKSt9nothrow_t,_ZdaPvRKSt9nothrow_t,_ZnajRKSt9nothrow_t,_ZNSt6vectorIiSaIiEE17_M_default_appendEj,_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE12_M_erase_auxESt23_Rb_tree_const_iteratorIiES7_,_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_,_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKi,_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE,_ZNSt6vectorIfSaIfEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPfS1_EEjRKf,_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJfEEEvDpOT_,_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_default_appendEj,_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJRKiEEEvDpOT_,_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIJiEEEvDpOT_,_ZNSt6vectorISt4pairIijESaIS1_EE19_M_emplace_back_auxIJS1_EEEvDpOT_,_ZNSt6vectorISt4pairIijESaIS1_EEaSERKS3_,_ZSt17__rotate_adaptiveIN9__gnu_cxx17__normal_iteratorIPSt4pairIijESt6vectorIS3_SaIS3_EEEES4_iET_S9_S9_S9_T1_SA_T0_SA_,_ZSt8__rotateIN9__gnu_cxx17__normal_iteratorIPSt4pairIijESt6vectorIS3_SaIS3_EEEEEvT_S9_S9_St26random_access_iterator_tag,_ZSt8__rotateIPiEvT_S1_S1_St26random_access_iterator_tag,_ZNSt6vectorIhSaIhEE17_M_default_appendEj,_ZNSt8_Rb_treeIjjSt9_IdentityIjESt4lessIjESaIjEE16_M_insert_uniqueIRKjEESt4pairISt17_Rb_tree_iteratorIjEbEOT_,_ZNSt8_Rb_treeIjjSt9_IdentityIjESt4lessIjESaIjEE16_M_insert_uniqueISt23_Rb_tree_const_iteratorIjEEEvT_S9_,_ZNSt8_Rb_treeIjjSt9_IdentityIjESt4lessIjESaIjEE16_M_insert_uniqueIjEESt4pairISt17_Rb_tree_iteratorIjEbEOT_,_ZNSt8_Rb_treeIjjSt9_IdentityIjESt4lessIjESaIjEE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIjERKj,_ZNSt8_Rb_treeIjjSt9_IdentityIjESt4lessIjESaIjEE7_M_copyEPKSt13_Rb_tree_nodeIjEPS7_,_ZNSt8_Rb_treeIjjSt9_IdentityIjESt4lessIjESaIjEE8_M_eraseEPSt13_Rb_tree_nodeIjE,_ZNSt6vectorIS_IfSaIfEESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_,_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_,_ZNSt6vectorIjSaIjEE19_M_emplace_back_auxIJRKjEEEvDpOT_,_ZNSt6vectorIiSaIiEE13_M_insert_auxIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_,_ZNSt6vectorIiSaIiEE13_M_insert_auxIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_,_ZNSt8_Rb_treeIPKvS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_,_ZNSt8_Rb_treeIPKvS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E,_ZNSt6vectorIjSaIjEE13_M_assign_auxIN9__gnu_cxx17__normal_iteratorIPjS1_EEEEvT_S7_St20forward_iterator_tag,_ZNSt6vectorIjSaIjEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPjS1_EEjRKj,_ZNSt6vectorIiSaIiEE13_M_assign_auxISt23_Rb_tree_const_iteratorIiEEEvT_S5_St20forward_iterator_tag,_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_,_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_,_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E,_ZNSt6vectorIfSaIfEE17_M_default_appendEj,_ZNSt6vectorIjSaIjEE19_M_emplace_back_auxIJjEEEvDpOT_,UnitySendMessage,_ZNSt6vectorIcSaIcEE19_M_emplace_back_auxIJcEEEvDpOT_,_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag,_ZNSt6vectorIhSaIhEE19_M_emplace_back_auxIJhEEEvDpOT_,JNI_OnLoad,JNI_OnUnload,_ZNSt8_Rb_treeIiSt4pairIKi9sigactionESt10_Select1stIS3_ESt4lessIiESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_,_ZNSt8_Rb_treeIiSt4pairIKi9sigactionESt10_Select1stIS3_ESt4lessIiESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_,_ZNSt8_Rb_treeIiSt4pairIKi9sigactionESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E,_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE16_M_insert_uniqueIS0_IiiEEES0_ISt17_Rb_tree_iteratorIS2_EbEOT_,_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE7_M_copyEPKSt13_Rb_tree_nodeIS2_EPSA_,_ZN9__gnu_cxx21_Hashtable_prime_listImE16__stl_prime_listE,_ZNSt8_Rb_treeIyySt9_IdentityIyESt4lessIyESaIyEE12_M_erase_auxESt23_Rb_tree_const_iteratorIyES7_,_ZNSt8_Rb_treeIyySt9_IdentityIyESt4lessIyESaIyEE16_M_insert_uniqueIRKyEESt4pairISt17_Rb_tree_iteratorIyEbEOT_,_ZNSt8_Rb_treeIyySt9_IdentityIyESt4lessIyESaIyEE5eraseERKy,_ZNSt8_Rb_treeIyySt9_IdentityIyESt4lessIyESaIyEE8_M_eraseEPSt13_Rb_tree_nodeIyE,_ZNSt6vectorISt4pairIS0_IttEfESaIS2_EE17_M_default_appendEj,_ZNSt6vectorIhSaIhEE19_M_emplace_back_auxIJRKhEEEvDpOT_,_ZNSt6vectorIySaIyEE19_M_emplace_back_auxIJRKyEEEvDpOT_,_ZNSt6vectorIS_IySaIyEESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_,_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag,_ZNSt6vectorIhSaIhEE15_M_range_insertIPKcEEvN9__gnu_cxx17__normal_iteratorIPhS1_EET_S9_St20forward_iterator_tag,_ZNSt6vectorIhSaIhEE15_M_range_insertIPKhEEvN9__gnu_cxx17__normal_iteratorIPhS1_EET_S9_St20forward_iterator_tag,_ZNSt6vectorIhSaIhEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIPhS1_EET_S8_St20forward_iterator_tag,_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIJRKxEEEvDpOT_,_ZNSt6vectorIhSaIhEEaSERKS1_,_ZNSt6vectorItSaItEEaSERKS1_\nlibmono.so [ 0xb399b3f4 ] \nmono_jit_tls_id,mono_tracev,mono_jit_trace_calls,mono_break_on_exc,mono_compile_aot,mono_breakpoint_info_index,mono_aot_only,mono_build_date,mono_use_imt,mono_do_signal_chaining,mono_inject_async_exc_method,mono_break_at_bb_bb_num,mono_inject_async_exc_pos,mono_do_x86_stack_align,mono_break_at_bb_method,mono_pmip,mono_dont_free_global_codeman,mono_print_method_from_ip,mono_debug_lookup_source_location,mono_debug_free_source_location,mono_domain_get,mono_jit_info_table_find,g_free,mono_method_full_name,mono_mempool_alloc0,mono_code_manager_reserve,mono_code_manager_new,mono_type_generic_inst_is_valuetype,mono_type_get_underlying_type,mono_class_enum_basetype,mono_method_get_header,mono_jit_stats,mono_type_get_name,mono_inst_name,mono_class_from_mono_type,mono_metadata_signature_alloc,mono_mempool_alloc,mono_get_root_domain,mono_free_verify_list,mono_loader_get_last_error,mono_compile_method,mono_type_size,mono_metadata_generic_class_is_valuetype,mono_class_min_align,mono_environment_exitcode_get,mono_mempool_destroy,mono_thread_exit,mono_thread_attach,mono_domain_set,mono_jit_thread_attach,mono_thread_current,mono_debugger_thread_created,mono_thread_attach_aborted_cb,mono_debugger_thread_cleanup,mono_profiler_get_events,mono_class_vtable,mono_class_init,mono_runtime_class_init,mono_metadata_field_info,mono_lookup_internal_call,mono_image_rva_map,mono_thread_interruption_request_flag,mono_ldstr,mono_metadata_blob_heap,mono_ldtoken,mono_lookup_pinvoke_call,mono_type_get_object,mono_method_signature,mono_code_manager_new_dynamic,mono_method_get_generic_container,mono_code_manager_commit,mono_class_inflate_generic_method,mono_mempool_new,mono_debug_using_mono_debugger,mono_local_deadce,mono_runtime_invoke,mono_get_exception_execution_engine,mono_exception_from_name_msg,mono_loader_error_prepare_exception,mono_get_exception_bad_image_format,.....,GC_push_all_stack,GC_delete_thread,GC_lookup_thread,GC_start_blocking,GC_end_blocking,VER_1\nmscorlib.dll.so [ 0x0 ] \n\nUnityEngine.dll.so [ 0x0 ] \n\nUnityEngine.CoreModule.dll.so [ 0x0 ] \n\nUnityEngine.AccessibilityModule.dll.so [ 0x0 ] \n\nUnityEngine.ParticleSystemModule.dll.so [ 0x0 ] \n\nUnityEngine.PhysicsModule.dll.so [ 0x0 ] \n\nUnityEngine.VehiclesModule.dll.so [ 0x0 ] \n\nUnityEngine.ClothModule.dll.so [ 0x0 ] \n\nUnityEngine.AIModule.dll.so [ 0x0 ] \n\nUnityEngine.AnimationModule.dll.so [ 0x0 ] \n\nUnityEngine.TextRenderingModule.dll.so [ 0x0 ] \n\nUnityEngine.UIModule.dll.so [ 0x0 ] \n\nUnityEngine.TerrainPhysicsModule.dll.so [ 0x0 ] \n\nUnityEngine.IMGUIModule.dll.so [ 0x0 ] \n\nUnityEngine.UnityWebRequestModule.dll.so [ 0x0 ] \n\nUnityEngine.UnityWebRequestAudioModule.dll.so [ 0x0 ] \n\nUnityEngine.UnityWebRequestTextureModule.dll.so [ 0x0 ] \n\nUnityEngine.UnityWebRequestWWWModule.dll.so [ 0x0 ] \n\nUnityEngine.UNETModule.dll.so [ 0x0 ] \n\nUnityEngine.DirectorModule.dll.so [ 0x0 ] \n\nUnityEngine.UnityAnalyticsModule.dll.so [ 0x0 ] \n\nUnityEngine.CrashReportingModule.dll.so [ 0x0 ] \n\nUnityEngine.PerformanceReportingModule.dll.so [ 0x0 ] \n\nUnityEngine.UnityConnectModule.dll.so [ 0x0 ] \n\nUnityEngine.WebModule.dll.so [ 0x0 ] \n\nUnityEngine.ARModule.dll.so [ 0x0 ] \n\nUnityEngine.VRModule.dll.so [ 0x0 ] \n\nUnityEngine.UIElementsModule.dll.so [ 0x0 ] \n\nUnityEngine.StyleSheetsModule.dll.so [ 0x0 ] \n\nUnityEngine.AudioModule.dll.so [ 0x0 ] \n\nUnityEngine.GameCenterModule.dll.so [ 0x0 ] \n\nUnityEngine.GridModule.dll.so [ 0x0 ] \n\nUnityEngine.ImageConversionModule.dll.so [ 0x0 ] \n\nUnityEngine.InputModule.dll.so [ 0x0 ] \n\nUnityEngine.JSONSerializeModule.dll.so [ 0x0 ] \n\nUnityEngine.ParticlesLegacyModule.dll.so [ 0x0 ] \n\nUnityEngine.Physics2DModule.dll.so [ 0x0 ] \n\nUnityEngine.ScreenCaptureModule.dll.so [ 0x0 ] \n\nUnityEngine.SpriteMaskModule.dll.so [ 0x0 ] \n\nUnityEngine.TerrainModule.dll.so [ 0x0 ] \n\nUnityEngine.TilemapModule.dll.so [ 0x0 ] \n\nUnityEngine.VideoModule.dll.so [ 0x0 ] \n\nUnityEngine.WindModule.dll.so [ 0x0 ] \n\nSystem.dll.so [ 0x0 ] \n\nAssembly-CSharp-firstpass.dll.so [ 0x0 ] \n\nAssembly-CSharp.dll.so [ 0x0 ] \n\nUnityEngine.UI.dll.so [ 0x0 ] \n\nUnityEngine.Networking.dll.so [ 0x0 ] \n\nUnityEngine.Timeline.dll.so [ 0x0 ] \n\nUnityEngine.SpatialTracking.dll.so [ 0x0 ] \n\nUnityEngine.Advertisements.Android.dll.so [ 0x0 ] \n\nFacebook.Unity.dll.so [ 0x0 ] \n\nFacebook.Unity.Settings.dll.so [ 0x0 ] \n\nFacebook.Unity.Android.dll.so [ 0x0 ] \n\nFacebook.Unity.IOS.dll.so [ 0x0 ] \n\nRTL.dll.so [ 0x0 ] \n\nSystem.Core.dll.so [ 0x0 ] \n</code></pre>\n",
    "votes": "3",
    "answers": 2,
    "views": "5k",
    "tags": [
        "android",
        ".net",
        "frida"
    ],
    "user": "James W.",
    "time": "Jul 25, 2018 at 11:54",
    "comments": [],
    "answers_data": [
        {
            "content": "Heh, it's some kind of necroposting, but why not?\nWell, under hood unity3d use 2 variants: mono, that loads C# dlls and il2cpp, that convert it to C++ before build.\nFor 2nd case u can use <pre><code>unity_metadata_loader</code></pre> or similar products, that takes C# metadata (description of classes mostly) with it's address offsets.\nBasically you could need to wait for <pre><code>libil2cpp.so</code></pre> to load, then take it's base address, then calculate the in-memory offset by adding the base address. I use something like the following for this:\n<pre><code> var awaitForCondition = function (callback) {\n     var int = setInterval(function () {\n         var addr = Module.findBaseAddress('libil2cpp.so');\n         if (addr) {\n             console.log(\"Address found:\", addr);\n             clearInterval(int);\n             callback(+addr);\n             return;\n         }\n     }, 0);\n }\nawaitForCondition((baseAddr)=>{\n    var realAddr = ptr(baseAddr+offset);\n});\n</code></pre>\nIn case of mono(your case, I think), you can try to read this  post (russian language, but with code samples). Basically you need to hook mono's <pre><code>mono_image_open_full</code></pre>, if I remember correctly.\nBTW, I'm not sure, what is Assembly-CSharp.dll.so, becouse of it's just C# dll, not so binary.\n",
            "votes": "4",
            "user": "julian",
            "time": "Sep 18, 2018 at 13:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "James W.",
                    "text": "<span class=\"comment-copy\">Thanks. used <code>awaitForCondition</code> :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Answer \n<pre><code>    // Constants\n    const kIgnoreArg = '-';\n\n    // Utils\n    function pmalloc() {\n        return Memory.alloc(Process.pointerSize);\n    }\n    function debug() {\n        send({ event: 'DEBUG', data: Array.prototype.slice.call(arguments).join(' ') });\n    }\n\n    // Globals\n    var Metadata = {}; // < className, { pointer, methods < methodName, { pointer, args[], returnType } >, fields } >\n    var Global = {}; // save global variables across hooks\n    var MonoApi = {\n        mono_image_get_table_rows: ['int', ['MonoImage*', 'int'/*table_id*/]],\n        mono_class_get: ['MonoClass*', ['MonoImage*', 'int'/*type_token*/]],\n        mono_class_get_parent: ['MonoClass*', ['MonoClass*']],\n        mono_class_get_name: ['char*', ['MonoClass*']],\n        mono_method_get_name: ['char*', ['MonoMethod*']],\n        mono_class_get_methods: ['MonoMethod*', ['MonoClass*', 'iter*']],\n        mono_class_get_fields: ['MonoClassField*', ['MonoClass*', 'iter*']],\n        mono_signature_get_params: ['MonoType*', ['MonoMethod*', 'iter*']],\n        mono_field_full_name: ['char*', ['MonoField*']],\n        mono_class_get_namespace: ['char*', ['MonoClass*']],\n        mono_type_full_name: ['char*', ['MonoType*']],\n        mono_signature_get_return_type: ['MonoType*', ['MonoMethodSignature*']],\n        mono_class_get_method_from_name: ['MonoMethod*', ['MonoClass*', 'name*', 'int'/*number of params. -1 for any*/]],\n        mono_method_signature: ['MonoMethodSignature*', ['MonoMethod*']],\n        /** gpointer mono_compile_method (MonoMethod *method)\n         * http://docs.go-mono.com/index.aspx?link=xhtml%3Adeploy%2Fmono-api-unsorted.html */\n        mono_compile_method: ['gpointer*'/* pointer to the native code produced.*/, ['MonoMethod*']],\n        /**\n         * char* mono_string_to_utf8 (MonoString *s)\n         * @param    s  a System.String\n         * @Description\n         # TODO mono_free\n         *       Returns the UTF8 representation for s. The resulting buffer needs to be freed with mono_free().\n         *       deprecated Use mono_string_to_utf8_checked to avoid having an exception arbritraly raised.\n         */\n        mono_string_to_utf8: ['char*', ['System.String*']],\n        getClassMethods: function (klass) {\n            var method, methods = {}, iter = pmalloc();\n\n            while ( !(method = MonoApi.mono_class_get_methods(klass, iter)).isNull() ) {\n                var methodName = MonoApi.mono_method_get_name(method).readUtf8String();\n                if (!methodName.startsWith('<') /*|| methodName.startsWith('.')*/) {\n                    var methodRef = MonoApi.mono_class_get_method_from_name(klass, Memory.allocUtf8String(methodName), -1);\n                    var monoSignature = MonoApi.mono_method_signature(methodRef);\n                    var retType = MonoApi.mono_type_full_name(MonoApi.mono_signature_get_return_type(monoSignature)).readUtf8String();\n                    var args = MonoApi.getSignatureParams(monoSignature);\n                    methods[methodName] = { ref: methodRef, args: args, ret: retType };\n                }\n            }\n\n            return methods;\n        },\n        getSignatureParams: function (monoSignature) {\n            var params, fields = [], iter = pmalloc();\n\n            while ( !(params = MonoApi.mono_signature_get_params(monoSignature, iter)).isNull() )\n                fields.push( MonoApi.mono_type_full_name(params).readUtf8String() );\n\n            return fields;\n        },\n        getClassFields: function (monoClass) {\n            var field, fields = [], iter = pmalloc();\n\n            while ( !(field = MonoApi.mono_class_get_fields(monoClass, iter)).isNull() )\n                fields.push( \n                    MonoApi.mono_field_full_name(field).readUtf8String().split(':')[1] );\n\n            return fields;\n        },\n        init: function() {\n            var monoModule = Process.findModuleByName('mono.dll');\n            debug(\"Process.findModuleByName('mono.dll') ? \" + monoModule);\n            if (!monoModule) {\n                var monoThreadAttach = Module.findExportByName(null, 'mono_thread_attach');\n                debug(\"monoThreadAttach ? \" + monoThreadAttach);\n                if (monoThreadAttach)\n                    monoModule = Process.findModuleByAddress(monoThreadAttach);\n            }\n            if (!monoModule) throw new Error('Mono.dll not found');\n\n            Object.keys(MonoApi).map(function(exportName) {\n                var monoApiIter = MonoApi[exportName];\n                if (typeof monoApiIter === 'object') {\n                    var returnValue = monoApiIter[0].endsWith('*') ? 'pointer' : monoApiIter[0];\n                    var argumentTypes = monoApiIter[1].map(function(t) { return t.endsWith('*') ? 'pointer' : t });\n                    var exportAddress = Module.findExportByName(monoModule.name, exportName);\n                    MonoApi[exportName] = new NativeFunction(exportAddress, returnValue, argumentTypes);\n                }\n            });\n        }\n    };\n\n    function intercept(op) {\n        var nothingSetSoJustLogMethodArguments = !op.argumentsKeys && !op.onEnterCallback && !op.onLeaveCallback;\n        var method = Metadata[op.className].methods[op.methodName];\n        debug('Intercepting', op.className + '#' + op.methodName, JSON.stringify(method));\n        // TODO assert re compile is necessary\n        var monoCompileMethod = MonoApi.mono_compile_method(method.ref);\n        Interceptor.attach(monoCompileMethod, {\n            onEnter: function (args) {\n                var argsValues = {};\n                for (var i = 0, l = method.args.length; i < l; i++) {\n                    var key = op.argumentsKeys ? op.argumentsKeys[i] : i;\n                    if (key === kIgnoreArg)\n                        continue;\n                    var j = i + 1;\n                    switch (method.args[i]) {\n                        case 'string':\n                            argsValues[key] = MonoApi.mono_string_to_utf8(args[j]).readUtf8String();\n                            break;\n                        case 'long':\n                        case 'int':\n                            argsValues[key] = parseInt(args[j]);\n                            break;\n                        default:\n                            argsValues[key] = args[j];\n                            break;\n                    }\n                }\n\n                if (nothingSetSoJustLogMethodArguments)\n                    debug(op.className + '#' + op.methodName, JSON.stringify(argsValues, null, 2));\n\n                if (op.onEnterCallback)\n                    op.onEnterCallback(argsValues);\n            },\n            onLeave: function (retval) {\n                if (op.onLeaveCallback)\n                    op.onLeaveCallback(retval);\n            }\n        });\n    }\n\n    function getMetadata(monoImage) {\n        // MONO_TABLE_TYPEDEF = 0x2; // https://github.com/mono/mono/blob/master/mono/metadata/blob.h#L56\n        for (var i = 1, l = MonoApi.mono_image_get_table_rows(monoImage, 0x2); i < l; ++i) {\n            // MONO_TOKEN_TYPE_DEF = 0x2000000 // https://github.com/mono/mono/blob/master/mono/metadata/tokentype.h#L16\n            var mClass = MonoApi.mono_class_get(monoImage, 0x2000000 | i);\n            var className = MonoApi.mono_class_get_name(mClass).readUtf8String();\n            var classNameSpace = MonoApi.mono_class_get_namespace(mClass).readUtf8String();\n            try {\n                var parentClassName = MonoApi.mono_class_get_name( MonoApi.mono_class_get_parent(mClass) ).readUtf8String();\n                if (parentClassName === 'MonoBehaviour' && classNameSpace === '') {\n                    Metadata[className] = {\n                        // namespace: classNameSpace,\n                        ref: mClass,\n                        methods: MonoApi.getClassMethods(mClass),\n                        fields: MonoApi.getClassFields(mClass)\n                    };\n                }\n            } catch (e) {\n                debug(\"Error @ getMetadata/mono_class_get_parent\", e);\n            }\n        }\n        send({ event: 'METADATA', data: Metadata });\n    }\n\n    function hookMonoLoad() {\n        // hooking the method in charge of loading the DLL files\n        Interceptor.attach(Module.findExportByName(null, 'mono_assembly_load_from_full'), {\n            onEnter: function (args) {\n                // passing variables to onLeave scope using 'this'\n                this._args = {\n                    image: args[0], // MonoImage* Image to load the assembly from\n                    fname: args[1].readUtf8String() // const char* assembly name to associate with the assembly\n                    // status: args[2], // MonoImageOpenStatus* returns the status condition\n                    // refonly: args[3] // gboolean Whether this assembly is being opened in \"reflection-only\" mode.\n                };\n            },\n            onLeave: function (_retval) {\n                // Return value: A valid pointer to a MonoAssembly* on success and the status will be set to MONO_IMAGE_OK\n                //               or NULL on error.\n                if (this._args.fname.endsWith('Assembly-CSharp.dll')) {\n                    MonoApi.init();\n                    getMetadata(this._args.image);\n                    /*placeholder*/\n                }\n            }\n        });\n    }\n\n    function awaitForCondition(func) {\n        // From MDN: If this parameter is less than 10, a value of 10 is used. Note that the actual delay may be longer;\n        var delay = 10; // Fight for CPU\n        var intervalPointer = setInterval(function() {\n            // The condition that asserts Mono's required resources can be hooked\n            // TODO switch with intercepting dlopen wait for mono.dll ?\n            // FIXME use Module.ensureInitialized(name)\n            if (Module.findExportByName(null, 'mono_get_root_domain')) {\n                clearInterval(intervalPointer);\n                func(); // Executing the passed function\n            }\n        }, delay);\n    }\n\n    // Main\n    Java.perform(awaitForCondition(hookMonoLoad));\n</code></pre>\n",
            "votes": "1",
            "user": "James W.",
            "time": "Apr 17, 2020 at 15:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}