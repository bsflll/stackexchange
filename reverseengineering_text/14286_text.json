{
    "title": "It's possible call a function outside a original thread?",
    "link": "https://reverseengineering.stackexchange.com/questions/14286/its-possible-call-a-function-outside-a-original-thread",
    "content": "Example:\nI have a function in a process on the memory address: <pre><code>0xABCDEF</code></pre>, but that function cannot be called outside of original thread, it's possible to call it or hook it somehow?\nTo what i'm going it's C++ on DLL injection...\nI thought it was possible using <pre><code>CreateRemoteThread</code></pre>, but i don't know if it is necessary to pass the id of the thread.\n",
    "votes": "0",
    "answers": 1,
    "views": "854",
    "tags": [
        "c++",
        "function-hooking",
        "dll-injection"
    ],
    "user": "MindLerp",
    "time": "Dec 30, 2016 at 3:09",
    "comments": [
        {
            "user": "Martin",
            "text": "You can use <pre><code>CreateRemoteThread</code></pre> but you'd need to make sure the function is a <pre><code>THREAD_START_ROUTINE</code></pre>. If not, make a stub for it. As for the thread: no, you don't (shouldn't) need anything like that.\n",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "This question is not really clear. Why do you no longer think using <pre><code>CreateRemoteThread</code></pre> is possible?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "CreateRemoteThread() is used to create a new thread inside the remote process.  The function will return the ID of the newly created thread.  This can be used to load your DLL into the remote process, by passing the address of LoadLibrary() as the thread start address (note that you would need to VirtualAllocEx() and WriteProcessMemory() to place the filename in the remote process first).\nOnce your DLL is loaded, you would need to hook the function of interest (via VirtualProtect(MEM_WRITABLE)/memcpy()/VirtualProtect(original protection)), since you can't inject directly into a thread.  You can only modify the code that the thread is running, and then receive control indirectly.\nNote that for safety, you would need to SuspendThread() the thread of interest before you make changes to its code, unless the function that you wish to alter is hot-patchable.  In the case of a hot-patchable function, you would write the long jump at address function-5, and then write the short jump at the function start.  The write of the short jump is an atomic operation so there is no risk of misaligned execution.\n",
            "votes": "0",
            "user": "peter ferrie",
            "time": "Jan 13, 2017 at 22:47",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MindLerp",
                    "text": "<span class=\"comment-copy\">this pass the thread local storage without problems? thanks.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">yes, Thread Local Storage will still behave correctly.</span>",
                    "time": null
                }
            ]
        }
    ]
}