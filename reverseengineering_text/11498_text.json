{
    "title": "Stopping at the original entry point in a packed file",
    "link": "https://reverseengineering.stackexchange.com/questions/11498/stopping-at-the-original-entry-point-in-a-packed-file",
    "content": "During manual unpacking, the first task is to find to original entry point. The program jumps there after the unpacking is done.\nI took the <pre><code>bin/ls</code></pre> file, and checked with <pre><code>readelf -h</code></pre> that the entry point is <pre><code>0x404870</code></pre>. I packed it with upx, and in gdb set a breakpoint at this address: <pre><code>b *0x404870</code></pre>. I expected that the program will stop there, but apparently it terminates without stopping at this address. Am I misinterpreting something?\n",
    "votes": "0",
    "answers": 2,
    "views": "871",
    "tags": [
        "linux",
        "unpacking"
    ],
    "user": "robert",
    "time": "Dec 10, 2015 at 11:17",
    "comments": [
        {
            "user": "blabb",
            "text": "there is no guarantee that the packer will use the same entry point it can write the unpacked stuff to any section and jump haywire over hoops and loops to trick you into failing. btw you are on wrong track when you are in the unpacking world you wont have access to original unpacked binary to set any predetermined breakpoints so read up and start unpacking manually\n",
            "time": null
        },
        {
            "user": "robert",
            "text": "I know that I won't have access to the original unpacked binary. All the tutorials are for 32 bit Windows, I am on 64bit linux. I just want to get to the point when the code reaches the original entry point. Isn't the esp trick (used by the tutorials I have found) assuming that the packer uses the same entry point?\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "no, the esp trick is used to allow an arbitrary entrypoint value, by watching for the write to the esp, which you can then examine, and then set a breakpoint at the true entrypoint.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "Another reason your approach might not work is if your target was compiled as a position-independent executable.\n",
            "time": null
        },
        {
            "user": "robert",
            "text": "Somebody is downvoting all my questions without a comment.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Your approach doesn't make much sense, since the packer is free to move the original executable around and to map it at a different offset.\nOld version of upx on Linux just wrote the file to a temporary location, then execve'd it, but I think that modern ones are now writing it in memory : You can find the OEP by breaking on stack/heap execution in GDB, like everyone is doing on Windows with OllyDBG.\n",
            "votes": "1",
            "user": "jvoisin",
            "time": "Dec 10, 2015 at 17:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "My idea is to use LordPE to find what's packed with. Once you have unpacked it, ImportREC can help reconstruct your executable without the packer. I don't know what you 're dealing with, but if you check out a video of how each of them work and get the basics, you will most likely succeed.\n",
            "votes": "-1",
            "user": "Chris Tsiakoulas",
            "time": "Dec 10, 2015 at 17:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "robert",
                    "text": "<span class=\"comment-copy\">Unfortunately as far as I see these are for Windows.</span>",
                    "time": null
                }
            ]
        }
    ]
}