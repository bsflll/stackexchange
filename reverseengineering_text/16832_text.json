{
    "title": "Inject code into JNI function (Android shared library)",
    "link": "https://reverseengineering.stackexchange.com/questions/16832/inject-code-into-jni-function-android-shared-library",
    "content": "An android app loads a native library (<pre><code>.so</code></pre>) using <pre><code>System.loadLibrary</code></pre>. It then calls a specific function, which takes 3 input variables, and returns a string containing a MD5 hash. \nYou can see the relevant part of the function below:\n\nI want to be able to see the original, \"unhashed\" message (which is of course derived from the 3 input variables), instead of it's md5 hash. Is this possible in any way?\n",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "android",
        "arm",
        "shared-object"
    ],
    "user": null,
    "time": "Nov 24, 2017 at 23:41",
    "comments": [
        {
            "user": "0xec",
            "text": "You can use Frida to hook the <pre><code>MD5_Update</code></pre> function.\n",
            "time": null
        },
        {
            "user": "user22348",
            "text": "@0xec this worked perfectly. Please post an answer so I can accept it.\n",
            "time": null
        },
        {
            "user": "Arya",
            "text": "@0xes I'm trying to reverse engineer hash generation in an Android app. I suppose Frida is the right tool for this too? I was able to hook to the app. But there are some things I'm a bit confused about. How would I find out which function is doing it? After I have the function name, how would I get the contents of the function?\n",
            "time": null
        },
        {
            "user": "Berkay Y覺ld覺z",
            "text": "Any news about this? I am trying to do samething.\n",
            "time": null
        },
        {
            "user": "user22348",
            "text": "@BerkayY覺ld覺z there already is an accepted answer\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use Frida.\nFrida is a dynamic binary instrumentation tool that allows you to intercept, trace, modify, ... of a running application using a JavaScript debugging logic.\nFor your purpose, you need to hook the <pre><code>MD5_Update</code></pre> function using the <pre><code>Interceptor</code></pre> API.\nThe JavaScript code may look like the following. [Warning: Untested]\n<pre><code>// Use the mangled form of name MD5_Update below\nInterceptor.attach(Module.findExportByName(\"mylib.so\", \"MD5_Update\"), {\n    onEnter: function (args) \n    {\n        var ptr_data = args[1];\n        var length = args[2];    \n\n        var data = Memory.readByteArray(ptr_data, length);\n        console.log(data);\n    }\n});\n</code></pre>\nFurther reference:\n\nhttps://11x256.github.io/\nhttps://www.notsosecure.com/instrumenting-native-android-functions-using-frida/\nhttps://enovella.github.io/android/reverse/2017/05/20/android-owasp-crackmes-level-3.html\n",
            "votes": "3",
            "user": "0xec",
            "time": "Nov 25, 2017 at 17:41",
            "is_accepted": true,
            "comments": []
        }
    ]
}