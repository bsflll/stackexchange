{
    "title": "Cannot understand var passing to function in code compiled with dev c++ [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/11084/cannot-understand-var-passing-to-function-in-code-compiled-with-dev-c",
    "content": "This question already has answers here:\n                                \n                            \n\n\n\n\nWhy are those instructions generated?\n\n                                (1 answer)\n                            \n\n\nComputing subtracted stack space for a function manually\n\n                                (1 answer)\n                            \n\nClosed 9 years ago.\n\n\n\nI'm not understating why the parameters to printf are passed this way.\nmov     [esp+20h+var_1C], eax\nmov     [esp+20h+Format], offset Format ; \"%d\"\nWhy esp is added with 20h then substracted with 20h and esp doest added to point to next stack location for local vars ?\nwhy the compiler simply didnt generate code like this:\nmove eax, var_4\npush eax\nmove eax, Format\npush eax\ncall printf\nIll be happy i some of you can either explain how push is replaced with this custom mov.\nhere is the source in c:\n<pre><code>#include <stdio.h>\n\n\nint main(void)\n{\n    int a;\n    int b = 5;\n\n    printf(\"%d\", b);\n\n    return 0;\n}\n</code></pre>\nhere is the disassembly:\n<pre><code>; Attributes: bp-based frame\n\n; int __cdecl main(int argc, const char **argv, const char **envp)\npublic _main\n_main proc near\n\nFormat= dword ptr -20h\nvar_1C= dword ptr -1Ch\nvar_4= dword ptr -4\nargc= dword ptr  8\nargv= dword ptr  0Ch\nenvp= dword ptr  10h\n\npush    ebp\nmov     ebp, esp\nand     esp, 0FFFFFFF0h\nsub     esp, 20h\ncall    ___main\nmov     [esp+20h+var_4], 5\nmov     eax, [esp+20h+var_4]\nmov     [esp+20h+var_1C], eax\nmov     [esp+20h+Format], offset Format ; \"%d\"\ncall    _printf\nmov     eax, 0\nleave\nretn\n_main endp\n</code></pre>\n",
    "votes": "2",
    "answers": 4,
    "views": "527",
    "tags": [
        "disassembly",
        "c"
    ],
    "user": "Igal",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "See Why are those instructions generated?\n",
            "time": null
        },
        {
            "user": "Igal",
            "text": "This isnt answered my question.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "If Why are those instructions generated? doesn't answer your question, you may need to clarify what you're asking.\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "Maybe my answer to this question will help you, it has some graphics on what the stack looks like when using standard push/pop operations, and how that changes with gcc's optimizations that leave the stack pointer alone.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>push eax</code></pre> is precisely identical to \n<pre><code>sub esp, 4\nmov [esp], eax\n</code></pre>\nRather than using a bunch of <pre><code>push</code></pre>es, they adjusted the stack pointer to where it would have been if they had used <pre><code>push</code></pre>.  Then, they store each datum where it would have been.  The effect is the same, it's just fewer instructions.\n",
            "votes": "1",
            "user": "sqykly",
            "time": "Oct 15, 2015 at 14:40",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igal",
                    "text": "<span class=\"comment-copy\">You mean that this peace of code:                                                        mov     [esp+20h+var_4], 5 mov     eax, [esp+20h+var_4] mov     [esp+20h+var_1C], eax mov     [esp+20h+Format], offset Format ; \"%d\"                                        replaces the pushes before function call ?</span>",
                    "time": null
                },
                {
                    "user": "sqykly",
                    "text": "<span class=\"comment-copy\">@igal yes, but you skipped the <code>sub</code> instruction that reserves stack for those <code>mov</code>s to go into.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This is a standard GCC-generated prelude of a function.\n<pre><code>and     esp, 0FFFFFFF0h\n</code></pre>\naligns stack on 16-byte boundary, then\n<pre><code>sub     esp, 20h\n</code></pre>\nreserves all stack used inside the function (also aligned on 16-byte boundary, see https://en.wikipedia.org/wiki/Data_structure_alignment). Then all operations with current local stack variables, including arguments to called functions, are done as\n<pre><code>mov     [esp+20h+XXX]\n</code></pre>\nMSVC 2010 (and probably others) would do more pushes instead of this mov-ing\n",
            "votes": "0",
            "user": "Vitaly Osipov",
            "time": "Oct 13, 2015 at 21:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igal",
                    "text": "<span class=\"comment-copy\">I understand, but why the pushes replaced with moves in newer version of the compilers ?</span>",
                    "time": null
                },
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">@Igal A wild guess - the changed it for x64 and reused the code for x86. Check \"Stack Pointer based local variable access\" in <a href=\"http://www.codemachine.com/article_x64deepdive.html\" rel=\"nofollow noreferrer\">codemachine.com/article_x64deepdive.html</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Why esp is added with 20h then substracted with 20h and esp doest\n  added to point to next stack location for local vars ?\n\nThe <pre><code>mov [esp+20h+Format], offset Format</code></pre> instruction is only a modified view of the <pre><code>mov [esp], offset Format</code></pre>. The disassembler tries to visualize the local variables and the stack frame in this way. The <pre><code>+20h</code></pre> is the size of the stack frame and the <pre><code>Format</code></pre> keyword means the offset of the <pre><code>Format</code></pre> parameter (<pre><code>-20h</code></pre>). Since it is a parameter, which will be passed to a function, it is placed at the top of the stack. It would be the same, if the function allocated only <pre><code>18h</code></pre> stack frame and pushed the parameter values to the stack.\n\nwhy the compiler simply didnt generate code like this: \n<pre><code>mov eax, var_4\npush eax\nmov eax, Format\npush eax\ncall printf\n</code></pre>\n\n\nBecause the stack pointer should not be modified in this way and this form is only 1 instruction and not 2.\n",
            "votes": "0",
            "user": "ebux",
            "time": "Oct 15, 2015 at 7:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "HIgh and midlevevel languages has bascically two different calling conentions (assuming datawidth i  max_bits, much faster, but maybe lesss readable, signed values are indicated by, LSHB * 1 and son on.\nThe assmbly codes not corrrect. The correct code is mov [\"I\"ESP),\ndetermindes the sign. Sihn is entirely determined p√• software. EVen simple asseblers and compilers havea sign Array/CLT classl\n",
            "votes": "-2",
            "user": "ChristianDyrnesli",
            "time": "Oct 13, 2015 at 5:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">I fail to understand your answer, and even if i could understand it, i wouldn't know how it has anything to do with the question.</span>",
                    "time": null
                }
            ]
        }
    ]
}