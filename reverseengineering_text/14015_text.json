{
    "title": "dynamic memory allocation",
    "link": "https://reverseengineering.stackexchange.com/questions/14015/dynamic-memory-allocation",
    "content": "For dynamic memory allocation in C/C++\n<pre><code>  int main(){\n  MessageBox(0,\"crackname\",\"\",0);\n\n  int * ptr = new int[50];\n  int * ptr2 = new int[50];\n  ptr[0] = 0x75;\n  ptr[1] = 0x65;\n  (*ptr) +1 = 0x75;\n\n  MessageBox(0,\"crackname\",\"\",0);\n  return 0;\n  }\n</code></pre>\nthe assembly for this code is the following:\n<pre><code>   MOV DWORD PTR SS:[EBP-10],EAX\n   MOV ECX,DWORD PTR SS:[EBP-10]\n   MOV DWORD PTR SS:[EBP-8],ECX\n   MOV EDX,DWORD PTR SS:[EBP-4]\n   MOV DWORD PTR DS:[EDX],75\n   MOV EAX,DWORD PTR SS:[EBP-4]\n   MOV DWORD PTR DS:[EAX+4],65\n</code></pre>\nEach dynamic memory allocation is 4 bytes. \nBut is it possible to make it like this?\n<pre><code>   MOV DWORD PTR DS:[EAX+1],65   // +1 not +4 \n</code></pre>\n\nAnd if it's possible, what is the theory behind it with dynamic allocated memory?\n",
    "votes": "0",
    "answers": 2,
    "views": "456",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "beginner",
    "time": "Nov 22, 2016 at 12:25",
    "comments": [],
    "answers_data": [
        {
            "content": "int is 4 bytes so when you declare \nint *ptr =new int [50] \nyou have a memory layout like this \n<pre><code>TYPE   int      int      int      int      int\nSIZE    4         4        4       4        4\nCONT 00000000 11111111 44444444 88888888 ffffffff\nADDR|00400000|00400004|00400008|0040000C|00400010|\n    p        p        p        p        p        p \n    t        t        t        t        t        t\n    r        r        r        r        r        r\n    [0]      [1]      [2]      [3]      [4]      [5]\n</code></pre>\nso you should allocate properly sized memory\nchar is 1 BYTE \nso char * ptr = new char[50] should work\nthe memory layout will be \n<pre><code>TYPE   char     char     char     char     char\nSIZE    1         1        1       1        1\nCONT    00        11       44      88       ff\nADDR|00400000|00400001|00400002|00400003|00400004|\n    p        p        p        p        p        p \n    t        t        t        t        t        t\n    r        r        r        r        r        r\n    [0]      [1]      [2]      [3]      [4]      [5]\n</code></pre>\nif you want to use int only and not char then you may need to employ other \ntechniques like ptr[0] = 'sseM' \nsee code below\n<pre><code>#include <stdio.h>\n#include <string.h>\n#define BUFFSIZE 0x50\nvoid main (void) {\n\n  int *blah = new int[BUFFSIZE];\n  memset(blah,0,BUFFSIZE);\n  blah[0] = 'sseM';\n  blah[1] = ' ega';\n  blah[2] = 'S si';\n  blah[3] = 'erce';\n  blah[4] = 'oy\\0t';\n\n  printf (\"%s\n\" , (char *)blah);\n\n  char *ptr = new char[BUFFSIZE];\n  memset(ptr,0,BUFFSIZE);\n  char *foo = \"MySecretMessage\";\n  for(char i =0; i< (char)strlen(foo) ; i++)\n  {\n    ptr[i] = *foo+i;\n    ptr[i+BUFFSIZE/2] = *(foo+i);\n  }\n  printf (\"contents of ptr is %s\nptr[25] is %s\n \", ptr , &ptr[BUFFSIZE/2]);\n}\n</code></pre>\nexecuted\n<pre><code>intptr.exe\nMessage is Secret\ncontents of ptr is MNOPQRSTUVWXYZ[\nptr[25] is MySecretMessage\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 22, 2016 at 12:20",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "you defined <pre><code>ptr</code></pre> as int pointer. int type size is 4 byte in 32-bit intel architecture. thus <pre><code>(*ptr) +1 = 0x75;</code></pre> will add 1 to a 32bit mem/reg. maybe you can test type casting like: <pre><code>(char *)(ptr) +1 = 0x75;</code></pre>;\nadditionally memory alignment is 4 just for performance.\n",
            "votes": "0",
            "user": "Able Part",
            "time": "Nov 22, 2016 at 8:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}