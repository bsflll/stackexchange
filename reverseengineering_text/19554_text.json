{
    "title": "What does this assembly language program output?",
    "link": "https://reverseengineering.stackexchange.com/questions/19554/what-does-this-assembly-language-program-output",
    "content": "I have been struggling with this for a long time. I have the following assembly language code:\n<pre><code>.intel_syntax noprefix\n.bits 32\n\n.global asm0\n\nasm0:\n    push    ebp\n    mov ebp,esp\n    mov eax,DWORD PTR [ebp+0x8]\n    mov ebx,DWORD PTR [ebp+0xc]\n    mov eax,ebx\n    mov esp,ebp\n    pop ebp \n    ret\n</code></pre>\nand I want to figure out what asm(0xb6, 0xc6) returns. I've been looking for ASM->C decompilers etc, and I cannot find anything for free. Could someone please help me decipher this? I've been trying for a really long time. I am familiar with C++ and Java programming, so even some sort of tool to convert it would be helpful.\nI'm currently reading from this: http://www.godevtool.com/GoasmHelp/newass.htm\n",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "assembly",
        "decompilation",
        "c"
    ],
    "user": "Joey",
    "time": "Oct 6, 2018 at 1:05",
    "comments": [],
    "answers_data": [
        {
            "content": "This is such a small program so this could be followed without converting it back to C. Let's break it down what happens when it's being called with <pre><code>asm(0xb6, 0xc6)</code></pre>.\n<pre><code>push    ebp\nmov     ebp, esp\n</code></pre>\nThose two lines are what's is called the function prologue. We first save the calling function stack frame (<pre><code>ebp</code></pre> is tracking that) and in the second one, we set our function stack frame to be equal to the current stack location.\n<pre><code>mov eax, DWORD PTR [ebp+0x8]\nmov ebx, DWORD PTR [ebp+0xc]\n</code></pre>\nThe above lines are loading our passed arguments to <pre><code>eax</code></pre> and <pre><code>ebx</code></pre>. Since in <pre><code>cdecl</code></pre> arguments are passed via stack in reverse order, so after those lines in <pre><code>eax</code></pre> we will have <pre><code>0xb6</code></pre> and <pre><code>ebx</code></pre> will be equal to <pre><code>0xc6</code></pre>.\n<pre><code>mov eax, ebx\n</code></pre>\nThe value from <pre><code>ebx</code></pre> is stored in <pre><code>eax</code></pre>, thus we drop the need of the first line from the previous fragment. Also since this is the last use of <pre><code>eax</code></pre> in this code it can be interpreted as a return value as this is also a convention in <pre><code>cdecl</code></pre>. So the return value, in this case, would be <pre><code>0xc6</code></pre>.\n<pre><code>mov esp,ebp\npop ebp\n</code></pre>\nThis is just bringing back the stack as it was when we enter the function - also called function epilogue.\n<pre><code>ret\n</code></pre>\nAnd return back to the caller.\nHaving analyzed that it's just obvious that this function returns the second argument that's being passed to it.\n<pre><code>int second(int a, int b)\n{\n    return b;\n}\n</code></pre>\nYou could compile this code to a library and use it from C code:\n<pre><code>#include <stdio.h>\n\nextern unsigned int _test (unsigned int, unsigned int);\n\nint main(void)\n{\n    printf(\"%x\n\", _test(0xb6, 0xc6));\n    return 0;\n}\n</code></pre>\nand compile it with <pre><code>gcc -m32 -o run asm.o call.o</code></pre>. \n\n./run \n  c6\n\nYou could verify that it's the case without running it by for example using godbolt but since the code that assigns the first value to <pre><code>eax</code></pre> and then replaces it with the second is actually not needed - it could just use the second argument from the beginning - it won't be generated even w/o any optimizations.\n",
            "votes": "8",
            "user": "Paweł Łukasik",
            "time": "Oct 6, 2018 at 2:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}