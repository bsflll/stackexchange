{
    "title": "Reverse Engineer Video File Format [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8137/reverse-engineer-video-file-format",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI have recorded a video from a set top box which I am not able to see on my computer/laptop. I have already tried multiple video converter softwares and converting it too. \nPlease !! I would really appreciate if someone could help me in watching and decoding and reverse engineer this file format. Also, I dont know which tags to include in this question. If somebody could suggest some tags, I would change it accordingly.\nYou can get the file here (8 MB only, a small recording)\nhttps://www.dropbox.com/s/5d62xkm1kj4sq7p/193135ZEE%20CLASSIC0.mpg?dl=0\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "digital-forensics",
        "binary-format"
    ],
    "user": "Akhilesh",
    "time": "10 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "The first byte of the file is <pre><code>0x47</code></pre>, which suggests that it's an MPEG transport stream.\nI used 010 Editor to create the following template for the file to parse it as an array of Partial Transport Stream Packets:\n<pre><code>typedef struct {\n    BYTE sync_byte <format=hex>;\n    WORD transport_error_indicator : 1;\n    WORD payload_unit_start_indicator : 1;\n    WORD transport_priority : 1;\n    WORD pid : 13;\n    enum <BYTE> SCRAMBLE { not_scrambled=0, reserved=1, even_key=2, odd_key=3 } scrambling_control : 2;\n    BYTE adaptation_field_exist : 1;\n    BYTE contains_payload : 1;\n    BYTE continuity_counter : 4;\n    BYTE payload_data[188-4];\n} TS_PACKET;\n\nTS_PACKET packets[FileSize()/sizeof(TS_PACKET)];\n</code></pre>\nApplying the above template to the file yields the following results:\n\nAs you can see above (circled in red), each packet's payload is encrypted with a DVB-CSA key. So it would appear that you would need that key in order to be able to decrypt the video stream's data.\n",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Jan 31, 2015 at 15:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@Akhilesh <a href=\"https://www.cdc.informatik.tu-darmstadt.de/~jwaelde/breaking-dvbcsa.pdf\" rel=\"nofollow noreferrer\">This</a> pdf document explains dvb-csa encryption and ways to attack it.</span>",
                    "time": null
                }
            ]
        }
    ]
}