{
    "title": "what is the meaning of UsrLAsg in assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/11635/what-is-the-meaning-of-usrlasg-in-assembly",
    "content": "Little knowledge of assembly can be a problem sometimes. \n<pre><code> push       ebp\n lea        eax,[ebp-3C0]\n call       005A0E30\n pop        ecx\n mov        edx,dword ptr [ebp-3C0]\n lea        eax,[ebp-20]\n call       @UStrLAsg\n push       ebp\n lea        eax,[ebp-3C4]\n call       005A1568\n pop        ecx\n</code></pre>\nJust as the above code, I am trying to understand what is happening but I cannot understand the instructions <pre><code>lea</code></pre> followed by a <pre><code>call</code></pre>. \nMaybe if I had an idea of what <pre><code>@UstrLAsg</code></pre> means I would start to get what is going on there or maybe someone out there can give me a hint.\n",
    "votes": "1",
    "answers": 2,
    "views": "410",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Alexio puk2sefu",
    "time": "Dec 26, 2015 at 9:26",
    "comments": [
        {
            "user": "blabb",
            "text": "as answered by perror ustlasg is just a name a symbol most of the debuggers and disassembler will offer you an option to turn it off and display the actual address like your call 5a0e30 just a few lines above your tool recognized the address as ustrxxx so it displays ustrxx for the call few lines above thsi call it didnt recogize the symbol so it says call 0x50xxxxx that is all\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>mov        edx,dword ptr [ebp-3C0]\n</code></pre>\n\nThis instruction sets register <pre><code>edx</code></pre> to the value of the DWORD at memory address (<pre><code>ebp-3C0</code></pre>).\n\n<pre><code>lea        eax,[ebp-20]\n</code></pre>\n\nThis instruction sets register <pre><code>eax</code></pre> to the value (<pre><code>ebp-20</code></pre>); despite the square brackets in the instruction, there is no memory dereferencing involved.\n\n<pre><code>call       @UStrLAsg\n</code></pre>\n\nThis instruction calls the Delphi library function <pre><code>UStrLAsg()</code></pre>, which receives its input arguments via <pre><code>eax</code></pre> and <pre><code>edx</code></pre>. A little Googling shows that that function is used to assign a local Unicode string to a global variable, where <pre><code>edx</code></pre> points to the source string and <pre><code>eax</code></pre> points to the global variable.\n",
            "votes": "2",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Alexio puk2sefu",
                    "text": "<span class=\"comment-copy\">Great,thats why  call @UstrLAsg starts with test Edx,Edx huh!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<pre><code>lea</code></pre> stands for Load Effective Address. It is an instruction designed to fetch a piece of memory and load it into a register in an optimized manner. It may also be used to perform an addition when you see:\n<pre><code>lea eax, [eax+4]\n</code></pre>\nWhich is equivalent to:\n<pre><code>add eax, 4\n</code></pre>\nThen, the <pre><code>call @UstrLAsg</code></pre> refer to a symbol (<pre><code>@UstrLAsg</code></pre>), which give a static address in the executable memory. The best way to find out where it does jump in memory would be to execute the program and to look at the symbol while running. It should unveil the static address.\nHope this helped you a bit.\n",
            "votes": "0",
            "user": "perror",
            "time": "Dec 26, 2015 at 9:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}