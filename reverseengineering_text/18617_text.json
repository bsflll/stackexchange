{
    "title": "Hopper: What does stack[xxxx] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/18617/hopper-what-does-stackxxxx-mean",
    "content": "When using the 'decompiler' tool in Hopper on the <pre><code>start</code></pre> function of an application it shows this:\n\nWhat does the <pre><code>stack[2043]</code></pre> mean, is it 2043 bytes from the top of high memory and its assigning it to the stack?\nHere is what the assembly looks like for the same function:\n",
    "votes": "2",
    "answers": 0,
    "views": "171",
    "tags": [
        "disassembly",
        "decompilation",
        "hopper"
    ],
    "user": "pzirkind",
    "time": "Jun 27, 2018 at 15:19",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "Frankly, it's really difficult to interpret the decompilation. For example, it uses the raw register variable <pre><code>esp</code></pre> in the output, when <pre><code>esp</code></pre> is modified by the prologue -- so which value of <pre><code>esp</code></pre> is it referring to? (Evidently the pre-prologue version.) Also the disassembly listing would be more clear if it showed the symbolic declarations for <pre><code>var_14</code></pre>, <pre><code>var_10</code></pre>, etc. I have a feeling they refer to <pre><code>-0x14</code></pre>, <pre><code>-0x10</code></pre>, etc. but it would help clear things up. Anyway, given the tenor of your question, I'd say the decompilation will just confuse you and simply to ignore it (or use Hex-Rays).\n",
            "time": null
        }
    ],
    "answers_data": []
}