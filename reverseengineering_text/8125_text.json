{
    "title": "ida pro stack variables in hex view",
    "link": "https://reverseengineering.stackexchange.com/questions/8125/ida-pro-stack-variables-in-hex-view",
    "content": "You have the IDA View and Hex View right. When on IDA View you select an instruction you can see the instruction selected in Hex View as well. However, if you select a \"data instruction\" like \"Format          = dword ptr -10h\" which is a stack variable, you don't see it in the hex view. It doesn't select the bytes corresponding to the variable definition. I mean I know the variable is going to be there in memory but somewhere on the hex view should tell me \"hey allocate this stack variable\" but it doesn't.\nIt's probably obvious by now, I'm a beginner in reverse engineering, I've been reading the book from http://beginners.re/ . While I do know some assembly and have been able to reverse simple things, I have these knowledge gaps I'd like to fill. Thank you!\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida"
    ],
    "user": "savram",
    "time": "Jan 30, 2015 at 0:31",
    "comments": [],
    "answers_data": [
        {
            "content": "Stack variables live in the stack's address space, not in the module's address space. Thus, there's nothing that the Hex View could show you statically.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Jan 30, 2015 at 0:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "savram",
                    "text": "<span class=\"comment-copy\">Ok so you have the text segment, data segment, bss segment. They all exist in the module's address space and get loaded into memory right? However in memory there are 2 more segments that don't exist in the module's space address, which is stack and heap. I thought the variables in the data segment(module's address space) were loaded to the stack, so I know where they come from, but what about these stack variables that aren't defined anywhere in the program, how do they end up in the stack? Thank you.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">For each thread in the process, the operating system will create a region of memory for that thread's stack, so there can be multiple stack memory regions in a given process's address space. Similarly, the program's code may create multiple heap memory regions in the process's address space. The variables in the data segment are global variables (not stack variables); they are not automatically loaded onto the stack. Stack variables (also known as local function variables) are written to and read from the stack at runtime by the functions to which they belong.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Unfortunately, in your example, IDA is using the same variable name (<code>Format</code>) for both a local stack variable and a global variable, hence the confusion. The <code>Format</code> in the <code>[]</code>s is for the local stack variable; the <code>Format</code> in <code>offset Format</code> is for the global variable in the .rdata section. I'd recommend renaming one of these <code>Format</code> variables in IDA to make it less confusing.</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">In the function prologue there will usually be an instruction that reserves the stack space needed for local variables. E.g. <code>sub esp, 10h</code> (to reserve 16 bytes) or <code>push ecx</code> (to reserve 4 bytes). Sometimes the compiler overlays local variables on the stack space occupied by function parameters, if it doesn't need those anymore (i.e. when they're past their live ranges). Then there might not be an explicit reservation for locals.</span>",
                    "time": null
                },
                {
                    "user": "DarthGizka",
                    "text": "<span class=\"comment-copy\">The <code>Format = dword ptr -10h</code> is not an instruction, ghost or otherwise. It's a declaration that allows it to put a meaningful name to stack references, even though the stack pointer keeps fluctuating (at least in 32-bit mode). IDA does it by picking a fixed frame of reference (usually the return address) and accounting for the current value of ESP with a literal number, e.g. <code>push [esp+4+foobar]</code> if the 'logical' stack pointer has a value of 4 currently. That way one and the same stack location always gets the same name; otherwise it would be <code>[esp]</code> in one place and <code>[esp+10h]</code> in another.</span>",
                    "time": null
                }
            ]
        }
    ]
}