{
    "title": "How to debug using OpenWatcom's debugger?",
    "link": "https://reverseengineering.stackexchange.com/questions/2185/how-to-debug-using-openwatcoms-debugger",
    "content": "OpenWatcom's debugger just executes the binary instead of single-stepping through it, when I attempt the following steps:\n\n<pre><code>File->Open</code></pre>, select executable\n<pre><code>Run->Trace Into</code></pre>\n\nThis attempt is on Windows XP.\nHow do I single step through a program using OpenWatcom's debugger?\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "debuggers"
    ],
    "user": "heinrich5991",
    "time": "Jun 12, 2013 at 7:18",
    "comments": [],
    "answers_data": [
        {
            "content": "Okay, Windows XP, OpenWatcom. I am using OpenWatcom 1.9. When trying to reproduce your problem, I used <pre><code>calc.exe</code></pre> from Windows XP for which there are no Watcom debug symbols available (only the PDB format from Microsoft, which Watcom doesn't support at all).\nWhen dismissing the open dialog from your first step, we get the assembly view like this. I am returning from that call (<pre><code>Run -> Until Return</code></pre>) a few times and realize that the call stack shows I am still in the loader phase.\n\nThe most logical thing to do now would be to break at either <pre><code>kernel32!BaseThreadInitThunk</code></pre> which is basically the entry point for any Win32 thread, including the very first in a process, but isn't exported (and, remember, we have no symbols). For a writeup on the startup process, see here or the \"Windows Internals\" book. The next possible candidate would be <pre><code>ntdll!RtlUserThreadStart</code></pre> which also isn't exported and therefore unavailable.\nSo, assuming you really have no modern debugger (WinDbg, cdb, let alone IDA, Hopper and friends) available, and don't want to use <pre><code>livekd.exe</code></pre> from SysInternals (which however requires a recent <pre><code>dbghelp.dll</code></pre>) the only method that seems to be reasonable is to load your target executable into an editor (CFF Explorer comes to mind) and put an <pre><code>int3</code></pre> (<pre><code>cc</code></pre>) instruction at the entry point or simply move the entry point elsewhere. In my case I chose to overwrite the <pre><code>push 70h</code></pre> (<pre><code>6A 70</code></pre>) with <pre><code>int3; nop</code></pre> (<pre><code>CC 90</code></pre>). That enabled me to break at the beginning of the program (not considering TLS callbacks or anything like that, though).\nAnother less intrusive method is to use the above mentioned CFF Explorer or really any suitable tool to give you the VA of the entry point. Since we're talking about Windows XP we need not worry about ASLR or anything like that. \n\nThe entry point in our case is at RVA <pre><code>0x12475</code></pre>, which the Address Converter translates to:\n\nVA <pre><code>0x1012475</code></pre>. Sweet. Now we can try to let OpenWatcom stop at this address. Setting a bpx at this address (<pre><code>Break -> View All -> Rightclick -> New</code></pre>, enter address) and then pressing F5 (for \"Go\") to skip the startup phase for the process gets us straight to the entry point.\n\nFrom there we can use F8 for further single-stepping. And I'm sure similar to the experience we shared during the startup phase, any little thing that changed since the debugger was last adjusted to a more recent OS will trip you (or rather the OW debugger) up. Short of switching debuggers, you might want to make heavy use of <pre><code>Break -> On Debug Message</code></pre>, but even that seemed of little use when I tried it.\nConclusion\nIt's possible, but heck it's tedious and it may fall short of your needs at any point.\nQuite frankly, some debuggers are better left alone when no source is available (assembly debugging). Admittedly I am not as familiar with the Watcom debugger as with GDB or WinDbg, but I've used it in the past and found it pure horror with symbols. That impression will likely only get worse without symbols. I find myself confirmed in that sense from looking into the issue you were experiencing.\n20th century debugging\nOpenWatcom, while still being \"developed\" is old. Its roots are in the old Sybase product Watcom, which had a broad following. Problem is, that this product existed even before Windows 2000. So I don't think you can expect a lot from it, as most people these days are using compilers and debuggers with better support. Be it WinDbg or be it GDB if you happen to use MinGW or something like that.\n",
            "votes": "5",
            "user": "0xC0000022L",
            "time": "Jun 4, 2013 at 1:58",
            "is_accepted": true,
            "comments": []
        }
    ]
}