{
    "title": "what's the function of LODWORD and HIDWORD?",
    "link": "https://reverseengineering.stackexchange.com/questions/8296/whats-the-function-of-lodword-and-hidword",
    "content": "I'm trying to figure out what  does this piece of code exactly:\n<pre><code>  LODWORD(fMax) = *(_DWORD *)v12;\n  HIDWORD(fMax) = v13;\n</code></pre>\nI was reading on <pre><code>IDA\\Plugins\\defs.h</code></pre> the definition, but I don't understand what does exactly to redo the same thing on Java.\nI'll be really really glad if someone of you can help me.\n",
    "votes": "6",
    "answers": 1,
    "views": "26k",
    "tags": [
        "ida",
        "disassembly",
        "decompilation",
        "c"
    ],
    "user": "Criss Moreyra",
    "time": "Feb 20, 2015 at 7:56",
    "comments": [
        {
            "user": "rev",
            "text": "<pre><code>LODWORD()</code></pre> takes the low DWORD from <pre><code>fMax</code></pre>, and <pre><code>HIDWORD()</code></pre> the high DWORD. Basically, if you got an <pre><code>__int64</code></pre> like this: <pre><code>x = 0xFFFFFFFFAAAAAAAA</code></pre>, <pre><code>LODWORD(x)</code></pre> is <pre><code>0xAAAAAAAA</code></pre> and <pre><code>HIDWORD(x)</code></pre> is <pre><code>0xFFFFFFFF</code></pre>\n",
            "time": null
        },
        {
            "user": "Criss Moreyra",
            "text": "So this two variables are basically changin the value of fMax. for example as you said, if i had fMax = 0xFFFFFFFFAAAAAAAA and v12 = 0xFFCD0000... the final value of LODWORD(fMax) would be 0xFFFFFFFFFFCD0000. i'm right?\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "Yes, you're right. However, i assume you omitted a <pre><code>&</code></pre>, and the first expression should read <pre><code>...*(_DWORD *) &v12</code></pre>, as you want to select the low 32 bits from v12, instead of treating v12 as a pointer.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This pattern is typical for assigning a 64-bit value to a variable on a 32 bit system - you calculate each 32-bit value separately, then push them into the high and low 32 bits of the 64 bit value.\nIn Java, your first assignment would be\n<pre><code>fMax=(fMax & 0xFFFFFFFF00000000) | (v12 & 0x00000000FFFFFFFF)\n</code></pre>\nand the second would be\n<pre><code>fMax=(fMax & 0x00000000FFFFFFFF) | (((long)v13<<32) & 0xFFFFFFFF00000000)\n</code></pre>\nOf course, <pre><code>fMax</code></pre> is a 64 bit long here.\nYou can omit the <pre><code>& 0xFFFFFFFF00000000</code></pre> from the second expression, as you know those bits will be zero after the left shift. And you can omit the <pre><code>& 0x00000000FFFFFFFF</code></pre> from the first expression if <pre><code>v12</code></pre> is an <pre><code>int</code></pre>, since the high bits will be zero anyway in a 32 bit integer. But the java compiler will probably optimize these away anyway, and i wanted to write the statements in a way that makes clear which bits are taken from <pre><code>fMax</code></pre>, and which from <pre><code>v12</code></pre> and <pre><code>v13</code></pre>.\n",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Feb 20, 2015 at 6:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Criss Moreyra",
                    "text": "<span class=\"comment-copy\">Thank you, i've understood but now i found this <code>SHIDWORD(v10)</code> i assume this is something like do <code>fMax = (fMax &amp; 0xFFFFFFFF00000000) | (v10 + 1) </code> i'm right?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">SHIDWORD is the sign extended HIDWORD. The SHIDWORD of a negative 32-bit value is FFFFFFFF, and the SHIDWORD of a positive 32-bit value is 0. The <code>+1</code> does not apply to the value, as in your <code>v10 + 1</code>, it applies to the pointer - one DWORD after the one at the address of <code>v10</code>.</span>",
                    "time": null
                },
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">How can I convert that in simple C code? IDA interpreted this <code>mov [rsp+56], eax</code> to this <code>LODWORD(v1) = v2;</code>, <code>v1</code> goes to a unknown/undocumented function.</span>",
                    "time": null
                }
            ]
        }
    ]
}