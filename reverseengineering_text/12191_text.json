{
    "title": "Do all drivers exist in Kernel mode?",
    "link": "https://reverseengineering.stackexchange.com/questions/12191/do-all-drivers-exist-in-kernel-mode",
    "content": "I'm in the process of learning the Windows API and reversing in general, so I apologize if this is a fairly dumb question. \nAfter reading a section of 'Practical Malware Analysis' discussing the Native API  I decided to have a look at some of ntdll.dll's exported functions. I came across the NtLoadDriver which simply loads a specified driver from the registry. \nWould this driver exist in user space, or in kernel space? Is it even possible for a non kernel mode driver to exist?\nIf it's that simple to load a driver in kernel mode (I'm assuming it's not) then why don't we see more malware in the form of drivers?\nAny insight or clarification would be greatly appreciated.\n",
    "votes": "3",
    "answers": 1,
    "views": "649",
    "tags": [
        "windows",
        "dll",
        "memory",
        "kernel-mode"
    ],
    "user": null,
    "time": "Apr 6, 2016 at 17:40",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "Right on top of your link there's a link to the higher level entry \"Driver Support Routines\" which says \"Driver support routines are routines that the Windows operating system provides for kernel-mode drivers to use.\" That might give you a hint why this is not used for malware.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Would this driver exist in user space, or in kernel space?\n\nKernel space.\n\nIs it even possible for a non kernel mode driver to exist?\n\nYou can write a user-mode driver using the User-Mode Driver Framework, but that type of driver is effectively a user-mode service with access to some extra I/O functionality.\nWhat we typically think of as a \"driver\" is a kernel-mode driver.\n\nIf it's that simple to load a driver in kernel mode (I'm assuming it's not) then why don't we see more malware in the form of drivers?\n\nThe first thing that <pre><code>NtLoadDriver()</code></pre> does is check that the caller's token has <pre><code>SeLoadDriverPrivilege</code></pre>, which even administrators' tokens don't have by default.\nOther reasons we don't see much malware in the form of drivers:\n\nIt's more difficult to develop (malicious) kernel-mode code than it is to develop (malicious) user-mode code. Since it's rare that a malware author would need to do something that can only be done from kernel-mode, there's usually not much value in writing a malicious driver.\nModern versions of Windows have very strict driver-signing requirements with regard to allowing a driver to load. Getting a legitimate driver-signing certificate is not easy to do for a malware author, and once Microsoft discovers that said certificate is being used to sign malicious drivers, Microsoft will revoke the certificate and prevent all Windows installations from loading drivers signed with that certificate.\n",
            "votes": "9",
            "user": "Jason Geffner",
            "time": "Mar 9, 2016 at 18:56",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user15338",
                    "text": "<span class=\"comment-copy\">Awesome, that clears things up a lot. Thank you!</span>",
                    "time": null
                },
                {
                    "user": "Stolas",
                    "text": "<span class=\"comment-copy\">A small side note: Malicious Drivers are often called rootkits. These are more common in unix land. Also, installing rootkits often happens with kernel exploitation and not with the NtLoadDriver function.</span>",
                    "time": null
                },
                {
                    "user": "Skyk√ºff",
                    "text": "<span class=\"comment-copy\">The Driver Signing Enforcement (DSE) on Windows wouldn't be a problem at all for an experienced Malware Developer: <a href=\"https://github.com/hfiref0x/TDL\" rel=\"nofollow noreferrer\">github.com/hfiref0x/TDL</a></span>",
                    "time": null
                }
            ]
        }
    ]
}