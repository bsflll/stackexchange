{
    "title": "How do i loop this CreateThread call in Assembly to get 4 threads instead of only one?",
    "link": "https://reverseengineering.stackexchange.com/questions/30817/how-do-i-loop-this-createthread-call-in-assembly-to-get-4-threads-instead-of-onl",
    "content": "Knowledge in C++ Assembly and some reverse engineering experience\n",
    "votes": "1",
    "answers": 1,
    "views": "149",
    "tags": [
        "assembly"
    ],
    "user": "Shark Laser",
    "time": "Aug 24, 2022 at 14:36",
    "comments": [],
    "answers_data": [
        {
            "content": "See Microsoft's API page on CreateThread.\nThe six pushes right before the call correspond to the arguments\n<pre><code> HANDLE CreateThread(\n  [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,\n  [in]            SIZE_T                  dwStackSize,\n  [in]            LPTHREAD_START_ROUTINE  lpStartAddress,\n  [in, optional]  __drv_aliasesMem LPVOID lpParameter,\n  [in]            DWORD                   dwCreationFlags,\n  [out, optional] LPDWORD                 lpThreadId\n);\n</code></pre>\nIf you're creating four threads, you'll want to also construct some sort of table for storing the pointers to the thread handles, which I think are returned in EAX. If that memory has not already been allocated, you'll want to precede this code by a call to malloc or some other memory allocation function.\nSo, to summarize,\n\nAllocate memory in the size of 4 * (the size of a pointer) to store the handles that are returned by the CreateThread method,\nLoop the creation of the thread, starting at 0x610ab9, and\nStore the resulting handles at the appropriate offsets into the memory you allocated in step 1.\n",
            "votes": "1",
            "user": "dingo_kinznerhook",
            "time": "Aug 25, 2022 at 19:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}