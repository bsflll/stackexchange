{
    "title": "Change string value when string is in a RAM address x64 c++ program",
    "link": "https://reverseengineering.stackexchange.com/questions/31761/change-string-value-when-string-is-in-a-ram-address-x64-c-program",
    "content": "I'm new to reverse engineering.\nI'm simply trying to change the value of a string in <pre><code>x64dbg</code></pre>, of a program I make myself in VS\n(It's a c++ program, and is VERY simple; it just prints a string, and two memory addresses of two other strings.)\nI've tried using the documentation on string formating (on the help page of x64dbg's website), but that didn't help me.\nThe assembly dialog says: \"Instruction encoding error: invaild state\" on the code <pre><code>lea rdx, {s:whatever}</code></pre>\nIf you know a basic, one line way to print a string like <pre><code>std::cout << string;</code></pre> in c++, please tell me.\nThanks in advance.\n",
    "votes": "4",
    "answers": 1,
    "views": "1k",
    "tags": [
        "assembly",
        "x64dbg",
        "x86-64"
    ],
    "user": "clouded.",
    "time": "Apr 9, 2023 at 1:06",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "I'm confused. Are you trying to use <pre><code>x64dbg</code></pre>'s assembler to patch an instruction to reference a new string, which you are trying to creating using <pre><code>x64dbg</code></pre>'s string formatting functionality when specifying the new assembly instruction? That does not seem legit to me.\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "Iinw he is trying to log a std::string using x64dbg builtin scripting the curly brackets iirc is from builtin scripting syntax. If windbg i would say .printf %ma , either sso buffer or pointer to new()\n",
            "time": null
        },
        {
            "user": "clouded.",
            "text": "I have found a way to do it. If you follow the code <pre><code>lea rdx, ds:[memory addr]</code></pre>  in dump with the constant, then go up a bit, you will see the string. Then it's just a matter of changing the hex values.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "not sure what your intent is\ni think you want to log a std::string that is being output by std::cout\nto the log window of x64dbg based on the use of {s:whatever} syntax in your query.\nif that is the case i hope you know std::string is a structure\nand it may either contain the string if it is less than an implementation threshold limit\nor a pointer if the string is long enough to cross the limit .\nsince your query also use rdx i assume you can see the string that would be printed in the registers window of x64dbg\nand you would want to print that string to log window of x64dbg\nif that is the case\ntry using log {s:rdx} or log \"{s:rdx}\" in the script input command window\nyou can see the string in status bar as well as log window\nif you were on windbg i could show you how the string is part of a structure as below\n<pre><code>0:000> lsa .\n     4: int main (void) \n     5: {\n     6:     cout << \"hello cout\" << endl;\n     7:     string longstr = \"this is a very very loooooooooooooooooooooooooong stringgggggg\";\n>    8:     cout << longstr << endl;\n     9:     return 0;\n    10: }\n    11:\n    \n0:000> ? @rdx\nEvaluate expression: 215422596808 = 00000032`282ff6c8\n\n0:000> ?? ((cout!std::string *)@rdx)->_Mypair._Myval2._Bx._Ptr\nchar * 0x000001a1`86eadb40\n \"this is a very very loooooooooooooooooooooooooong stringgggggg\"\n\n0:000> .printf \"%ma\n\" , @@c++(((cout!std::string *)@rdx)->_Mypair._Myval2._Bx._Ptr)\nthis is a very very loooooooooooooooooooooooooong stringgggggg\n</code></pre>\ni just flipped out an old version of x64dbg and gave it a whirl\nif you want to log what i wrote above holds\nif you wanted to alter the string (why bother with scripting when you can edit memory is beyond me ) but if you persist\nyou can use [rdx]?=hexencoded string like [rdx]?=0x41414141414141\n",
            "votes": "2",
            "user": "blabb",
            "time": "Apr 10, 2023 at 9:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "clouded.",
                    "text": "<span class=\"comment-copy\">So do I change <code>lea rdx, ds:[memory addr]</code> to <code>[rdx]?=hexencodedstring</code> or do I change it to <code>lea rdx, [rdx]?=hexencodedstring</code>?</span>",
                    "time": null
                },
                {
                    "user": "clouded.",
                    "text": "<span class=\"comment-copy\">I would like to do it like to do it like this because when you edit the dump (in x64dbg) you can only change the string to a string of a same size or less.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Neither your question nor the logic you offer in your second comment makes any sense. You do not change the instruction to alter memory  it doesn't work that way. And neither you can alter a fixed size string to a larger string either via memory edit  or by scripts</span>",
                    "time": null
                }
            ]
        }
    ]
}