{
    "title": "How to determine ARM architecture from the ELF file extracted from the firmware?",
    "link": "https://reverseengineering.stackexchange.com/questions/25695/how-to-determine-arm-architecture-from-the-elf-file-extracted-from-the-firmware",
    "content": "I have extracted the ELF file from the flash dump of a printer, I cannot find too much information about the SoC chip on the printer. What's the best practice to determine the ARM architecture (ARMv7-R, ARMv7-M, ARMv7-A) from the ELF file? It would be even better if I can figure out the ARM core type. I suppose I can look for some patterns or some specific instructions to make an informed guess, but I don't really have any idea.\nThe ELF file contained in the flash dump is compressed and somewhat non-standard, I actually decompressed it, did some modifications, and added the program header table by myself.\nI know tools like readelf and binwalk -A, but what I want to know is not a very broad ARM32 or ARM64 categorization but the specific ARM architecture, or even better, the specific ARM core type. Because I am not even sure if the chip used on the printer is an ARM Cortex A/R or M series. I cannot find a Linux on the printer, so it's probably not a Cortex-A.\n",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "firmware",
        "arm",
        "disassemblers",
        "firmware-analysis"
    ],
    "user": "ItsSoHard",
    "time": "Aug 19, 2020 at 0:08",
    "comments": [],
    "answers_data": [
        {
            "content": "There's a few other options can help you narrow down the specific architecture / core / SoC.\n\nIdentify which combinations of ARM/THUMB16/THUMB32 instructions it contains.\n\nLook at disassembly to identify the offsets of key memory regions (code, data, flash etc)\n\nSimilarly, SoCs tend to have memory mapped peripherals. Identifying what's being accessed here can help.\n\nLook at disassembly for MRS and MSR instructions - many special registers are core specific.\n\nOpen the printer up and look at the PCB to visually ID the chip. (Or google image search for printer make/model PCB.)\n",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Aug 19, 2020 at 15:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The ELF header should contain information about the target architecture. You can use the Unix utility <pre><code>file</code></pre> to possibly obtain some basic information about the file, and <pre><code>readelf -h</code></pre> should give you most everything that is there.\nIf for some reason that isn't helpful, I suppose you could try disassembling against different architectures until it produces something readable.\n",
            "votes": "0",
            "user": "multithr3at3d",
            "time": "Aug 18, 2020 at 23:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}