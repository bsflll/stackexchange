{
    "title": "Is there a list of Ghidra's variable prefixes?",
    "link": "https://reverseengineering.stackexchange.com/questions/25249/is-there-a-list-of-ghidras-variable-prefixes",
    "content": "In Ghidra, the decompiler prepends various prefixes to variable names. For instance, <pre><code>iVar1</code></pre> is an integer. However, there are a lot of prefixes that aren't immediately obvious, find some below, but I'm looking for a complete dictionary if anyone knows where it is:\n\n<pre><code>local_31</code></pre>\n<pre><code>auStack8320</code></pre>\n<pre><code>uStack4</code></pre>\n<pre><code>DAT_<addr></code></pre>\n",
    "votes": "11",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ghidra",
        "decompiler"
    ],
    "user": "Axel Persinger",
    "time": "Jun 9, 2020 at 11:57",
    "comments": [
        {
            "user": "Felix PK",
            "text": "Maybe this wikipedia article about hungarian notation helps too.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is annoyingly hard to find the answer to. This is a good starting point, but I don't think I found everything yet.\n\nVariable names\n\nFrom Function.java:\n\n<pre><code>param_</code></pre>\n<pre><code>local_</code></pre>\n<pre><code>local_res</code></pre>\n<pre><code>temp_</code></pre>\n\n\nFrom database.cc <-- this function has most (maybe all?) of the variable naming logic. There are multiple pieces of this function that I don't yet understand; I'm pretty confident there are additional variable naming conventions hiding in there.\n\n<pre><code>unaff_retaddr</code></pre>\n<pre><code>unaff_</code></pre>\n<pre><code>in_</code></pre>\n<pre><code>param_</code></pre>\n\nWhile also referenced in <pre><code>Function.java</code></pre>, I believe this is where the name is actually generated.\n\n\n<pre><code>extraout_</code></pre>\n<pre><code>Var</code></pre>\n\nSeems to usually be prefixed by something else (like <pre><code>i</code></pre> in your example)\n\n\n\n\nI think this function in <pre><code>varmap.cc</code></pre> is the one that creates stack variables, but I haven't yet confirmed.\n\n\nLabel names (from SymbolUtilities.java):\n\n<pre><code>SUB_</code></pre>\n<pre><code>LAB_</code></pre>\n<pre><code>DAT_</code></pre>\n<pre><code>UNK_</code></pre>\n<pre><code>EXT_</code></pre>\n<pre><code>FUN_</code></pre>\n<pre><code>OFF_</code></pre>\n\n\n\nAlso useful, the FindPotentialDecompilerProblems.java script has some explanations for what some of these mean. Namely, some of the variants of <pre><code>extraout</code></pre>, <pre><code>in_</code></pre>, and <pre><code>unaff_</code></pre>.\n",
            "votes": "11",
            "user": "hairlessbear",
            "time": "Dec 2, 2020 at 2:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}