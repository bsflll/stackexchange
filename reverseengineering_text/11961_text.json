{
    "title": "Ida Pro compare constants in same function or not",
    "link": "https://reverseengineering.stackexchange.com/questions/11961/ida-pro-compare-constants-in-same-function-or-not",
    "content": "How do I compare in IDA PRO if constants are located in the same functions or not.. like filter from all constants if I search for 2 constants or more I want to know which function(s) contain all the constants I want to search for, to eliminate searching through all constants with other constants to find matching functions.. (this is how I do it now it's very pain staking)\nConstants window looks like this \n\n\nHow I do I mark red lines for bad addresses and blue ones for good ones haha\n\n\n\nIs there any script or even better a plugin that does this job easier for me?\n",
    "votes": "1",
    "answers": 1,
    "views": "777",
    "tags": [
        "ida",
        "functions",
        "script",
        "compare"
    ],
    "user": "SSpoke",
    "time": "Feb 7, 2016 at 4:34",
    "comments": [
        {
            "user": "w s",
            "text": "Which IDA version are you using ? Do I understand correctly that you want to find functions which are using similar constants set ?\n",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "yes I want to find where certain constants have a link together, and best way is if they both in the same function.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "IDAPython is the way to go when you want to do such things. I'd say something like that should work:\n<pre><code>CONST_1 = \"1234h\"\nCONST_2 = \"ABCDh\"\nfor func in Functions():\n    got_first, got_second = False, False\n    func_start = GetFunctionAttr(func,FUNCATTR_START)\n    func_end = GetFunctionAttr(func,FUNCATTR_END)\n    for ea in Heads(func_start, func_end):\n        cur_line = GetDisasm(ea)\n        got_first |= CONST_1 in cur_line\n        got_second |= CONST_2 in cur_line\n        if got_first and got_second:\n            print \"Found a match at 0x{:08x}\".format(func_start)\n            break\n</code></pre>\nIf your binary is really big and it's taking too long, you might think about optimizing the comparaison with operands.\n",
            "votes": "1",
            "user": "user2823000",
            "time": "Feb 7, 2016 at 23:19",
            "is_accepted": true,
            "comments": []
        }
    ]
}