{
    "title": "Understand what Ioctl do",
    "link": "https://reverseengineering.stackexchange.com/questions/21487/understand-what-ioctl-do",
    "content": "I looking in ida on arm linux binary . I can see there that there is ioctl call\n<pre><code>ioctl(fd,req,num)</code></pre>.  \nfd is fd to /dev/module. ,req is some 4bytes and num is some number.\nHow can I understand what this ioctl call do?\nWhat <pre><code>req</code></pre> number mean? \nWhere can I find the handle of this ioctl?\n",
    "votes": "0",
    "answers": 1,
    "views": "495",
    "tags": [
        "binary-analysis",
        "linux",
        "arm",
        "syscall"
    ],
    "user": "Keystone",
    "time": "Jun 14, 2019 at 12:26",
    "comments": [
        {
            "user": "camp0",
            "text": "You should study a bit that syscall, in general ioctl is for access drivers, and is very dependent of the driver, in your case /dev/module, do a man ioctl and you will understand better how works, there is plenty of information about it, just google it\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You need to find the driver (either a separate binary or built-in into the kernel) which publishes this dev file entry, the code to handle the ioctl request will be in it. \nHereâ€™s an article with an example of ioctl handler:\nhttps://opensourceforu.com/2011/08/io-control-in-linux/\nString search for the file name may be the quickest way to do find the required binary/code area.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 16, 2019 at 11:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}