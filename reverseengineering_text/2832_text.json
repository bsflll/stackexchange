{
    "title": "Reversing a Mac OS X binary that appears to be non encrypted, backtrace just shows mach_msg_trap ()",
    "link": "https://reverseengineering.stackexchange.com/questions/2832/reversing-a-mac-os-x-binary-that-appears-to-be-non-encrypted-backtrace-just-sho",
    "content": "Currently I have a binary that I am investigating.  The application is GUI / event driven, so that makes it difficult to set a break point.  I would like to set a break point on a certain button click, so I thought I would click the button, and then run a <pre><code>backtrace</code></pre> in GDB to see what functions were called when I clicked the button, but the output of the <pre><code>bt</code></pre> is just showing <pre><code>mach_msg_trap()</code></pre>, and a few other \"functions\" I suppose.  Does anyone know why I'm in the <pre><code>mach_msg_trap()</code></pre>  I am assuming it's some security feature implemented by Apple to prevent people from reversing their software, I just thought I would ask, as my googlefu didn't really return any tangible results.\n",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "gdb",
        "osx",
        "mach-o"
    ],
    "user": "ipatch",
    "time": "Sep 25, 2013 at 10:25",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "If you do a backtrace at any arbitrary point in time, you'll just see the message pump. In order for a backtrace to be useful, you would need to do a backtrace while the program is handling your button click in the active thread (in other words, set a breakpoint in the button click handling code).\n",
            "time": null
        },
        {
            "user": "Till",
            "text": "What @JasonGeffner is entirely correct. Just as an addendum; <pre><code>mach_msg_trap</code></pre> is not a security feature, it is the message dispatcher. It receives messages and attempts to forward them to objects that registered for handling them.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Google <pre><code>site:developer.apple.com mach_msg_trap</code></pre> :) ... it's just a signal handler.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Well, my Mac fu isn't too strong, but I have terminal access to a Mac and will give it a wild shot, hoping to provide you with the insight required to proceed.\n<pre><code>info sharedlibrary</code></pre> on the GDB prompt will tell you details about the ranges of the shared libraries inside of which those functions reside. But we know that already from the function names.\n<pre><code>NSApplication</code></pre> comes from: Cocoa.\n\nThe <pre><code>NSApplication</code></pre> object maintains a list of all the <pre><code>NSWindow</code></pre> objects\n  the application uses, so it can retrieve any of the applicationâ€™s\n  <pre><code>NSView</code></pre> objects.\n\nSo my suggestion would be to start by starting the application\n<pre><code>gdb --args /path/to/binary optional arguments for program\n</code></pre>\nand then set a breakpoint:\n<pre><code>b NSApplicationMain\n</code></pre>\n(can be done inside <pre><code>.gdbinit</code></pre> obviously)\nThen let the application continue. Break into it using Ctrl+C. Most likely the <pre><code>backtrace</code></pre> will be similar to what you saw before, but probably not up to <pre><code>mach_msg_trap()</code></pre>.\nThen you go to one frame that uses a function which has a reference to the <pre><code>NSApplication</code></pre> instance. You can find the frame numbers with <pre><code>bt</code></pre>, obviously. So say:\n<pre><code>f 9\n</code></pre>\nthere you should be able to use GDB's <pre><code>call</code></pre>. Now, my Objective-C/C++ fu is even weaker than my Mac fu, but you can use\n<pre><code>set language\n</code></pre>\nto list the available languages (which influences the syntax for <pre><code>call</code></pre>). So you should probably switch to one of the Objective-C/C++ alternatives as appropriate. On my Mac I have the following language options:\n<pre><code>(gdb) set language\nThe currently understood settings are:\n\nlocal or auto    Automatic setting based on source file\nada              Use the Ada language\nc                Use the C language\nc++              Use the C++ language\nasm              Use the Asm language\nminimal          Use the Minimal language\nfortran          Use the Fortran language\nobjective-c      Use the Objective-c language\nobjective-c++    Use the Objective-c++ language\njava             Use the Java language\nmodula-2         Use the Modula-2 language\npascal           Use the Pascal language\nscheme           Use the Scheme language\n</code></pre>\n<pre><code>call</code></pre> lets you call functions inside the context of the running program (and GDB has command line completion for symbols it knows of). So calling <pre><code>mainWindow</code></pre> of the <pre><code>NSApplication</code></pre> instance would appear as a good idea and then drilling down from there.\nFrom there you should be able to figure out where your button comes into play and set the breakpoint, no?\nBasically if you know a certain parameter of a certain call in the framework references your button (we'll assume it has a pointer somehow) you can use the\n<pre><code>break location if condition\n</code></pre>\nsyntax to make sure the breakpoint will only trigger for the button press. An alternative is the <pre><code>ignore</code></pre> command which will ignore X hits of a breakpoint and only trigger after that.\n",
            "votes": "6",
            "user": "0xC0000022L",
            "time": "Sep 25, 2013 at 11:32",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Do you have md5 for the application?\nIt seems like a GUI/Cocoa application. The code seems to be stuck in <pre><code>msgloop</code></pre>.\nThis loop generally occurs in applications, which require user interaction or when application is interacting with messages.\nThe image shows the breakpoint has been hit inside <pre><code>__CFRunLoopRun</code></pre>. It means app was running and processing system messages until it met a breakpoint (which is Command+C, in this case) it need some kind of user interaction or is waiting for some message, may be a click or key press or message from some system process.\nIf you have the sample md5 or SHA, I can have a look at it\n",
            "votes": "0",
            "user": "perror",
            "time": "Aug 25, 2014 at 12:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}