{
    "title": "How to attach and step through a running .NET process?",
    "link": "https://reverseengineering.stackexchange.com/questions/30885/how-to-attach-and-step-through-a-running-net-process",
    "content": "This is quite easy to do with a low-level debugger, like x64dbg (for instance). Say, if I have a running native process I can attach to it, set a breakpoint, and then step through native code with it.\nIs there a similar debugger but for .NET, that would allow me to do what I listed above?\n",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "debugging",
        ".net"
    ],
    "user": "c00000fd",
    "time": "Sep 15, 2022 at 21:02",
    "comments": [
        {
            "user": "Sergey Litvinov",
            "text": "You can also try JetBrains Rider (it has a trial). It allows to attach to running process, decompile it and set breakpoints as well. It uses the same logic as their dotPeek tool though it might be not userfriendly to navigate through code in that way. Otherway is to decompile app through dotPeek as source project\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Try using https://github.com/dnSpyEx/dnSpy.\nIt has NET decompiler, debugger and you can make changes directly in C# code, compile it and save changes into existing dll or exe module.\n",
            "votes": "2",
            "user": "malikcjm",
            "time": "Sep 19, 2022 at 7:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Thanks. I tried it. Although debugging optimized .NET code is kinda tricky. The variables don't show in most cases, and the currently displayed active line in C# code is 2 or 3 lines behind where the actual execution is. Worse still there's no option to display Assembly instructions between C# lines of code to know the actual values of variables. Otherwise all you get are their names. Do you have any idea how to resolve these issues?</span>",
                    "time": null
                },
                {
                    "user": "Fernando Gonzalez Sanchez",
                    "text": "<span class=\"comment-copy\">For dealing with issues like \"cannot see this variable value because it has been optimized away\", I have used this switch, <a href=\"https://stackoverflow.com/a/279593/1001395\">stackoverflow.com/a/279593/1001395</a> (in  a .ini file of the same name like the assembly you are debugging, ie System.Data.dll.ini)</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">@FernandoGonzalezSanchez hmm, that is really interesting. Although I am not sure if it would work. The process I am trying to debug is linked against <code>*.ni.dll</code> assemblies (native images), as in <code>C:\\Windows\\assembly\\NativeImages_v4.0.30319_64\\Microsoft.Df7c88f51#\\7f6d8ef6224b79741cbfa39fe91b6702\\Microsoft.Data.Mashup.ProviderCommon.ni.dll</code>. Where would I apply that registry setting then?</span>",
                    "time": null
                },
                {
                    "user": "Fernando Gonzalez Sanchez",
                    "text": "<span class=\"comment-copy\">Interesting, haven't tried with NGEN images, but this doc suggest it can work too <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/making-an-image-easier-to-debug\" rel=\"nofollow noreferrer\">learn.microsoft.com/en-us/dotnet/framework/debug-trace-profile/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "Fernando Gonzalez Sanchez",
                    "text": "<span class=\"comment-copy\">Also provided more details on options to disassemble on the fly in my answer <a href=\"https://reverseengineering.stackexchange.com/a/30908/11551\">reverseengineering.stackexchange.com/a/30908/11551</a> (I used <i>a lot</i> RedGate Reflector in that past that way).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "In Visual Studio (not Visual Studio Code), go to menu Debug -> \"Attach to Process\", pick up the process from the list. Now you can press \"pause\" / \"Break All\" in Visual Studio to suspend all process threads and start debugging them.\nThis works regardless of if the process is written in C++ or .NET.\nVisual Studio will show the stack trace and even source code if available.\n(In .NET even if source code is not available if you have installed a plugin for Visual Studio like Redgate Reflector Pro or https://github.com/icsharpcode/ILSpy).\nFor debugging a service process, you have to wait until the execution enters your program, you cannot attach a debugger during the SCM execution. The simplest way to do this is to add an blind loop to your code and once attached, exit the loop with the debugger (by changing the value of the sentinel variable) like\n<pre><code>   int i = 0;\n   while (i == 0) {\n     i++;\n     i--;\n   }\n</code></pre>\nFor dealing with issues like \"cannot see this variable value because it has been optimized away\" you can disable CLR optimizations, I have used this switch (AllowOptimize), see stackoverflow.com/a/279593/1001395 (in a .ini file of the same name like the assembly you are debugging, ie System.Data.dll.ini) <= this works in .NET classic.\n<pre><code>[.NET Framework Debugging Control]\nGenerateTrackingInfo=1\nAllowOptimize=0\n</code></pre>\n",
            "votes": "0",
            "user": "Fernando Gonzalez Sanchez",
            "time": "Sep 21, 2022 at 23:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}