{
    "title": "Why/how is GDB allowed to attach to a process and read/write to attached process' address space?",
    "link": "https://reverseengineering.stackexchange.com/questions/8531/why-how-is-gdb-allowed-to-attach-to-a-process-and-read-write-to-attached-process",
    "content": "The fact that GDB can attach to any process without having su rights is terrifying to me. For example, what prevents me from writing a malware/virus(/whatever the correct term is) that uses same system calls with GDB to attach to any processes, send interrupts, change instructions on the fly, add breakpoints to branching instructions to alter ZF etc.?\nYou can clearly do lots of harmful things with this ability. For example, I'm doing some minor hacks using some GDB Python scripts and I can't see what's preventing me from writing some seriously dangerous/malicious stuff.\nSo I have some number of questions related with how is this possible and how is this safe:\n(I'm assuming that it's the operating system who allows a process to somehow send interrupts to some other one, and access to it's address space and alter the memory. Please correct me if I'm wrong)\n1) What makes this safe? What prevents me from writing a program that alters behaviours of every single process running in a system?\n2) What system calls are involved? How does operating system give me access to address space of some other process, while not taking my own address space from me. (e.g. GDB has it's own address space, but it can also read attached process' address space)\n3) In my user-level program, is it possible to detect this kind of \"attaching\"? Like, can I print a message and terminate if another process is attached to my program? How do I detect this?\n(I'm using \"attaching\" as \"starting writing/reading my address space\")\nThanks.\n",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "gdb",
        "operating-systems",
        "process"
    ],
    "user": "osa1",
    "time": "Mar 23, 2015 at 15:59",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "\"GDB can attach to any process without having su rights\" -- That's not true; see Can gdb debug suid root programs?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "2) The system call is <pre><code>ptrace</code></pre>. That call has lots of functionality, including \"copy a section of the tracee's memory into a local buffer in my address space\" and the reverse \"copy my buffer to the tracee's memory\". These are quite similar to windows' <pre><code>ReadProcessMemory</code></pre>  and <pre><code>WriteProcessMemory</code></pre>. The tracing program needs to use these to access memory in the traced program.\n1) The fact that you can't, really, attach to processes that aren't yours, unless you have <pre><code>root</code></pre> access, or (on Linux), the <pre><code>CAP_SYS_PTRACE</code></pre> capability. In some newer Linuxes, you don't even have rights to <pre><code>ptrace</code></pre> all of your own processes, depending on the <pre><code>yama</code></pre> settings and whether the traced process is a (grand)child of the tracing process. The wikipedia page explains this in more detail.\n3) No, you can't. At least not reliably. Whichever trick you'd want to use could be intercepted by the tracer. Also, you generally don't want to do this, since you need <pre><code>ptrace</code></pre> to debug your program, and whoever has rights to <pre><code>ptrace</code></pre> you could screw you in various other ways as well. However, a process can't have more than one tracer attached at a time, so you could have a master process that spawns and <pre><code>ptrace</code></pre>s the worker, so noone else can attach to the worker to trace it. Of course, the worker would still need a way to check if it's parent is alive (compare <pre><code>getppid()</code></pre> with 1 for example) and that the tracer isn't intercepting your <pre><code>getppid()</code></pre> calls and patching them to return the old parent id.\n",
            "votes": "8",
            "user": "Guntram Blohm",
            "time": "Mar 23, 2015 at 17:25",
            "is_accepted": true,
            "comments": []
        }
    ]
}