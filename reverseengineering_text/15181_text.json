{
    "title": "How to add a function symbol to a stripped executable with radare2?",
    "link": "https://reverseengineering.stackexchange.com/questions/15181/how-to-add-a-function-symbol-to-a-stripped-executable-with-radare2",
    "content": "I am struggling with a stripped binary, and I would like to visualize the <pre><code>main()</code></pre> function with the <pre><code>VVV</code></pre> command (ascii-art CFG representation).\nUsually, the steps are the following:\n\n<pre><code>#> r2 ./crackme</code></pre> (run radare2 on the crackme).\n<pre><code>[0x00005430]> aaa</code></pre> (start the analysis of the binary).\n<pre><code>s main</code></pre> (seek to the address of <pre><code>main</code></pre>).\n<pre><code>VVV</code></pre> (switch to the CFG view of the binary).\n\n\nUnfortunately, my crackme is stripped (including the <pre><code>main()</code></pre> function). I can see the address of the <pre><code>main()</code></pre> function thanks to the first argument of the <pre><code>__libc_start_main()</code></pre> function. But, I always end-up with the following error message:\n<pre><code>      Not in a function. Type 'df' to define it here\n\n--press any key--\n</code></pre>\nHow can I work around this problem. For example, I first tried to add my own symbols on the binary to mark the start of the <pre><code>main()</code></pre> function, but I miserably failed... Any idea ?\nEDIT\nHere is my attempt to add a flag to the binary:\n<pre><code>#> r2 ./ch23.bin \n[0x000083b8]> aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[ ] \n[aav: using from to 0x8000 0x8e64\nUsing vmin 0x8000 and vmax 0x10880\naav: using from to 0x8000 0x8e64\nUsing vmin 0x8000 and vmax 0x10880\n[x] Analyze len bytes of instructions for references (aar)\n[x] Analyze function calls (aac)\n[ ] [*] Use -AA or aaaa to perform additional experimental analysis.\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan))\n[0x000083b8]> pdf\n            ;-- section_end..plt:\n            ;-- section..text:\n/ (fcn) entry0 44\n|   entry0 ();\n|           ; UNKNOWN XREF from 0x00008018 (unk)\n|           ; UNKNOWN XREF from 0x00008c18 (unk)\n|           0x000083b8      00b0a0e3       mov fp, 0                   ; [14] va=0x000083b8 pa=0x000003b8 sz=800 vsz=800 rwx=--r-x .text\n|           0x000083bc      00e0a0e3       mov lr, 0\n|           0x000083c0      04109de4       pop {r1}\n|           0x000083c4      0d20a0e1       mov r2, sp\n|           0x000083c8      04202de5       str r2, [sp, -4]!\n|           0x000083cc      04002de5       str r0, [sp, -4]!\n|           0x000083d0      10c09fe5       ldr ip, [0x000083e8]        ; [0x83e8:4]=0x8664\n|           0x000083d4      04c02de5       str ip, [sp, -4]!\n|           0x000083d8      0c009fe5       ldr r0, [0x000083ec]        ; [0x83ec:4]=0x8470\n|           0x000083dc      0c309fe5       ldr r3, [0x000083f0]        ; [0x83f0:4]=0x8668\n\\           0x000083e0      e5ffffeb       bl sym.imp.__libc_start_main; int __libc_start_main(func main, int argc, char **ubp_av, func init, func fini, func rtld_fini, void *stack_end);\n[0x000083b8]> f main @ 0x8470\n[0x000083b8]> s main\n[0x00008470]> VVV\n... miserable fail ...\n</code></pre>\n",
    "votes": "6",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "radare2"
    ],
    "user": "perror",
    "time": "Apr 18, 2017 at 18:00",
    "comments": [
        {
            "user": "julian",
            "text": "Out of curiosity, what methods/techniques were used in the unsuccessful attempt to add symbols to the binary?\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "Can you share the binary? I am unable to reproduce this error when analyzing non-PIE binutils or IOLI crackme0x09\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "I added an edit to the question. Hope this is enough (yes, this is ARM... not my best... but I'm learning!).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I know it's been over a year since you've asked this question, but I thought in the interest of anyone else who may have come across this question like me, I would field an answer.\nThere are a few ways I've found to get radare2 to properly analyze the newly defined function:\n\nSeek to the address you would like to define the function at\nType 'V' to enter hexdump mode\nType 'd' then 'f' to define the function at that point\nNow you can press 'V' again and you will get a properly rendered control flow graph\n\nThe other way I found avoids visual mode, which is preferable for scripting:\n\nDefine the function as you did using a command like 'f main @ 0x8470', with main being the function name and 0x8470 being the address, of course.\nRun the command 'af main', where main is the name of the function just defined.\nVoila! Your newly created function is now analyzed.\n\nI have tried both of these methods on an executable I'm analyzing which has the same problem you're describing, and both provided the same results.\n",
            "votes": "9",
            "user": "Ian Kerr",
            "time": "Jun 23, 2018 at 0:43",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "I finally got the answer to my old question !\nSo, basically Ian Kerr answer got most of it right, it was just missing a few bits of information. I will try to gather everything in this answer.\nLet say that we are going through a stripped binary, no symbol in sight and radare2 with us:\n<pre><code>#> r2 ./crackme\n[0x0804876c]> pd\n    ;-- entry0:\n       ;-- section..text:\n       ;-- eip:\n       0x08048680      31ed           xor ebp, ebp\n       0x08048682      5e             pop esi\n       0x08048683      89e1           mov ecx, esp\n       0x08048685      83e4f0         and esp, 0xfffffff0\n       0x08048689      54             push esp\n       0x0804868b      6830880408     push 0x8048830\n       0x08048690      6840880408     push 0x8048840\n       0x08048695      51             push ecx\n       0x08048696      56             push esi\n       0x08048697      686c870408     push main          ; 0x804876c\n       0x0804869c      e87fffffff     call sym.imp.__libc_start_main\n       0x080486a1      f4             hlt\n       ...\n[0x08048680]> f sym.main @ 0x804876c\n[0x08048680]> aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n...\n[x] Propagate noreturn information\n[x] Use -AA or aaaa to perform additional experimental analysis.\n[0x08048680]> s sym.main\n[0x0804876c]> pdf\n            ; DATA XREF from entry0 @ 0x8048697\n            ;-- sym.main:\n┌ 96: int main (int argc, char **argv, char **envp);\n│           ; var char *var_20h @ esp+0x4\n│           ; var int32_t var_8h @ esp+0x1c\n│           0x0804876c      55             push ebp\n...\n</code></pre>\nTo sum-up, you need:\n\nTo find the address of the function you want to add. Here, we found <pre><code>main()</code></pre> thanks to <pre><code>__libc_start_main()</code></pre> at 0x804876c.\n\nTo set a symbol tagged with <pre><code>sym.</code></pre> in order to be recognized by radare2 as a symbol:\n<pre><code>f sym.main @ 0x804876c</code></pre>\n\nTo perform an analysis of the new symbol with <pre><code>aaa</code></pre>.\n\nThen, to switch the focus to this symbol: <pre><code>s sym.main</code></pre>\n\nFinally, you can run <pre><code>pdf</code></pre> or <pre><code>VV</code></pre> as usual.\n\n\nEnjoy!\n",
            "votes": "0",
            "user": "perror",
            "time": "Oct 16, 2020 at 15:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}