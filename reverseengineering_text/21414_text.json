{
    "title": "ELF x86 - Why is return address pushed twice?",
    "link": "https://reverseengineering.stackexchange.com/questions/21414/elf-x86-why-is-return-address-pushed-twice",
    "content": "I reverse an ELF x86, and I would like to understand why the return address is pushed again on the stack? It should be already present there.\n<pre><code>main:\nlea    ecx, [esp+0x4 {argc}]\nand    esp, 0xfffffff0\npush   dword [ecx-0x4 {__return_addr}] {var_4}\npush   ebp, {var_8}\nmov    ebp, esp\npush   edi {var_c}\npush   ecx {argc} {var_10}\nsub    esp, 0xb0\nmov    eax, dword [ecx+0x4 {argv}]\nmov    dword [ebp-0x9c {var_a4}], eax\nmov    eax, dword [gs:0x14]\nmov    dword [ebp-0xc {var_14}], eax\nxor    eax, eax {0x0}\ncmp    dword [ecx {argc}], 0x2\nje     0x80485ae\n...\n</code></pre>\n",
    "votes": "3",
    "answers": 1,
    "views": "457",
    "tags": [
        "disassembly",
        "x86",
        "elf",
        "stack"
    ],
    "user": "jukebox",
    "time": "Jun 4, 2019 at 15:14",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "In which lines is this happening?\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "I guess this is on the <pre><code>push [ecx-0x4] var_4</code></pre>. As we are in x86-32 <pre><code>eip</code></pre> is not directly callable.\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "What compiler is giving this code ? It looks like it is changing the return address of the function from the inside of the function. It is a breach in all the ABI that I know, so it must be either a very specific function (as <pre><code>__libc_start_main()</code></pre>) or an obfuscation technique to workaround recursive traversal disassembly technique.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It was present on the stack before <pre><code>and esp, 0xfffffff0</code></pre> instruction that aligns the stack to 16 bytes. This instruction doesn't erase the data that was previously at <pre><code>esp</code></pre> (so <pre><code>ecx-4</code></pre> still points to the return address), but stack pointer points now to possibly different value than at the begining of the function. So there is a need to push the return value (<pre><code>[ecx-4]</code></pre>) on the stack so that <pre><code>esp</code></pre> points to the return address instead of some garbage data.\nFor instance, assume that previous <pre><code>esp</code></pre> value was <pre><code>0x11111118</code></pre>. Then the function return address is located at <pre><code>esp</code></pre> (i.e. equals <pre><code>[esp]</code></pre>). But after the <pre><code>and</code></pre> operation, <pre><code>esp</code></pre> now equals <pre><code>0x11111110</code></pre>, so the function return address is at <pre><code>esp+8</code></pre> address, which is not on the stack (actually below it) and <pre><code>esp</code></pre> now points to some other data, which definitely isn't the function return address. But we know that <pre><code>ecx-4</code></pre> points to that address (since <pre><code>ecx</code></pre> = <pre><code>0x11111118+4</code></pre>=<pre><code>0x1111111C</code></pre>), so we push <pre><code>[ecx-4]</code></pre> on the stack, so that <pre><code>esp</code></pre> now points to it.\n",
            "votes": "8",
            "user": "bart1e",
            "time": "Jun 4, 2019 at 12:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}