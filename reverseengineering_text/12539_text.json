{
    "title": "Trace system calls, including stack (and java stack if possible), on android?",
    "link": "https://reverseengineering.stackexchange.com/questions/12539/trace-system-calls-including-stack-and-java-stack-if-possible-on-android",
    "content": "I have an android app that reads/writes a data file which seems to be encrypted, and i want to make a tool to read/write that file, so i need to reverse the encryption.\nThe app in question consists of a few hundred classes and several .so libraries, and grepping through the classes and the output of <pre><code>strings</code></pre> on the .so files doesn't find the name of the game file (i tried case-sensitive, omitting the extension, and all that stuff), so the \"easy\" way to find the function doesn't work. So, what i want to do is intercept calls to the <pre><code>open</code></pre> system call, and check the stacks (dalvik and C) for the callers.\nOn Windows, this is quite easy using <pre><code>procmon</code></pre> which saves the stack of each system call; on Linux, there is <pre><code>strace -i</code></pre> which doesn't give me a stack backtrace, but at least an IP value; also, i could make a named pipe having the filename in question to make the app block on opening it and attach gdb to get the backtrace.\nThe problem with using <pre><code>strace</code></pre> and or a debugger on android is that i a) it seems to be non-trivial to get a version of <pre><code>strace</code></pre> that works with a particular OS level of android, b) when i try the named pipe approach, the app just exits, c) unless the whole encryption stuff is done in one of the <pre><code>.so</code></pre> libraries, i need the Java stack as well.\nI found jtrace which seems to be a replacement for <pre><code>strace</code></pre>, but doesnt show the stack, and this question has some links, but they seem to be targetted at instrumentation/profiling, not what i need.\nSo the question really is in the title: Is there a tool that traces system calls on android, and shows the stack trace, like <pre><code>procmon</code></pre> does on windows, including the java stack if possible? Or another idea to quickly find the code that opens and decrypts the file?\nIf all else fails, i'll probably attach IDA to the process, put a breakpoint on <pre><code>open</code></pre>, and write a breakpoint condition that checks the file name. But that still won't give me the java stack, and i'd like to avoid the effort if there's a \"nicer\" tool.\n",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "android",
        "java",
        "callstack",
        "system-call",
        "dalvik"
    ],
    "user": "Guntram Blohm",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Sigtran",
            "text": "Have you tried simply chmod 000 /location/to/datafile and using the logcat Monitor to see the error message your apk generates?\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "@Sigtran: I like the idea. Unfortunately, the log did contain an error message entry, but no stack backtrace.\n",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "You might be able to get some mileage out github.com/CalebFenton/simplify or at least from modifying smalivm so it does what you want\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "I'll be releasing an open-source tool next month to do exactly what you need: https://recon.cx\n",
            "time": null
        },
        {
            "user": "mlr",
            "text": "Guntram Blohm. Did you get suitable solution for you problem? I'm now fighting with same problem.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "you can get system call stack with strace too. you just need to compile strace with libunwind. After that you just need to use -k to get system call stack for each system call.\n",
            "votes": "2",
            "user": "Rasoul",
            "time": "Mar 28, 2018 at 21:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "JavaJournal, which was built on top of the pyspresso framework, was designed specifically for tracing method calls in Java.\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Jun 20, 2016 at 23:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}