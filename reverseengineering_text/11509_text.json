{
    "title": "Self modifying codes",
    "link": "https://reverseengineering.stackexchange.com/questions/11509/self-modifying-codes",
    "content": "Recently I have found the article Using UPX as a Security Packer. Here, UPX is patched, after decompressing, also restores some overwritten bytes. This way, if somebody decompresses the binary with <pre><code>upx -d</code></pre> in order to analyse it, will obtain a nonworking binary.\nAn other solution to prevent static analysis is to encrypt a part of the code and decrypt it at runtime using <pre><code>mprotect</code></pre> from C.\nSo actually both methods can be used to encrypt code, the only difference being, that in the first case the elf entry point is modified, and the stub restores the original code, in the second case the execution starts from the original entry point. The latter method seems to be more simple. If I want to protect my binary from disassembling, does the second method has any disadvantage compared to the first one? I think without antidebugging tricks both methods can be reversed the same way, and when decrypting is done memory can be dumped.\n",
    "votes": "3",
    "answers": 1,
    "views": "357",
    "tags": [
        "anti-debugging"
    ],
    "user": "robert",
    "time": "Dec 11, 2015 at 13:34",
    "comments": [],
    "answers_data": [
        {
            "content": "If I want to protect my binary from disassembling, does the second\n  method has any disadvantage compared to the first one?\n\nThe second method requires that you have access to the source code¹, whereas you can apply the first method if all you have is the binary.\nHowever, before employing either (or both) of these methods, keep in mind that they're both trivial to overcome via dynamic reverse engineering.\n¹ You don't actually need the source code, but it's a much bigger pain to apply the first method relative to the second if you don't have the source code.\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Dec 14, 2015 at 15:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}