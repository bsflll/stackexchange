{
    "title": "How to disable relro while compilation?",
    "link": "https://reverseengineering.stackexchange.com/questions/27680/how-to-disable-relro-while-compilation",
    "content": "My doubt is how to compile the binary without <pre><code>RELRO</code></pre>? and why it is enabling FULL-RELRO when we are not providing any flags?\nThis is the code.\n<pre><code>#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, int *argv[])\n{\n    size_t *p = (size_t *) strtol(argv[1], NULL, 16);\n    p[0] = 0xDEADBEEF;\n    printf(\"RELRO: %p\n\", p);\n    return 0;\n}\n</code></pre>\nWhile compiling the above code with the parameters:\n<pre><code>$ gcc -g -Wl,-z,relro -o test test.c\n</code></pre>\nAnd running the <pre><code>checksec</code></pre> on the generated binary:\n<pre><code>RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH  Symbols     FORTIFY Fortified   Fortifiable  FILE\nPartial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   69 Symbols     No   0       1   test\n</code></pre>\nCompiling with the following command:\n<pre><code>$ gcc -g -Wl,-z,relro,-z,now -o test test.c\n</code></pre>\nAnd running the <pre><code>checksec</code></pre> on generated binary:\n<pre><code>RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH  Symbols     FORTIFY Fortified   Fortifiable  FILE\nFull RELRO      No canary found   NX enabled    PIE enabled     No RPATH   No RUNPATH   71 Symbols     No   0       1   test-full\n</code></pre>\nWhile compiling with the command:\n<pre><code>$ gcc -o test test.c\n</code></pre>\nAnd running the <pre><code>checksec</code></pre> on the generated binary:\n<pre><code>RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH  Symbols     FORTIFY Fortified   Fortifiable  FILE\nFull RELRO      No canary found   NX enabled    PIE enabled     No RPATH   No RUNPATH   66 Symbols     No   0       1   test\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "elf",
        "compilers",
        "gcc",
        "security"
    ],
    "user": "neeraj",
    "time": "Nov 29, 2022 at 7:14",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "In all likelihood <pre><code>gcc -dumpspecs</code></pre> has the answer as to why it happens when you don't give the linker flag explicitly to the compiler driver. For example the packaged GCC on Ubuntu 20.04 appears to behave that way. So why not try <pre><code>-Wl,-z,norelro</code></pre> instead? Also: this isn't exactly reverse engineering related, or where do you see the connection? Better to ask this on StackOverflow or so.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "To enable full relro:\n<pre><code>-Wl, -z,relro,-z,now\n</code></pre>\nWhat does this do? - it provides <pre><code>-z,relro,-z,now</code></pre> flag to linker as an argument. This enables full relro (notice <pre><code>-z,now</code></pre> flag).\nPartial relro is enabled by default on modern gcc compilers.\nHow to disable relro? Pass following flag\n<pre><code>-Wl,-z,norelro\n</code></pre>\nDifference between full and partial relro: partial relro makes partial .got section (non .plt) section read-only and changes the alignment order sections making <pre><code>.got</code></pre> section appear before and data sections (<pre><code>.bss</code></pre>, '.data') and makes , while full relro makes complete <pre><code>.got</code></pre> section read-only (including .got.plt) and also reorders sections like in partial relro (incurring startup overhead).\n",
            "votes": "6",
            "user": "R4444",
            "time": "May 19, 2021 at 4:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dhwani Katagade",
                    "text": "<span class=\"comment-copy\">My observation on Ubuntu 22.04 gcc 11.4.0 was that full relro (not partial relro) was the default. To enable partial relro I had to provide the option -Wl,-z,relro,-z,lazy.</span>",
                    "time": null
                }
            ]
        }
    ]
}