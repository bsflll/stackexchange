{
    "title": "How to log every memory read/write action and the registers of the action? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/10937/how-to-log-every-memory-read-write-action-and-the-registers-of-the-action",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nDuring runtime. With minimal performance impact on the target.\nPlatform is Windows 7.\nObjective is to gather a lot of data for clustering and ML. To ultimately assist with protocol reversing. All input will also be logged including packets (decrypted).\n",
    "votes": "0",
    "answers": 1,
    "views": "98",
    "tags": [
        "tools"
    ],
    "user": "Mike Trebulay",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "There is no way you're going to be able to do this online -- the overhead of tracking registers and memory read/writes is way too high. However, you could instead use a technique called record & replay to log the nondeterministic inputs to the system. The overhead of this is reasonable and still allows programs to run normally. Then you can replay and do heavyweight logging.\nThe general approach is described in the paper Decoupling dynamic program analysis from execution in virtual environments. This is the approach that PANDA is built around. If you want a large set of traces to work off of, we have a database of around 24,000 malware traces, and it is fairly simple to write a PANDA plugin to collect the memory and register traces you want.\n",
            "votes": "2",
            "user": "Brendan Dolan-Gavitt",
            "time": "Sep 23, 2015 at 22:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}