{
    "title": "Help in reverse engineering a boarding gate scanner's firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/31165/help-in-reverse-engineering-a-boarding-gate-scanners-firmware",
    "content": "I'm working on a custom Access Control system for my local airport that will validate passengers' boarding passes and I've been given two DESKO GRSK 502 scanners.\nUnfortunately, there's absolutely no documentation available on them and the manufacturer is not willing to disclose any information on how the scanners operate even though they reached End of Service in 2020.\nI managed to find a script that is used to update its firmware and it appears to contain what I've been looking for.\nI am a complete newbie when it comes to reverse engineering, so the only things I've managed to get from the firmware are some random command strings. Unfortunately, however, the scanner always returns a 'Negative Acknowledge' response, so I'm guessing it expects some initialization command before accepting any others.\nHere is the firmware itself: https://pastebin.com/UDgne3Q8\nI used Hex2Bin to convert the firmware file to a .bin file and the loaded it up on IDA Pro. Upon Googling, I came across this blog post which mentions that IDA Pro should be provided with the processor's ROM start address in order to decompile it properly.\nHere's the inside of the scanner:\n\nI assumed that the processors is 'P80C5521BA', but there's no information on NXP's website on its ROM start address.\nI would appreciate any help I can get in extracting any information from that firmware file. üôè\nThank you!\n",
    "votes": "2",
    "answers": 1,
    "views": "159",
    "tags": [
        "firmware"
    ],
    "user": "Gavouli",
    "time": "Jan 5, 2023 at 10:37",
    "comments": [],
    "answers_data": [
        {
            "content": "The CPU in the <pre><code>P80C552</code></pre> microcontroller is a <pre><code>80C51</code></pre>.\nAfter reset, this begins execution at address <pre><code>0x0000</code></pre>.\nA quick inspection of your firmware hex file confirms this.\nThis is -\n<pre><code>:03000000020403F4\n\n=>\n0000:  020403    LJMP $0403  // long jump to address `0x0403`\n</code></pre>\nIf we follow this -\n<pre><code>:10040000320178C2AFC2977581AD90FFD043820FA1\n\n=>\n\n0403:  C2AF      CLR IE.7 // disable all interrupts\n....\n</code></pre>\nAfter disabling interrupts, the code continues as typical reset code, setting the stack pointer, data pointer etc.\nThis confirms that address <pre><code>0000</code></pre> is a plausible start address for your firmware.\nHowever, to actually use it in IDA you need to be aware that the 8051 has a Harvard architecture. Please look at the related question & answer here for details.\n",
            "votes": "1",
            "user": "Ian Cook",
            "time": "Nov 23, 2022 at 21:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}