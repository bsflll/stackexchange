{
    "title": "patch function in ARM binary to always return 0",
    "link": "https://reverseengineering.stackexchange.com/questions/14152/patch-function-in-arm-binary-to-always-return-0",
    "content": "I have an ARM binary in which I want to patch a function to always return 0.\nMy understanding is this means I need to set <pre><code>r0</code></pre> register to 0.\nThe disassembly looks like this\n<pre><code>STMFD           SP!, {R4-R6,LR}\n<lots of code>\nLDMFD           SP!, {R4-R6,PC}\n</code></pre>\nCan I overwrite all of this with a <pre><code>mov r0, 0</code></pre> -> <pre><code>0000A0E3</code></pre> followed by a return (<pre><code>mov pc, lr</code></pre> -> <pre><code>0EF0A0E1</code></pre>)?\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "arm",
        "patching"
    ],
    "user": "Remko",
    "time": "Dec 12, 2016 at 13:00",
    "comments": [],
    "answers_data": [
        {
            "content": "As you stated, returning in ARM/Thumb is to set the R0 register and return.\nYou can patch the program a number of ways to do what you want. You can replace the top most instructions with <pre><code>mov r0, 0</code></pre> and <pre><code>mov pc, lr</code></pre> and leaving the remaining code as is would make it not execute those instructions after <pre><code>mov pc, lr</code></pre> and just return to the calling function.\n<pre><code>MOV R0, 0\nMOV PC, LR\n// leave the rest as is, it wont execute\n</code></pre>\nYou can also patch starting after  STMFD SP!, {R4-R6,LR} with MOV R0, 0 and then nopping all the way to the return statement LDMFD SP!, {R4-R6,PC}.\n<pre><code>STMFD SP!, {R4-R6,LR}\nMOV R0, 0\n// NOP ALL THE WAY TO:\nLDMFD SP!, {R4-R6,PC}\n</code></pre>\nYou can also just patch starting after <pre><code>STMFD SP!, {R4-R6,LR}</code></pre> with <pre><code>MOV R0, 0</code></pre> and then replacing the following instruction with <pre><code>LDMFD SP!, {R4-R6,PC}</code></pre> to return early making the rest of the code below it un-executed.\n<pre><code>STMFD SP!, {R4-R6,LR}\nMOV R0, 0\nLDMFD SP!, {R4-R6,PC}\n// leave the rest as is, it wont execute\n</code></pre>\n",
            "votes": "2",
            "user": "Ghassan Idriss",
            "time": "Dec 12, 2016 at 18:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">Yes that is what I expected but was unsure if the <code>STMFD / LDMFD</code> was required to balance the stack</span>",
                    "time": null
                }
            ]
        }
    ]
}