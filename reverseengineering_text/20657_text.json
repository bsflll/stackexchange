{
    "title": "IDA Python get struct type with dependencies",
    "link": "https://reverseengineering.stackexchange.com/questions/20657/ida-python-get-struct-type-with-dependencies",
    "content": "Over the IDA Gui it is possible to export a structure with dependencies to a header file. For example if I export a struct that has one member from type DWORD than the header file also contains \"typedef unsigned int DWORD\".\nI want to do a similar task with the python api.\n<pre><code>def get_member_type(struct, idx):\n   member = ida_struct.get_member(struct, idx)\n   tif = tinfo_t()\n   ida_struct.get_member_tinfo(member, tif)\n   return tif\n</code></pre>\nThis function return the type of the struct members for example \"DWORD\" but how can I get the information that this is a unsigned int?\n",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "python"
    ],
    "user": "AdministrativeChip4",
    "time": "Feb 7, 2022 at 17:46",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "You can use the difference in size or offset value.\n",
            "time": null
        },
        {
            "user": "KulaGGin",
            "text": "You're confusing things. You're asking about a local type but show example how you get a member of assembly structure, not a local type(there are 2 windows: Structures and Local Types).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>print_decls(ordinals_sring, flags)</code></pre> return a string with the same content as the \"export to header file\" option in the GUI.\nThe ordinals string can contain multiple ordinals seperated with a comma and all PDF_ Flags can be used (for example PDF_INCL_DEPS).\n",
            "votes": "2",
            "user": "AdministrativeChip4",
            "time": "Feb 22, 2019 at 9:26",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "This works perfectly for me, it even delineates <pre><code>int</code></pre> from <pre><code>int32_t</code></pre>.\n<pre><code>def get_member_typename(sid, offset):\n    s = ida_struct.get_struc(sid)\n    m = ida_struct.get_member(s, offset)\n    tif = ida_typeinf.tinfo_t()\n    if ida_struct.get_member_tinfo(m, tif):\n        return tif.__str__() \n    return \"\"    \n</code></pre>\n",
            "votes": "2",
            "user": "Orwellophile",
            "time": "Jan 12, 2021 at 19:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}