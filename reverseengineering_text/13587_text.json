{
    "title": "Getting Access Violation when patching a program",
    "link": "https://reverseengineering.stackexchange.com/questions/13587/getting-access-violation-when-patching-a-program",
    "content": "I'm very very newbie in assembly / ollydbg / reverse engineering. I'm totally lost with this error.\nI have created a simple program in Delphi, just to explore in ollydbg. Here is the program's code:\n<pre><code>procedure TForm1.SpeedButton1Click(Sender: TObject);\nvar somevalue : string;\nbegin\n    somevalue := 'this is a value';\n    showmessage(somevalue);\nend;\n</code></pre>\nSo I attached it in olly and searched for the string \"this is a value\" and reached this point:\n<pre><code>MOV EDX, 0045212C\n</code></pre>\nthe address <pre><code>0x45212C</code></pre> contains my string, so I decide to put another value in an empty address (I choose 00400400).\nThe problem is that when I change the code to\n<pre><code>MOV EDX, 400400\n</code></pre>\nI get the following error:\n\nAccess violation when writing to [004003F8]\n\nWhich contains the following assembly line:\n<pre><code>LOCK INC DWORD PTR DS:[EDX-8]\n</code></pre>\nWhat does this error mean and how can I fix it?\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "ollydbg",
        "x86",
        "patching"
    ],
    "user": "Jo√£o Telles",
    "time": "Oct 1, 2016 at 21:05",
    "comments": [],
    "answers_data": [
        {
            "content": "This error means that the processor tried to access the address at <pre><code>0x004003F8</code></pre> and failed. The access type was write.\nThis can happen because that address's page is protected and cannot be written to, or because the address is unallocated.\nI'ts crusial to note that the address, <pre><code>0x004003F8</code></pre> is eight bytes before your chosen address (<pre><code>0x00400400</code></pre>). I guess the access violation happened because that address is unallocated.\nThe best guess given the information you provided is that although the textual string starts at that specific address, it is only part of the bigger in-memory structure that begins before the actual text.\nThis is actually quite common, and correct for all managed/object oriented programming languages. and is indeed the cause for Delphi's <pre><code>string</code></pre> objects, as described here including memory representation specifics.\nThe line in which you get an access viloation is also of some interesting capacity and could be unclear to the uneducated reverser.\n<pre><code>LOCK INC DWORD PTR DS:[EDX-8]</code></pre>\nAnd here's the instruction's parts described one by one:\n\n<pre><code>LOCK</code></pre> is an instruction prefix that modifies the instruction following it, which is assumed to be preforming a read/modify/write operation. It guarantees the instruction following it is atomic, and prevents race conditions with other instructions modifying the same memory address.\n<pre><code>INC</code></pre> has a single operand (either a register or a memory address) and increases it by one.\n<pre><code>DWORD</code></pre> marks the provided operand points to a double-word value (that is, 4 bytes).\n<pre><code>DS:</code></pre> tells the address is in the data segment. This became quite redundant in 32 and 64 bit architectures so you can normally just ignore it.\n<pre><code>[EDX-8]</code></pre> is the actual operand, and represents \"the address 8 bytes before the value currently in <pre><code>EDX</code></pre>.\n",
            "votes": "5",
            "user": "NirIzr",
            "time": "Sep 30, 2016 at 23:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">And note that the <code>[edx-8]</code> accesses the field that, in the description, is called <b>reference count</b>. As <code>lock</code> is used to make an instruction multithreading-safe, this makes sense as the string reference count is incremented whenever a new reference to the string gets created. To answer your question about how to fix it: copy your string to <code>4000040C</code>, and copy the 12 bytes in front of the original string to <code>40000400</code>. Don't forget to adjust the string length at <code>40000008</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}