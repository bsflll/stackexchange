{
    "title": "Issues writing a bootloader in x86 16-bit machine code",
    "link": "https://reverseengineering.stackexchange.com/questions/3575/issues-writing-a-bootloader-in-x86-16-bit-machine-code",
    "content": "I am having trouble displaying simple text.\nI am trying to do it all in machine code with <pre><code>INT 10h</code></pre>, but:\n\nI can't find the binary opcode for <pre><code>INT 10h</code></pre> anywhere in the Intel Manual.\nI can't figure out how to load the binary ASCII representation of \"Hello world!\" in to the data segment register (<pre><code>DS</code></pre>, which needs 12 bytes of data to represent the full text data).\n\nI considered doing it by writing directly to memory-mapped VGA memory, but that appeared harder than using interrupts from BIOS. And I'm not fully knowledgeable on this full scope of how that'd work.\nCan anyone help me sort this out here, please? I don't need help with x86 instructions per se, but with how I'd encode this all in binary properly, and where to find all interrupts' opcodes.\n",
    "votes": "2",
    "answers": 2,
    "views": "366",
    "tags": [
        "memory",
        "encodings",
        "machine-code"
    ],
    "user": "Tomahawker",
    "time": "Aug 6, 2018 at 7:55",
    "comments": [
        {
            "user": "Stolas",
            "text": "You might want to read: wiki.osdev.org/Main_Page  Grab an Ascii table for figuring out the binairy code for the ascii string. Also, the title is a bit weird. As there have been 16-bit bootloaders, remember windows3.11 for example. Lastly, this should be on stack overflow. For RE-SE (this one) I'd recommend you try to reverse a 16-bit bootloader :)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "To call an interrupt, you'll probably want to use <pre><code>int imm8</code></pre> which is encoded as <pre><code>0xcd</code></pre>, <pre><code>0xnn</code></pre> (<pre><code>0x10</code></pre> in this case).\nFor bootloaders, it's pretty common to stick the data in between the <pre><code>jmp</code></pre> at the start of the bootloader and its target. You don't really need to mess around with <pre><code>ds</code></pre> unless you're making a very large bootloader (which loads additional sectors from disk).\n\nFor an interrupt reference, should you need such a thing, I'd probably suggest Ralph Browns Interrupt List.\n",
            "votes": "5",
            "user": "perror",
            "time": "Jan 29, 2014 at 8:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Regarding (2), you don't load the entire string into the segment register, you take the selector for the memory region that holds the string, and place that into the segment register.  For 16-bit bootloader environment, it's probably going to be the same as CS, so you just <pre><code>push cs, pop ds</code></pre> (though usually <pre><code>cs=ds=es=ss</code></pre> already on startup, anyway).\nTo write to the video memory, just load <pre><code>0xb800</code></pre> into <pre><code>es</code></pre>, and then the brute-force way to write to the screen looks like:\n<pre><code>mov es:[0], 'H'\nmov es:[2], 'e'\nmov es:[4], 'l'\nmov es:[6], 'l'\nmov es:[8], 'o'\n</code></pre>\nAnd, so on. This is not the optimal way, of course.  Normally, you would use a loop and a string operation, or just use the BIOS calls.\n",
            "votes": "4",
            "user": "perror",
            "time": "Feb 2, 2014 at 13:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}