{
    "title": "Why is IDA call analysis failing?",
    "link": "https://reverseengineering.stackexchange.com/questions/15473/why-is-ida-call-analysis-failing",
    "content": "I am trying to reverse an ELF (C++) binary using IDA v6.95. Decompiler complains that the call analysis is failing. I am attaching the IDB database. What can I do to fix the IDB?\n",
    "votes": "2",
    "answers": 2,
    "views": "14k",
    "tags": [
        "ida",
        "decompiler"
    ],
    "user": "sherlock",
    "time": "Jun 3, 2017 at 9:26",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>Call analysis failed at: 08048B19</code></pre> \nThe instruction at that location:\n<pre><code>call __ZNSaIcEC1Ev ; std::allocator<char>::allocator(void)\n</code></pre>\nNow decompile this function: \n<pre><code>int __stdcall std::allocator<char>::allocator(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8) {\n    return std::allocator<char>::allocator(a1, a2, a3, a4, a5, a6, a7, a8);\n}\n</code></pre>\nNotice that hexrays has the function signature wrong, it expects too many arguments. After changing it to:\n<pre><code>void __stdcall std__allocator_char___allocator()\n</code></pre>\nThe main functon will decompile.\nNote that hexrays doesn't accept the template arguments <pre><code><char></code></pre> and namespace specifier <pre><code>std::</code></pre> in a function prototype.\nSince changing the prototype does not rename the function you can replace the function name with any name, as long as ida considers it valid.\n",
            "votes": "2",
            "user": "Willem Hengeveld",
            "time": "Jun 6, 2017 at 6:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Doesn't work for me. Can you please share your IDB?</span>",
                    "time": null
                },
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">ah, i made a typo: the function signature should be: <code>void __stdcall std__allocator_char___allocator()</code>  without the &lt; and &gt;</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "the <pre><code>IDB database</code></pre> can not open now.\nlist my case for other refer:\nError case\nin IDA:\n\ncaller: <pre><code>some_parent_function</code></pre>\n\ncallee: <pre><code>sub_9D6B278</code></pre>\n\n\n\nin <pre><code>some_parent_function</code></pre>, do <pre><code>F5</code></pre>=<pre><code>decompile</code></pre>, report error:\n<pre><code>Decompilation failure: 9D6ADDC: call analysis failed</code></pre>\n\nError Reason\n\ncall analysis failed\n\nthe decompiler could not determine the calling convention and the call parameters.\n\n\n\n->\n\n= decompiled function's parameter number is wrong\n\n= (probably) decompiled function have too many parameters\n\n\n\n->\n\nhere <pre><code>sub_9D6B278</code></pre>'s decompiled function have too many parameters, which seems is wrong\n\n<pre><code>sub_9D6B278</code></pre> decompiled pseudocode\n<pre><code>void __usercall sub_9D6B278(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, __int64 a8, __int64 a9, __int64 a10, ...)\n{\n  va_list va; // [xsp+50h] [xbp+50h]\n\n  va_start(va, a10);\n  _Block_object_dispose(va, 8);\n}\n</code></pre>\nSolution\n\ncall analysis failed\n\nIf this is a direct non-variadic call, you can fix it by specifying the callee type: just jump to the callee and hit Y to specify the type.\nFor variadic functions too it is a good idea to specify the type, but the call analysis could still fail because the decompiler has to find out the actual number of arguments in the call.\n\n\n\nmeans:\n\n<pre><code>change decompiled function's type/definition</code></pre>\n\n== change function to correct number of parameters\n\n\n\nhow to know what is the correct number of parameters?\nyou should look inside the error callee function assembly code\ntry to understand it real used parameters (and better to understand it internal logic)\nhere related assembly code is:\n<pre><code>sub_9D6B278</code></pre> disassembly code\n<pre><code>__text:0000000009D6B278 ; =============== S U B R O U T I N E =======================================\n__text:0000000009D6B278\n__text:0000000009D6B278\n__text:0000000009D6B278 ; __int64 __fastcall sub_9D6B278(int, char)\n__text:0000000009D6B278 sub_9D6B278       ; CODE XREF: -[NSObject bdp_addObserverForKeyPaths:identifier:options:context:task:]+1D8↑p\n__text:0000000009D6B278                                         ; __text:0000000009D6AF04↑p\n__text:0000000009D6B278\n__text:0000000009D6B278 arg_50          =  0x50\n__text:0000000009D6B278\n__text:0000000009D6B278                 ADD             X0, SP, #arg_50 ; void *\n__text:0000000009D6B27C                 MOV             W1, #8  ; int\n__text:0000000009D6B280                 B               __Block_object_dispose\n__text:0000000009D6B280 ; End of function sub_9D6B278\n</code></pre>\nand can figure out: only two real parameter\nhow to edit/change function type/definition ?\nso here change function to correct <pre><code>two parameters</code></pre>:\ncursor selected function name -> right click -> Set Type (Y)\n\nchange from (too many, wrong number of parameter) :\n\n<pre><code>__int64 __fastcall sub_9D6B278(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char)</code></pre>\n\n\n\n\n\nto (correct number of parameter):\n\n<pre><code>__int64 __fastcall sub_9D6B278(int, char)</code></pre>\n\n\n\n\n\n\nthen decompiled is OK:\n",
            "votes": "0",
            "user": "crifan",
            "time": "Jun 23, 2022 at 1:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}