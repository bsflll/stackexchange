{
    "title": "There is any way to see the subroutine local variables values and who actually access them?",
    "link": "https://reverseengineering.stackexchange.com/questions/16480/there-is-any-way-to-see-the-subroutine-local-variables-values-and-who-actually-a",
    "content": "I know that it exists gdb, but i'm talking about windows, i would like know if there is any way to see who access to current stackframe of a specified variable on an X subroutine...\ni've tried using CE using the \"Find out what accesses this address\" option through the stackframe but the stackframe logically it's dynamic then i get over 2000 registers...\n",
    "votes": "2",
    "answers": 1,
    "views": "278",
    "tags": [
        "assembly",
        "stack-variables",
        "tracing",
        "local-variables"
    ],
    "user": "MindLerp",
    "time": "Oct 4, 2017 at 8:55",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "I'm not sure if I understand you correctly. Can you post how you do it in gdb?\n",
            "time": null
        },
        {
            "user": "MindLerp",
            "text": "@Paweł Łukasik I'm not on linux, but i'm looking something like that for windows... meanwhile i'm using breakpoints and capturing on an X time the stackframe activity...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you have a debugger with access to symbols, then you can run to the start of the function, and then place watches on the symbol names.\nIn the absence of a debugger, if you can hook the function itself, then one way to do it is this:\n\nsave the original few bytes in the routine, and install a hook;\nresume execution;\nwhen your hook code gains control, create a hardware breakpoint on the address(es) of interest, and an exception handler to receive notifications on access;\nset the stack parameters, etc, appropriate to call the original function at the point after your hook code (e.g. EIP+5).  Calling the function manually in this way will simplify the next step.\nwhen the function returns, remove the hardware breakpoint, clean the stack to remove the original invocation, and return to the caller.\n",
            "votes": "2",
            "user": "peter ferrie",
            "time": "Oct 6, 2017 at 16:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "MindLerp",
                    "text": "<span class=\"comment-copy\">I'm doing something like that, but without an <code>VEH</code>, i'm tracing the stackpointer, so if i have an local variable like <code>[esp+0x88]</code> then i trace the total address on an X time with breakpoints into of subroutine logically, anyway i will try your way... thanks you.</span>",
                    "time": null
                }
            ]
        }
    ]
}