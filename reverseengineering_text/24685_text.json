{
    "title": "Ghidra Python - Get Decompile Line Text by RVA",
    "link": "https://reverseengineering.stackexchange.com/questions/24685/ghidra-python-get-decompile-line-text-by-rva",
    "content": "Is there a way in Ghidra Python to get the corresponding decompile line by <pre><code>RVA</code></pre>? \nOr the opposite - get the corresponding <pre><code>RVA</code></pre> from a given line in a decompile?\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        "python",
        "ghidra"
    ],
    "user": "macro_controller",
    "time": "Apr 11, 2020 at 10:23",
    "comments": [],
    "answers_data": [
        {
            "content": "I don't know how any examples how you could get the line like Ghidra would render it, but as a start you can look at https://github.com/schlafwandler/ghidra_ExportToX64dbg.\nThe basic idea is to walk the C-AST and extract the ClangStatements that have a corresponding RVA.\nThis has limitations, namely:\n\nAt the moment the source code export is limited to elements that appear as <pre><code>ClangStatement</code></pre> in the <pre><code>ClangTokenGroup</code></pre> returned by <pre><code>getCCodeMarkup()</code></pre>. This works fine for most variable assignments and function calls, but excludes most control flow altering constructs (like <pre><code>if</code></pre>, <pre><code>for</code></pre> or <pre><code>while</code></pre>).\n\nIf you really need the line and not the ClangStatement, my first idea is to search for the Ghidra code that renders the AST, find the part where a line is rendered and extend it to retain a mapping from a line to a list of ClangStatements used in that line. Then you can iterate over the lines and filter for those that use a statement that has the RVA you are interested in.\n",
            "votes": "1",
            "user": "Florian Magin",
            "time": "Apr 11, 2020 at 13:42",
            "is_accepted": true,
            "comments": []
        }
    ]
}