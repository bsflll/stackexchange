{
    "title": "Are there any open source test suites for testing how well a disassembler performs?",
    "link": "https://reverseengineering.stackexchange.com/questions/74/are-there-any-open-source-test-suites-for-testing-how-well-a-disassembler-perfor",
    "content": "A key tool in reverse engineering is a good disassembler, so to ensure that a disassembler is performing properly, are there any good test suites available for use to test the correctness of a disassembler?  Are these architecture specific, or can they be configured to work across multiple object architectures?  A good test should include checking the more obscure architecture instructions and malformed portable execution files.\nHere is one specifically for i86 that I have seen.  Are there any that are modular across architectures?\n",
    "votes": "16",
    "answers": 5,
    "views": "1k",
    "tags": [
        "tools",
        "disassembly"
    ],
    "user": "WilliamKF",
    "time": "Mar 20, 2013 at 18:30",
    "comments": [
        {
            "user": "Andrew",
            "text": "When you say \"correctness of a disassembler\", do you mean correctness of an instruction decoder, or, do you mean correct control flow graph recovery and other kinds of high-level semantic information?\n",
            "time": null
        },
        {
            "user": "WilliamKF",
            "text": "Well, which is the more interesting question?  I'm guessing the later, correct flow graph recovery...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is a paper called \"N-version Disassembly: Differential Testing of x86 Disassemblers\" (PDF) by  Roberto Paleari, Lorenzo Martignoni, Giampaolo Fresi Roglia, and Danilo Bruschi which compares several x86 disassemblers in a formal fashion.\nTo quote the papers abstract:\n\nThe output of a disassembler is used for many different purposes\n  (e.g., debugging and reverse engineering). Therefore, disassemblers\n  represent the ﬁrst link of a long chain of stages on which any\n  high-level analysis of machine code depends upon. In this paper we\n  demonstrate that many disassemblers fail to decode certain\n  instructions and thus that the ﬁrst link of the chain is very weak. We\n  present a methodology, called N-version disassembly, to verify the\n  correctness of disassemblers, based on differential analysis\n\nNot sure if this is slightly off topic to your question but may be of interest to you.\n",
            "votes": "14",
            "user": "Ruslan",
            "time": "Aug 24, 2015 at 14:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Andrew",
                    "text": "<span class=\"comment-copy\">Interesting paper! Not a wholly surprising conclusion. Godefroid and Taly have an MSR TR (<a href=\"http://research.microsoft.com/apps/pubs/default.aspx?id=156020\" rel=\"nofollow noreferrer\">research.microsoft.com/apps/pubs/default.aspx?id=156020</a>) where they automate instruction synthesis and discovered errors in their manually specified semantics.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "In a lot of papers I've read, decompilation tool authors use the SPEC benchmarks to measure the effectiveness of their decompiler. This produces kind of a holistic view of how well the system works, from instruction decoding to control flow recovery. Those benchmarks aren't free or open source though. \nThe GCC and clang compilers also ship with benchmarks for testing. Those might be worth investigating.\nAlso, Regehr's csmith project can generate arbitrary C programs for compiler testing/fuzzing. This could be useful for testing decompilers and binary analysis systems?\n",
            "votes": "8",
            "user": "Andrew",
            "time": "Mar 20, 2013 at 16:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">FWIW we do use <code>cmith</code> for testing the Hex-Rays decompiler, and it does help.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The gas testcase suite that you link to is not only for i386.  The parent directory contains test cases for x86-64, arm, alpha, and many other architectures.\n",
            "votes": "6",
            "user": "Janus Troelsen",
            "time": "May 2, 2013 at 4:47",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I made a file containing all x86 opcodes (at the time) and many encoding forms, that helped me to actively find many bugs in many disassemblers (IDA, Hiew, BeaEngine, OllyDbg, XED, hte...), particularly lesser known forms and undocumented ones.\n(slightly off-topic maybe - not a ready-made test suite)\n",
            "votes": "5",
            "user": "Ange",
            "time": "Mar 22, 2013 at 13:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Janus Troelsen",
                    "text": "<span class=\"comment-copy\">Did you file bugs for all of them? Did they get fixed?</span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">I did, they were.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The radare2 project uses an extensive test-suite for each of its disassembler engine, along with more specific tests, like formats, its own analysis capabilities, …\n",
            "votes": "2",
            "user": "jvoisin",
            "time": "Aug 24, 2015 at 19:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}