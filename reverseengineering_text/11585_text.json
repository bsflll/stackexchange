{
    "title": "Find immediate values with wildcard in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/11585/find-immediate-values-with-wildcard-in-ida-pro",
    "content": "I'm reverse engineering an ARM firmware, and want to find all references to memory mapped peripherals, which in this case means 0x40000000 - 0x40007FFF.\nThese are frequently referenced using direct references.\nI can search for 0x40004400 for USART2, but would prefer to do 0x4000???? and find all references.\nIs there anyway of doing this?\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "Cybergibbons",
    "time": "Dec 18, 2015 at 0:29",
    "comments": [
        {
            "user": "tmr232",
            "text": "Making sure I got this right - you want to find all lines with 0x4000???? as an operand?\n",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "Correct - any immediate operand 0x4000???? i.e. 0x40007ABA or 0x40002AAA would both match. 0x4000 wouldn't.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Since ARM opcodes are 4-bytes each, you will not be able to find <pre><code>0x4000????</code></pre> using a simple binary search. So we have to use a more complex approach.\nOperand Search\nUsing Sark you can get the operand values from all the opcodes in the program and check them:\n<pre><code>import sark\n\nfor line in sark.lines():\n    if not line.is_code:\n        continue\n    for operand in line.insn.operands:\n        if operand.type.is_imm:\n            if 0x40000000 <= operand.value < 0x40008000:\n                print 'Reference Found at x{:08X}'.format(operand.value)\n</code></pre>\nBut this is a lot of code, and running over the entire IDB might take a while in large firmware.\nReference Search\nSince the memory-mapped peripherals are not in the firmware file itself, we need to create a new segment for it.\n<pre><code>idaapi.add_segm(0, 0x40000000, 0x40008000, 'peripherals', 'PERIPHERALS')\n# You can use more advanced APIs to make the storate sparse, and properly set all the\n# properties of the segment, but this is irrelevant now.\n</code></pre>\nOnce the segment is created, IDA will automatically create the references to it from all relevant operands (if not, you can always force autoanalysis). After the analysis is finished, all we need to do is go over the new segment and list all references to it.\n<pre><code>for line in sark.Segment(name='peripherals').lines:\n    for xref in line.xrefs_to:\n        print 'Found a reference at 0x{:08X}'.format(xref.frm)\n</code></pre>\n",
            "votes": "5",
            "user": "tmr232",
            "time": "Dec 20, 2015 at 8:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}