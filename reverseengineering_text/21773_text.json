{
    "title": "How to do debug a running java process in linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/21773/how-to-do-debug-a-running-java-process-in-linux",
    "content": "TLDR I want to do live debugging of a java program on a linux machine, and don't how/what debugger to attach to the JVM to get this done.\nI expect that this is a well-solved problem, but I lack the terminology to find a solution after several hours of searching:\nI have a java program (stored in a jar file) that I'd like to observe (reverse engineer?) it while it runs. I see a lot of decompilation support for java - this isn't what I'm interested in at all, so please refrain from explaining how to do this. A major problem I'm having in my search is running into these kinds of answer.\nIdeally, I'd:\n\nStart the program and find the PID.\nAttach a debugger to the JVM somehow (this is what I don't know how to do, and lack the language to search for, apparently)\nUse the debugger to set breakpoints, read/write arbitrary memory of the JVM, see the JVM's registers and stack.\nUse a simple, open-source command-line tool to do this, like Radare2 or GDB.\n\nI expect to be reading java bytecode (the instruction set for the JVM), not java source, while I do this.\nI am used to using Radare2 and GDB for native code (crackmes, CTF stuff, microcorruption). I also see that they both technically support Java, but I'm having a hard time figuring out how to do this, exactly.\nI need help with 2 things: what software to use and how to attach the program to the process. Bonus points if I can use radare!\nTo be clear, the Java in question is running on a linux PC, not on an Android phone or anything like that.\nI also read about JDB, but it seems like the code needs to be compiled with debug flags, and this is not possible for my situation -- it also doesn't seem like what I'm looking for.\n",
    "votes": "9",
    "answers": 2,
    "views": "10k",
    "tags": [
        "linux",
        "radare2",
        "debuggers",
        "java",
        "disassemblers"
    ],
    "user": "stacksmasher",
    "time": "Jul 26, 2019 at 19:01",
    "comments": [
        {
            "user": "Col-E",
            "text": "This isn't a lightweight solution but would you consider adding the jar to an IDE like IntelliJ and use the debugger from there? I tested it out on a small app and it worked just fine.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use jdb to attach to a running program without having compiled it with debug flags.\non my machine with jdb located at /usr/local/jdk/jdk1.8.0_202/bin/jdb\nand pid of my running java process = 14476\n<pre><code>sudo /usr/local/jdk/jdk1.8.0_202/bin/jdb -connect sun.jvm.hotspot.jdi.SAPIDAttachingConnector:pid=14476\n</code></pre>\nHowever if you did not compile your program with debugging information it is going to make debugging much harder i think.\nsee this reference for more info.\nEDIT: i also found i can view variable values of a running process easily with jvisualvm wich is a tool that comes with oracles jdk.\n1) start jvisualvm from the command line. It is located in your jdk bin folder.\n<pre><code>/usr/local/jdk/jdk1.8.0_202/bin/jvisualvm\n</code></pre>\n2) on the right side of the screen you can see the running java processes on your machine. You can then perform a heap dump (right click on process) and view the values of the variables of the classes your interested in.\n",
            "votes": "3",
            "user": "harry",
            "time": "Feb 15, 2020 at 11:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I found I also need to install one more package for the jdb attach to succeed.\n\nsudo apt-get install openjdk-8-dbg\n",
            "votes": "0",
            "user": "user44039",
            "time": "Jun 3, 2023 at 0:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}