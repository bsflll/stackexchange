{
    "title": "How to use memory address information from IDAFree to set a breakpoint in x32dbg?",
    "link": "https://reverseengineering.stackexchange.com/questions/22494/how-to-use-memory-address-information-from-idafree-to-set-a-breakpoint-in-x32dbg",
    "content": "I have a DLL paused at <pre><code>EntryPoint</code></pre> in <pre><code>x32dbg</code></pre>. I am interested in examining memory following a specific API call that this DLL makes. I found the API call in the <pre><code>imports</code></pre> section when I open the DLL in <pre><code>IDAFree</code></pre> and then I see the API function call in IDA. I follow it in code and IDA shows it's at address: <pre><code>10001B66</code></pre>\nMy problem is that when I try to set a breakpoint at this address in <pre><code>x32dbg</code></pre> (<pre><code>bp 0x10001B66</code></pre>), it gives me an error:\n\nError setting breakpoint at 10001B66! (memread)\n\nAdditionally, in <pre><code>x32dbg</code></pre>, I'm seeing addresses such as <pre><code>714A7D39</code></pre> for my DLL. Now, I'm new to this but I'm guessing that the <pre><code>memread</code></pre> error is because <pre><code>10001B66</code></pre> -- as seen in IDA -- is not a valid memory address in the context of execution in the debugger.\nSo how do I get the correct address of this API function call so that I can set the correct breakpoint?\n",
    "votes": "0",
    "answers": 1,
    "views": "9k",
    "tags": [
        "ida",
        "disassembly",
        "debugging",
        "memory",
        "x64dbg"
    ],
    "user": "learnerX",
    "time": "Nov 9, 2019 at 22:31",
    "comments": [],
    "answers_data": [
        {
            "content": "Procedure:\n\nGet base address in x64dbg: Load the binary in x64dbg. Go to \"Memory Map\" tab.\nFind the binary name in info column. Then copy the address with the right\nclick on it. For example, in the following screenshot, the x86_64 PE binary\nname is <pre><code>Project1.exe</code></pre> and the base address is <pre><code>0x00007FF6A4850000</code></pre>.\n\n\n\nRebase in IDA: Open the binary in IDA. Click on Edit > Segments > Rebase\nprogram > Enter the value which is copied from previous step.\n\n\n\nStart debugging: Find the API call in IDA. Copy the address of that instruction\nfrom assembly view. Go to \"CPU\" tab in x64dbg. Press Ctrl+G\nin x64dbg and enter the address which you want to see.\n\n\nThis procedure changes the base address of the loaded binary in IDA according to x64dbg. This can also be done manually by calculating the difference between the base address and the point where you want to set the breakpoint.\nSource: YouTube/OALabs: Disable ASLR For Easier Malware Debugging With x64dbg and IDA Pro\n",
            "votes": "3",
            "user": "Biswapriyo",
            "time": "Nov 10, 2019 at 9:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}