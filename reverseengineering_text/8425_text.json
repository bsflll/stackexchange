{
    "title": "Longest x86 Instruction [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8425/longest-x86-instruction",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI read the recent article \"Longest x86 Instruction\" \nhttp://blog.onlinedisassembler.com/blog/?p=23\nI attempted to reproduce the curious disassembly issue on a Win7x86 development platform using masm and as the article suggested, redunant prefixes.\nTalk is cheap, so here's a toy program (masm32):\n<pre><code>.386 .model flat, stdcall\n\noption casemap:none\n\nincludelib \\x\\x\\kernel32.lib\nincludelib \\x\\x\\user32.lib\n\ninclude \\x\\x\\kernel32.inc\ninclude \\x\\x\\user32.inc\ninclude \\x\\x\\windows.inc\n\n.code\n\nstart:\n\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\ndb 0F3h\n;...6 more bytes later\ndb 089h\ndb 0E5h\n\nend start\n\ninvoke ExitProcess, NULL\n</code></pre>\nAfter linking and assembling, I opened the resulting executable in windbg. \nTo my disappointment, when I single step, unassemble the $exentry, etc. windbg simply sees the prefixes/bytes as individual instructions, says 'to hell with it' and executes only the valid instructions.\nIs there something I'm missing?\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "windbg"
    ],
    "user": "grepNstepN",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "Saying 'to hell with it' seems to be the best thing a debugger can do when it sees unneccesary redundant prefixes.\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "I'm voting to close this question as off-topic because it is about processor features, not reverse engineering.\n",
            "time": null
        },
        {
            "user": "user1354557",
            "text": "On the contrary, attempting to discern the processor's behavior is a form of reverse engineering.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "So what is the actual question?\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "\"windbg .. executes only the valid instructions\" -- it cannot but execute the REPEs, but it only halts on certain positions. Similarly, it cannot stop \"in the middle of\", for example, <pre><code>mov al, fs:[ebx+4*edx]</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Is there something I'm missing?\n\nThe disconnect is that the ODA disassembler referenced in http://blog.onlinedisassembler.com/blog/?p=23 produces different output than WinDbg's disassembler given the same input.\nPerhaps what you're \"missing\" is based on the assumption that all disassemblers produce the same output given the same input, which is not a correct assumption to make.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 9, 2015 at 17:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "grepNstepN",
                    "text": "<span class=\"comment-copy\">you're right, I just realized the OS's/software's disassembler isn't 1:1 with processor behavior, e.g. like Windows not implementing Ring2 although 80386+ gives you that CPL. Updated my question on another stackExhange [link] (<a href=\"http://programmers.stackexchange.com/questions/275719/longest-x86-instruction/275750#275750\" title=\"longest x86 instruction\">programmers.stackexchange.com/questions/275719/â€¦</a>)</span>",
                    "time": null
                }
            ]
        }
    ]
}