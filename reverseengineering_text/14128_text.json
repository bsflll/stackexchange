{
    "title": "x86 sbb with same register as first and second operand",
    "link": "https://reverseengineering.stackexchange.com/questions/14128/x86-sbb-with-same-register-as-first-and-second-operand",
    "content": "I am analyzing a sequence of <pre><code>x86</code></pre> instructions, and become confused with the following code:\n<pre><code>135328495: sbb edx, edx\n135328497: neg edx\n135328499: test edx, edx\n135328503: jz 0x810f31c\n</code></pre>\nI understand that <pre><code>sbb</code></pre> equals to <pre><code>des = des - (src + CF)</code></pre>, in other words, the first instruction somehow put <pre><code>-CF</code></pre> into <pre><code>edx</code></pre>. Then it <pre><code>negtive</code></pre> <pre><code>-CF</code></pre> into <pre><code>CF</code></pre>, and <pre><code>test</code></pre> whether <pre><code>CF</code></pre> equals to zero??\nBut note that <pre><code>jz</code></pre> checks flag <pre><code>ZF</code></pre>, not <pre><code>CF</code></pre>! So basically what is the above code sequence trying to do? This is a legal <pre><code>x86</code></pre> instruction sequence, produced by <pre><code>g++</code></pre> version <pre><code>4.6.3</code></pre>.\n",
    "votes": "2",
    "answers": 1,
    "views": "6k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "lllllllllllll",
    "time": "Dec 8, 2016 at 4:57",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "post more instructions before the <pre><code>sbb</code></pre>\n",
            "time": null
        },
        {
            "user": "Arash",
            "text": "the test edx, edx will affect ZF. and about code it's hard to guess by a snipped assembly, but obviously the compiler is trying to save CF inside edx and then checking the edx (which is CF).\n",
            "time": null
        },
        {
            "user": "Cody Gray",
            "text": "Cross-site duplicate: stackoverflow.com/questions/41031912/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The sbb edx, edx statement writes either 0 or -1 to edx, depending only on the value of the carry flag. The following neg edx simply reflects the value of the initial carry flag. Thus the jz in your sequence is nothing else than a jnc statement (jmp on non-carry).\nHowever, this sequence might be found with an additional, preceding neg eax. The neg statement clears the carry in the zero case, otherwise sets it. This sequence might be used as a test for true or false, depending whether edx has some arbitrary nonzero value (true) or zero value (false). The sequence with the additional neg would then look like this:\n<pre><code>neg edx          ; clears the carry flag in the zero case, otherwise sets it\nsbb edx, edx     ; if (cf == 0) then edx == 0, else edx == -1\nneg edx          ; remains zero if initially edx has been zero, else 1\ntest edx, edx    ;\njz toSomewhere   ; jmp on edx having been zero initially\n</code></pre>\nbtw, this is one of the questions I am planning for a reversing quiz.\nHave fun!\n",
            "votes": "4",
            "user": "josh",
            "time": "Dec 9, 2016 at 0:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Cody Gray",
                    "text": "<span class=\"comment-copy\">It is certainly a question that tests one's knowledge of the instruction set, but it's otherwise <i>extremely</i> questionable code. The entire thing could be replaced with a single <code>JNC toSomewhere</code> instruction... I cannot think of a good reason why a compiler would ever generate code like this.</span>",
                    "time": null
                },
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">Of course you are right for the code without the neg in my first line. But with it, the compilers use such pattern frequently for the described true/false decisions. The MS compiler uses a slightly modified variant.</span>",
                    "time": null
                },
                {
                    "user": "Cody Gray",
                    "text": "<span class=\"comment-copy\">Yes, MSVC uses the <code>sbb</code>+<code>neg</code> pattern (combined with a trailing or leading <code>neg</code>, <code>inc</code>, or <code>dec</code> as appropriate for the logic) extensively. But <i>only</i> when it is generating branchless code. If it's going to emit a conditional branch (in this case, <code>jz</code>) anyway, there's absolutely no point in paying the penalty for all of these additional instructions.</span>",
                    "time": null
                },
                {
                    "user": "josh",
                    "text": "<span class=\"comment-copy\">Maybe the OP can unveil the secret by showing us some more of his code generated by g++...</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">@CodyGray Hey, thank you so much for your very informative replies. I learned a lot for both here and the stackoverflow. The <code>C++</code> code is actually from the <a href=\"https://botan.randombit.net/\" rel=\"nofollow noreferrer\">botan</a> project. I will try to find the corresponding source code for this instruction sequence and provide to you later. At the mean while, you can find the overall assembly code (the Botan RSA decryption example) at <a href=\"https://www.dropbox.com/s/yy1d388x7ox9az3/botan_rsa_dec.dis?dl=0\" rel=\"nofollow noreferrer\">here</a>. There are quite a lot of such instruction sequence in the disassembled code.</span>",
                    "time": null
                }
            ]
        }
    ]
}