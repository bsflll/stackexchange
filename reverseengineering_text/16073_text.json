{
    "title": "Unable to use C++ to read memory image file [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/16073/unable-to-use-c-to-read-memory-image-file",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm using winpmem to create a memory image.  I would like to create an interface that would allow a user to search for various patterns in the image.  I'm using C++ to open and read the file but I am not able to dump the contents to standard output.  I have tried to use various data types for the variable declaration that is streamed to standard output but I haven't been able to dump a text representation to the screen.  Here is my code:\ninclude \"stdafx.h\"\ninclude \"iostream\"\ninclude \"iomanip\"\ninclude \"fstream\"\nusing namespace std;\nint _tmain(int argc, _TCHAR* argv[])\n{\ndouble x;\nint i = 0;\n<pre><code>ifstream test;\n\ntest.open(\"C:\\\\Temp\\\\mem.raw\");\n\nif (!test){\n\ncerr << \"Unable to open file datafile.txt\";\n\nexit(1);   // call system to stop\n</code></pre>\n}\n<pre><code>while (test >> x) {\n\ncout << i;\n\ncout << \":\";\n\ncout << x;\n\ncout << \",\";\n\ni++;\n</code></pre>\n}\n<pre><code>test.close();\n\nreturn 0;\n</code></pre>\n}\n",
    "votes": "2",
    "answers": 0,
    "views": "268",
    "tags": [
        "c++",
        "memory-dump"
    ],
    "user": "stzy",
    "time": "7 years ago",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "seems to be about programming, not RE.\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "and the code appears to have lots of errors like declaring an uninitialised double which may contain garbage and prone to rounding errors  not using is_open but comparing ifstream object. then cimparing   the object to a doubke etc\n",
            "time": null
        },
        {
            "user": "stzy",
            "text": "double was just the last type that i used in my attempt to find the correct type.\n",
            "time": null
        }
    ],
    "answers_data": []
}