{
    "title": "Process Dumping and Ida",
    "link": "https://reverseengineering.stackexchange.com/questions/12357/process-dumping-and-ida",
    "content": "Up until now I've been performing static analysis using Ida and run time analysis using OllyDBG.\nI've identified a function in Olly which I would like to start documenting further in Ida, however I can't seem to find the function in Ida, and the executable doesn't appear to be packed or obfuscated.\nWhat could cause this? (besides user error :p)\nI've heard of dumping a process to memory, then performing static analysis on that dump file - would this make sense in the current context?\nWhat differences would there be compared to just looking at the executable? \nDoes the software used to dump the process effect it's structure - are there different types of process dumps?\nHow would I actually go about opening the dump file in Ida?\n",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "ida",
        "memory",
        "dumping",
        "process"
    ],
    "user": null,
    "time": "Apr 6, 2016 at 18:44",
    "comments": [],
    "answers_data": [
        {
            "content": "If your binary is allocating a new memory page & writing code on it, that's something you won't see on the static binary. Performing a full dump of the process from memory and loading this new binary into IDA will indeed show you those new parts. The data has to come from somewhere though (ressource, compressed, encrypted, another file, Internet, etc).\nAs you mentioning that the binary appears to be neither packed nor obfuscated, be sure to check you're not just into one of the loaded DLL of your binary (reversing one of the imported DLL might not be what you're willing to do?).\n",
            "votes": "3",
            "user": "user2823000",
            "time": "Apr 6, 2016 at 23:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}