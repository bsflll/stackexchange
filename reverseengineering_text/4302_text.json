{
    "title": "Reverse engineering Perl-compatible regular-expressions",
    "link": "https://reverseengineering.stackexchange.com/questions/4302/reverse-engineering-perl-compatible-regular-expressions",
    "content": "I'm dealing with a piece of malware that does extensive use of PCRE (Perl-compatible regular expressions). Normally I would be able to read them, but it seems they're in some kind of binary format (compiled, maybe?). They all start with <pre><code>ERCP</code></pre> (check out the hexdump below); FWIW, I strongly suspect the language that generated this code to be C++.\n<pre><code>00000150  00 00 00 00 11 00 5e 00  00 00 01 00 00 00 45 52  |......^.......ER|\n00000160  43 50 56 00 00 00 00 00  80 00 04 00 00 00 01 00  |CPV.............|\n00000170  00 00 00 00 74 00 28 00  00 00 00 00 00 00 00 00  |....t.(.........|\n00000180  00 00 00 00 00 00 5e 00  2a 5f 00 06 00 01 1a 54  |......^.*_.....T|\n00000190  00 05 1c 2e 55 00 0b 1c  61 1c 61 1c 61 1c 61 1c  |....U...a.a.a.a.|\n000001a0  61 1c 61 1c 61 1c 61 1c  2e 1c 6e 1c 65 1c 74 1b  |a.a.a.a...n.e.t.|\n000001b0  55 00 2a 00 00 00 00 00  8d ff a5 95 0a 2d 2d 2d  |U.*..........---|\n</code></pre>\nIn this example, the regex seems to match some string related to an internet domain, aaaaaaaa.net.\nMy question is: given a binary blob like this, is it possible to go back to a \"human readable\" (decompiled?) PCRE? (i.e. <pre><code>^aaaaaa\\.net$</code></pre>) If yes, how should I go about it ?\n",
    "votes": "6",
    "answers": 2,
    "views": "723",
    "tags": [
        "malware",
        "binary-analysis",
        "memory",
        "struct"
    ],
    "user": "Thomas Chopitea",
    "time": "May 10, 2014 at 10:58",
    "comments": [],
    "answers_data": [
        {
            "content": "Googling for <pre><code>0x50435245</code></pre> gives several hits, for example here:\n<pre><code>/* Magic number to provide a small check against being handed junk. Also used\nto detect whether a pattern was compiled on a host of different endianness. */\n\n#define MAGIC_NUMBER  0x50435245UL   /* 'PCRE' */\n\n<...snip...>\n\n/* The real format of the start of the pcre block; the index of names and the\ncode vector run on as long as necessary after the end. We store an explicit\noffset to the name table so that if a regex is compiled on one host, saved, and\nthen run on another where the size of pointers is different, all might still\nbe well. For the case of compiled-on-4 and run-on-8, we include an extra\npointer that is always NULL. For future-proofing, a few dummy fields were\noriginally included - even though you can never get this planning right - but\nthere is only one left now.\n\nNOTE NOTE NOTE:\nBecause people can now save and re-use compiled patterns, any additions to this\nstructure should be made at the end, and something earlier (e.g. a new\nflag in the options or one of the dummy fields) should indicate that the new\nfields are present. Currently PCRE always sets the dummy fields to zero.\nNOTE NOTE NOTE:\n*/\n\ntypedef struct real_pcre {\n  pcre_uint32 magic_number;\n  pcre_uint32 size;               /* Total that was malloced */\n  pcre_uint32 options;\n  pcre_uint32 dummy1;             /* For future use, maybe */\n\n  pcre_uint16 top_bracket;\n  pcre_uint16 top_backref;\n  pcre_uint16 first_byte;\n  pcre_uint16 req_byte;\n  pcre_uint16 name_table_offset;  /* Offset to name table that follows */\n  pcre_uint16 name_entry_size;    /* Size of any name items */\n  pcre_uint16 name_count;         /* Number of name items */\n  pcre_uint16 ref_count;          /* Reference count */\n\n  const unsigned char *tables;    /* Pointer to tables or NULL for std */\n  const unsigned char *nullpad;   /* NULL padding */\n} real_pcre;\n</code></pre>\nHere's how it looks for your dump:\n<pre><code>  dd 'PCRE'     ; magic_number\n  dd 56h        ; size\n  dd 800000h    ; options\n  dd 4          ; dummy1\n  dw 1          ; top_bracket\n  dw 0          ; top_backref\n  dw 0          ; first_byte\n  dw 74h        ; req_byte\n  dw 28h        ; name_table_offset\n  dw 0          ; name_entry_size\n  dw 0          ; name_count\n  dw 0          ; ref_count\n  dd 0          ; tables\n  dd 0          ; nullpad\n</code></pre>\nYou will probably need to read the library source and/or try compiling some regexps with it to decode the rest.\n",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "May 9, 2014 at 17:53",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "That looks like a <pre><code>real_pcre</code></pre> structure, whose format is defined here among many other places online.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "May 9, 2014 at 17:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}