{
    "title": "Reversing a Windows service",
    "link": "https://reverseengineering.stackexchange.com/questions/10910/reversing-a-windows-service",
    "content": "I am trying to reverse engineer a malware that open a windows service dynamically in OllyDbg. \nWhen the malware calls <pre><code>StartServiceCtrDispatcherW</code></pre>,  I receive an error: \n\nHow I can continue to analyze this malware dynamically?\nNote: I already used <pre><code>Image File Execution Options</code></pre>\n",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "ollydbg",
        "malware"
    ],
    "user": "Matan Revivo",
    "time": "Sep 20, 2015 at 11:55",
    "comments": [
        {
            "user": "blabb",
            "text": "is that StartServiceCtrlDispatcher\n",
            "time": null
        },
        {
            "user": "Matan Revivo",
            "text": "yes, I edit my question\n",
            "time": null
        },
        {
            "user": "conio",
            "text": "More information needed. Lets being with Windows version. What exactly did you do in IFEO? Is the service an EXE or a DLL? Who runs the service EXE?...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you want to debug the service initialization and it happens automatically (not triggered by some action you perform), you probably can't do it on any Windows newer than XP with ollydbg. You'll have to use WinDbg.\nYou need to set IFEO Debugger for your process name to run CDB as server (e.g. <pre><code>cdb.exe -server tcp:port=12345 -noio</code></pre>) and the run WinDbg as a client and connect to your server (<pre><code>windbg.exe -remote tcp:server=localhost,port=12345</code></pre>).\nYou'll probably want to change the <pre><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ServicesPipeTimeout</code></pre> Registry value to be a bit longer. This is the time the SCM waits for a service it runs to talk to it.\nIf you don't have to debug the initialization you can simply attach to the service after it starts, and then you can use ollydbg.\nAll of this and pretty much everything you need to know is documented under the MSDN page titled Debugging a Service Application.\n\nEdit: If patching the binary is possible you can add an infinite loop in the entry point like gandolf suggested and then attach a debugger after you log in.\nOr, if the binary doesn't do any SEH tricks that interfere with it: Add an exception to the entry point (0xCC - int 3 is the obvious choice), set <pre><code>AeDebug</code></pre> to a long running process (such as <pre><code>notepad.exe</code></pre>) and then attach a debugger. This is what Inside Windows Debugging proposes (p. 139).\nOr, what's even easier and makes even more sense: Add the same INT3, and set <pre><code>AeDebug</code></pre> to the same <pre><code>cdb.exe</code></pre> command-line as you would put in IFEO and connect WinDbg to it after you log in.\n",
            "votes": "5",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "gandolf",
                    "text": "<span class=\"comment-copy\">If the service points to an executable on disk, you can patch the service EntryPoint routine to EBFE (Inifnite jump loop) and change the ServicesPipeTimeout key, and attach to it with debugger at system startup as well. I've done this before with success.</span>",
                    "time": null
                },
                {
                    "user": "conio",
                    "text": "<span class=\"comment-copy\">@gandolf, if you can edit the binary you still have options that are preferable in my opinion to adding an empty tight loop. I have edited my answer to include those options (including the loop).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Well, as far as I know you can't debug service's handling code inside the debugger(proof). \nIf you really need it, I think you should stick with kernel debug of vm with malware running, but maybe someone will offer better solution - this one is the first that came to mind.\nUPD\nThere is a link in comments that covers needed basics of kernel debugging. However, after you finish with setup of all the related things, you might face with the problem of breaking on exact place where service gets started.\nI think following command will help you to go further unless you did it yourself already: \n<pre><code>bp ADVAPI32!StartServiceCtrlDispatcherW; dd esp</code></pre> or use this cheat sheet for more inspiration with Windbg.\n",
            "votes": "-1",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Matan Revivo",
                    "text": "<span class=\"comment-copy\">I don't understand your solution, can you detail your answer?</span>",
                    "time": null
                },
                {
                    "user": "josh poley",
                    "text": "<span class=\"comment-copy\">@MatanRevivo: Run your malware sample in a VM, and step through the system code with a kernel debugger attached. See <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff538143.aspx\" rel=\"nofollow noreferrer\">Setting Up Kernel-Mode Debugging...</a></span>",
                    "time": null
                },
                {
                    "user": "conio",
                    "text": "<span class=\"comment-copy\">There's no need to use kernel debugging except in pretty special circumstances (e.g. <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/ff541428(v=vs.85).aspx\" rel=\"nofollow noreferrer\">debugging winlogon</a>). The problem in your so-called \"proof\" was that the application wasn't run as a service by the SCM, but rather directly from VS. That's what the documentation for <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms686324(v=vs.85).aspx\" rel=\"nofollow noreferrer\">StartServiceCtrlDispatcher</a> says about <code>ERROR_FAILED_SERVICE_CONTROLLER_CONNECT</code>. That certainly doesn't mean that you can't use user-mode debugging.</span>",
                    "time": null
                }
            ]
        }
    ]
}