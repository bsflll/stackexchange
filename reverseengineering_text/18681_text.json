{
    "title": "Which ARM command is influencing the SP position?",
    "link": "https://reverseengineering.stackexchange.com/questions/18681/which-arm-command-is-influencing-the-sp-position",
    "content": "I do static analysis of ARM assembly code (I can't debug it).\nWhen I look on argument that in <pre><code>SP+0x<SomeOffset></code></pre> I can find what I'm looking for, but if I look a few lines further down I see that this argument is not there.\nWhich ARM, command is influencing the stack pointer (SP) position?\nI don't see any add/sub to <pre><code>SP</code></pre>, the only commands that I see is <pre><code>ldr</code></pre> and <pre><code>str</code></pre> from <pre><code>SP</code></pre> and to <pre><code>SP</code></pre> +function <pre><code>BL</code></pre> that not touch on this argument.\nI think that even I call to function, when I finish it the <pre><code>SP</code></pre> need to be same,  and store to <pre><code>SP+offset</code></pre> or load from <pre><code>SP+offset</code></pre> don't need to change the <pre><code>SP</code></pre>.\n",
    "votes": "-1",
    "answers": 1,
    "views": "721",
    "tags": [
        "arm",
        "stack",
        "pointer",
        "offset"
    ],
    "user": "pointers",
    "time": "Jul 4, 2018 at 13:50",
    "comments": [],
    "answers_data": [
        {
            "content": "There is no specific stack pointer register in ARM. By convention <pre><code>R13</code></pre> is used as the stack pointer. There is no specific push and pop style stack pointer operands either. \nPushing and popping from the stack is carried out using the <pre><code>STM</code></pre> (store to memory) and <pre><code>LDM</code></pre> (load from memory) operands. These operands can be modified with the post fixes <pre><code>IA</code></pre> and <pre><code>DB</code></pre>. <pre><code>IA</code></pre> is increment after, and <pre><code>DB</code></pre> is decrement before.\nSo <pre><code>STMDB</code></pre> means store to memory, decrementing before the store. I.e. pushing on to a full descending stack. The inverse of this would be <pre><code>LDMIA</code></pre> which is popping from a full descending stack.\nAlternatively you can have <pre><code>STMIA</code></pre> and <pre><code>LDMDB</code></pre> which means pushing and popping on to and off of an empty ascending stack.\n<pre><code>FD</code></pre> is the synonym for full descending and <pre><code>EA</code></pre> is the synonym for empty ascending. So <pre><code>STMDB</code></pre> and <pre><code>STMFD</code></pre> are the same. <pre><code>LDMIA</code></pre>, <pre><code>LDMFD</code></pre> are the same. And so on...\nSo a full instruction would be for example...\n<pre><code>STMDB R13!, {R0 - R3}\n</code></pre>\nWhich means push <pre><code>R0</code></pre>, then <pre><code>R1</code></pre>, then <pre><code>R2</code></pre> and then <pre><code>R3</code></pre> on to a full descending stack using <pre><code>R13</code></pre> as the stack point. The address being written too is updated for each registered pushed. The <pre><code>!</code></pre> means write back and means that <pre><code>R13</code></pre> is updated with the final address so it can be used again.\n<pre><code>BL</code></pre> (branch with link) does NOT affect the stack or the stack pointer. It merely copies the current <pre><code>PC</code></pre> (<pre><code>R15</code></pre>) in to link (<pre><code>R14</code></pre>) before the jump. A simple...\n<pre><code>MOV R14, R15\n</code></pre>\n... will return you back to the original address. However many may pop link straight in to PC at the end of a subroutine. For example...\n<pre><code>.my_sub_routine\nSTMFD R13!, {R0, R1, R14}\n// Do stuff\nLDMFD R13!, {R0, R1, R15} // pop link straight in to PC meaning return.\n</code></pre>\n",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jul 4, 2018 at 13:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">in fact the newer ARM architectures do standardize R13 as SP, and STMFD/ LDMFD  instructions using it as PUSH/POP.</span>",
                    "time": null
                },
                {
                    "user": "cooperised",
                    "text": "<span class=\"comment-copy\">Moreover on most of the Cortex series cores, R13 (or SP) is an alias for one of two hardware-managed stack pointers, MSP or PSP, depending on mode and settings.  Things like interrupt requests cause automatic pushes to the active stack too.  R13 is very much a stack pointer on modern(ish) ARM architectures, and not just by convention.</span>",
                    "time": null
                }
            ]
        }
    ]
}