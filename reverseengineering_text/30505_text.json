{
    "title": "What is the outcome of mov on non bracket memory locations?",
    "link": "https://reverseengineering.stackexchange.com/questions/30505/what-is-the-outcome-of-mov-on-non-bracket-memory-locations",
    "content": "I am having problems distinguishing whether the address is loaded or the content from the address. Please help me clarify.\n<pre><code>1. mov     [rsp+78h+arg_0], rsi\n2. mov     rsi, cs:qword_1F39B60\n3. mov     [rsp+78h+arg_38], rsi\n</code></pre>\n\nIf line 2 is loading <pre><code>1F39B60</code></pre> in <pre><code>rsi</code></pre> or the contents of <pre><code>1F39B60</code></pre> in <pre><code>rsi</code></pre>?\nWould <pre><code>lea rsi, [qword_1F39B60]</code></pre> be the same?\nIf non bracket using <pre><code>mov</code></pre> action on a memory even allowed or this is just a visual IDA thing?\nCan you explain to me why it shows <pre><code>cs:</code></pre> even though <pre><code>qword_1F39B60</code></pre> is in the <pre><code>.data segment</code></pre>? Shouldn't it be <pre><code>ds:</code></pre>?\n\nLast but not the least this isn't directly connected to my main question but is <pre><code>rsp+78h</code></pre> a fancy way of saying <pre><code>rbp</code></pre> by the disassembler?\n",
    "votes": "3",
    "answers": 1,
    "views": "125",
    "tags": [
        "assembly",
        "x86-64",
        "intel"
    ],
    "user": "Sawb",
    "time": "Jun 12, 2022 at 8:49",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>rsi</code></pre> is being copied into <pre><code>arg_0</code></pre>\n<pre><code>lea rsi, [qword_1F39B60]</code></pre> means <pre><code>rsi</code></pre> would contain a pointer to <pre><code>qword_1F39B60</code></pre>\nYes it is allowed, it's a mem->reg operation.\nI believe that <pre><code>ds</code></pre> and <pre><code>ss</code></pre> are usually set to zero when using 64bit mode, but <pre><code>cs</code></pre> is set to the start of the text segment, so is the only segment register that can be used to generate a valid address. (There are some conflicting views on this, and I may be wrong)\nUsually <pre><code>rbp</code></pre> will be set to <pre><code>rsp</code></pre> before space is allocated on the stack:\n\n<pre><code>push rbp              ; save the current frame pointer\nmov rbp, rsp          ; create a new frame\nsub rsp, rax          ; allocate space on the stack\n</code></pre>\nHowever, it looks like this program is optimised (omit frame pointers) and is using <pre><code>rsp</code></pre> for all references, so <pre><code>rbp</code></pre> may be used for anything in this case but not its usual job.\n",
            "votes": "0",
            "user": "Mega Tonnage",
            "time": "Jun 22, 2022 at 3:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}