{
    "title": "Cutter cannot parse AUTDA instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/31105/cutter-cannot-parse-autda-instruction",
    "content": "I work on reverse engineering of an iOS software using Cutter, and receive several opcodes as \"invalid\". For example:\n<pre><code><addr>      301ac1da               invalid\n</code></pre>\nLooking up the hex code, I found out this is the AUTDA instruction. Seems like for some reason Cutter / rizin cannot parse this kind of instructions.\nI tried to write <pre><code>pd</code></pre> in the console directly, but it gave the same results.\nVersion info:\n<pre><code>Version 2.1.2\nUsing rizin 0.4.1 (9023f8b)\nBased on Qt 5.15.5 (Clang 13.0 (Apple), 64 bit)\nOptional Features:\nPython: ON\nPython Bindings: ON\n</code></pre>\nIs there a way to make Cutter recognize this instruction?\n",
    "votes": "2",
    "answers": 1,
    "views": "71",
    "tags": [
        "arm",
        "rizin",
        "cutter"
    ],
    "user": "LeeNeverGup",
    "time": "Jun 29, 2023 at 10:15",
    "comments": [],
    "answers_data": [
        {
            "content": "It should be possible in the near future once the Capstone \"auto-sync\" project is complete, and Rizin/Cutter updated used Capstone library. The brief description of the \"auto-sync\" is that it regenerates disassemblers, in this particular case for ARM, from the LLVM TableGen representations, semi-automatically: https://github.com/capstone-engine/capstone/issues/2015\nYou can track the progress once this PR will be merged in Rizin: https://github.com/rizinorg/rizin/pull/3564\n",
            "votes": "1",
            "user": "Anton Kochkov",
            "time": "Jun 14, 2023 at 4:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}