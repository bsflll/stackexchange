{
    "title": "Fixing Indirect Jump as Call?",
    "link": "https://reverseengineering.stackexchange.com/questions/27226/fixing-indirect-jump-as-call",
    "content": "I have been using Ghidra to decompile a library. When I analyzed the decompiled version of a function, it resulted in this following  output.\n<pre><code>{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)0x1b8318)();\n  return;\n}\n</code></pre>\nI did some more digging and found that most functions lead back to the same thing with the same message. I did some research online and found a solution where I should change the value stored at the address (0x1b8318) to a function pointer. Would this work?\n",
    "votes": "-1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ghidra",
        "libraries",
        "error"
    ],
    "user": "waslemon12",
    "time": "Mar 12, 2021 at 19:43",
    "comments": [],
    "answers_data": [
        {
            "content": "goto the address, press d to decompile.  if it looks like sensible code, then press F to make it a function.   This is common for function pointers, windows COM, callbacks etc.\nIf your on an embedded system, you might need to check your memory map to tell the compiler to look in the correct regions of memory to find code.   For example the call could be from application to firmware for example.\n",
            "votes": "1",
            "user": "Euan",
            "time": "Apr 6, 2021 at 12:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}