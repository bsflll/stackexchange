{
    "title": "Is it guaranteed that someone can reverse engineer this file format?",
    "link": "https://reverseengineering.stackexchange.com/questions/3891/is-it-guaranteed-that-someone-can-reverse-engineer-this-file-format",
    "content": "If I have an unknown file format and\n\nsomeone can still run the program and save any number of files\nsomeone can modify all options of the program individually\nit is known that the file format does not use compression\nit is known that the file format does not use encryption\nit doesn't seem to have a checksum\nI have \"unlimited\" money to pay someone\n\nis it then guaranteed that someone can reverse engineer the file format?\n",
    "votes": "3",
    "answers": 2,
    "views": "368",
    "tags": [
        "file-format"
    ],
    "user": "Thomas Weller",
    "time": "Mar 17, 2014 at 22:46",
    "comments": [
        {
            "user": "nrz",
            "text": "I think someone can reverse engineer the file format, especially if the that someone can use debugger to understand the code of the program.\n",
            "time": null
        },
        {
            "user": "Thomas Weller",
            "text": "@nrz: thanks for the hint. Being precise matters. Of course you needn't guess my skills.\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "What about a checksum? They don't fall into your categories of 'encryption' or 'compression'. Checksum algorithms can very hard to second-guess, is my experience.\n",
            "time": null
        },
        {
            "user": "Thomas Weller",
            "text": "@Jongware: good point. It doesn't seem to have a checksum or at least doesn't complain if the checksum doesn't match. I have added this to the question.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If someone has access to the program that reads from or writes to files in the file format, then yes, that someone can reverse engineer the functionality in the program to understand the structure and content of the file.\n\nI have \"unlimited\" time and money to pay someone\n\nPerhaps I should give you my email address! ;)\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Mar 17, 2014 at 20:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Homomorphic encryption could potentially cause problems. But it's not a practical issue.</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">&gt;Perhaps I should give you my email address! ;) LOL!</span>",
                    "time": null
                },
                {
                    "user": "Thomas Weller",
                    "text": "<span class=\"comment-copy\">Sorry, now that I know it is possible, I'll try myself. I'd better save my unlimited money for the impossible tasks.</span>",
                    "time": null
                },
                {
                    "user": "crush",
                    "text": "<span class=\"comment-copy\">@ThomasW. If it wasn't possible, then you couldn't pay anyone to do it anyways, so what's the point in even offering this?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "It's guaranteed that given enough time and resources anything can be reverse engineered.\n",
            "votes": "1",
            "user": "joxeankoret",
            "time": "Mar 17, 2014 at 20:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Thomas Weller",
                    "text": "<span class=\"comment-copy\">This answer is too short to be true. Therefore I gave the conditions in my question. If I just had one sample file, the file format uses encryption and the executable is not available, then I bet you can't reverse engineer it.</span>",
                    "time": null
                },
                {
                    "user": "crush",
                    "text": "<span class=\"comment-copy\">@ThomasW. The entire file format might not be reversible, but enough of it to produce the sample file could be. With enough time, any encryption is breakable.</span>",
                    "time": null
                },
                {
                    "user": "Thomas Weller",
                    "text": "<span class=\"comment-copy\">@crush: The problem of breaking the encryption is that you need to know the expected output. Without the output you never know if you're finished or not. And yes, I can write a program which creates the sample file: <code>copy sample.file newsample.file</code></span>",
                    "time": null
                },
                {
                    "user": "crush",
                    "text": "<span class=\"comment-copy\">@thomasw. It shouldn't be too difficult to sanity check the decrypted data to see if you are dealing with data in a reasonable range, or just meaningless bytes. Besides that, it sounded like you know some of the values to expect in the decrypted data. Nonetheless. We are talking about hypothetical situations here. In reality none of us have the time to spare to allow any modern algorithm to crack some of the more secure encryptions out there.</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">Well, @ThomasW., I'm talking about real cases, not a tiny 3 bytes \"file\". Anyway, if you believe there is something you can do that is not possible to reverse engineer, go for it!</span>",
                    "time": null
                }
            ]
        }
    ]
}