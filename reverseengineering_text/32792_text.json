{
    "title": "Offset addressing",
    "link": "https://reverseengineering.stackexchange.com/questions/32792/offset-addressing",
    "content": "I’m writing a C-SKY (CK803S) processor module for IDA Pro, and a question arose about offsets in transitions, small ones are fine, but long ones lead to nowhere, from the documentation:\n\nin code I implemented it like this:<pre><code>insn.Op1.addr = insn.ea + (((code32 & 0x3FFFFFF) << 1) & 0x3FFFFFF);</code></pre>\n\nbut I don’t understand what sign_extend does ?\n",
    "votes": "0",
    "answers": 1,
    "views": "69",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "debugging",
        "binary-analysis"
    ],
    "user": "Andynvkz",
    "time": "Mar 7, 2024 at 6:36",
    "comments": [],
    "answers_data": [
        {
            "content": "Signextend is expanding an integer of some size into a larger size and filling the extra bits with the original sign bit. In other words - keeping the larger int positive/negative.\nExample:\nAn original 8-bit number <pre><code>0x7F</code></pre> (Binary <pre><code>01111111</code></pre>) signextended to 32 bit becomes <pre><code>0x0000007F</code></pre>.\nAn original 8-bit number <pre><code>0x80</code></pre> (Binary <pre><code>10000000</code></pre>) signextended to 32 bit becomes <pre><code>0xFFFFFF80</code></pre>\nIt makes sense using this operation in offsets as a relative offset can be negative.\n",
            "votes": "0",
            "user": "Yotamz",
            "time": "Mar 7, 2024 at 6:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Andynvkz",
                    "text": "<span class=\"comment-copy\">that is, if 26 bits are 0, then we set bits 31..26 to 0, otherwise to 1? or force set to 1 - sign_extend, to 0 - zero_extend?</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">If the most significant bit is 1 - all additional higher bits are set to 1. Otherwise - 0. signed, <code>(int8) 0xFF</code> equals to decimal<code>-1</code>. To keep the value in 32 bit they have to be all 1s, i.e. <code>0xFFFFFFFF</code></span>",
                    "time": null
                }
            ]
        }
    ]
}