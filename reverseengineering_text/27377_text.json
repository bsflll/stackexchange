{
    "title": "How can I view the output of printf calls without a console window?",
    "link": "https://reverseengineering.stackexchange.com/questions/27377/how-can-i-view-the-output-of-printf-calls-without-a-console-window",
    "content": "I'm using IDA to poke around in an old video game and noticed there are lots of calls to the <pre><code>printf</code></pre> function:\n\nI can see in another function that <pre><code>dword_5CE914</code></pre> is a bitmask comprising various startup arguments (e.g. <pre><code>debug</code></pre>, <pre><code>nofullscreen</code></pre>, etc). As you may have guessed, <pre><code>0x4000000</code></pre> is the value that indicates the <pre><code>debug</code></pre> switch was present; despite enabling this, there is no visible debug output.\nAs someone new to software programming, I assume that during the game's development the <pre><code>printf</code></pre> calls would have been outputting to a debugger/console window which were disabled for production.\nMy question is: how can I view the output now that there is no debugger window?\nMy current thought process would be to:\n\nCreate a custom DLL containing a function to output arbitrary text to a .txt file\nInject the DLL into the game's address space\nHook into <pre><code>printf</code></pre> and pass the argument into my function which saves the output\n\nDoes that sound like a plausible approach, or can someone recommend a better way?\n",
    "votes": "2",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ida",
        "dll-injection"
    ],
    "user": "user7290573",
    "time": "Apr 1, 2021 at 23:11",
    "comments": [
        {
            "user": "blabb",
            "text": "Set the dword @ 5ce914 to 0xffffffff\n",
            "time": null
        },
        {
            "user": "user7290573",
            "text": "@blabb I can easily change the dword and view the output with breakpoints, but I'm asking how to save the output to a log file or print to a console window.\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "oh i see  have you checked using an AttachConsole() to the pid  of the process\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The approach you outlined seems plausible; I'd probably do something similar to that if I were approaching this problem. If <pre><code>printf</code></pre> is being called via function pointer -- say, it's an import from another .DLL -- you could simply overwrite its IAT entry with the one in your DLL. Otherwise, I'd go with hooking <pre><code>printf</code></pre> directly, and passing the arguments onto <pre><code>vfprintf</code></pre> in my DLL.\n",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Apr 2, 2021 at 7:38",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user7290573",
                    "text": "<span class=\"comment-copy\">Thank you; I'll give this a try later and see how I get on.</span>",
                    "time": null
                },
                {
                    "user": "user7290573",
                    "text": "<span class=\"comment-copy\"><code>vfprintf</code> works perfectly. Thanks again.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you convert the program to a console one (e.g. using EDITBIN), you should be able to run it from a console window and see everything it prints.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 3, 2021 at 15:01",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "ok I was wondering how one could include printf() intact but run without console\nit seems if one uses WinMain() and compile with /subsystem:windows one can achieve this\nhere is a sample code\n<pre><code>#include <stdio.h>\n#include <windows.h>\nint pringlob = 0;\nint a = 9;\nint b = 10;\nint c = 33;\nint WINAPI WinMain(_In_ HINSTANCE,_In_opt_ HINSTANCE,_In_ LPSTR, _In_ int)\n{\n    if ((pringlob & 0x400000) != 0)\n    {\n        printf(\"this is mytest\n\");\n        if ((pringlob & 0x400000) != 0)\n        {\n            printf(\"this is mytest 1 %d\n\", a);\n            if ((pringlob & 0x400000) != 0)\n            {\n                printf(\"this is mytest 2 %d\n\", b);\n                if ((pringlob & 0x400000) != 0)\n                {\n                    printf(\"this is mytest 3 %d\n\", c);\n                }\n            }\n        }\n    }\n    MessageBoxA(NULL,\"NO CONSOLE TEST\",\"NO CONSOLE USE ATTACHCONSOLE\",MB_OK);\n}\n</code></pre>\ncompiling this with in vs 2017 community\n<pre><code>cl /Zi /W4 /analyze /Od /nologo /EHsc foo.cpp /link /release /subsystem:windows  user32.lib  \n</code></pre>\nthis runs without console but keeps printf intact which prints to the console that is Created By AttachConsole() on the pid of binary\nopen foo.exe in x64dbg run to\nWinMainCrtStartup or @$exentry aka  PEHeader->AddressOFEntryPoint\nso that all dll init are done\nopen file->attach and note the pid of foo.exe\nin the stack use push qword\nand push pid\npush return address which is WinmainCRTStartup\nuse Ctrl+g to go to kernelbase.AllocConsole\nstep over the function and return to WinMainCRTStartup\npop the pid using pop qword in stack\nset the global to 0xffffffff\nf9 to run the exe\nyou will get all the printfs in  the newly created console\nsee the attached screenshot\n\nedit :\nwhat igorsk suggested in his answer is a better option adding a test of the same\n<pre><code>:\\>ls -lg\ntotal 2\n-rw-r--r-- 1 197121  91 Apr  3 02:01 complink.bat\n-rw-r--r-- 1 197121 595 Apr  2 23:45 fook.cpp\n\n:\\>complink.bat\n\n:\\>cl /Zi /W4 /Od /EHsc /nologo /analyze fook.cpp /link /release /subsystem:windows user32.lib\nfook.cpp\n\n:\\>dumpbin /headers fook.exe | grep -i subsystem\n            6.00 subsystem version\n               2 subsystem (Windows GUI)\n\n:\\>editbin /subsystem:console fook.exe\nMicrosoft (R) COFF/PE Editor Version 14.16.27045.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\n:\\>dumpbin /headers fook.exe | grep -i subsystem\n            6.00 subsystem version\n               3 subsystem (Windows CUI)\n\n:\\>cdb -c \"ed fook!pringlob 0xffffffff;g;q\" fook.exe | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command 'ed fook!pringlob 0xffffffff;g;q'\nxxxxxxxxxx\nthis is mytest\nthis is mytest 1 9\nthis is mytest 2 10\nthis is mytest 3 33\nquit:\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Apr 3, 2021 at 15:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}