{
    "title": "Why two virtual destructors?",
    "link": "https://reverseengineering.stackexchange.com/questions/4323/why-two-virtual-destructors",
    "content": "The beginning of the virtual function table (VFT, also virtual method table, VMT) disasembled by IDA goes as:\n<pre><code> _ZTV13QSystemLocale DCD 0, _ZTI13QSystemLocale, _ZN13QSystemLocaleD2Ev+1, _ZN13QSystemLocaleD0Ev+1\n</code></pre>\nand <pre><code>c++filt</code></pre> decodes it as\n<pre><code> vtable for QSystemLocale DCD 0, typeinfo for QSystemLocale, QSystemLocale::~QSystemLocale()+1, QSystemLocale::~QSystemLocale()+1\n</code></pre>\nHere we see <pre><code>_ZN13QSystemLocaleD2Ev</code></pre> and <pre><code>_ZN13QSystemLocaleD0Ev</code></pre>, both transformed by <pre><code>c++filt</code></pre> to <pre><code>QSystemLocale::~QSystemLocale()</code></pre>.\n(+1 is normal, the bit selects the right instruction set on ARM).\nThe Qt source declares:\n<pre><code>virtual ~QSystemLocale();\n</code></pre>\nWhy there are two virtual destructors?\n(I work with ARM, Android NDK (gcc/g++), C++, Qt).\n",
    "votes": "8",
    "answers": 1,
    "views": "3k",
    "tags": [
        "c++",
        "android",
        "arm",
        "virtual-functions"
    ],
    "user": "18446744073709551615",
    "time": "May 13, 2014 at 7:56",
    "comments": [],
    "answers_data": [
        {
            "content": "According to documentation the first one is base object destructor and the second one is deleting destructor. \n<pre><code>Constructors and destructors are simply special cases of <unqualified-name>, where the final <unqualified-name> of a nested name is replaced by one of the following:\n\n\n  <ctor-dtor-name> ::= C1   # complete object constructor\n           ::= C2   # base object constructor\n           ::= C3   # complete object allocating constructor\n           ::= D0   # deleting destructor\n           ::= D1   # complete object destructor\n           ::= D2   # base object destructor\n</code></pre>\nAccording to ARM IHI 0041D document the difference between these destructors is as follows:\n<pre><code>This ABI requires C1 and C2 constructors to return this (instead of being void functions) so that a C3 constructor\ncan tail call the C1 constructor and the C1 constructor can tail call C2.\nSimilarly, we require D2 and D1 to return this so that D0 need not save and restore this and D1 can tail call D2 (if\nthere are no virtual bases). D0 is still a void function.\n</code></pre>\n",
            "votes": "9",
            "user": "w s",
            "time": "May 13, 2014 at 9:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "18446744073709551615",
                    "text": "<span class=\"comment-copy\">Is <i>Itanium</i> ABI relevant to ARM?</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">I've seen the same things in ARM abi documents. The difference between these destructors is restoring and preserving \"this\" pointer. I'll update the answer.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@18446744073709551615: yes. It's relevant to many C++ implementations, regardless of platform.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@ws: in fact, the difference is that the <i>deleting destructor</i> must deallocate the memory occupied by the object, in addition to destructing the members. I.e. it's used to implement the <code>delete pObj;</code> statements. The return value convention is mandated by ARM to reduce code duplication but it's not a requirement of the the base C++ ABI.</span>",
                    "time": null
                },
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">Also <a href=\"http://stackoverflow.com/a/6921467\">stackoverflow.com/a/6921467</a></span>",
                    "time": null
                }
            ]
        }
    ]
}