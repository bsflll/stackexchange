{
    "title": "Using Angr in Vulnerability Research",
    "link": "https://reverseengineering.stackexchange.com/questions/21609/using-angr-in-vulnerability-research",
    "content": "I would like to use angr for vulnerability research.\nI was thinking that if I did the following:\n<pre><code>p = angr.Project('a.out', auto_load_libs=False)\nsm = p.factory.simulation_manager()\nwhile len(sm.unconstrained) == 0:\n  sm.step\n</code></pre>\nthen the unconstrained state could potentially point me to a vulnerability.\nI coded an obvious potential buffer overflow as follows:\n<pre><code>void processPacket( char * pkt )\n{\n    char buffer[255];\n    memcpy(buffer, &pkt[3], *((uint16_t*)&pkt[0]));\n}\n</code></pre>\nwhere the first two bytes of a packet determine the length of the rest of the packet and therefore the length of the memcpy.\nangr did find an unconstrained state, but it was not readily obvious how to examine the unconstrained state to determine the cause of the vulnerability.\nOnce I find an unconstrained state, is there a way to determine the cause? Are vulnerability researchers using angr to look for potential vulnerabilities?\nIs there a typical methodology to do so?\n",
    "votes": "4",
    "answers": 0,
    "views": "1k",
    "tags": [
        "buffer-overflow",
        "vulnerability-analysis",
        "angr"
    ],
    "user": "user3753771",
    "time": "Jul 4, 2019 at 13:30",
    "comments": [
        {
            "user": "0xec",
            "text": "github.com/ChrisTheCoolHut/Zeratool\n",
            "time": null
        }
    ],
    "answers_data": []
}