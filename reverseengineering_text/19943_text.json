{
    "title": "How can I intercept syscall libc function in C++ without writing any code in C file",
    "link": "https://reverseengineering.stackexchange.com/questions/19943/how-can-i-intercept-syscall-libc-function-in-c-without-writing-any-code-in-c-f",
    "content": "How can intercept libc function in C++ using LD_PRELOAD. I want to write code only in C++ file and all the logic of symbol fishing (dlsym) must be in C++ file.\nPlease give an example.\n",
    "votes": "0",
    "answers": 1,
    "views": "880",
    "tags": [
        "c++",
        "c",
        "libc"
    ],
    "user": "sumit_suthar",
    "time": "Nov 22, 2018 at 10:41",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. How about using <pre><code>extern \"C\"</code></pre>? This effectively lets you write C functions in C++ by assigning C linkage.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you want to intercept only library calls, you can insert your hooks in the <pre><code>GOT</code></pre> of the executable or at the dynamic loader resolver pointer (<pre><code>GOT[2]</code></pre>). I don't have sample code at hand, but this aricle is good for background.\nIf you want to intercept all syscalls (including those in the binary itself, e.g. if it's linked statically), you can use <pre><code>ptrace (PTRACE_SYSCALL)</code></pre> to be notified of all syscalls happening in the process. There are some examples on StackOverflow but they usually assume you're tracing another process. If you want to trace the same process you're in, you can use the <pre><code>ptrace(PTRACE_TRACEME)</code></pre> call.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 22, 2018 at 10:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}