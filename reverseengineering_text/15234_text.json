{
    "title": "Why is j_free function and free_ptr pointer needed in glibc?",
    "link": "https://reverseengineering.stackexchange.com/questions/15234/why-is-j-free-function-and-free-ptr-pointer-needed-in-glibc",
    "content": "I am disassembling <pre><code>libc-2.23.so</code></pre>, there exists a thunk method called <pre><code>j_free</code></pre> which jumps at the location pointed to by <pre><code>free_ptr</code></pre> pointer in glibc. Why do those even exist while <pre><code>free()</code></pre> itself is exported?\n",
    "votes": "1",
    "answers": 1,
    "views": "289",
    "tags": [
        "libc"
    ],
    "user": "sherlock",
    "time": "Apr 27, 2017 at 22:56",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "what exactly are you disassembling?\n",
            "time": null
        },
        {
            "user": "sherlock",
            "text": "I am disassembling <pre><code>libc-2.23.so</code></pre>, seems that <pre><code>j_free</code></pre> is a thunk method\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In ELF, all symbols are global. it means that a symbol in another module (e.g. main executable) can override the glibc's <pre><code>free</code></pre>. that's why all calls to it go through a GOT pointer. On the first call, the dynamic linker will go through all symbols in all modules and pick up the first one offering <pre><code>free</code></pre>. If no other modules export it, the libc one will be used.\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 28, 2017 at 5:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "sherlock",
                    "text": "<span class=\"comment-copy\">Does it make sense to have calls internal to <code>libc</code> to be routed through <code>plt</code> instead of a relative call?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">yes, because it needs to be prepared for possibility that they're overridden by an external module.</span>",
                    "time": null
                }
            ]
        }
    ]
}