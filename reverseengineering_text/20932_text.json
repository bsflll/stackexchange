{
    "title": "Detecting protected processes and critical processes from windows driver",
    "link": "https://reverseengineering.stackexchange.com/questions/20932/detecting-protected-processes-and-critical-processes-from-windows-driver",
    "content": "I've got a driver that tamper user-space processes by sending APC calls upon process start using the call <pre><code>PsSetCreateProcessNotifyRoutine</code></pre>.\nI wish to avoid tampering with any process that is critical for the OS stability, since my APC also eventually decides to kill the process. \nSo far I've used <pre><code>PsIsProtectedProcess</code></pre> and <pre><code>PsIsProtectedProcessLight</code></pre> in order to detect protected processes. \nHowever, it appears that there are some processes such as <pre><code>smss.exe</code></pre> and <pre><code>crss.exe</code></pre> and <pre><code>wininit.exe</code></pre> that are defined as critical processes and I also wish to avoid them. \nPerhaps anybody knows that difference between protected and critical process, and how can I detect critical process programmatically  from kernel-mode (maybe it has ad-hoc field in EPROCESS ? ) \nthanks,\n",
    "votes": "8",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "windbg",
        "process"
    ],
    "user": "Irad K",
    "time": "Mar 20, 2019 at 14:59",
    "comments": [],
    "answers_data": [
        {
            "content": "It seems the correct term is Critical System Service. There are API from userland but I can't find anything for the kernel. So I took a quick look into the RstrtMgr.dll and it seems the list is actually hardcoded...\nFor the processes:\n\nsystem32\\csrss.exe\nsystem32\\smss.exe\nsystem32\\lsass.exe\nsystem32\\wininit.exe\nsystem32\\logonui.exe\nsystem32\\services.exe\nsystem32\\winlogon.exe\n\nFor the services (specific case for svchost.exe):\n\nBrokerInfrastructure\nDcomLaunch\nLSM\nPower\nRpcEptMapper\nRpcSs\nSamSs\n\nThere is probably another way to achieve that. After all, Windows BSOD if one of these processes is killed.\nEdit: It seems <pre><code>nt!EPROCESS::BreakOnTermination</code></pre> is what you're looking for.\nThe real field is <pre><code>nt!EPROCESS::Flags</code></pre> and the mask 0x2000.\nIf this bit is set, <pre><code>PspExitThread</code></pre> will BSOD with <pre><code>CRITICAL_PROCESS_DIED</code></pre>.\n",
            "votes": "6",
            "user": "wisk",
            "time": "Mar 20, 2019 at 18:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}