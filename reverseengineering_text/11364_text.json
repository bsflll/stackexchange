{
    "title": "Detecting debugger with `rdtsc`",
    "link": "https://reverseengineering.stackexchange.com/questions/11364/detecting-debugger-with-rdtsc",
    "content": "I am reading Eldad Eilam's book titled Reversing. In Chapter 11: Breaking Protections, there is a crackme called Defender, which creates a dedicated thread, which repeats the following steps:\n<pre><code>1. Invokes `rdtsc` and saves the time-stamp counter (`t1`)\n2. Relinquishes the CPU\n3. Invokes `rdtsc` again, from the result (`t2`) subtracts the previous value: `dt=t2-t1`\n4. If `dt` is greater than some hardcoded value, terminates; otherwise goes to 1.\n</code></pre>\nThe goal is to detect if the process is stopped in a debugger. Is the idea behind this method the fact that after hitting a breakpoint all threads will be stopped? Because as far as I know this can be prevented in <pre><code>gdb</code></pre> by issuing <pre><code>set pagination off</code></pre> and <pre><code>set non-stop on</code></pre>. Or is there something I am missing?\n",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "gdb",
        "anti-debugging"
    ],
    "user": "robert",
    "time": "Nov 20, 2015 at 10:00",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "see pferrie.host22.com/papers/antidebug.pdf for a detailed description of how this technique works.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When a debugger is present, and used to single-step or to perform any time of run-time instrumentation, there is a measurable delay between the executions of the individual instructions, when compared to native execution.\nThis can be either bypassed \"by hand\" (<pre><code>rdtsc</code></pre> is not one of the typical instruction that you'll find in regular programs), or automatically if you control the cpu to make him lie about its current number of ticks, like in QEMU.\n",
            "votes": "3",
            "user": "jvoisin",
            "time": "Nov 22, 2015 at 11:04",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "the idea behind rdtsc instr is to detect if the process is single stepped\nnot stopped in the debugger.\n",
            "votes": "-1",
            "user": "krusty",
            "time": "Nov 20, 2015 at 11:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "robert",
                    "text": "<span class=\"comment-copy\">Is'nt single stepping actually stopping at every instruction?</span>",
                    "time": null
                },
                {
                    "user": "krusty",
                    "text": "<span class=\"comment-copy\">yes, but in this case its to detect single step only in the code block from first rdtsc to second rdtsc. If you stop in the debugger CPU cycles count will be much higher cause of the time (break/pause) you spend  in the debugger</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">your comment should form part of your answer, since it includes the details about why it works</span>",
                    "time": null
                }
            ]
        }
    ]
}