{
    "title": "PE32+ executable : .text segment encryption",
    "link": "https://reverseengineering.stackexchange.com/questions/22500/pe32-executable-text-segment-encryption",
    "content": "I am working on PE segment encryption(in C++). I completed the PE32 .text segment encryption. I added stub segment to the PE that will decrypt .text segment at runtime. Used inline assembly in the stub function. But I can't implement the same method in PE32+ executable(64bit exe) as it won't support inline assembly. I am able to add the stub and encrypt the text segment.\nIssue is with the decryption logic in the stub.\nI tried adding separate .asm files but failed as I am new to assembly language.\nIs it possible to do without assembly language? Please help me with any good documentation or samples on PE32+ segment encryption.\n",
    "votes": "3",
    "answers": 2,
    "views": "911",
    "tags": [
        "c++",
        "encryption",
        "x86-64"
    ],
    "user": "AcCoder",
    "time": "Nov 10, 2019 at 16:28",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "You give very little information about how your encryption scheme currently works. As an example, it is customary in some runtime packers/obfuscators to offload stuff like allocating sufficient memory to the PE loader. This can be done by adding sections which have no file content, but have a size (and appropriate protection flags) in memory. To determine the base address oftentimes in runtime packers/obfuscators one would count down at the WORD boundary, looking for <pre><code>MZ</code></pre> ... then trying to take it from there, carefully parsing the PE (aware that the <pre><code>MZ</code></pre> may be a false match).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You don't need the assembly language to add a decoder stub for the <pre><code>.text</code></pre> section. You can just write the code in C/C++ compile it as a Position independent executable & extract the ONLY <pre><code>.text</code></pre> section it'll have. After that you can just use a normal PE editor (CFF explorer is pretty robust) to manually add the <pre><code>.stub</code></pre> section and paste the content of the <pre><code>.text</code></pre> section extracted from your position independent compiled code. If you don't wanna go into trouble of creating Position independent code you can just use Position Independent Shellcode available on github.\n",
            "votes": "1",
            "user": "rustam Shirinov",
            "time": "Dec 5, 2020 at 14:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If you're going to use assembly stubs, you can just patch it directly to the binary. You don't really need to use c++ to do that for you.\nTo do that for both 32 and 64 bit, you can use CreateFile, CreateFileMapping, and MapViewOfFile. This will allow you to dump the .text section, basically all sections, of the PE and you can do whatever you want to it. Then you can add a function to decrypt it or whatever and/or write a stub to do the decrypting portion of it in a space big enough to fit that stub or just add another section to the PE\n",
            "votes": "-1",
            "user": "Jon",
            "time": "Nov 10, 2019 at 19:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "AcCoder",
                    "text": "<span class=\"comment-copy\">Thank you. I am not trying the assembly code now. Is it possible to get some sample code/documentation links for 64bit encryption? Because all the docs I found is for 32 bit. When I tried to apply the same in 64bit, it is not working as expected.</span>",
                    "time": null
                },
                {
                    "user": "Jon",
                    "text": "<span class=\"comment-copy\">Oh boy, there's a LOT of sources out there for encryption. For you, I would recommend something as simple as a XOR encryption. Once you map out the binary, you can iterate through each section, usually the .text section, and then for each byte in that section, you can XOR it with whatever key. Once you have that, save the new XOR'ed bytes into the binary that way your stub will be able to decrypt it with the same key you used to encrypt it. This is more than enough information to get you going.</span>",
                    "time": null
                },
                {
                    "user": "AcCoder",
                    "text": "<span class=\"comment-copy\">Thank you very much for the reply. But my issue is not with the encryption or decryption. I am able to encrypt the <code>.text</code> segment and added the <code>stub</code> as entry point.  I am trying to <code>load the PE sections into memory</code>, decrypt the <code>.text segment</code> there and execute it from memory. It is not happening. I am trying to get a proper way to load, decrypt and run 'PE64' from memory using <code>.stub</code> segment as <code>PE entry point</code>.</span>",
                    "time": null
                },
                {
                    "user": "AcCoder",
                    "text": "<span class=\"comment-copy\">I will try the <code>CreateFile</code>,<code>CreateFileMapping</code> and <code>MapViewOfFile</code> as you suggested.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">How exactly will <code>CreateFileMapping</code> and <code>MapViewOfFile</code> help <i>at all</i> for this purpose? Remember the inquirer is asking about decrypting something on-the-fly (first thing at runtime). At that point the PE loader in <code>ntdll.dll</code> has already done exactly what you're suggesting in your answer. Given that the encryption evidently requires some post-processing of the pristine \"source\" (PE) file, it would be easy to store offsets between the stub code and the base address during \"encryption\". Another common method is to search the <code>MZ</code> of the <code>IMAGE_DOS_HEADER</code> then use that.</span>",
                    "time": null
                }
            ]
        }
    ]
}