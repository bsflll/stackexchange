{
    "title": "Reverse engineer encrypted text file if I have both pre and post encryption files [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/15222/reverse-engineer-encrypted-text-file-if-i-have-both-pre-and-post-encryption-file",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nAs per the title, I have an encrypted text file that is generated by an Android app. I then have to send that off to the people whom made the app for them to decode it and send it back. Not ideal as they can sometimes take days to reply.\nIf I have both pre and post text files what would be the best way to find the key/decrypt them myself in the future?\nThanks guys\n",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "android",
        "decryption",
        "apk"
    ],
    "user": "OzKnucklehead",
    "time": "8 years ago",
    "comments": [
        {
            "user": "NirIzr",
            "text": "Do you also have the application itself? Reading the application's code would probably be the easiest way.\n",
            "time": null
        },
        {
            "user": "OzKnucklehead",
            "text": "Sure do! It's nothing overly special just an OBD reader for a car\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a slightly broad question, so the answer will be as well. I suggest you ask additional, specific, questions as you continue your process.\nFirst steps would probably be to get the apk, extract the java & native code from it and reverse your way to the encryption algorithm. Once you figure out what's the encryption algorithm and protocol you can see if the application can technically decrypt data it previously encrypted.\nThere are already questions here on how to start reverse engineering Android APKs.\nOnce you have the java code decompiled, you can search for that code that actually performs the encryption and see what are the functions it calls and the input it receives.\nThis is not necessarily possible because some encryption models (such as private/public encryption) only allow one side to decrypt.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Apr 26, 2017 at 9:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "OzKnucklehead",
                    "text": "<span class=\"comment-copy\">Copy that. I'll pull the APK and start decompiling it and chase the encrypting function. Yeah I am hoping that it is a simple encryption key and not hash based. Thank you for getting back to me, much appreciated! I'll let you know how I go.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "What you are trying to do is called a chosen ciphertext attack. This is a well known attack model, and any decent symmetric encryption algorithm is expected to withstand it, though it's possible they're using a homegrown or broken algorithm. If they're using asymmetric crypto, there's no chance.\nAs mentioned above, you should start by reversing the application itself. That will hopefully tell you which algorithm they are using, and if they are using symmetric crypto, it will probably tell you the key as well.\n",
            "votes": "0",
            "user": "Antimony",
            "time": "Apr 26, 2017 at 14:19",
            "is_accepted": false,
            "comments": []
        }
    ]
}