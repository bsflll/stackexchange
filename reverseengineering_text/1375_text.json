{
    "title": "State of the Art Fuzzing Framework [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/1375/state-of-the-art-fuzzing-framework",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Reverse Engineering Stack Exchange.\n\n\nClosed 12 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI've previously rolled my own Fuzzing Framework, and tried a few others like Peach Fuzzer.  It's been awhile since I've looked at vulnerability hunting, what is the state of the art with regard to fuzzing?  That is, if I were to start fuzzing Acme Corp's PDF Reader today, what toolset should I look into?\n",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "fuzzing"
    ],
    "user": "mrduclaw",
    "time": "12 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "There are three types of fuzzers:\n\nmutation fuzzers, which start with a large list of diverse, good input files and a list of mutations. Then, each file is mutated in some way and passed to the application to see if the app can handle the mutated input. Charlie Miller's 2010 CanSecWest talk covers this approach nicely. Generally it's straightforward to roll your own version of a mutation fuzzer for a file format.\ngenerative fuzzers, which at their simplest just generate random output. More complex versions will be able to describe protocols and methods for injecting randomness in various fields of the protocols. Sulley is a tool in this class. A particularly nice subclass is grammar-based fuzzers, where you start with a BNF grammar and generate strings by walking the grammar directly.\nwhitebox fuzzers are arguably a different class, where some constraint solver reasons about code paths to generate new inputs for fuzzing. avalanche is a publicly available tool for this. (SAGE, the tool that @0xea pointed out, is another example.)\n\nAnother of Miller's papers has a nice overview of the first two. And you should probably see the Fuzzing book's website, which has some software you can start with.\n",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Apr 19, 2022 at 11:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">this is hardly the state of the art, and that's the problem with this question , i don't think it can be answered in a good way</span>",
                    "time": null
                },
                {
                    "user": "EfForEffort",
                    "text": "<span class=\"comment-copy\">@0xea, is it my breakdown into types of fuzzing or the tools that I list that isn't state of the art?</span>",
                    "time": null
                },
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">the tools and papers, they are few years old, tho i know people are still using them with great success</span>",
                    "time": null
                },
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">@0xea Innovation doesn't come over night.  If those tools are a few years old but there has been no improvements, then they are still the state of the art.  I don't see the problem.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Don't know about the state of the art , but some advances have been in the direction of combining symbolic execution as with SAGE from MS Research (there should be a better paper, but I think it's paywalled). Also A Taint Based Approach for Smart Fuzzing shows how to combine taint analysis for advanced fuzzing (there should be some non-paywalled version around). Also, I expect most people don't really publish their advanced techniques until they exhaust them, which is the main problem of this question.\n",
            "votes": "4",
            "user": "Glorfindel",
            "time": "Apr 19, 2022 at 7:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">Right, there will always be the walled garden of secret techniques, but the state of the art is implied public knowledge.  That is, it is the current state of the highest level of <b>general</b> development.  There will always be outliers that perform better, but they are not the state of the art, they are the outliers above it.  Nonetheless, thanks for the suggested reading.</span>",
                    "time": null
                },
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">a fair point...</span>",
                    "time": null
                }
            ]
        }
    ]
}