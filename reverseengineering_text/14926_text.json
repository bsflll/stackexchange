{
    "title": "Access violation when reading [OLLYDEBUG]",
    "link": "https://reverseengineering.stackexchange.com/questions/14926/access-violation-when-reading-ollydebug",
    "content": "Any time I try to crack a program I get this error in olly:\n\nWhat causes this error? How can I fix this?\nIf anyone has suggestion or advice that would be great. I already tried pressing F9 but that doesn't help\n",
    "votes": "2",
    "answers": 1,
    "views": "8k",
    "tags": [
        "ollydbg",
        "debugging",
        "debuggers",
        "exception"
    ],
    "user": "cupid67",
    "time": "Mar 17, 2017 at 13:38",
    "comments": [
        {
            "user": "Nordwald",
            "text": "Did you try passing the exception to the programm? e.g. Shift+ [F7], [F8], [F9]. The debugger is the first to be able to handle exceptions.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "TL;DR: Without understanding what's causing the access violation, it is hard to tell how best to address it. You will need to investigate the exception handler and the cause first.\nThis status line means an Access Violation exception occurred and ollydbg caught that exception. It is not necessarily an error and could be part of normal behavior of the program. It is now up to you to decide how olly should handle that exception, but first lets discuss what can cause this exception.\nTechnically, this exception means the program tried accessing an invalid address. It could be that the address is not allocated or that the CPU tried executing code at an address whose permissions prevent execution, write to an address that can't be written to, etc.  Generally, an access violation exception occurs when an attempt to access an address failed for one reason or another.\nNow that we answered what is an access violation exception, let's discuss why it happens. An access violation usually happens when a bug is encountered, due to a programming error that made the CPU execute the wrong instructions or using the wrong data. However, security developers often use tricks related to access violation exceptions for their advantage, complicating the reverse engineering process or making the program harder to debug and modify.\nExamples of the more common tricks include:\n\nMeasuring the time between an exception being triggered until it's handled and normal execution is resumed. When in a debugger, the debugger will suspend the program, making that time difference significantly larger.\nExecute critical program parts within an exception handler which is slightly harder to debug, find and investigate.\nTrigger bugs in the debugger itself, making slight changes in behavior that could be critical to the program's execution.\nIncrease the burden on the reverse engineer and complicate the dynamic reverse engineering process.\nFail the program violently after an anti-debugging trick detected the program is being debugged.\nNormal operation and certain OS tricks might involve legitimately triggering (and handling) access violation exceptions.\n\nDepending on why the exception was triggered, what is the exception handler code and what surrounds the exception triggering code, the way to handle that exception differs.\nFor example:\n\nIf the exception triggering coded is surrounded with timing checks, you would want to add it to ollydbg's ignored exceptions so the debugger won't pause on those exceptions in future executions. Do that by pressing alt + o and selecting the \"Exceptions\" item under \"Debugging\".\nTo understand if the exception handler has a crucial part in the program's behavior, you would probably want to hit Shift + F7 to step into the exception handling code and reverse engineer it.\nIf the exception handler is only part of the program's normal operation, it might also be peacefully ignored by adding to ollydbg's ignored exceptions list or using shift + F7 , F8 or F9 to respectively step into, step over or run through the exception handler.\nIf the access violation was triggered intentionally to terminate the program, you might be able to safely ignore it (shift + F9) and carry on with the rest of the program.\n",
            "votes": "3",
            "user": "NirIzr",
            "time": "Mar 17, 2017 at 14:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}