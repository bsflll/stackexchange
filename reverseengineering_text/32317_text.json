{
    "title": "Cutter shows addresses relative to stack but not rbp. How to change it?",
    "link": "https://reverseengineering.stackexchange.com/questions/32317/cutter-shows-addresses-relative-to-stack-but-not-rbp-how-to-change-it",
    "content": "Look at the first image:\n\nHere what I get is <pre><code>var void *buf @ stack - 0x28</code></pre>.\nBut I'm watching a tutorial there his Cutter shows like this:\n<pre><code>var void *buf @ rbp - 0x20</code></pre>. How can I change cutter to appear like this?\n\nI became so confused with it. Had to spent some time to discover the discrepancy.\n",
    "votes": "0",
    "answers": 2,
    "views": "296",
    "tags": [
        "disassembly",
        "functions",
        "stack",
        "cutter"
    ],
    "user": "NobinPegasus",
    "time": "Sep 25, 2023 at 5:36",
    "comments": [],
    "answers_data": [
        {
            "content": "The two pictures probably show the same binary being analyzed. But the two Cutter versions might not be the same, and that's likely the cause for the discrepancy you see.\nCutter is a front end for Rizin, and disassembly is performed by Rizin and then reformatted by Cutter for display. There was a change in Rizin v0.5.0 (February 2023) that affects the display of stack variables: The Rizin team removed the old bp/sp related addressing for x86 family architectures, because it often caused misleading results. Instead, all variables would from then on be displayed as <pre><code>stack - hexoffset</code></pre> , as is the case in your first picture.\nBefore this change, Rizin users would sometimes see two different variable names/offsets, and not realize they resolved to the same address (and thus the same variable). This doubled up the number of detected variables at the top of the function, led to a lot of confusion, and also made integrating the stack variables into decompilers (such as rz-ghidra) a mess.\nIf you use a Cutter version released in or after February 2023 (such as Cutter v2.2.0-rc1 or later), that one likely packages a Rizin version containing the mentioned change. AFAIK, the behavior of the display of stack variables cannot be configured.\nI think you might be following a tutorial such as the one linked below. If that's the case and you want to followed it closely, you can simply install the same version of Cutter. The author of the linked tutorial is using Cutter v2.1.0 from June 2022, which contains rizin v0.4.0. If you're using Linux, the AppImage of that version is still available on the releases pages.\nTutorial (not mine):\n'Exploiting Return Oriented Programming (ROP) tutorial - Binary Exploitation PWN101' on YT\n",
            "votes": "4",
            "user": "feldspar",
            "time": "Sep 30, 2023 at 21:13",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "@feldspar's reply is 100% accurate. It was a change introduced by the Cutter team as of February 2023.\nI just wanted to add that the important thing here is to understand how the addressing works, regardless of whether it is relative to the bottom of the stack or the <pre><code>rbp</code></pre>. They are equivalent.\nWhen you have an address like <pre><code>stack - 0x28</code></pre> it means the variable \"lives\" in the stack at address -0x28 from the very beginning of the stack. Where does the stack begin? At <pre><code>rbp+0x8</code></pre> (a.k.a the saved return address).If you think about it, it is equivalent to <pre><code>rpb-0x20</code></pre> because the <pre><code>rpb</code></pre> register is 8 bytes long.\nIf we draw the stack something like this:\n<pre><code>stack+0x8  or rbp+0x10 |    ...   | Higher Addresses\nstack      or rbp+0x8  |saved @ret|\nstack-0x8  or rbp      |(old) rbp |\nstack-0x10 or rbp-0x8  |    ...   |\nstack-0x18 or rbp-0x10 |    ...   |\nstack-0x20 or rbp-0x18 |    ...   | Lower Addresses\nand so on....\n</code></pre>\nit may be easier to understand why they are equivalent. Let us take as example the <pre><code>saved return address</code></pre> and the <pre><code>saved rbp</code></pre>:\n\nThe saved return address is located from cell <pre><code>stack</code></pre> to <pre><code>stack+0x7</code></pre> (8 bytes) or <pre><code>rbp+0x8</code></pre> to <pre><code>rbp+0xf</code></pre>.\nLikewise, the saved rbp is located from <pre><code>rbp</code></pre> to <pre><code>rbp+0x7</code></pre> (or <pre><code>stack-0x8</code></pre> to <pre><code>stack-0x1</code></pre>).\n\nHope this helps clarifying concepts.\nEDIT 2024.03.27: I've uploaded a video about this topic and Cutter's configuration and customization: https://www.youtube.com/watch?v=zrXA3AC_658.\n",
            "votes": "1",
            "user": "Razvi",
            "time": "Mar 27, 2024 at 17:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}