{
    "title": "How can I find out what type of processor an Intel Hex file belongs to?",
    "link": "https://reverseengineering.stackexchange.com/questions/26617/how-can-i-find-out-what-type-of-processor-an-intel-hex-file-belongs-to",
    "content": "I have a text file and I know that it is a firmware of a device. This file have Intel Hex Format as below:\n<pre><code>:03:8000:00:028100FA\n:02:8003:00:XXXXXX\n:02:800B:00:XXXXXX\n:02:8013:00:XXXXXX\n:01:801B:00:XXXX\n:01:8023:00:XXXX\n:10:802B:00:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n:10:803B:00:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n:10:804B:00:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n:10:805B:00:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n</code></pre>\nHow can I find out what type of processor (Intel/ARM/PIC/...) this file belongs to? And how can I disassemble it?\nFrequency of bytes:\n<pre><code>ebra@him:~$ cat single-byte-per-line | sort | uniq -c | sort -n\n      1 \n      3 59\n      5 4C\n      6 49\n      6 57\n      6 5D\n      8 47\n      8 48\n      8 4A\n      8 4E\n      8 52\n     10 C6\n     11 7E\n     11 8F\n     11 9B\n     12 51\n     12 8E\n     12 95\n     12 9C\n     12 9D\n     12 B7\n     12 CE\n     13 CF\n     14 27\n     14 55\n     14 56\n     14 58\n     14 5C\n     14 7F\n     15 73\n     15 8D\n     15 9E\n     15 C7\n     15 D6\n     16 5F\n     16 D7\n     17 1B\n     17 A5\n     17 C8\n     17 CB\n     18 AF\n     18 B1\n     19 46\n     19 5A\n     19 8B\n     19 C1\n     20 D9\n     20 ED\n     21 72\n     21 94\n     21 A6\n     22 43\n     22 4F\n     22 71\n     22 AC\n     22 B9\n     22 C9\n     23 9F\n     23 A3\n     23 BE\n     24 42\n     24 AD\n     24 BD\n     24 BF\n     24 E9\n     25 4D\n     25 CC\n     26 87\n     26 A1\n     26 B8\n     26 E8\n     27 69\n     27 6F\n     27 88\n     28 F1\n     29 53\n     29 5E\n     29 61\n     29 77\n     29 BC\n     30 45\n     30 AB\n     31 1A\n     32 86\n     33 1E\n     33 4B\n     34 1C\n     35 1F\n     35 67\n     36 BB\n     36 EA\n     37 98\n     37 99\n     37 DD\n     37 F4\n     37 FD\n     38 2C\n     38 B2\n     40 3B\n     40 EE\n     41 25\n     41 97\n     41 E7\n     42 2D\n     42 D4\n     42 EF\n     43 1D\n     43 8C\n     44 5B\n     44 96\n     44 DC\n     46 28\n     46 3A\n     46 D5\n     46 DF\n     46 F7\n     46 FE\n     47 76\n     47 7D\n     48 C5\n     48 FC\n     49 D8\n     50 35\n     53 0E\n     53 B5\n     57 BA\n     57 E6\n     58 A7\n     58 C4\n     58 CA\n     59 19\n     59 21\n     59 AA\n     62 3D\n     62 A8\n     63 93\n     63 A9\n     65 34\n     65 8A\n     65 B0\n     65 F6\n     67 AE\n     67 D1\n     68 31\n     69 EC\n     70 26\n     70 41\n     71 14\n     71 81\n     72 23\n     72 3E\n     72 65\n     72 B6\n     74 F8\n     75 44\n     75 6B\n     76 64\n     76 7C\n     76 92\n     77 FF\n     78 37\n     78 91\n     78 B3\n     79 2F\n     80 A0\n     82 38\n     84 A2\n     85 DA\n     87 0D\n     90 24\n     91 6D\n     91 A4\n     93 18\n     95 62\n     95 CD\n     96 0B\n     96 3C\n     99 68\n     99 E4\n    101 6C\n    103 50\n    106 63\n    109 39\n    109 3F\n    109 DE\n    111 6E\n    112 6A\n    115 E1\n    116 36\n    117 70\n    117 89\n    118 D3\n    128 17\n    131 FB\n    134 D0\n    137 54\n    146 FA\n    149 0C\n    151 0A\n    154 F9\n    164 60\n    173 C3\n    174 2A\n    183 DB\n    184 C0\n    185 29\n    185 E3\n    189 16\n    191 83\n    200 2E\n    203 9A\n    204 66\n    207 F3\n    212 15\n    212 20\n    220 0F\n    221 7B\n    226 7A\n    240 33\n    241 E2\n    242 F5\n    244 EB\n    247 30\n    247 32\n    255 2B\n    256 06\n    261 10\n    275 13\n    284 07\n    286 40\n    288 E0\n    309 84\n    311 85\n    313 03\n    321 04\n    325 22\n    326 C2\n    327 F2\n    333 01\n    333 79\n    344 82\n    353 90\n    357 11\n    362 F0\n    376 80\n    414 05\n    422 78\n    436 09\n    467 74\n    489 D2\n    570 08\n    656 E5\n    889 B4\n   1301 12\n   1369 02\n   1717 00\n   2081 75\n</code></pre>\nAnd if I extract all 2-byte sequences which starts with <pre><code>75</code></pre>, I have:\n<pre><code>ebra@him:~$ cat sequence-starts-with-75 | grep -o .... | sort | uniq -c | sort -n\n      1 7505\n      1 750D\n      1 750E\n      1 7514\n      1 7519\n      1 751F\n      1 7521\n      1 7522\n      1 7526\n      1 7527\n      1 752D\n      1 7530\n      1 7545\n      1 7547\n      1 7548\n      1 754D\n      1 754F\n      1 7557\n      1 755F\n      1 7560\n      1 756F\n      1 7570\n      1 7571\n      1 7572\n      1 7573\n      1 7581\n      1 7587\n      1 758B\n      1 7594\n      1 75A8\n      1 75B8\n      1 75C8\n      1 75CA\n      1 75CB\n      1 75CC\n      1 75CD\n      1 75E5\n      1 75F2\n      2 7501\n      2 7510\n      2 751D\n      2 7525\n      2 7534\n      2 7536\n      2 753C\n      2 753D\n      2 7566\n      2 758D\n      2 7598\n      2 7599\n      2 75B4\n      2 75D0\n      2 75D4\n      3 7523\n      3 752F\n      3 757A\n      3 758C\n      4 752E\n      4 753A\n      6 7535\n      6 7537\n      6 753B\n      6 753F\n      6 7567\n      6 7569\n      7 7500\n      7 7540\n      7 757B\n      7 758A\n      8 757C\n      8 75A0\n     10 7524\n     11 7563\n     11 7574\n     11 7576\n     11 7577\n     11 7579\n     12 7518\n     13 7575\n     14 752C\n     16 7565\n     16 7578\n     17 7517\n     17 75F0\n     18 7528\n     18 7564\n     19 7539\n     19 753E\n     27 7562\n     37 7515\n     37 7583\n     38 7516\n     45 7533\n     49 756A\n     49 756B\n     50 756C\n     52 756E\n     53 756D\n     58 7532\n     68 7512\n     73 7568\n    141 752B\n    143 7529\n    144 752A\n    169 7582\n    204 7513\n    248 7511\n</code></pre>\nFor 3-bytes sequences which starts with 75:\n<pre><code>    ebra@him:~$ cat sequence-starts-with-75 | grep -o ...... | sort | uniq -c | sort -n\n  .. [Truncated] ...\n  6 750075\n  6 752B03\n  6 752B08\n  6 753269\n  6 753F00\n  6 756BA4\n  6 757500\n  6 757800\n  6 758204\n  6 758205\n  6 75820B\n  6 75F000\n  7 75120A\n  7 752801\n  7 752B05\n  7 756E08\n  8 751101\n  8 752910\n  8 756BC0\n  8 756D0C\n  8 757400\n  8 75A000\n  9 751104\n  9 752803\n  9 758200\n  9 758203\n 10 752901\n 10 752C80\n 10 756BB2\n 11 751864\n 11 753200\n 11 756ABC\n 11 758208\n 12 753290\n 13 751210\n 14 752B01\n 14 752B10\n 14 753910\n 14 756C01\n 14 75820F\n 15 752B06\n 16 753E00\n 16 756BB0\n 17 7517FF\n 17 75326A\n 17 753300\n 18 752906\n 19 756811\n 19 756E00\n 19 758209\n 20 758201\n 21 752904\n 21 752B04\n 22 756D00\n 23 756C00\n 24 75820A\n 30 756A00\n 34 758202\n 35 752902\n 36 758301\n 37 752905\n 46 752B02\n 46 756810\n 65 751103\n 77 751102\n 79 751100\n142 752A00\n</code></pre>\n",
    "votes": "4",
    "answers": 2,
    "views": "685",
    "tags": [
        "disassembly",
        "arm",
        "intel",
        "pic",
        "unknown-data"
    ],
    "user": "Ebrahim Ghasemi",
    "time": "Dec 25, 2020 at 9:17",
    "comments": [
        {
            "user": "the busybee",
            "text": "The addresses give a hint: as you found out, it is a 8051 derivative. These are the interrupt entry points.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This sounds analogous to given a document, infer the language.\nI'd compare the frequency (count for each value in the file) of instructions with the frequency of instructions derived from files for known processor types.\nEffectively a unigram model.  If you source the files in a common format I can give you a hand.\n",
            "votes": "3",
            "user": "pythonpython",
            "time": "Dec 24, 2020 at 19:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ebrahim Ghasemi",
                    "text": "<span class=\"comment-copy\">Awesome idea, I have updated the question. Would you please take a look?</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">Can you point me to some index hex format files for various chips?</span>",
                    "time": null
                },
                {
                    "user": "Ebrahim Ghasemi",
                    "text": "<span class=\"comment-copy\">Unfortunately I have no clue. I'll share it if I could find any.</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">I'll see what I can find for Intel/ARM/PIC.</span>",
                    "time": null
                },
                {
                    "user": "Ebrahim Ghasemi",
                    "text": "<span class=\"comment-copy\">Well, I opened the body of the device. lol.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can't - the <pre><code>Intel hex</code></pre> format doesn't hold this kind of data. You need to manually look for the correct architecture. You can use <pre><code>IDA</code></pre> or <pre><code>Ghidra</code></pre> for that and open in the following for each architecture it might be.\n\nThen you need to disassemble the whole file and look if it makes sense. (Control flow, number of functions, xrefs,...)\nOr of course, use some scripting for that.\n",
            "votes": "2",
            "user": "macro_controller",
            "time": "Dec 25, 2020 at 10:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ebrahim Ghasemi",
                    "text": "<span class=\"comment-copy\">Isn't there any processor/architecture-specific Instructions/Prolog in this file? As far as I know the instruction sets are different. Right?</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">Yes, but hex format only maps values of bytes to address space. You can think of it as a big map that says which binary value supposed to be at which address. The hex format itself doesn't care about the architecture.</span>",
                    "time": null
                }
            ]
        }
    ]
}