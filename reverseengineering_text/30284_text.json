{
    "title": "How to detect incorrectly named DLL?",
    "link": "https://reverseengineering.stackexchange.com/questions/30284/how-to-detect-incorrectly-named-dll",
    "content": "I am trying a simple lab on malware analysis and we were given both an .exe and .dll file.\nHowever, I am told that the DLL will need to be renamed to something for it to work.\nHow do I go about detecting what name it should be?\nI've tried looking at the .exe using CFF Explorer, PE Viewer and other tools to look at the imports, but I do not see any.\nThere are only imports to KERNEL32.dll and PSAPI.DLL but none to a custom named one, and so I am quite confused with how I am supposed to rename my dll to.\n",
    "votes": "0",
    "answers": 1,
    "views": "128",
    "tags": [
        "ida",
        "static-analysis",
        "dll",
        "dynamic-analysis",
        "dll-injection"
    ],
    "user": "Iva l",
    "time": "Apr 18, 2022 at 10:58",
    "comments": [
        {
            "user": "Robert",
            "text": "DLLS don't have to be loaded by imports, they can simply be loaded using <pre><code>LoadLibrary</code></pre> and <pre><code>GetprocAddress</code></pre> so check the exe for such calls. So an example here: docs.microsoft.com/en-us/windows/win32/dlls/â€¦\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "Static or dynamic if you can run it you can enable loader snaps it should split the DLL load events and failure dbgprints\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a rather generic question, but I'll give it a shot.\nFor starters imports from DLLs can exist roughly in three forms:\n\nstatic imports\ndelay-load imports\ndynamic imports\n\nNow one could argue that the delay-load and dynamic imports should be in the same group and yes, there is some truth to it. However, delay-loading uses structures in the PE file and requires some support in the linker and loader, too. So I think it can equally stand on its own.\nStatic imports mean that the loader will resolve the name of the DLL and then attempt to resolve each of the functions imported from that DLL before your main thread even gets to start.\nDelay-loading puts the onus of resolving DLL name and functions on the application itself, provided the application overrides certain callbacks (see <pre><code>delayimp.h</code></pre>). This allows for more graceful error handling or even for providing fallback functionality on a downlevel Windows version.\nDynamic imports typically use <pre><code>LoadLibrary</code></pre> and/or <pre><code>LoadLibraryEx</code></pre> to load the DLL in question and <pre><code>GetProcAddress</code></pre> to retrieve the function addresses in the loaded DLL, which can then be called subsequently.\nOnly the first two (static and delay-load) will show up in the PE image. To find out dynamic imports you need to reverse engineer the binary and look for calls to <pre><code>LoadLibrary</code></pre> and <pre><code>GetProcAddress</code></pre>. This can be arbitrarily hard, depending on obfuscation or protection schemes applied to the PE image. A debugger (dynamic analysis) is theoretically also an option, but not for malware. The last possibility I see is using the Bochs Debugger in IDA or something like Unicorn or Qilin. Obviously some Sandboxes could also be an option and may answer what DLLs get loaded at what point by the malware (unless the malware has sandbox detection and behaves differently inside a sandbox).\n\nNow to the incorrectly named DLL. There are two ways to look at it (at least).\n\nThe DLL name could have changed\nthe .exe requires the DLL to have a particular name\n\nThe first scenario can often be spotted by looking at the export table, which also sometimes contains a DLL name (<pre><code>IMAGE_EXPORT_DIRECTORY::Name</code></pre>). But this isn't 100% waterproof, because this field may be NULL, as far as I know. But it's still good to know.\nThe second scenario means you need to find out what DLL name the .exe expects (via reverse engineering). It could be as easy as looking at the import table or delay-load imports, but you tried that already. So chances are you need a disassembler or similar tool to dig deeper.\nI'd probably try a few common DLL names which are prone to DLL placement attacks, such as <pre><code>version.dll</code></pre> and <pre><code>cryptsp.dll</code></pre>. By looking in the object manager namespace (using WinObj etc), you can weed out the \"safe\" DLLs from those that are prone to DLL placement attack by looking in <pre><code>\\KnownDlls</code></pre> (and its 32-bit counterpart on a 64-bit Windows).\nIf these don't yield results you have to employ a disassembler or similar, because you're out of the \"cheaper\" options. And that's where your question isn't specific enough (e.g. there is no file sample to look at) to be of further help.\n",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Apr 19, 2022 at 8:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}