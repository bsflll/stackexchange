{
    "title": "my question is what means proc near?",
    "link": "https://reverseengineering.stackexchange.com/questions/15906/my-question-is-what-means-proc-near",
    "content": "<pre><code>sub_123434 proc near \nmov esi, [ebp-1Ch] \nsub_123434 endp\n</code></pre>\nWhat means proc near? Can someone possibly explain also the whole\nfunction?\n",
    "votes": "3",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ida",
        "disassembly",
        "debugging"
    ],
    "user": "Yoonisj",
    "time": "Jul 24, 2017 at 13:43",
    "comments": [],
    "answers_data": [
        {
            "content": "Insofar as <pre><code>proc</code></pre> and <pre><code>endp</code></pre>, start here. A good explanation for <pre><code>near</code></pre>can be found from this document, which states as follows:\n\nAttribute is NEAR if the Procedure is in the same code segment as the\n  calling program; or FAR if in a different code segment.\n\nThe meat of the code is this:\n<pre><code>mov esi,[ebp-1Ch]\n</code></pre>\nThis bit of code is moving a value from the stack into the <pre><code>esi</code></pre> register. Depending on the compiler used and context, you might stand to glean additional information from register conventions where a value being moved into the <pre><code>esi</code></pre> register is concerned. More specifically, consider the accepted answer from this post.\nAlso, <pre><code>ebp-</code></pre> (as opposed to <pre><code>ebp+</code></pre>) is a typical sign of arguments that have been passed to a function--of which those values reside on the stack within memory addresses that can be referenced as long as that particular stack frame exists.\nRegarding <pre><code>[ebp-1Ch]</code></pre>, that's a pointer. In this case, the <pre><code>ebp</code></pre> register contains a memory address (or, more specifically, the value in <pre><code>ebp</code></pre> is treated as a reference to a memory address instead of a literal value), and <pre><code>-1Ch</code></pre> is an offset from that memory address. The lowercase 'h' is just a pneumonic meaning \"hex,\" and to that end, you might also sometimes see offsets and/or hex-based values referenced with a preceding 0x, like this: <pre><code>[ebp-0x1C]</code></pre>. Bearing that in mind, you can really think of that as <pre><code>[ebp-1C]</code></pre>.\nDo note that <pre><code>ebp</code></pre> and <pre><code>[ebp]</code></pre> are different things. <pre><code>[ebp]</code></pre> means the value inside of <pre><code>ebp</code></pre> is treated as a reference to a memory address. Let's assume <pre><code>ebp</code></pre> has <pre><code>0xD34DC0DE</code></pre> in it. Now consider the following:\n<pre><code>mov esi,ebp\nmov esi,[ebp]\nmov esi,[ebp-1C]\n</code></pre>\nThe results of each of these would be the following:\n<pre><code>mov esi,ebp</code></pre> // esi now contains the literal value 0xD34DC0DE\n<pre><code>mov esi,[ebp]</code></pre> // esi now contains whatever is inside the memory address 0xD34DC0DE\n<pre><code>mov esi,[ebp-1C]</code></pre> // esi now contains whatever is inside the memory address 0xD34DC0C2 (which is 0xD34DC0DE - 1C)\nOverall, it looks like that subroutine isn't doing anything but moving data from the stack into a register. As a completely blind assumption, if we assume that each argument passed to its respective function is 4-bytes wide, then <pre><code>[ebp-1C]</code></pre> references the 8th argument passed to perhaps a parent routine of this subroutine. In this case, other values of interest could potentially reside in <pre><code>[ebp]</code></pre>, <pre><code>[ebp-04]</code></pre>, <pre><code>[ebp-08]</code></pre>, <pre><code>[ebp-0C]</code></pre>, <pre><code>[ebp-10]</code></pre>, <pre><code>[ebp-14]</code></pre>, and/or <pre><code>[ebp-18]</code></pre>.\nUltimately, we're lacking context here to gather what the purpose of this function you've provided is--though, again, a combination of the aforementioned conventions can possibly tell you a lot about what that mov instruction is potentially a part of. Look into calling conventions for additional clarity. You should be able to infer and research the rest based on the information herein.\n",
            "votes": "4",
            "user": "dsasmblr",
            "time": "Jul 24, 2017 at 14:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Yoonisj: please post a new question about that and provide relevant code snippets</span>",
                    "time": null
                },
                {
                    "user": "Yoonisj",
                    "text": "<span class=\"comment-copy\">call ds: RegOpenKyEx                                                                               call ds: RegEnumKey                                                                                         mov edi,ds:RegCloseKey                                                                                                                                                                                                          what this malware do in this function, if these three function are below each other</span>",
                    "time": null
                }
            ]
        }
    ]
}