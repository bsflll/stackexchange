{
    "title": "Radare's `aaaa` and -AA what does it do, exactly?",
    "link": "https://reverseengineering.stackexchange.com/questions/19895/radares-aaaa-and-aa-what-does-it-do-exactly",
    "content": "When I run <pre><code>aaa</code></pre>, Radare tells me,\n<pre><code>[x] Use -AA or aaaa to perform additional experimental analysis.\n</code></pre>\nBut what does <pre><code>aaaa</code></pre> do? It's not documented under <pre><code>aa?</code></pre> nor <pre><code>aaa?</code></pre> nor \n<pre><code>[0x000028e0]> aaa?\nUsage: See aa? for more help\n[0x000028e0]> aaaa?\nUsage: See aa? for more help\n</code></pre>\nAnd <pre><code>man radare</code></pre> isn't more useful only saying,\n<pre><code> -A  run 'aaa' command before prompt or patch to analyze all referenced code. Use -AA to run aaaa\n</code></pre>\n<pre><code>radare --help</code></pre>, says\n<pre><code> -A run 'aaa' command to analyze all referenced code\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "radare2",
        "static-analysis"
    ],
    "user": "Evan Carroll",
    "time": "Nov 16, 2018 at 2:22",
    "comments": [],
    "answers_data": [
        {
            "content": "When you execute the <pre><code>aaa</code></pre> command, radare is showing you what are the steps it takes. Each step has the command responsible for it inside parentheses.\n<pre><code>[0x00000000]> aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Type matching analysis for all functions (afta)\n[x] Use -AA or aaaa to perform additional experimental analysis.\n</code></pre>\nAs you can see, <pre><code>aaa</code></pre> is a command which is executing other commands. It also prints a short description of what each command is doing. A little bit more detailed information can be found under <pre><code>aa?</code></pre>. So, to append this information together:\n\naa - alias for <pre><code>af@@ sym.*;af@entry0;afva</code></pre>\naac - analyze function calls (<pre><code>af @@ `pi len~call[1]`</code></pre>)\naar - analyze len bytes of instructions for references\naan - autoname functions that either start with <pre><code>fcn.*</code></pre> or <pre><code>sym.func.*</code></pre>\nafta - do type matching analysis for all functions\n\nSimilar to <pre><code>aaa</code></pre>, this information is being printed when <pre><code>aaaa</code></pre> is executed.\n<pre><code>[0x00000000]> aaaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Enable constraint types analysis for variables\n</code></pre>\nThe main change of <pre><code>aaaa</code></pre> is \"[x] Enable constraint types analysis for variables\". This basically enables the <pre><code>anal.types.constraint</code></pre> configuration variable.\n<pre><code>[0x00000000]> e? anal.types.constraint\nanal.types.constraint: Enable constraint types analysis for variables\n</code></pre>\n\nOn a personal note here, I would suggest not to use <pre><code>aaaa</code></pre> since it is quite buggy sometimes and probably would not be necessary.\n",
            "votes": "2",
            "user": "Megabeets",
            "time": "Nov 16, 2018 at 5:27",
            "is_accepted": true,
            "comments": []
        }
    ]
}