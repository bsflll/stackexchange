{
    "title": "Endoscope Camera YPC99 - how to stream on linux",
    "link": "https://reverseengineering.stackexchange.com/questions/23549/endoscope-camera-ypc99-how-to-stream-on-linux",
    "content": "I'm trying to stream video from endoscope camera <pre><code>YPC99</code></pre> on linux PC using the WiFi connection. From what I have found so far the camera is using IP 192.168.1.1. It supports <pre><code>RTSP</code></pre> protocol on port 7070 (the only one opened port).\nThe <pre><code>DESCRIBE</code></pre> reports that the stream should be JPEG video (<pre><code>RTP/AVP 26</code></pre>)\n<pre><code>DESCRIBE rtsp://192.168.1.1:7070/webcam RTSP/1.0\nCSec: 2\n\nRTSP/1.0 200 OK\nContent-Base: rtsp://192.168.1.1:7070/webcam/\nContent-Type: application/sdp\nContent-Length: 122\n\nv=0\no=- 1 1 IN IP4 127.0.0.1\ns=Test\na=type:broadcast\nt=0 0\nc=IN IP4 0.0.0.0\nm=video 0 RTP/AVP 26\na=control:track0\n</code></pre>\n<pre><code>VLC</code></pre> is showing black screen. <pre><code>ffmpeg</code></pre> also can't detect the correct codec to be used:\n<pre><code>$ ffmpeg -i rtsp://192.168.1.1:7070/webcam  -vcodec copy /tmp/abc.mp4\nffmpeg version n4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (Arch Linux 9.3.0-1)\n  configuration: --prefix=/usr --disable-debug --disable-static --disable-stripping --enable-fontconfig --enable-gmp --enable-gnutls --enable-gpl --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libdav1d --enable-libdrm --enable-libfreetype --enable-libfribidi --enable-libgsm --enable-libiec61883 --enable-libjack --enable-libmfx --enable-libmodplug --enable-libmp3lame --enable-libopencore_amrnb --enable-libopencore_amrwb --enable-libopenjpeg --enable-libopus --enable-libpulse --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libv4l2 --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxcb --enable-libxml2 --enable-libxvid --enable-nvdec --enable-nvenc --enable-omx --enable-shared --enable-version3\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\n  libpostproc    55.  5.100 / 55.  5.100\n[mjpeg @ 0x55ef344d0900] dqt: 0 quant value\n    Last message repeated 58 times\n[rtsp @ 0x55ef344ccfc0] decoding for stream 0 failed\n[rtsp @ 0x55ef344ccfc0] Could not find codec parameters for stream 0 (Video: mjpeg, none(bt470bg/unknown/unknown)): unspecified size\nConsider increasing the value for the 'analyzeduration' and 'probesize' options\nInput #0, rtsp, from 'rtsp://192.168.1.1:7070/webcam':\n  Metadata:\n    title           : Test\n  Duration: N/A, start: 0.000000, bitrate: N/A\n    Stream #0:0: Video: mjpeg, none(bt470bg/unknown/unknown), 90k tbr, 90k tbn, 90k tbc\n[mp4 @ 0x55ef344fcc40] dimensions not set\nCould not write header for output file #0 (incorrect codec parameters ?): Invalid argument\nStream mapping:\n  Stream #0:0 -> #0:0 (copy)\n    Last message repeated 1 times\n</code></pre>\nI have a <pre><code>wireshark</code></pre> dump of some seconds of streaming (while was trying to play it with VLC). From what I have read each frame should start with <pre><code>FFD8</code></pre> and should end with <pre><code>FFD9</code></pre>. There is no single package containing <pre><code>FFD8</code></pre> but there are many containing <pre><code>FFD9</code></pre>, so I can't find out the beginning of the frame to see if some headers there could help me.\nThere is <pre><code>andorid</code></pre> and <pre><code>iPhone</code></pre> apps to watch the stream from the camera. The app is called <pre><code>YCamera</code></pre>. I have downloaded the andorid app (https://apkpure.com/ycamera/cn.com.buildwin.YCamera) and have de-compile it. In the resources directory there are the following libs:\n\nlibijkffmpeg.so\nlibijkplayer.so\nlibijksdl.so\n\nIt seems that <pre><code>libijkffmpeg.so</code></pre> is the one processing the stream (the string <pre><code>bt470bg</code></pre> is found only inside it). According my research (for this one I'm not sure if I'm looking where I should) it's part of <pre><code>ijkplayer</code></pre> player that should be based on <pre><code>ffmpeg</code></pre> but strangely <pre><code>ffmpeg</code></pre> can't recognize the stream.\nI know that my question is too open but any suggestions how can I keep progressing?\nThe final goal is to be able to make this stream public. For this purpose it will be best if <pre><code>ffmpeg</code></pre> or <pre><code>vlc</code></pre> can recognize the stream.\n",
    "votes": "4",
    "answers": 4,
    "views": "4k",
    "tags": [
        "linux",
        "android"
    ],
    "user": "botzko",
    "time": "Mar 28, 2020 at 0:51",
    "comments": [
        {
            "user": "ErikAndren",
            "text": "Just to add some confusion to the fire. I also have one of these YPC99 and mine doesn't respond to rtsp access: erik@Barnard inskam % ffmpeg -i rtsp://192.168.1.1:7070/webcam -vcodec copy /tmp/abc.mp4 ffmpeg version 4.3.2 Copyright (c) 2000-2021 the FFmpeg developers built with Apple clang version 12.0.0 (clang-1200.0.32.29) configuration: --prefix=/usr/local/Cellar/ffmpeg/4.3.2 --enable-shared --enable-pthreads --enable-version3 --enable-avresample --cc=clang --host-cflags= --host-ldflags= --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enab\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Ok, I've started to look into this one by connecting to the PCB's RX/TX.\nBaudrate is 921600 (8N1) and I get this output:\n<pre><code>system version:84.12.5.4.87\nparam: clock=1615037753\nparam: tz=-3600\nusb host begin \nUSBHALHost init  begin \nmusb change to bdevice after usbc reset \nset_network_ap,enter\nusb connect 0x10\n----------------maclib task \n\n mark ip 1\n\n ip_table.ip_range[0] = 0x1\n\n mark ip 1\n\n ip_table.ip_range[0] = 0x1\nusb device connect \n[bool USBHostCam::connect():105]Trying to connect Cam device\nvid:0x5004,pid:0x4979\nfind mjpeg format index 1\nfind mjpeg frame 640*360 index 1\nfind mjpeg frame 640*480 index 2\nfind mjpeg frame 1280*720 index 3\naltsetting 1 max_packet_size 4608\naltsetting 2 max_packet_size 3072\naltsetting 3 max_packet_size 1024\naltsetting 4 max_packet_size 512\nfifo_count is 26\nget_cur 0\n01 00 01 01 80 96 98 00 00 00 00 00 00 00 00 00 00 00 00 8c 0a 00 00 06 00 00 \nfifo_count is 26\nset intf format 1, frame 1\nset intf altsetting 1\n1 min\n2 min\n3 min\n....\nN min\nN+1 min\n</code></pre>\nI can power it using the VCC (3.3V). Still haven't found out what firmware they are using and how to gain access. I thought I'd post my findings here. Will update when I know more.\n",
            "votes": "1",
            "user": "Jimmy Westberg",
            "time": "Mar 7, 2021 at 17:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ErikAndren",
                    "text": "<span class=\"comment-copy\">I've been able to replicate this but so far I have not been able to make it react to incoming serial</span>",
                    "time": null
                },
                {
                    "user": "ErikAndren",
                    "text": "<span class=\"comment-copy\">Some progress (?) By holding enter while booting you can enter a \"boot &gt;\" prompt. Some rudimentary commands are supported: 'c' - checksum type addr len    - CRC 1, SHA1 2, MD5 3 CRC_DMA 4  - Calculate Checksum from 'addr' with 'len' Command handler do not well, ret = -1  'g' - Usage: go type addr    - Auto 1, Custom 2  - start application at 'addr' with different type Command handler do not well, ret = -1</span>",
                    "time": null
                },
                {
                    "user": "ErikAndren",
                    "text": "<span class=\"comment-copy\">I've poked the i2c bus and there is a device at address 0x60. I've been unable to identify it nor read it out</span>",
                    "time": null
                },
                {
                    "user": "Jimmy Westberg",
                    "text": "<span class=\"comment-copy\">Ah! That's good to know. I'm gonna try some of that myself.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This seems to be a problem plaguing the internet. FFMpeg and all its derivatives I have tried (VideoLan, GStreamer...) cannot decode properly the MJPeg format used by this type of cameras (used in many types of drones, the I-Spy Mini tank, and the Endoscope Camera YPC99 you are mentioning). The android software provided for all these products is based on the IjkPlayer open source (which is mainly a ffmpeg specific build), but all the Windows versions I have tried failed to do the job. (I have posted my view in the https://trac.ffmpeg.org/ticket/8211)\nThe solution may be in the calculation of the buffer size [Â¿?]\nThat is the ONLY difference in the whole process.\nComparing one by one the analysis sequence of IjkPlayer on Android (FFmpeg: ff3.3--bw0.8.0--20180323--001-1-geb1575fefe) and FFPLAY on Windows (version 4.3.2-2021-02-27-full_build-www.gyan.dev) they are EXACTLY the same except when arriving at the stage of decoding the JFIF markers (specially the DA marker [Start of Scan]):\nIJKMEDIA [IjkPlayer]\nmarker=da avail_size_in_buf=37009\ncomponent: 0\ncomponent: 1\ncomponent: 2\nmarker parser used 36932 bytes (295454 bits)\nffplay -loglevel debug -i rtsp://192.168.1.1:7070/webcam\n[mjpeg @ 05ff6740]\nmarker=da avail_size_in_buf=17132\ncomponent: 0\ncomponent: 1\ncomponent: 2\nmjpeg_decode_dc: bad vlc: 0:0 (05b1e6a8)\nerror dc\nerror y=1 x=0\nmarker parser used 196 bytes (1568 bits)\nAs you can see the avail_size_in_buf reserved is consistently more or less half of the required (for all the frames) so the marker=da is just partially processed resulting in the final error\nApparently, this has nothing to do with the available memory as that other lines are more or less equal in both systems:\n[udp @ 05af7080] end receive buffer size reported is 65536\n[udp @ 05b0cdc0] No default whitelist set\n[udp @ 05b0cdc0] 'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)\n[udp @ 05b0cdc0] end receive buffer size reported is 65536\n[rtsp @ 05af50a0] setting jitter buffer size to 500\nHowever, unfortunately I have not found out how to change that behaviour on the Windows implementation, and the error persists.\nI am still waiting for some suggestions and will keep researching any possible solutions around this problem.\nHope that you are luckier than me!\n",
            "votes": "1",
            "user": "HappyCow",
            "time": "Mar 18, 2021 at 16:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "HappyCow",
                    "text": "<span class=\"comment-copy\">I have made an update to <a href=\"https://trac.ffmpeg.org/ticket/8211\" rel=\"nofollow noreferrer\">trac.ffmpeg.org/ticket/8211</a></span>",
                    "time": null
                },
                {
                    "user": "HappyCow",
                    "text": "<span class=\"comment-copy\">,,,tracking the behaviour of the the Ijkplayer Android version and the FFPlayer Windows version. The findings are summarized there. My final request was about if it were possible to get a \"replica\" build of the Android ffmpeg lib in Windows (the compilation directives are listed there) to further analyze those differences. If any expert in this group can indicate me how to get (or make) such binary version I would really appreciate.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Problem SOLVED!\nIt required a minor patch in ffmpeg because the mjpeg format used by this type of cameras is not fully compliant with the standard FF DD [Restart interval] JPEG marker.\nIt was solved by \"cehoyos\". See details at https://trac.ffmpeg.org/ticket/8211\nThis solution applies to the cameras used in some wifi-rc-tanks, a few cheap drones and [I  assume] to the YPC99 and other cameras using the rtsp://192.168.1.1:7070/webcam url (and playable by the IjkPlayer libs in android). Feel free to test it and report your findings.\nHappy engineering!\n",
            "votes": "1",
            "user": "HappyCow",
            "time": "Mar 31, 2021 at 17:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jimmy Westberg",
                    "text": "<span class=\"comment-copy\">This still needs the connection to be based on the camera/YPC99 access point? I'm hoping to have it connect to my network instead, to be able to have it monitor my 3D printers nozzles.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "https://hackaday.io/project/19680/logs\nI know it has been 10 months, but if you are interested in an answer to your question, the same module and protocol are used in cheap wifi drones. There are a few nuggets in there. One thing I noticed as I look through the wireshark log of the app I was sniffing, each time one of these packets was sent, a new port was assigned to client and server.\n<pre><code> OPTIONS rtsp://192.168.1.1:7070/webcam RTSP/1.0\n CSeq: 1\n User-Agent: Lavf56.40.101\n\n RTSP/1.0 200 OK\n CSeq: 1\n Public: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE\n\n DESCRIBE rtsp://192.168.1.1:7070/webcam RTSP/1.0\n Accept: application/sdp\n CSeq: 2\n User-Agent: Lavf56.40.101\n\n RTSP/1.0 200 OK\n CSeq: 2\n Content-Base: rtsp://192.168.1.1:7070/webcam/\n Content-Type: application/sdp\n Content-Length: 122\n\n v=0\n o=- 1 1 IN IP4 127.0.0.1\n s=Test\n a=type:broadcast\n t=0 0\n c=IN IP4 0.0.0.0\n m=video 0 RTP/AVP 26\n a=control:track0\n SETUP rtsp://192.168.1.1:7070/webcam/track0 RTSP/1.0\n Transport: RTP/AVP/UDP;unicast;client_port=8974-8975\n CSeq: 3\n User-Agent: Lavf56.40.101\n\n RTSP/1.0 200 OK\n CSeq: 3\n Transport: RTP/AVP;unicast;client_port=8974-8975;server_port=52844-52845\n Session: AEAFB0B1B2B3B4B5B6B7B8B9BABBBC\n\n PLAY rtsp://192.168.1.1:7070/webcam/ RTSP/1.0\n Range: npt=0.000-\n CSeq: 4\n User-Agent: Lavf56.40.101\n Session: AEAFB0B1B2B3B4B5B6B7B8B9BABBBC\n\n RTSP/1.0 200 OK\n CSeq: 4\n Session: AEAFB0B1B2B3B4B5B6B7B8B9BABBBC\n</code></pre>\n",
            "votes": "0",
            "user": "Travis",
            "time": "Feb 17, 2021 at 2:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}