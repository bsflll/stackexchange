{
    "title": "Can either volatility or GDB dump only the heap memory of a process under Linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/8619/can-either-volatility-or-gdb-dump-only-the-heap-memory-of-a-process-under-linux",
    "content": "What I am looking to do is programmatically analyze the contents of each processes heap on a system I control. I've been searching for an easily scriptable way to do this with either gdb, or volatility under Linux, and have found no commands that just do this. The purpose is to parse the results for various corruptions / inadvisable practices. \nDo any exist? It seems like something a lot of people might use. \nSo far I think I would need to chain what I learned from https://unix.stackexchange.com/questions/73627/how-to-find-heap-memory-of-a-running-process (using /maps to find the heap address) with either volatility of GDB, but I am very surprised that there isn't a command that does this out of the box.\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "gdb",
        "memory",
        "digital-forensics",
        "heap"
    ],
    "user": "MrSynAckSter",
    "time": "Apr 13, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "This is so easy to do using nothing but the shell, and probably so specific (since most people want to check more than the heap), that there's probably no real reason to write a command for it.\nI'd do something like\n<pre><code>for pid in <whatever you need to get a pid list>; do\n    heap=$(fgrep '[heap]' /proc/$pid/maps)\n    addrs=$(echo $heap | cut -d' ' -f1)\n    start=$(echo $addrs | cut -d'-' -f1)\n    end=$(echo $addrs | cut -d'-' -f2)\n    echo \"dump binary memory heap.$pid $start $end\" | gdb -p$pid\ndone\n</code></pre>\nto have <pre><code>gdb</code></pre> attach to each process in the list, dump its heap to a file, and detach (implicit as standard input reaches EOF).\nYou can probably use shell builtin substitution to parse the [heap] line a bit better; i learned shell programming when 'shell' meant <pre><code>sh</code></pre>, not <pre><code>bash</code></pre> or <pre><code>ksh</code></pre>, and tend to stick to how to do stuff with the old bourne shell.\nNote that, when gdb attaches to your process, the process may be in the middle of <pre><code>malloc()</code></pre> and updating the internal heap structures, which might result in your program returning a false positive 'heap corrupt' result. If this is an issue, append something like <pre><code>break memcpy\ncont\n</code></pre> in front of the dump command. This will still be a problem if, in a multithreaded program, one thread hits <pre><code>memcpy</code></pre> while another does a <pre><code>malloc</code></pre>, and your <pre><code>memcpy</code></pre> might never be called if the compiler inlines it everywhere, so you might need to get quite fancy here to get a good result.\n",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "Apr 1, 2015 at 20:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}