{
    "title": "Convert MIPS assembly code to C? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/3959/convert-mips-assembly-code-to-c",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nCan someone help me convert the following MIPS code back to C?\nAssume that the variables <pre><code>f</code></pre>, <pre><code>g</code></pre>, <pre><code>h</code></pre>, <pre><code>i</code></pre>, and <pre><code>j</code></pre> are assigned to registers <pre><code>$s0</code></pre>, <pre><code>$s1</code></pre>, <pre><code>$s2</code></pre>, <pre><code>$s3</code></pre>, and <pre><code>$s4</code></pre>, respectively. Base address of the arrays <pre><code>A</code></pre> and <pre><code>B</code></pre> are in registers <pre><code>$s6</code></pre> and <pre><code>$s7</code></pre>, respectively.\n<pre><code>sll $t0, $s0, 2      # $t0 = f * 4\nadd $t0, $s6, $t0    # $t0 = &A[f]\nsll $t1, $s1, 2      # $t1 = g * 4\nadd $t1, $s7, $t1    # $t1 = &B[g]\nlw $s0, 0($t0)       # f = A[f]\naddi $t2, $t0, 4 \nlw $t0, 0($t2)\nadd $t0, $t0, $s0\nsw $t0, 0($t1)\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "24k",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "Pete",
    "time": "11 years ago",
    "comments": [
        {
            "user": "avgvstvs",
            "text": "What have you already come up with?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Seems like your h, i and j aren't used at all.\nHere is your code including my comments:\n<pre><code>sll $t0, $s0, 2         # $t0 = f * 4\nadd $t0, $s6, $t0       # $t0 = &A[f]\nsll $t1, $s1, 2         # $t1 = g * 4\nadd $t1, $s7, $t1       # $t1 = &B[g]\nlw $s0, 0($t0)          # f = A[f]\naddi $t2, $t0, 4        # $t2=$t0+4 => $t2 points to A[f+1] now\nlw $t0, 0($t2)          # $t0 = A[f+1]\nadd $t0, $t0, $s0       # $t0 = $t0 + $s0  => $t0 is now A[f] + A[f+1]\nsw $t0, 0($t1)          # store the result into B[g]\n</code></pre>\nSo the whole snipped could have been\n<pre><code>B[g] = A[f] + A[f+1];\n</code></pre>\nin C. Assuming, of course, that A and B are arrays of 4-byte integers.\n",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Mar 25, 2014 at 21:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}