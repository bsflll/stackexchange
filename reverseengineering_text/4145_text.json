{
    "title": "How does WinLoad.exe load the rest of the operating system?",
    "link": "https://reverseengineering.stackexchange.com/questions/4145/how-does-winload-exe-load-the-rest-of-the-operating-system",
    "content": "I have disassembled the file WinLoad.exe as a 32-bit PE for i386 ISA, and I'll show some of the instructions I do not get are for:\n<pre><code>call   0x00408b6d <---\n\ntest   al,al \n\nje     0x0040109f \n\nlea    eax,[esp+0x20] <--- \n</code></pre>\nFirst of all, what is at the memory address the call instruction is at? Second, what is the leave instruction do?\n<pre><code>cmp    BYTE PTR [esp+0x12],0x0 <---\nmov    eax,DWORD PTR [esp+0x20]\nmov    DWORD PTR [esp+0x1c],eax\n</code></pre>\nThird, how does the compare instruction make sense?\nLast, what does this do?\n<pre><code>rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]  \n</code></pre>\nAlso, how I can tell if this file is statically or dynamically linked? I mean, when executed, if it's statically linked it must've been compiled that way. If dynamic there must be other program running. Basically, this is suppose to be the first executable on boot of a PE.\n",
    "votes": "0",
    "answers": 1,
    "views": "775",
    "tags": [
        "disassembly",
        "assembly",
        "pe",
        "operating-systems"
    ],
    "user": "ba-sle",
    "time": "Apr 25, 2014 at 21:16",
    "comments": [
        {
            "user": "Jonathon Reinhart",
            "text": "You might consider getting more familiar with reverse engineering of x86 user-mode software before digging into bootloaders.\n",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "<pre><code>REP</code></pre> commands are always a type of loop that copies everything from one thing to another thing. like <pre><code>memcpy</code></pre> I usually use IDA PRO to figure out what each assembly instruction does. NOP alot of code at some address in some application and assemble which ASM you want to figure out then Press <pre><code>F5</code></pre> and see what the code translates too in C for IDA PRO.\n",
            "time": null
        },
        {
            "user": "Milind R",
            "text": "<pre><code>winload.exe</code></pre> is NOT the first PE. <pre><code>bootmgr.exe</code></pre> is the first PE to run in the boot process of Windows NT6. See www.nvlabs.in/uploads/projects/vbootkit/nitin_vipin_vista_vbootkit.ppt . <pre><code>bootmgr.exe</code></pre> is embedded inside the file <pre><code>bootmgr</code></pre> that you can find on your system partition.\n",
            "time": null
        },
        {
            "user": "Milind R",
            "text": "@JonathonReinhart I think bootloaders are easier for people without much professional programming experience : they are simpler and not threaded.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The <pre><code>call</code></pre> instruction is nothing but a fancy jump to a location in the code. Usually, it's a basic block ending with a <pre><code>ret</code></pre> instruction, namely a function. So at the address 0x00408b6d, you'll find a function.\nThe <pre><code>lea</code></pre> instruction has nothing to do with the <pre><code>leave</code></pre> instruction. <pre><code>lea</code></pre> stands for 'load from effective address' meaning that the <pre><code>eax</code></pre> register will contain the value pointed out by the address in <pre><code>esp+0x20</code></pre>.\nIf you want to understand what's going on with the <pre><code>cmp</code></pre> and <pre><code>rep</code></pre> you should check these two links : <pre><code>cmp</code></pre>, <pre><code>rep</code></pre>. The explanations are clear and you'll know what flags are set and what happens when an instruction is executed.\nFor the remaining part I just couldn't guess what you tried to say and I prefer to ask you to provide more clarifications if possible.\n",
            "votes": "3",
            "user": "perror",
            "time": "Apr 26, 2014 at 13:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}