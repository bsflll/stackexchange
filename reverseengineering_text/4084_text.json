{
    "title": "Why ther are some many padding/leading nop instructions in my binary code?",
    "link": "https://reverseengineering.stackexchange.com/questions/4084/why-ther-are-some-many-padding-leading-nop-instructions-in-my-binary-code",
    "content": "The test platform is on Linux 32bit, x86. \nSo basically I wrote a simple C program like this:\n<pre><code>void main()\n{\n        double a = 10.0;\n        printf(\"hello world %f\n\", a);\n\n}\n</code></pre>\nI use gcc to compile to into ELF binary, and use objdump to disassemble it. I solve the reference to .rodata section, and refine the asm code in this :\n<pre><code>extern  printf\nsection .rodata\n\nS_80484d0   db 0x68\ndb 0x65\n  db 0x6c\ndb 0x6c\ndb 0x6f\ndb 0x20\ndb 0x77\ndb 0x6f\ndb 0x72\ndb 0x6c\ndb 0x64\ndb 0x20\ndb 0x25\ndb 0x66\ndb 0x0a\n\n\nS_80484f0 db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40\n\nsection .text\nglobal main\nmain:\npush   ebp\nmov    ebp,esp\nand    esp,0xfffffff0\nsub    esp,0x20\nfld    qword [S_80484f0]\nfstp   QWORD [esp+0x18]\nfld    QWORD [esp+0x18]\nfstp   QWORD [esp+0x4] \nmov    DWORD [esp],S_80484d0\ncall   printf\nleave\nret\n</code></pre>\nThen I re-compile this asm code to get a new ELF binary, and comparing the .text section of these two binaries.\nHere is the confusing thing: The only different I can find is that there are more leading nop in front of the main function like this:\nnew ELF binary leading nop:\n\nnew ELF binary ending nop:\n\nold ELF binary:\n\nBasically I don't think it is kinda of \"alignment\" issue, because there are just too much nop.\nWhat's more, when I change the original code into just a simple helloworld code(without double number a), then basically there is no difference between these two ELF binaries.\nCould anyone give me some help on why there are so many nop generated?\nThank you\n",
    "votes": "5",
    "answers": 1,
    "views": "5k",
    "tags": [
        "disassembly",
        "assembly",
        "elf"
    ],
    "user": "lllllllllllll",
    "time": "Apr 16, 2014 at 15:07",
    "comments": [
        {
            "user": "Jongware",
            "text": "It is alignment. Why would there be a maximum for this? Alignment can be as small or large as a compiler thinks is useful (in your case it seems to dither between 4 and 16 bytes).\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "Try a gcc -S on your original .c file, and you'll get the assembler code the C compiler produces. I bet the the assembler file has some \".align 16\" directives in it.\n",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "@GuntramBlohm Thank you, yes I tried, but I can only find a â€œ.align 8\" at the end of the main function\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Alignment.\nNote that all of the NOPs end (and the next function begins) at ...C0, ...F0. The compiler and/or linker inserted padding bytes so that the functions begin at 0x10 aligned addresses.\nDifferent compilers / linkers will use different values for these bytes.  I've seen 90 (nop), CC (int3), as well as multi-byte NOPs that exactly fill the space between the functions.\nYou should check out this great answer on the same question over at Stack Overflow. \nIn short, this is done for performance reasons, as processors typically fetch instructions in 16- or 32-byte strides, so it makes sense to have functions begin at one of these boundaries.\n",
            "votes": "10",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">The last image shows function alignment on <code>0x00b4</code> instead. But that might just be compiled with a different optimization, or possibly a library function.</span>",
                    "time": null
                },
                {
                    "user": "Jonathon Reinhart",
                    "text": "<span class=\"comment-copy\">@usr2564301 Note that the last image has the caption <i>\"old ELF binary\"</i>; it's what the OP was comparing against.</span>",
                    "time": null
                }
            ]
        }
    ]
}