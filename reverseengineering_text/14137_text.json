{
    "title": "Finding out hash type having initial string and hash",
    "link": "https://reverseengineering.stackexchange.com/questions/14137/finding-out-hash-type-having-initial-string-and-hash",
    "content": "I am a part of community dedicated to modding videogames. We've are having troubles identifying hash type. \nWhat do we have: \nA list of text strings and hex representations of their hashes - http://textuploader.com/5e3xo. \nLast 2 bytes are always 00 00 no matter how long is the initial string.\nIt doesn't look like a regular hash (ie md5), so I am asking for help in indentifying it. \nThese hashes are used in fmdl files from Metal Gear Solid V.\n",
    "votes": "0",
    "answers": 1,
    "views": "125",
    "tags": [
        "encryption"
    ],
    "user": "unknown123",
    "time": "Dec 8, 2016 at 19:41",
    "comments": [
        {
            "user": "DevZer0",
            "text": "its very possible the last 2 values are not part of the hash and/or reserved for some future features, such as trading items, (can be used as a counter, versioning etc) or it was simply used as padding to get a 16 bit alignment\n",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "Why not scan the MGSV executable for the hash function used instead of speculating to infinity?\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "Are you sure the hash is for the name and not e.g. file contents? How did you recover names?\n",
            "time": null
        },
        {
            "user": "unknown123",
            "text": "@IgorSkochinsky there were 2 versions of same file - compressed and uncompressed version. By comparing them we found out that number of hashed entries is equal to number of strings in uncompressed file.  Last 2 values is just padding. We know it uses CityHash, md5, some zlib stuff (according to listed licenses), but none of these match. They are probably using their own homemade solution.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "With data like this:\n<pre><code>NAME                           HASH in FMDL\n(UNRESOLVED NAME)              98 9F 16 BF A0 B8 00 00\nSKL_000_WAIST                  6B B2 C5 36 06 ED 00 00\nSKL_001_SPINE                  67 F6 4A 17 FD B2 00 00\n</code></pre>\nAssuming the last two bytes are not part of the hash - as they're always <pre><code>0x00 00</code></pre>, they really can't be - you're looking at 6 byte / 48 bit values.  There is no well known hash function which defaults to 48 bits. \nIt could be a custom hash function.  It could be an obscure hash function.  Neither of those answers helps you much.\nIt could be a concatenation of multiple values, such as a 16-bit Cyclical Redundancy Check and a 32-bit Hash.  In a video game, where low-cost checks may be desirable at use time with limited resources and higher-cost checks may be desirable on a one-time basis, this is a reasonable possibility.\nIf you can cause these values to be re-generated, then you may be able to determine this.  CRCs are very easily prone to collision; you can tweak the file in various ways and still end up with the same CRC.  Hashes, on the other hand, are far less likely to remain the same after a file modification.  If you can experiment with making small tweaks to the file and regenerating this value, you may gain useful insight.\n",
            "votes": "1",
            "user": null,
            "time": "Dec 9, 2016 at 4:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}