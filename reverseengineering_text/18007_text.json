{
    "title": "Disassembly shows `LEA` with RIP?",
    "link": "https://reverseengineering.stackexchange.com/questions/18007/disassembly-shows-lea-with-rip",
    "content": "When I disassemble this instruction using <pre><code>pad</code></pre> on Radare I get an <pre><code>LEA</code></pre> with <pre><code>rip</code></pre>\n<pre><code>[0x00000000]> pad 8d 15 c8 90 04 08\nlea edx, [rip + 0x80490c8]\n</code></pre>\nI got this instruction from this post here I'm confused though why the disassembly shows <pre><code>rip + 0x80490c8</code></pre>, when the original post claims it's the equivalent of <pre><code>mov</code></pre>? Is this the right disassembled output? Why would the instruction pointer be in the <pre><code>LEA</code></pre>? Is that an implicit base, or did the original poster make a mistake?\n",
    "votes": "6",
    "answers": 2,
    "views": "8k",
    "tags": [
        "assembly",
        "x86",
        "radare2"
    ],
    "user": "Evan Carroll",
    "time": "Apr 16, 2018 at 4:49",
    "comments": [],
    "answers_data": [
        {
            "content": "It is simply a matter of bits. In the example shown, the hexpairs are disassembled using 64bit assembly, and you probably want to change it to a 32bit assembly. Just tell radare that you are working with 32bits and it will do the job for you:\n<pre><code>[0x00000000]> pad 8d 15 c8 90 04 08\nlea edx, [rip + 0x80490c8]\n\n[0x00000000]> e asm.bits =32\n\n[0x00000000]> pad 8d 15 c8 90 04 08\nlea edx, [0x80490c8]\n</code></pre>\nUnlike 32bits modes instructions that were taken as absolute addresses (use 32-bit immediate offset addressing), the 64bits modes (a.k.a long-mode) are usually using 32-bit offset from the current RIP, not from 0x00000000 like before. That means that you don't have to know the absolute address of something you want to reference, you only need to know how far away it is from the currently executing instruction. \nThere are very few addressing modes which use a full 64bit absolute address. Most addressing modes are 32bit offsets relative to one of the 64bit registers (usually RIP).\n",
            "votes": "8",
            "user": "Megabeets",
            "time": "Apr 16, 2018 at 5:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">that's interesting. I could see it happening the other way around, but I wonder how the 32 bit opcode got translated into the same 64bit opcode with the RIP operand (for free).</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">Added explanation for the reason behind. Again, simply the shift from 32bit to 64bit</span>",
                    "time": null
                },
                {
                    "user": "Jules",
                    "text": "<span class=\"comment-copy\">@EvanCarroll - if you've been doing this for long enough to be familiar with it, it's similar to the way going from 16-bit code to 32-bit changed all your 'ax' (etc) references to 'eax': in each mode there are default settings that are designed to be sensible <i>for that mode</i>, which cause slight changes in the interpretation of each instruction.</span>",
                    "time": null
                },
                {
                    "user": "Peter Cordes",
                    "text": "<span class=\"comment-copy\">@EvanCarroll: 32-bit x86 has 2 redundant ways to encode <code>[disp32]</code> (with no registers): with and without a SIB.  x86-64 repurposed the without-SIB version to mean <code>[RIP + rel32]</code>, leaving the longer with-SIB version to still mean <code>[sign_extended_disp32]</code> like when you use a disp32 with GP registers.  In NASM syntax, <code>[rel foo]</code> vs. <code>[abs foo]</code>, or use <code>default rel</code>.</span>",
                    "time": null
                },
                {
                    "user": "Peter Cordes",
                    "text": "<span class=\"comment-copy\">@Megabeets: Only the special <code>mov al/ax/eax/rax, moffs</code> form of <code>mov</code> (and the store form) use a full 64-bit / 8-byte absolute address.  There are no ModR/M addressing modes that can be used with other instructions that accept more than an absolute disp32.  So your last sentence could say that there aren't any normal addressing modes.  Actually that's a little weird.  <i>normally</i>, you just use small offsets relative to an address in registers, like <code>[rdi + 8]</code>, <i>or</i> RIP-relative.  But yeah in position-dependent code you can index a static array with <code>[array + rdi]</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "32-bit x86 has 2 redundant ways to encode <pre><code>[disp32]</code></pre> (with no registers): with and without a SIB byte.  Assemblers will of course always use the shorter form, and that's what the link in your question is showing.\nYou're disassembling as 64-bit machine code.\nx86-64 repurposed the without-SIB version to mean <pre><code>[RIP + rel32]</code></pre>, leaving the longer with-SIB version to still mean <pre><code>[sign_extended_disp32]</code></pre> like when you use a disp32 with GP registers.  (RIP-relative is not available combined with any GP registers; only this one specific ModR/M encoding.)\nIn NASM syntax, <pre><code>[rel foo]</code></pre> vs. <pre><code>[abs foo]</code></pre>, or use <pre><code>default rel</code></pre>.\n\nAFAIK, <pre><code>lea r32, [disp32]</code></pre> instead of <pre><code>mov r32, imm32</code></pre> is never useful for performance on any CPU I'm aware of, except to make an instruction longer on purpose instead of padding with NOP.\nThe only use-case for <pre><code>lea</code></pre> for static addresses is in 64-bit code with RIP-relative LEA.\nSee this canonical answer for more about LEA, but really this question has nothing to do with LEA specifically, and would have happened with any instruction that used a <pre><code>disp32</code></pre> ModR/M addressing mode decoded in the wrong mode.  You only ran into this because you found an example that compared using an inefficient <pre><code>lea</code></pre> with an efficient <pre><code>mov</code></pre>-immediate in 32-bit mode.\n",
            "votes": "3",
            "user": "Community",
            "time": "Dec 20, 2019 at 7:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}