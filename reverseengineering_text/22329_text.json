{
    "title": "Easy way to understand vulnerable functions while Reversing [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/22329/easy-way-to-understand-vulnerable-functions-while-reversing",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 5 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI have been doing reversing lately and not an experienced Reverse engineer. Mostly I do audit on binaries both fuzzing and source code.\nAs I am new to this stuff, I am getting some issues of understanding, in some cases I can see naked functions like memcpy,strcpy etc. but in other cases I can see only assembly functions, which is getting difficult to understand. I am trying with IDA.\nI know I can use decompiler from IDA pro, but I want to go with free version and want to understand briefly.\nAny resources available online, please let me know.\n",
    "votes": "0",
    "answers": 1,
    "views": "109",
    "tags": [
        "ida",
        "binary-analysis",
        "patch-reversing"
    ],
    "user": "Bikash Dash",
    "time": "5 years ago",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "This type of question is not a good fit for this site. Try to focus on a single, specific problem or an issue you're having.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is no magic bullet. To understand the code you need to figure out what it's doing and this is not easy. You can start by going line by line, but after some practice you should start seeing patterns at a glance.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 22, 2019 at 8:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">I don't agree, if the question is about fuzzing, then it's pretty clear, that the more code - the more bugs. I.e. it's more likely to find the vulnerability in the big complex functions than in some short ones. And I think going line by line approach is something, that dies out.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@AntonKukoba: you have a point but the question was about understanding, not simply finding bugs</span>",
                    "time": null
                }
            ]
        }
    ]
}