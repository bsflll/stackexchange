{
    "title": "Access violation error only when stepping after breakpoint in Immunity",
    "link": "https://reverseengineering.stackexchange.com/questions/12457/access-violation-error-only-when-stepping-after-breakpoint-in-immunity",
    "content": "Following a tutorial at http://www.fuzzysecurity.com/tutorials/expDev/2.html, regarding buffer overflows. I am able to execute the shellcode successfully. Used 'jmp esp' instead of 'pop esp; retn' as showed in tutorial.\nProblem is, when I set breakpoint at the overwritten EIP address(I use 'jmp esp' from ntdll.dll) and try to step into(continously pressing F7), I run into access violation at 0x00443B46. If I try to see what is lying at this memory address, immunity can't find anything. \nIf after reaching breakpoint, I execute program(by pressing F9), or don't use breakpoints at all, everything works fine.\nWhat does get changed by immunity while stepping, which leads to this error? \nUpdate(23-Apr-2016) : I was just being specific about my steps, since using both instructions I am able to make the program jump to my NOP sled followed by the shellcode. Issue is, when I try to walkthrough the shellcode step by step(using F7), I run into 'access violation when writing to 0x00443B46'.\nEither I use 'jmp esp' or 'pop esp; retn', it does not matter, problem is independent of this, because anyhow, both instruction executes properly and program proceeds further.\nThe only difference is, setting a breakpoint and proceeding step by step leads to this problem, and with no breakpoints, no problems.\n",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "immunity-debugger",
        "buffer-overflow",
        "breakpoint"
    ],
    "user": "Nikhil",
    "time": "Apr 23, 2016 at 16:58",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "\"Used 'jmp esp' instead of 'pop esp; retn' as showed in tutorial.\" -- this sounds quite fishy to me. What exactly are you doing? I suspect you're jumping to some location directly \"behind\" the stack pointer, and when you do your F7 stepping, the debugger executes an <pre><code>INT 3</code></pre> in each step, thus overwriting the stack, and with it, your memory location. But you'll have to improve your question and be much more specific to make it clear, if you want a helpful answer.\n",
            "time": null
        },
        {
            "user": "Nikhil",
            "text": "added some more explanation as an update\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As @guntram-blohm suggested, \"Used <pre><code>jmp esp</code></pre> instead of <pre><code>pop esp;</code></pre> <pre><code>retn</code></pre>\" is likely a problem.\n<pre><code>pop esp;</code></pre> <pre><code>retn</code></pre> effectively does the following, which is very different from <pre><code>jmp esp</code></pre>:\n<pre><code>mov esp, dword ptr [esp]\njmp dword ptr [esp]\nadd esp, 4\n</code></pre>\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Apr 16, 2016 at 23:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}