{
    "title": "How to find out all the locations that call an external function using ida pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/19448/how-to-find-out-all-the-locations-that-call-an-external-function-using-ida-pro",
    "content": "I just want to find out all the locations that call the standard library function <pre><code>pthread_attr_getstack</code></pre> using ida pro. There is an entry in .plt:  \n<pre><code>.plt:00015894 ; =============== S U B R O U T I N E =======================================\n.plt:00015894\n.plt:00015894 ; Attributes: thunk\n.plt:00015894\n.plt:00015894 ; int pthread_attr_getstack(const pthread_attr_t *attr, void **stackaddr, size_t *stacksize)\n.plt:00015894 pthread_attr_getstack\n.plt:00015894                 ADRL            R12, 0x3AD89C\n.plt:0001589C                 LDR             PC, [R12,#(pthread_attr_getstack_ptr - 0x3AD89C)]! ; __imp_pthread_attr_getstack\n.plt:0001589C ; End of function pthread_attr_getstack\n</code></pre>\nIf I double click the <pre><code>__imp_pthread_attr_getstack</code></pre>, it will go to:\n<pre><code>extern:003D8520 ; int pthread_attr_getstack(const pthread_attr_t *attr, void **stackaddr, size_t *stacksize)\nextern:003D8520                 IMPORT __imp_pthread_attr_getstack\nextern:003D8520                                         ; CODE XREF: pthread_attr_getstack+8↑j\nextern:003D8520                                         ; DATA XREF: .got:pthread_attr_getstack_ptr↑o\n</code></pre>\nAnd if I double click <pre><code>pthread_attr_getstack+8↑j</code></pre>, it will go to the above .plt entry, and if I double click <pre><code>.got:pthread_attr_getstack_ptr↑o</code></pre>, it will go to one .got entry:\n<pre><code>.got:003ADD8C pthread_attr_getstack_ptr DCD __imp_pthread_attr_getstack\n.got:003ADD8C                                         ; DATA XREF: pthread_attr_getstack+8↑r\n</code></pre>\nAnd if I double click the <pre><code>pthread_attr_getstack+8↑r</code></pre> in the .got entry, it will go to the above .plt entry as well. Does this mean that there is no code calling <pre><code>pthread_attr_getstack</code></pre>? If the answer is no, then how to find out all of locations calling <pre><code>pthread_attr_getstack</code></pre>?\nBy the way, this is the elf which is named libmono.so that I want to reverse.\nOne thing to emphasis, the libmono.so elf file is very liked to be encrypted, that is to say, there may be a lot of obfuscated code in libmono.so.\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "got",
        "plt"
    ],
    "user": "cong",
    "time": "Sep 27, 2018 at 2:00",
    "comments": [
        {
            "user": "NirIzr",
            "text": "Have you tried hitting x to see cross references?\n",
            "time": null
        },
        {
            "user": "cong",
            "text": "yes, I tried, no further progress had been made.\n",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "See that subroutine in graph mode.\n",
            "time": null
        },
        {
            "user": "cong",
            "text": "@Biswapriyo, won't work.\n",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "Are you certain the binary actually uses the function?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "After downloading and reviewing the file you shared, I can certainly say the <pre><code>pthread_attr_getstack</code></pre> function is never used by the binary.\nIf you're still certain the function is used it could be the case that:\n\nThe function is dynamically loaded. I've searched for any clear dynamic loading using the <pre><code>dlsym</code></pre> function but I could've missed something (or there could be something more elaborate going on.\nThe function could be used through another binary that is by itself used by your binary.\n\nIn any case, for multiple reasons presence in the import table does not necessarily imply the function is being used by the binary.\n",
            "votes": "2",
            "user": "NirIzr",
            "time": "Sep 26, 2018 at 20:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "cong",
                    "text": "<span class=\"comment-copy\">I tried with <code>readelf -Ds libmono.so | grep pthread_attr_getstack</code>, the output is: <code>583 778: 00000000     0 FUNC    GLOBAL DEFAULT UND pthread_attr_getstack</code>, does this mean that <code>pthread_attr_getstack</code> is used in this binary file? And one thing to emphasis, the libmono.so binray file is very liked to be encrypted, that is to say, there may be a lot of obfuscated code in libmono.so binary file.</span>",
                    "time": null
                }
            ]
        }
    ]
}