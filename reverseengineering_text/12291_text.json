{
    "title": "Memory Read Access Breakpoint Question",
    "link": "https://reverseengineering.stackexchange.com/questions/12291/memory-read-access-breakpoint-question",
    "content": "I have implemented a Memory Read Access hardware breakpoint in C code.\nIt works perfect and provides me the next instruction after a memory is read.\nI am using BeaEngine to disassemble the instruction at <pre><code>EIP</code></pre>.\nI need to find out the previous executed instruction which is effectively the one that accessed the memory in question (For example, like Cheat Engine does it).\nHow can I accomplish this?\n",
    "votes": "4",
    "answers": 1,
    "views": "322",
    "tags": [
        "disassembly",
        "breakpoint"
    ],
    "user": "fred26",
    "time": "Apr 28, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "This is a tricky question.\nOn x86 platform the maximum length of an instruction is 15 bytes. \nYou can read 15 bytes backwards from the current EIP and pass it to <pre><code>Disasm</code></pre> function of BeaEngine. This returns the length of the disassembled instruction. If this equals 15 you have found the previous instruction. If it is less than 15, then pass 1 byte less (i.e 14 bytes) and so on until the length of the buffer passed to BeaEngine equals the length of the disassembled instruction.\nThis can be represented in pseudo code\n<pre><code>eip = 0xDEADCODE\n\nlength = 15\nwhile(length > 0)\n{\n    buffer = ReadProcessMemory(start=eip-length, length)\n    lenDisasm = Disasm(buffer)\n\n    if (lenDisasm == length) \n    {\n        prevIns = eip-length\n        break;\n    }\n    else length--;\n}\n</code></pre>\nNote that the above algorithm is not generic in nature i.e. you cannot use it to find the previously executed instruction given the current <pre><code>eip</code></pre>. This only works when the execution sequence is linear without any jumps in between. In case of hardware breakpoints on access the execution sequence is guaranteed to be linear and the above algorithm is applicable.\nEDIT:\nEven in case of hardware breakpoints on access the execution sequence may not be linear as in the following case\n<pre><code>format PE\n\nentry start\n\nsection '.text' code readable executable\n\nstart:\n    nop\n    nop\n    jmp dword [here]\n    mov eax, 1\n    push eax\n    pop eax\n\naddress:\n    xor eax, eax\n    ret     \n\nsection '.data' readable writable\n\nhere:   ; <<<<<<<< HWBP on read\n dd address\n</code></pre>\nA hardware breakpoint on read is set on <pre><code>here</code></pre>. In this case the hwbp would hit when <pre><code>EIP</code></pre> is at <pre><code>address</code></pre>. If you use the above algorithm, the previously executed instruction turns out to be <pre><code>pop eax</code></pre> which is incorrect. \nFor such cases you can use instruction tracing or memory breakpoints (1, 2, 3).\n",
            "votes": "5",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "fred26",
                    "text": "<span class=\"comment-copy\">Makes sense, thanks so much for the explanation!</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">even if the execution sequence is linear, you might not find what you expect.  Consider the 32-bit disassembly 8B 8B 05 78 56 34 12.  Then consider 8B 05 78 56 34 12.  Depending on register values, either of them might be the correct one.  It isn't really possible to disambiguate it.</span>",
                    "time": null
                }
            ]
        }
    ]
}