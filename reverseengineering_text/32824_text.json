{
    "title": "How can I use ptr to ptr in idapython?",
    "link": "https://reverseengineering.stackexchange.com/questions/32824/how-can-i-use-ptr-to-ptr-in-idapython",
    "content": "in hey-rays api there's a method:\n<pre><code>def find_def(self, *args) -> \"minsn_t *\":\n    r\"\"\"\n    find_def(self, op, p_i1, i2, fdflags) -> minsn_t\n    @param op: mop_t const &\n    @param p_i1: minsn_t **\n    @param i2: minsn_t const *\n    @param fdflags: int\n    \"\"\"\n    return _ida_hexrays.mblock_t_find_def(self, *args)\n</code></pre>\nwhich will need a ptr to ptr to a instruction.\nbut I didn't find any method can create a minsn_t **. is there any way to do that?\n",
    "votes": "1",
    "answers": 0,
    "views": "22",
    "tags": [
        "ida",
        "idapython",
        "hexrays"
    ],
    "user": "Ethan Xie",
    "time": "Mar 21, 2024 at 13:34",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "Not a real answer, but if you can usually pass null (<pre><code>None</code></pre>) to those. If you're trying to get the parent minstruction, though, because your result resides in an moperand, you might be able to combine <pre><code>build_def_list</code></pre> to get an <pre><code>mlist_t</code></pre>, and then <pre><code>mblock_t.for_all_uses</code></pre> if you only need it for a single mblock. In my (limited) experience, <pre><code>mlist_t</code></pre> and the <pre><code>for_all_*</code></pre> methods are more reliable for doing searches, especially because you're not limited to just an mblock.\n",
            "time": null
        },
        {
            "user": "Ethan Xie",
            "text": "Thanks, I ended up doing it myself too.\n",
            "time": null
        }
    ],
    "answers_data": []
}