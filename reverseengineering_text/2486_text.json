{
    "title": "Is there an equivalent of 'Run trace' as in OllyDbg for IDA PRO?",
    "link": "https://reverseengineering.stackexchange.com/questions/2486/is-there-an-equivalent-of-run-trace-as-in-ollydbg-for-ida-pro",
    "content": "I have been looking for the equivalent of the \"Run Trace\" option of OllyDbg in IDA Pro. Can anyone mention if there is one and how to use it ?\n",
    "votes": "14",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "ollydbg",
        "ida-plugin"
    ],
    "user": "Higet",
    "time": "Oct 14, 2013 at 8:16",
    "comments": [],
    "answers_data": [
        {
            "content": "IDA Pro offers two tracing options:\n\nInstruction tracing Debugger->Tracing->Instruction Tracing It is very slow tracing process, since IDA monitors registers and has to record the address, the instruction, and changes values of registers, that were changed by the instruction.\nFunction tracing Debugger->Tracing->Function Tracing. It is a subcategory of instruction tracing, where only function calls are logged. \n\nThere are also three types of tracing events: execution traces, write traces, and read/write traces. \nA trace in IDA Pro could by replayed by using Trace replayer. It is located within Debuggers submenu. You could switch to Trace-replayer by going to Debugger->Switch Debugger...->Trace replayer\n\nOne thing to remember that you have to have trace created before you can replay it. In order to create a trace you will need to do the following:\n\nSet a breakpoint at the point where you want you trace started. \nRun the program with the debugger of your choice. \nWhenever it breaks, select desired tracing style (Instruction or Function)\nRun as far as necessary. You could set a second breakpoint to stop the trace.\nYou can optionally save the trace.\nReplay the trace by switching debugger to Trace replayer.\n",
            "votes": "15",
            "user": "PSS",
            "time": "Jul 16, 2013 at 1:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}