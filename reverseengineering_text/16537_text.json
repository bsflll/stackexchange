{
    "title": "Attaching to Dalvik static function using Frida in order to disable emulator detection",
    "link": "https://reverseengineering.stackexchange.com/questions/16537/attaching-to-dalvik-static-function-using-frida-in-order-to-disable-emulator-det",
    "content": "I have a re-occuring issue with Frida (I'm using Frida and Frida-Server for Android x86_64 ver.: 10.6.11), where I try to hook a function and override its functionality, but for some reason I get stuck and the JS code (or Frida, who knows at this point?) just doesn't seem to catch the function that I really need.\nMy latest attempt was on the following Android sample (#Bankbot):\nhttps://koodous.com/apks/6276f23997fff26938b08323322c8ae77b9070ac81851f757c16928f86092f20\nNow, this piece of Malware has emulator detection built into it. The following code static methods are responsible for detecting the Android Emulator (which I'm using with Frida): \n<pre><code>    // keitev.ebaziueggzxt.q\n    public class q {\n    // ....\n        // detects emulator\n        public static boolean c(Context context) {\n        // \n            if (android.os.Debug.isDebuggerConnected()) \n            {\n                return true;\n            }\n            // check hardware related properties of the execution environment\n            if (b(context)) \n            {\n                return true;\n            }\n            // create array of used language shorts\n            // Region ISOs\n            String[] split = \"ru|rus|kz|ua|by|az|am|kg|md|tj|tm|uz|us|ca|cs|sk\".split(\"\\\\|\"); // \n            // \n            String[] split2 = \"ru|uk|be|az|hy|ky|mo|ro|tg|tk|uz|cs|sk\".split(\"\\\\|\"); // \n            TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(\"phone\");\n            // get getNetworkCountryIso()\n            if (Arrays.asList(split).contains(j.a(telephonyManager).toLowerCase())) {\n                return true;\n            }// getSimCountryIso()\n            if (Arrays.asList(split).contains(j.b(telephonyManager).toLowerCase())) {\n                return true;\n            }\n            Object obj;\n            String language = Locale.getDefault().getLanguage();\n            try {\n                obj = (String) String.class.getDeclaredMethod(\"toLowerCase\", new Class[0]).invoke(language, new Object[0]);\n            } catch (Exception e) {\n                String str = language;\n            }\n            return Arrays.asList(split2).contains(obj);\n        }\n   // ...\n }\n</code></pre>\nWhat I tried to do using frida was to find an instance of keitev.ebaziueggzxt.q:\n<pre><code>// DisableEmulatorDetection.js\n    Java.perform(function()\n            {\n                Java.choose('keitev.ebaziueggzxt.q',\n                {\n                    onMatch:function(keitev_ebaziueggzxt_qInstance)\n                    {\n                        console.log(\"[*] Found an instance of keitev.ebaziueggzxt.q\" + keitev_ebaziueggzxt_qInstance);\n                        var keitev_ebaziueggzxt_qClass = Java.use(\"keitev.ebaziueggzxt.q\");\n                        if(typeof keitev_ebaziueggzxt_qClass !== \"undefined\") \n                        {\n                            console.log(\"keitev_ebaziueggzxt_qClass has been loaded!\");\n                        }\n\n                        keitev_ebaziueggzxt_qClass.c.implementation = function(arg_ctx)\n                        {\n                            console.log(\"keitev_ebaziueggzxt_qClass.c called!\");\n                            return true;\n                        }\n                    },\n                    onComplete:function()\n                    {\n                        //console.log(\"Done looking for keitev.ebaziueggzxt.q!\");\n                    }\n                });\n            });\n</code></pre>\nI tried to use keitev_ebaziueggzxt_qClass.c.overload('android.content.Context').implementation as well. Frida accepted it, but it didn't do anything.\nAs far as I know static methods don't need to be called from an instantiated object, yet Frida doesn't apply the changes, or if it does, it has no effect on the executing Application.\nI tried to execute the code using the following approaches:\nPython code: \n<pre><code># bot_instrument.py\nimport frida\nimport time\n\ndevice = frida.get_usb_device()\npid = device.spawn([\"keitev.ebaziueggzxt\"])\ndevice.resume(pid)\ntime.sleep(1)\nsession = device.attach(pid)\nscript = session.create_script(open('DisableEmulatorDetection.js').read())\nscript.load()\n\n# stop the script from exiting\ninput()\n</code></pre>\nand by loading the script when the malware is being spawned:\n<pre><code>frida -U -l DisableEmulatorDetection.js keitev.ebaziueggzxt\n</code></pre>\nCould anyone explain to me why I can't hook the keitev_ebaziueggzxt_qClass.c static helper function and provide a solution? I'm assuming there are probably two problems with my approach: \n\nThe injected code doens't execute when I think it should.\nI'm probably hooking the function wrongly.\n\nI am very eager to hear answers from anyone who uses Frida on Android.\n",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "malware",
        "android",
        "instrumentation"
    ],
    "user": "Disane",
    "time": "Oct 12, 2017 at 14:10",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "tried  github.com/frida/frida/issues or frida.re/contact ?\n",
            "time": null
        },
        {
            "user": "Disane",
            "text": "@Igor Sochinsky: No, not yet. I thought this was some kind of a 'user error' on my side. I'll put it up and see what they say.\n",
            "time": null
        },
        {
            "user": "0xec",
            "text": "I have had similar problems with function hooking in the recent versions of frida. Perhaps you can try an older version and check if the issue persists.\n",
            "time": null
        },
        {
            "user": "Disane",
            "text": "@0xec : I tried ver. 9.1.7 and ver. 8.0.0, but ran into the same issues. Other than that the server side of those versions reported errors when starting them on the AVD, but the code yielded the same results as ver. 10.6.11\n",
            "time": null
        },
        {
            "user": "Disane",
            "text": "It seems that using Frida-Server above Android OS ver. 4.4 is kinda pointless unless you only want to inject methods that will get called more often than once or twice right at the start of the execution of the target App.  frida -U -l <path_script> -f <package_name>  doesn't work on AVDs running Android 5.0 and above. Also ver. 4.4 on x86 ABI also crashes the target App when injecting into the app_process.  The above code works perfectly on an AVD running Android 4.4 ARM! Thought it's slow as hell, but at least I've figured out that the error was not on my side.\n",
            "time": null
        }
    ],
    "answers_data": []
}