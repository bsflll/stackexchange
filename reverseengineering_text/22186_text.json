{
    "title": "Local variables and addition not shown in Ghidra",
    "link": "https://reverseengineering.stackexchange.com/questions/22186/local-variables-and-addition-not-shown-in-ghidra",
    "content": "I am having some troubles with my learning of Assembly and reverse engineering. Specifically, I am learning about Global vs Local variables. For Global variables I have managed to get insights in assembly that they are stored in memory address. For Local variables I expect them to be stored on stack (theory), but my simple C code below, when being disassembled in Ghidra, does not show anything in main function.\nC CODE:\n<pre><code>void main()\n{\n    int x = 1;\n    int y = 2;\n    x = x + y;\n}\n</code></pre>\nGHIDRA OUTPUT:\n\nWhy can't I see anything in my Ghidra? It looks like an empty function to me, but clearly there should be some local variable declaration and then addition performed afterwards.\nI really apologize for opening threads here often, but this is the only source where I can get help for such things. On Reddit they do not allow posting questions and referred me here.\nEDIT - 25.09.2019:\nAs per suggestion I have added some code to my existing C Code to see if it will show up now in Assembly:\n<pre><code>#include <stdio.h>\n\nvoid main()\n{\n    int x = 1;\n    int y = 2;\n\n    x = x + y;\n\n    printf(\"Rezultat = %d\n\", x);\n\n}\n</code></pre>\nFor this I had to set entry point back to CRT initialize, otherwise I could not use stdio Library. This is now the result of main function in Ghidra:\n\nNow I am able to see the PUSH instruction and the value 0x03. This is probably the resulting value of addition 1 + 2, but I again can't nowhere see where are the local variables initialized nor where the arithmetic operation is performed.\n",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "ghidra",
        "local-variables"
    ],
    "user": "Rebegin",
    "time": "Sep 25, 2019 at 8:48",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "The variables are not used further so compiler optimizes it to nothing. Try to create a different function and call it in main. For example <pre><code>add(1, 2);</code></pre>.\n",
            "time": null
        },
        {
            "user": "Rebegin",
            "text": "@Biswapriyo I have added some additional code to be able to see more in assembly. I have updated my initial question. There is more info now, but I still cannot see the declaration of local variables nor the use of arithmetic operation.\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "Youâ€™re free to ask as many questions as you want here, as long as they are on-topic. The purpose of this site is to help people out with RE related problems, so there is no need to apologize\n",
            "time": null
        },
        {
            "user": "rustyMagnet",
            "text": "did you try <pre><code>volatile</code></pre>?  Example: <pre><code>volatile int x = 1;</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "you may either need to use the local variables or compile with optimizations disabled \nI assume you are using msvc on windows ??\nshown below is a snippet that was compiled on x64 for x64 in win 10 where you can clearly see the local vars being initialized and used\n<pre><code>f:\\git\\usr\\bin\\ls -lg\ntotal 1\n-rw-r--r-- 1 197121 61 Sep 25 15:24 local.cpp\n\nf:\\git\\usr\\bin\\cat *\nint main (void)\n{\n        int x = 1;\n        int y = 2;\n        return x+y;\n}\ncl /Zi /W4 -GS /analyze /Od /nologo local.cpp /link /release /ENTRY:main /SUBSYSTEM:windows /FIXED\nlocal.cpp\n\nf:\\git\\usr\\bin\\ls -lg *.exe\n-rwxr-xr-x 1 197121 2560 Sep 25 15:32 local.exe\n</code></pre>\ndescription of options given to compiler and linker\n<pre><code>/Zi = build with debug info embedded in pdbfile \n/w4 build with highest possible warning level\n-GS disable stack cookie\n/analyze run code analysis on the src files \n/Od disable optimization\n/entry:main (no crt libs are sued so you need to set the entry point\n/subsystem:windows  no cmd or no crt or no input output this is not a console app \nso you need to specify which subsystem will this program work on\n/fixed disable relocations\n</code></pre>\nopening the exe in ghidra and the function main copied as is \n<pre><code>                             //\n                             // .text \n                             // ram: 140001000-140001022\n                             //\n                             **************************************************************\n                             *                          FUNCTION                          *\n                             **************************************************************\n                             int __fastcall main(int _Argc, char * * _Argv, char * * \n             int               EAX:4          <RETURN>\n             int               ECX:4          _Argc\n             char * *          RDX:8          _Argv\n             char * *          R8:8           _Env\n             undefined4        Stack[-0x14]:4 local_14                                XREF[2]:     140001004(W), \n                                                                                                   140001016(R)  \n             undefined4        Stack[-0x18]:4 local_18                                XREF[2]:     14000100c(*), \n                                                                                                   140001013(*)  \n\n|||||||||||||||||||| FUNCTION |||||||||||||||||||||||||||||||\n                             Symbol Ref: main\n                             entry                                           XREF[4]:     Entry Point(*), 1400000e0(*), \n                             .text$mn                                                     1400000e4(*), [more]\n                             main\n       140001000 48 83 ec 18     SUB        RSP,0x18\n       140001004 c7 44 24        MOV        dword ptr [RSP + local_14],0x1\n                 04 01 00 \n                 00 00\n       14000100c c7 04 24        MOV        dword ptr [RSP]=>local_18,0x2\n                 02 00 00 00\n       140001013 8b 04 24        MOV        EAX,dword ptr [RSP]=>local_18\n       140001016 8b 4c 24 04     MOV        _Argc,dword ptr [RSP + local_14]\n       14000101a 03 c8           ADD        _Argc,EAX\n       14000101c 8b c1           MOV        EAX,_Argc\n       14000101e 48 83 c4 18     ADD        RSP,0x18\n       140001022 c3              RET\n                             ********** main Exit ********** \n</code></pre>\nif you want to disable optimization for specific functions only and not wholesale with /Od  you can use #pragmas see the screen shot below which shows vscode / vsdevcmdprompt / compilation all in one \nreplaced the image with a  gif that does a  \"show and show\" show\n",
            "votes": "1",
            "user": "blabb",
            "time": "Sep 25, 2019 at 11:48",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rebegin",
                    "text": "<span class=\"comment-copy\">Could you please let me know how to disable Optimizations in VS 2017? I am using that for compiling my programs. Your output is exactly what I would expect in Ghidra, but cannot get to it.</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">I added the description of the options give to compiler and linker I am using the devcmd prompt not vs projects I build on cmdline</span>",
                    "time": null
                },
                {
                    "user": "Rebegin",
                    "text": "<span class=\"comment-copy\">Oh crap.. I need to learn then how to do it with devcmd, it looks like you more control over the VS attempt. Do you develop code in some texteditor and then compile it with devcmd afterwards?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i use vs code and its terminal for simple one file codes like like this no devcmd prompt isn't powerfull or otherwise you can specify all this in the property pages of vs just too much clickety click and i hate clicking around</span>",
                    "time": null
                },
                {
                    "user": "Rebegin",
                    "text": "<span class=\"comment-copy\">hehehe, I am going to try your approach!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "These are the compiler optimizations of the release build. You should build a debug build and then load it to ghidra\n",
            "votes": "0",
            "user": "Anton Kukoba",
            "time": "Sep 25, 2019 at 10:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Rebegin",
                    "text": "<span class=\"comment-copy\">I am attempting that now. Are there any other ways to disable optimization in VS 2017?</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">In debug configuration they are disabled by default. But if you want to disable them for release build, there are project settings for that. Here's the video on how to disable optimization in VS: <a href=\"https://www.youtube.com/watch?v=xq7FIX3BCO4\" rel=\"nofollow noreferrer\">youtube.com/watch?v=xq7FIX3BCO4</a></span>",
                    "time": null
                }
            ]
        }
    ]
}