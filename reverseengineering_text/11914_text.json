{
    "title": "Advice about first steps on reversing windows kernel",
    "link": "https://reverseengineering.stackexchange.com/questions/11914/advice-about-first-steps-on-reversing-windows-kernel",
    "content": "I'll appreciate if anyone can give me a couple advices regarding kernel debugging/reversing.\nFor instance if i want to know how the heap manager works what should i look for ?\nI have no experience in reversing kernels.\n",
    "votes": "1",
    "answers": 5,
    "views": "3k",
    "tags": [
        "windows",
        "kernel-mode"
    ],
    "user": "JakeAdams",
    "time": "Feb 2, 2016 at 0:01",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "msdn.microsoft.com/en-us/library/windows/hardware/…\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "First and most important advice I can give you is to not debug on your host machine, use a virtual machine such as hyper-v, VMWare and virtualbox instead. \nSecond, your preferred tool is WinDbg. There are many tutorials for setting it up with virtual machines. You can start from MSDN.\nIf you want to learn more how \"heap management works\" fast and in great details, you should consider reading the book What Makes It Page by Enrico Martignetti.\n",
            "votes": "3",
            "user": "GelosSnake",
            "time": "Feb 2, 2016 at 12:09",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Since this is tagged windows, getting that kind of information is fairly easy these days:\n\nGo read Windows Internals by Russinovich, et all. This is an excellent book (actually two books) on how everything works.\nRead the source code from Wine or ReactOS which have already reverse engineered most of the kernel. This is a great way to answer specific questions about individual APIs / code paths.\n",
            "votes": "2",
            "user": "josh poley",
            "time": "Feb 2, 2016 at 20:48",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Set up a VM using virtual box or vmware.\nConfigure the VM to boot with debugging enabled. Instructions here\nSet up a serial connection from the guest to the host machine.\nRun WinDBG on the host machine and connect over that serial interface.\nDebug.\n\nThis whole process is illustrated very well in Practical Malware Analysis a book I recommend to everyone looking to get into RE on windows.\n",
            "votes": "0",
            "user": "Gdogg",
            "time": "Feb 2, 2016 at 23:16",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The great thing about the Windows operating system is that though it is proprietary, the heart of it that really matters has been remarkably well documented over the years. MSDN is a great source. You can start by understanding windows driver model.\nThe windows driver model is the core framework of api's from which windows is built on. Consisting of kernal and user mode drivers (additional frameworks wrap much of the boiler plate code into simpler api's). User mode drivers are simply dll's (dynamic link libraries) and kernal mode, dll's with a different file extension (.sys instead of .dll) and explicit linking with <pre><code>GetProcAddress()</code></pre> and <pre><code>LoadLibrary()</code></pre> do not work for kernal. Much of this is well documented though complex in their inner workings. There are some Windows supplied drivers which are proprietary. \nBeyond this there is a root driver called acpi.sys, supplied by microsoft. This is the root node from which all drivers and bus drivers are a child. \nAdditionally there are the mechanisms in which windows routes messages from driver to driver called interrupt request packets or irp's. The memory in user mode applications are virtualized by the memory controller in such a way that memory can not be predictably utilized outside the context of the calling handle.\nGiven all the constraints you may realize there isn't a single implementation that is unique to windows. Indeed the greatest attributes of windows has been compliance through carefully and skillfully planned guidance, and by virtue of this, tends to be well known or anything but proprietary.\n",
            "votes": "0",
            "user": "marshal craft",
            "time": "Feb 18, 2016 at 8:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "marshal craft",
                    "text": "<span class=\"comment-copy\">Also \"What Makes It Page?: The Windows 7 (X64) Virtual Memory Manager\" by Enrico Martignetti</span>",
                    "time": null
                },
                {
                    "user": "marshal craft",
                    "text": "<span class=\"comment-copy\">Practical Reverse Engineering: x86, x64, ARM, Windows Kernel, Reversing Tools, and Obfuscation 1st Edition by Bruce Dang  (Author), Alexandre Gazet  (Author), Elias Bachaalany  (Author), Sébastien Josse (Contributor)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Note that if you're actually interested in the heap manager,\nit's part of the runtime and has nothing to do with kernel\nfunctionality, for instance: <pre><code>HeapAlloc()</code></pre> from <pre><code>kernel32.dll</code></pre>\nforwards to <pre><code>RtlAllocateHeap()</code></pre> from <pre><code>ntdll.dll</code></pre>, you can just open up\n<pre><code>ntdll.dll</code></pre> in your favorite framework and start reversing.\n",
            "votes": "0",
            "user": "MarianD",
            "time": "Apr 26, 2022 at 17:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}