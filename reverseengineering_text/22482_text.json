{
    "title": "Hex-Rays skips code",
    "link": "https://reverseengineering.stackexchange.com/questions/22482/hex-rays-skips-code",
    "content": "I have using IDA Pro 6.8 (Hex-Rays 2.2), the default settings.\nThe problem starts to happen when I'm trying to analyze function (which actual size ~2886 bytes), pressing F5 (without errors or alerts) and getting in output only first few code blocks:\n\nBut actual code is much bigger than the result, why Hex-Rays skip all other code, and how to fix it?\n",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "hexrays",
        "decompile"
    ],
    "user": "user3000633",
    "time": "Dec 6, 2021 at 5:15",
    "comments": [],
    "answers_data": [
        {
            "content": "You need to fix the disassembly. For example, this is a call to a location which is not a proper function:\n<pre><code>call    loc_11B4460\n</code></pre>\nAnd this call does not return, so all code after it is removed as dead code by the decompiler:\n<pre><code>.text:00CA5E6B   call    sub_4E5CE9\n</code></pre>\nYou can see it by the dashed line added by IDA after the call (these lines are added to show breaks in code flow. You can also probably see the break in the code flow in the graph view as well. \nYou can remove the no-return flag from the target function by editing its properties, and for the first call you need to check why IDA could not create a function at <pre><code>loc_11B4460</code></pre> and fix it. \nThe decompiler relies on IDA for the disassembly, so if your disassembly is bad you’ll get bad decompilation (aka garbage in-garbage out).\nCheck also the FAQ for some of the other common problems.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 11, 2019 at 11:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "As I know it's a default hex rays behavior. If it can't decompile something, it will just skip it. In your case it looks like it failed to analyze stack.\nSame thing was in IDA 7.0, and even in 7.2. What's the situation in further IDA versions I don't know.\n",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Nov 7, 2019 at 13:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Wrong. \"If it can't decompile something\", it will ether refuse to decompile the function altogether or produce an <code>__asm</code> block. This case is likely dead code elimination.</span>",
                    "time": null
                },
                {
                    "user": "Anton Kukoba",
                    "text": "<span class=\"comment-copy\">Yep I know that it all works at your side :) But had a lot of pain while reversing ARM code, where the decompiler just skipped the blocks of the code, without any reason. Most often it lost the if statements, and some of the cases of switch constructions.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><a href=\"https://hex-rays.com/products/decompiler/manual/failures.shtml\" rel=\"nofollow noreferrer\">hex-rays.com/products/decompiler/manual/failures.shtml</a></span>",
                    "time": null
                }
            ]
        }
    ]
}