{
    "title": "IDAPython: idaapi.get_highlight for demangled names",
    "link": "https://reverseengineering.stackexchange.com/questions/24842/idapython-idaapi-get-highlight-for-demangled-names",
    "content": "I'm using the following code to get the address of the selected function/variable:\n<pre><code>hightlight = idaapi.get_highlight(idaapi.get_current_viewer())\nscreen_ea = idaapi.get_screen_ea()\nea = idaapi.get_name_ea(screen_ea, name)\n</code></pre>\nIt works like a charm except until you meet demangled name in IDA View :( \nFor example, for this line \n<pre><code>.text:00406744                 call    KBTickCount(void)\n</code></pre>\nidaapi.get_name_ea call would never return the proper address, because the real name is ?KBTickCount@@YIJXZ.\nI know that I can just change demangled names representation in IDA Pro, but I'm working on a public plugin and I'm thinking about end users.\nAnd I also want to make it work in Pseudocode view, where all names are demangled.\nAny ideas on how to get the address of the selected function/variable for a particular line?\n",
    "votes": "1",
    "answers": 1,
    "views": "514",
    "tags": [
        "ida",
        "idapython",
        "idapro-sdk",
        "ida-plugin"
    ],
    "user": "mastermind",
    "time": "Apr 26, 2020 at 20:28",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "On what action/event does your code execute?\n",
            "time": null
        },
        {
            "user": "mastermind",
            "text": "I set hotkey action handler if it matters\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "All action callbacks receive a context pointer with various information pre-filled:\n<pre><code>  ea_t cur_ea;           ///< the current EA of the position in the view\n  uval_t cur_value;      ///< the possible address, or value the cursor is positioned on\n\n  func_t *cur_func;      ///< the current function\n  func_t *cur_fchunk;    ///< the current function chunk\n\n  struc_t *cur_struc;    ///< the current structure\n  member_t *cur_strmem;  ///< the current structure member\n\n  enum_t cur_enum;       ///< the current enum\n\n  segment_t *cur_seg;    ///< the current segment\n</code></pre>\n(from <pre><code>kernwin.hpp</code></pre>)\nSo you can just use <pre><code>ctx.cur_value</code></pre> (or its Python synonym, <pre><code>cur_extracted_ea</code></pre>) to directly get the address/value/identifier under cursor, without having to resolve it yourself.\n",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Apr 30, 2020 at 9:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mastermind",
                    "text": "<span class=\"comment-copy\">Didn't know about that, thank you very much!</span>",
                    "time": null
                }
            ]
        }
    ]
}