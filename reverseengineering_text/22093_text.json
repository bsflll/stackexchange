{
    "title": "How is `va_list` implemented in Assembler level on ARMv7 Android?",
    "link": "https://reverseengineering.stackexchange.com/questions/22093/how-is-va-list-implemented-in-assembler-level-on-armv7-android",
    "content": "I need to extract all arguments from <pre><code>CallStaticObjectMethodV</code></pre> JNI call on ARMv7 Android at Assembler level.\nCan anyone advice how is <pre><code>va_list</code></pre> implemented on low level in ARMv7 Android?\n",
    "votes": "0",
    "answers": 1,
    "views": "374",
    "tags": [
        "assembly",
        "arm"
    ],
    "user": "Vitalii",
    "time": "Sep 10, 2019 at 8:22",
    "comments": [],
    "answers_data": [
        {
            "content": "From Procedure Call Standard for the ARMÂ® Architecture (ARM IHI 0042E):\nTypedef: <pre><code>va_list</code></pre>\nBase type:\n<pre><code>struct __va_list {\nvoid *__ap;\n}\n</code></pre>\nNotes:\n\nA <pre><code>va_list</code></pre> may address any object in a parameter list. Consequently,\n  the first object addressed may only have word alignment (all objects\n  are at least word aligned), but any double-word aligned object will\n  appear at the correct double-word alignment in memory. In C++,\n  <pre><code>__va_list</code></pre> is in namespace <pre><code>std</code></pre>.\n\nSo basically it's just a pointer to the word-aligned arguments in memory.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Sep 10, 2019 at 9:45",
            "is_accepted": true,
            "comments": []
        }
    ]
}