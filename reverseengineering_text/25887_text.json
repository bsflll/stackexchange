{
    "title": "How would I start to decode this? Asking for help from a friend (Alien Hominid Invasion)",
    "link": "https://reverseengineering.stackexchange.com/questions/25887/how-would-i-start-to-decode-this-asking-for-help-from-a-friend-alien-hominid-i",
    "content": "I have literally no idea how to start to decode this kind of a file, but I really want these fonts and a decoder would be huge for the community, so any help would be great. Linked below is a google drive folder with the launcher and game exe files and the archive. Are there apps that help with the process of decoding?\nhttps://drive.google.com/drive/folders/1jQa36d3wCQyAdjLwjfCSMYeyQrwqADer?usp=sharing\n",
    "votes": "-1",
    "answers": 2,
    "views": "225",
    "tags": [
        "disassembly",
        "decompilation",
        "file-format",
        "game-hacking",
        "exe"
    ],
    "user": "almost_somebody",
    "time": "Sep 14, 2020 at 15:16",
    "comments": [
        {
            "user": "R4444",
            "text": "Welcome to reverse engineering stack overflow. No one would download unknown files, unless u provide some background information and source. thanks\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Generic answer:\nWhen you want to unpack/decrypt files like this, the best idea is always to reverse the program that is able to read the file correctly. I think that in Windows operating system the most popular combo for reading files is probably <pre><code>CreateFile</code></pre> and <pre><code>ReadFile</code></pre> api calls. If you track every operation performed on the buffer filled using <pre><code>ReadFile</code></pre> call, you can reconstruct the algorithm that is used to make sense of the bytes stored in the file. You can do it using any debugger like <pre><code>x64dbg</code></pre>, <pre><code>windbg</code></pre> etc.\nAnswer to your case:\nSometimes it is worth to check if particular format was already reversed by someone. There is a community around a program called QuickBMS that targets unpacking game files. If you open your <pre><code>fonts.pak</code></pre> using hex editor, you can notice the very first bytes equal to <pre><code>PKTB</code></pre>. If you search for a script that can unpack <pre><code>PKTB</code></pre> files on the website, there is one result for a game called Pit People. The game is created by the same manufacturer as your Alien Hominid Invasion.\nQuick look on the script: <pre><code>fonts.pak</code></pre> contains 5 files (2 png, 2 bmf(?) and 1 txt). Unfortunately, this quick bms script can't read encrypted filenames (that are probably stored at the very end of <pre><code>fonts.pak</code></pre>, (but you can reverse it by yourself of course) what is funnier the header of the file is xored via key which is scrambled form of string <pre><code>securitythroughobscurity</code></pre>\n",
            "votes": "2",
            "user": "morsisko",
            "time": "Sep 15, 2020 at 14:30",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If you're serious about RE-ing those .EXE files, then take a look into IDA.\nIDA\nhttps://www.hex-rays.com/products/ida/\nThere are other applications that work some what, such as Ollydbg\n",
            "votes": "1",
            "user": "user3288107",
            "time": "Sep 15, 2020 at 13:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}