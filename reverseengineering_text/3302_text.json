{
    "title": "Jump back to the caller",
    "link": "https://reverseengineering.stackexchange.com/questions/3302/jump-back-to-the-caller",
    "content": "I'm debugging some app inside the ollydbg, so this two steps i set to start debugging the app.\n\nI load the exe from file menu with input arguments\nSet breakpoint on msvcr71.printf function\n\nAfter this two initial steps, when I hit F9 the app show some messages generated with printf function depending from the input arguments(by now i'm testing wrong password which shows the app messages about wrong password). So now I need to jump to the code which hold the logic, the code that made the call to printf, by checking if the pass was good or bad. How this can be done, when I have set breakpoint?\nThanks\n",
    "votes": "11",
    "answers": 3,
    "views": "9k",
    "tags": [
        "ollydbg",
        "debugging"
    ],
    "user": "Igor",
    "time": "Dec 31, 2013 at 15:30",
    "comments": [],
    "answers_data": [
        {
            "content": "Here is a way how you would go back to the caller. The following is a small C++ crackme for demonstration\n<pre><code>#include<stdio.h>\n#include<string.h>\n#include<conio.h>\n\nint main()\n{\n    char code[50];\n    char valid[]=\"12345\";\n    printf(\"Enter your password : \n\");\n    gets(code);\n    if(!strcmp(code,valid))\n        printf(\"That's it!!!\n\");\n    else\n        printf(\"Try again!!!\n\");\n    getch();    \n    return 0;\n}\n</code></pre>\n\nStep 1\nNow as usual you load the app in OllyDBG. Now assume that we do not know anything the inner logic of the crackme. So lets put a breakpoint on the functions which prints on the console. So the best bet is to search for all intermodular calls.\n\n\nStep 2\nSo you see it calls <pre><code>puts</code></pre> .This function is used to display a string on the console and is called from 3 places. So lets place a breakpoint on the function itself so that we can know from where it is called.\nNow the function is defined at <pre><code>VA 0x75898D04</code></pre> . So put a breakpoint over there.\n\n\nStep 3\nNow run the app by pressing F9 till breakpoint is hit.\n\nNow look at the stack at the bottom right it shows the place from where <pre><code>puts</code></pre> would return after executing as well as the parameters passed to this function.\nSince this parameter passed is the string asking for password we can skip it until we get to the badboy message string. So continue pressing F9 until you get to the point where the parameter passed is the badboy message. (The console meanwhile asks for the password and write something there)\nSo we run till here.\n\nStep 4\n\n<pre><code>puts</code></pre> would return to <pre><code>VA 0x401C66</code></pre> and the parameter passed is the badboy message.\nSo lets go to <pre><code>0x401C66</code></pre>.\nPress Ctrl+G in the CPU window to go there.\nYou can also press Enter directly on the return address shown on the stack.\nSo we land here.\n\n\nStep 5\nJust above the <pre><code>puts</code></pre> call there is a <pre><code>strcmp</code></pre> call checking our entered serial with a hardcoded value. If you explore a little you can see that the hardcoded value is <pre><code>12345</code></pre>\n(You may set a breakpoint on the <pre><code>strcmp</code></pre> call and restart the target to see what is being compared to whom)\nSo that's the serial which would skip the badboy message and land us to the goodboy message.\nI am not suggesting the Ctrl+F9 method because you may sometimes encounter function which never returns. Such functions are specifically coded to obfuscate and thwart static and dynamic analysis. However in other cases Ctrl+F9 method is pretty good.\n",
            "votes": "13",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Once your breakpoint on <pre><code>printf()</code></pre> is hit, press Ctrl+F9 to tell OllyDbg to run until the end of the <pre><code>printf()</code></pre> function, then press F7 to single-step the return instruction back to the caller.\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Dec 27, 2013 at 22:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor",
                    "text": "<span class=\"comment-copy\">If I try ctrl + f9, the code print just the first meesage from all three, otherwise with f9 print all three messages. Both ctrl+f9 or f9 skips the code till kifastsystemcallret call. So the code stuck here so i can't move, just to restart the app. With ctrl + f9, after this hit i hit f7, but the code not jump to that code logic i need, something random. Thanks for your help.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Please post a screenshot of OllyDbg paused at the <code>printf()</code> breakpoint.</span>",
                    "time": null
                },
                {
                    "user": "Igor",
                    "text": "<span class=\"comment-copy\">Ok to update you a little. I'm learning from the book 'secret of reverse engineering. <a href=\"http://i.imgur.com/To9LhuV.png\" rel=\"nofollow noreferrer\">i.imgur.com/To9LhuV.png</a> This one is about the breakpoint.  <a href=\"http://i.imgur.com/r7M7xCN.png\" rel=\"nofollow noreferrer\">i.imgur.com/r7M7xCN.png</a> This screenshot shows where code skips after i hit f9.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">That breakpoint is not on the <code>printf()</code> function; it's on the call to the <code>printf()</code> function. And don't bother using <code>F9</code> in this context as it will just run your program until it terminates.</span>",
                    "time": null
                },
                {
                    "user": "Igor",
                    "text": "<span class=\"comment-copy\">With ctrl + f9 the app in debug mode print just the first message and not printing the other two. But if I use ctrl + f9 and then f7 as you tell me here how it looks and where go the code <a href=\"http://i.imgur.com/aWBrdCg.png\" rel=\"nofollow noreferrer\">i.imgur.com/aWBrdCg.png</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Both of Your ScreenShots are irrelevent the app has terminated in first screenshot \nand it is in some random ZwMapSection in second screenshot \nyou posted you set a bp on printf was the breakpoint hit ?\nif it was hit then you can look at the call stack using ctrl+k \nollydbg will show you who called printf \nyour screenshots do not show if you had hit the break and if you are suspended in call to printf as Jason posted in his comment\nalso with ollydbg you can use runtrace feature to trace the complete path that can help you isolate the logic have you tried using it\n",
            "votes": "1",
            "user": "blabb",
            "time": "Dec 29, 2013 at 17:48",
            "is_accepted": false,
            "comments": []
        }
    ]
}