{
    "title": "What this code do?",
    "link": "https://reverseengineering.stackexchange.com/questions/31564/what-this-code-do",
    "content": "I decompile old dos game (WATCOM compiler). I do not understand code after calling localtime. What calculations performing after calling localtime?\n<pre><code>cseg01:00020F60 sub_20F60       proc near               ; CODE XREF: sub_20D30+5p\ncseg01:00020F60\ncseg01:00020F60 var_14          = dword ptr -14h\ncseg01:00020F60\ncseg01:00020F60                 push    ebx\ncseg01:00020F61                 push    ecx\ncseg01:00020F62                 push    edx\ncseg01:00020F63                 push    edi\ncseg01:00020F64                 sub     esp, 4\ncseg01:00020F67                 xor     eax, eax\ncseg01:00020F69                 call    time_\ncseg01:00020F6E                 mov     [esp+14h+var_14], eax\ncseg01:00020F71                 mov     eax, esp\ncseg01:00020F73                 call    localtime_\ncseg01:00020F78                 mov     ebx, [eax+4]\ncseg01:00020F7B                 mov     edx, eax\ncseg01:00020F7D                 lea     eax, ds:0[ebx*8]\ncseg01:00020F84                 sub     eax, ebx\ncseg01:00020F86                 shl     eax, 3\ncseg01:00020F89                 add     eax, ebx\ncseg01:00020F8B                 mov     ebx, [edx]\ncseg01:00020F8D                 mov     ecx, [edx+8]\ncseg01:00020F90                 add     ebx, eax\ncseg01:00020F92                 imul    eax, ecx, 0DD7h\ncseg01:00020F98                 add     eax, ebx\n\n</code></pre>\nI tried to write pseudocode, there is my pseudocode:\n<pre><code>    after calling localtime\n\n    ebx = minutes\n\n    eax = ebx * 8;\n\n    eax = eax - ebx;\n\n    eax = eax >> 3;\n\n    eax = eax + ebx;\n\n    ebx = seconds;\n\n    ecx = hours;\n\n    ebx = ebx + eax;\n\n    eax = ecx * 3543;\n\n    eax = eax + ebx;\n\n</code></pre>\nI do not understand this math stuff.\n",
    "votes": "1",
    "answers": 1,
    "views": "141",
    "tags": [
        "ida"
    ],
    "user": "black4joss",
    "time": "Feb 19, 2023 at 13:18",
    "comments": [
        {
            "user": "Rup",
            "text": "What's the result used for? A randomness seed?\n",
            "time": null
        },
        {
            "user": "black4joss",
            "text": "Yes, it's actually as turned out randomness seed, thank you.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It looks roughly like\n<pre><code>total_seconds = (minutes * 57) + (hours * 3543) + seconds\n</code></pre>\nWhy that's not 60 seconds per minute or 3600 seconds per hour I don't know.\nThe minutes calculation is\n\neax = (minutes * 8) - minutes = minutes * 7\neax = eax << 3 (this is a left shift not right) = eax * 8 = minutes * 7 * 8 = minutes * 56\neax = eax + minutes = minutes * 57\n\nAgain I'm not sure why this isn't just an imul. Maybe it was more efficient to do multiplications manually for multiplicands with only a few bits on some very old processors, but I'd be surprised.\n",
            "votes": "3",
            "user": "Rup",
            "time": "Feb 20, 2023 at 1:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "WhatsUp",
                    "text": "<span class=\"comment-copy\">That's right. For old CPU's, multiplications could be so slow that it makes sense to replace them with shifts/adds/subs. Thus some compilers have this kind of optimizations. The aim of the whole thing could be e.g. setting the random seed.</span>",
                    "time": null
                },
                {
                    "user": "black4joss",
                    "text": "<span class=\"comment-copy\">Thank you very much!</span>",
                    "time": null
                }
            ]
        }
    ]
}