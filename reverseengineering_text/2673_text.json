{
    "title": "What x86 calling convention passes first parameter via ESI?",
    "link": "https://reverseengineering.stackexchange.com/questions/2673/what-x86-calling-convention-passes-first-parameter-via-esi",
    "content": "I am looking at some x86 code, which I believe was built using a Microsoft tool chain, and am trying to figure out the calling convention used during this call:\n<pre><code>   push esi ; save ESI (it gets restored later)\n   lea esi, [ebp-0xC] ; set param 1 for call to FOO\n   call FOO\n   test eax, eax ; test return value\n   jz somelabel\n</code></pre>\nThe function FOO starts like this:\n<pre><code>   FOO:\n   mov edi, edi\n   push ebx\n   xor ebx, ebx\n   push ebx ; null\n   push esi ; pass ESI in as second param to upcoming call, which has been set by caller\n   push ptr blah\n   mov [esi+0x8], ebx\n   mov [esi+0x4], ebx\n   mov [esi], ebx\n   call InterlockedCompareExchange ; known stdcall func which takes 3 params\n   test eax, eax\n   ...\n</code></pre>\nas ESI is not initialized in the body of FOO, I have assumed it is passed in as a param by the caller.\nWhat is this calling convention? It looks to be a variant of fastcall. Is there a name for this convention?\n",
    "votes": "9",
    "answers": 1,
    "views": "4k",
    "tags": [
        "x86",
        "calling-conventions"
    ],
    "user": "QAZ",
    "time": "Aug 22, 2013 at 15:55",
    "comments": [
        {
            "user": "perror",
            "text": "Isn't it a <pre><code>struct</code></pre> passed through the arguments ? The <pre><code>esi</code></pre> will be the base address and access to each field is passed through several offsets. No ?\n",
            "time": null
        },
        {
            "user": "QAZ",
            "text": "yes the parameter is a pointer to a local variable (12 byte structure) of the caller, but what is the calling convention that passes this pointer as a parameter to FOO?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is no \"official\" calling convention that works like that. What you're seeing is most likely the result of Link-time Code Generation, also known as LTO (Link-time optimization) or WPO (Whole program optimization).\nWhen it is enabled, the optimization and code generation is done at link time, when the compiler has access to the code of whole program and all compile units, and can use this information for the more extreme optimizations.\nFrom MSDN:\n\nWhen /LTCG is used to link modules compiled by using /Og, /O1, /O2, or\n  /Ox, the following optimizations are performed: \n\nCross-module inlining\nInterprocedural register allocation (64-bit operating systems only)\nCustom calling convention (x86 only)\nSmall TLS displacement (x86 only)\nStack double alignment (x86 only)\nImproved memory disambiguation (better interference information for global variables and input parameters)\n\n\nIn the code snippet you quoted the compiler detected that the function <pre><code>FOO</code></pre> is not called from outside of the program, so it could customize the calling convention to something that uses register values already set up at the place of call, or otherwise improve register allocation. With heavily templated code you can even get several copies of often-used functions that accept arguments in different sets of registers and/or stack.\n",
            "votes": "12",
            "user": "Igor Skochinsky",
            "time": "Aug 22, 2013 at 16:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "newgre",
                    "text": "<span class=\"comment-copy\">What exactly is \"stack double alignment\"?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Don't know for sure, but maybe they mean avoiding having to re-align stack in every function that works with SSE data if they know it's already aligned in every place the function is called.</span>",
                    "time": null
                },
                {
                    "user": "ajs410",
                    "text": "<span class=\"comment-copy\">Not just SSE data, but any data that works better 8-byte aligned (e.g. double primitives).  See this valuable post that appears to come from a Microsoft employee for a description of each LTCG optimization.  <a href=\"http://www.codeproject.com/Articles/1660/Whole-Program-Optimization-with-Visual-C-NET\" rel=\"nofollow noreferrer\">codeproject.com/Articles/1660/â€¦</a></span>",
                    "time": null
                }
            ]
        }
    ]
}