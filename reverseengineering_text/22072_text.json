{
    "title": "Decrypting the Config file of a Huawei router \"HG630 V2\"",
    "link": "https://reverseengineering.stackexchange.com/questions/22072/decrypting-the-config-file-of-a-huawei-router-hg630-v2",
    "content": "followed that post from Wordpress \n\nhttps://hg658c.wordpress.com/2017/12/04/decrypting-configuration-files-from-other-huawei-home-gateway-routers/\n\nExtracted the 4 Hex strings needed. But, looks like there is a twist. the IV is 64 bits long.. so the .Py script he shared gives an error that the IV is too long.\nuploaded the 4 files (GetInfo 1 through 4) and the extractkey.py script. also included is the output from that script as a proof.\n\nhttps://drive.google.com/drive/folders/1hLF1I9lpB8etVNDGcuocoCmTpM6GciGJ\n\nEDIT : can anyone get me in contact with that person on the wordpress ? Maybe he can help\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "disassembly",
        "firmware",
        "decryption",
        "python"
    ],
    "user": "Omarico7",
    "time": "Jan 20, 2020 at 18:27",
    "comments": [
        {
            "user": "Olvin Roght",
            "text": "I have looked in python script and I have no idea how you get IV 64bit long with <pre><code>iv=raw[-32:-16]</code></pre> which copy 16 bytes (128 bits) into IV. Lengths of all variables are hardcoded and fit one to another. Even more fantastic is that 64bits is too long when 128 required\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Test this script out, I Tested it and it works well for me and it can even Re-encrypt the file back for hg630/hg633\n\ndecryption :\n<pre><code>Usage :hg633.py decrypt inputfile outputfile</code></pre>\nencryption :\n<pre><code>Usage :hg633.py encrypt inputfile outputfile</code></pre>\nTo decode the encrypted passwords\n<pre><code>Usage : hg633decode.py decrypt inputfile outputfile</code></pre>\n\nTo fix\n\nNot a valid config file...exiting\n\nin other words to get the script to treat this your config as a valid config, add this up of the line in script that has similar value <pre><code>XML_VERSION_TSTRING = b'TEDATA<?xml version=\"1.0\" ?>'</code></pre>\nwhich is the very first line of a decrypted config file\nand modify\n<pre><code>def check_config(new_config_file):\n    head = new_config_file[0:len(XML_VERSION_STRING)]\n    if head != XML_VERSION_STRING:\n        print(\"Not a valid config file...exiting\")\n</code></pre>\nto\n<pre><code>def check_config(new_config_file):\n    head = new_config_file[0:len(XML_VERSION_STRING)]\n    head2 = new_config_file[0:len(XML_VERSION_TSTRING)]\n    if head != XML_VERSION_STRING:\n     if head2 != XML_VERSION_TSTRING:               \n        print(\"Not a valid config file...exiting\")\n        sys.exit()\n</code></pre>\nto decode the admin password\n<pre><code> sdecode.py encryptedstring\n</code></pre>\nIt will output a sha-256 hash which is how the password is stored in newer routers at least , you can search the hash online for possible quick cracking\nI couldn't figure out how to Re-encrypt the DG8045 as the signurate keeps failing even that i used the keys from getinfo function\nif anyone can figure how to work out the RSA_N RSA_D , that would help a lot.\n",
            "votes": "1",
            "user": "mina nageh",
            "time": "Dec 14, 2021 at 1:07",
            "is_accepted": true,
            "comments": []
        }
    ]
}