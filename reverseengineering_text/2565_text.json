{
    "title": "Trace assisted code identification?",
    "link": "https://reverseengineering.stackexchange.com/questions/2565/trace-assisted-code-identification",
    "content": "I'm working on an RE project and had an idea for a tool that would help me greatly and wanted to see if it already exists.\nI'd like to find a specific part of code in the binary. Searching for strings, etc is not helping much. So, I had the thought, what if I could run the program twice, once I would have the program do the thing that corresponds to the code I'm looking for, and the second time I would not perform that action.\nIf I had a trace of say basic blocks executed during both runs, I might be able to do a \"diff\" and use that to narrow down where the functionality lies in the binary.\nDoes such a tool already exist, or is there a better way to narrow down the part of code executing.\n",
    "votes": "8",
    "answers": 2,
    "views": "933",
    "tags": [
        "tools",
        "debugging"
    ],
    "user": "mikeazo",
    "time": "Aug 5, 2013 at 13:22",
    "comments": [],
    "answers_data": [
        {
            "content": "This approach is commonly called \"differential debugging\". I know of the following tools that can help with it:\n\nPaiMei from Pedram Amini\nMyNav by Joxean Koret\nIDA's trace replayer allows diffing two execution traces (also implemented by Joxean)\nBinNavi has this feature\nsimple differ by @dionthegod\na script from Carlos Garcia which uses WinAppDbg framework by Mario Vilas\n\nIt's not too hard to implement something quick in any debugger that allows scriptable breakpoints:\n\nPut breakpoints on every function/basic block/instruction (depending on your preference and what the debugger allows). In the breakpoint handler, record the hit then disable/remove the breakpoint.\nRun the program and do everything you can except for the part you're interested in.\nExit the program.\nChange the breakpoint handler to stop execution, or record it in a separate log file.\nRun the program again and exercise the part you need. One or more of the remaining breakpoints should hit. They will point you to the interesting code.\n",
            "votes": "9",
            "user": "Igor Skochinsky",
            "time": "Aug 1, 2013 at 18:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "you may check out an ollydbg plugin <pre><code>conditional branch logger</code></pre>\nhttp://www.woodmann.com/collaborative/tools/index.php/Conditional_Branch_Logger\nit parses the executable for conditional branches <pre><code>(je , jne .... jecxz....loopd etc)</code></pre>\nsets logging breakpoints on them and logs the results to a txt which can be used to diff the \ndiversion in paths between two different execution scenarios\n",
            "votes": "3",
            "user": "blabb",
            "time": "Aug 1, 2013 at 18:18",
            "is_accepted": false,
            "comments": []
        }
    ]
}