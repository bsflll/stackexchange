{
    "title": "unix executable Error: Reading 0x1b50 bytes extends past end of file for string table",
    "link": "https://reverseengineering.stackexchange.com/questions/27584/unix-executable-error-reading-0x1b50-bytes-extends-past-end-of-file-for-string",
    "content": "info on the file it is called ld it is a command for linking elfs called link editor. Does Error: Reading 0x1b50 bytes extends past end of file for string table mean I am missing some kind of offset? readelf says: readelf: Error: no .dynamic section in the dynamic segment strange here is all the <pre><code>readelf</code></pre> info:\n<pre><code>~/Desktop/ld$ eu-readelf --all ./ld\nELF Header:\n  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF32\n  Data:                              2's complement, big endian\n  Ident Version:                     1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           MIPS\n  Version:                           1 (current)\n  Entry point address:               0x10002350\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          91924 (bytes into file)\n  Flags:                             0x20000024\n  Size of this header:               52 (bytes)\n  Size of program header entries:    32 (bytes)\n  Number of program headers entries: 7\n  Size of section header entries:    40 (bytes)\n  Number of section headers entries: 23\n  Section header string table index: 22\n\nSection Headers:\n[Nr] Name                 Type         Addr     Off    Size   ES Flags Lk Inf Al\n[ 0] <corrupt>            <unknown>: 1090519040 001cffff ffff0100 4fcffff 1090519040       -1 -65216 155197191\n[ 1] <corrupt>            <unknown>: 1638399 04fcffff ffffffff ffff0140 454561792 NOE   155197191 1090519040 1048576\n[ 2] <corrupt>            <unknown>: 47451165 696e7465 7270002e 4d495053 1734962790 AXS   779055220 1768910451 3043941\n[ 3] <corrupt>            SHT_LOPROC+96e616d 6c69626c 69737400 2e64796e 2037281657 AXSO  1937011200 778592627 1744842340\n[ 4] <corrupt>            <unknown>: 1230000942 6962002e 6d73796d 2e636f 779318389 XSINTCO 1852206185 1668546606 1296650323\n[ 5] <corrupt>            SHT_LOPROC+4657874 6974002e 726f6461 7461002e 1651733248 AXSINC 1684108385 3041135 1946168947\n[ 6] <corrupt>            SHT_LOOS+1746100 002e6465 6275675f 6c696e65 1634559347 WAMSING 3040357 1651861343 1886741102\n[ 7] <corrupt>            SHT_LOOS+275675f 6576002e 64656275 675f696e 1634559232 AMSIGO 1718550574 1684365941 1734305394\n[ 8] <corrupt>            SHT_LOPROC+5675f77 616d6573 2e6465 6275675f 1700951399 AXSINGCO 1718972003 1851878757 1929391716\n[ 9] <corrupt>            SHT_LOOS+e676573 6d6d656e 74002e4d 4950532e 1296650323 WAXSING 1768846437 1919312227 1702035502\n[10] <corrupt>            SHT_LOOS+e74732e 002e4d49 50532e65 76656e74 778268526 XMSICO 1932421486 1769209902 1296650323\n[11] <corrupt>            <unknown>: 779251556 2e4d4950 532e636f 6e74656e 1920229730 NO    1949197409 1952514094 1936225140\n[12] <corrupt>            NULL         00000000 000000 000000  0        0   0  0\n[13] <corrupt>            <unknown>: 256 00000210 011400 011400 1024 N     5376   0  0\n[14] <corrupt>            <unknown>: 2416 00000210 013000 013000 2048 NTC   32768   0  0\n[15] <corrupt>            <unknown>: 6000 00000210 01b000 01b000 1024 GT    6144   0  0\n[16] <corrupt>            <unknown>: 8192 00000210 01c800 01c800 1024 GT    73728 1536  0\n[17] <corrupt>            <unknown>: 10608 00000210 02e800 02e800 1024       5120 1536 256\n[18] <corrupt>            <unknown>: 12800 00000210 02fc00 02fc00 1024 NG    453376   0  0\n[19] <corrupt>            <unknown>: 14848 00000210 09e800 09e800 1024 NT    431104 2048  0\n[20] <corrupt>            <unknown>: 16384 00000210 107c00 107c00  4 NGC   854576   6 16\n[21] <corrupt>            <unknown>: 72 00000002 10001aac 001aac  1 SO    163   8  5\n[22] <corrupt>            <unknown>: 85 00000002 10001b50 001b50  4 WO    1304   6  0\n\nProgram Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz  MemSiz   Flg Align\n  PHDR           0x000034 0x10000034 0x10000034 0x0000e0 0x0000e0 R   0x4\n  INTERP         0x000114 0x10000114 0x10000114 0x000015 0x000015 R   0x4\n  LOPROC+2       0x000130 0x10000130 0x10000130 0x000080 0x000080 R   0x8\n  LOPROC+0       0x0001b0 0x100001b0 0x100001b0 0x000018 0x000018 R   0x4\n  DYNAMIC        0x0001c8 0x100001c8 0x100001c8 0x000120 0x000120 R   0x4\n  LOAD           0x000000 0x10000000 0x10000000 0x012cd8 0x012cd8 R E 0x10000\n  LOAD           0x014000 0x10014000 0x10014000 0x000d0a 0x4300000c     0x6000040\n\n Section to Segment mapping:\n  Segment Sections...\n   00     \n   01     \n   02     \n   03     \n   04     \n   05     \n   06     \nb@b:~/Desktop/ld$ readelf -h ./ld\nELF Header:\n  Magic:   7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF32\n  Data:                              2's complement, big endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           MIPS R3000\n  Version:                           0x1\n  Entry point address:               0x10002350\n  Start of program headers:          52 (bytes into file)\n  Start of section headers:          91924 (bytes into file)\n  Flags:                             0x20000024, cpic, abi2, mips3\n  Size of this header:               52 (bytes)\n  Size of program headers:           32 (bytes)\n  Number of program headers:         7\n  Size of section headers:           40 (bytes)\n  Number of section headers:         23\n  Section header string table index: 22\nreadelf: Error: Reading 0x1b50 bytes extends past end of file for string table\nreadelf: Error: no .dynamic section in the dynamic segment\n</code></pre>\nMaybe readelf is the incorrect thing to use for this but ghidra also doesnt load much of anything so I need more info to load it as a raw binary.\nits stripped to this sounds like fun: ./ld: ELF 32-bit MSB executable, MIPS, N32 MIPS-III version 1 (SYSV), dynamically linked, interpreter empty, stripped aka difficult\n",
    "votes": "0",
    "answers": 0,
    "views": "1k",
    "tags": [
        "linux",
        "dynamic-linking"
    ],
    "user": "Peter Robertson",
    "time": "Apr 30, 2021 at 9:24",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "please use code blocks for formatting, what you have now is pretty much unreadable\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Totally agree with Igor. Please use punctuation and formatting. I'd wager the majority of our community are non-native speakers of English. I fixed what seemed to be one contiguous block meant to be the <pre><code>readelf</code></pre> output. If I got it wrong don't hesitate to fix it.\n",
            "time": null
        },
        {
            "user": "Peter Robertson",
            "text": "@IgorSkochinsky sorry about that it seemed correctly parsed before I posted thanks for letting e know\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "The ELF header is likely corrupted. It will need to be repaired before tools like readelf or ghidra can parse it properly\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "@PeterRobertson If section information has been removed, then you can just zero out the ELF header fields that have to do with section information and ghidra will load the binary. Demo here (full disclosure: Iâ€™m the developer): github.com/BinaryResearch/lepton\n",
            "time": null
        }
    ],
    "answers_data": []
}