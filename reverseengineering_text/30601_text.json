{
    "title": "Borland C++ 3.0 - Which code might produce this strangely convoluted ASM sequence?",
    "link": "https://reverseengineering.stackexchange.com/questions/30601/borland-c-3-0-which-code-might-produce-this-strangely-convoluted-asm-sequenc",
    "content": "I'm reverse-engineering a DOS binary that was compiled with Borland C++ 3.0, and I'm trying to create C code that will produce the same assembly as the original when compiled with the same compiler. For the majority of the code so far, this works out fairly well, but there is one place that's really puzzling. I just can't figure out what kind of source code would get the compiler to produce this particular asm sequence.\nSo the relevant part of the original assembly is:\n<pre><code>; function's stack layout:\nvram_ptr        = dword ptr -4\ntarget_offset   = word ptr  6\nsize            = word ptr  8\nsrc_data        = dword ptr  0Ah\n\n; the funtion also uses registers SI and DI to hold two loop variables.\n\n; ----------------------------------------------------\n; The code in question. It's basically just\n; vram_ptr[i] = *src_data, but done in a very\n; convoluted manner\n; ----------------------------------------------------\nles     bx, [bp+vram_ptr] ; load vram_ptr into ES:BX\npush    es\n\nmov     es, word ptr [bp+src_data+2] ; set ES to FP_SEG(src_data)\npush    bx\nmov     bx, word ptr [bp+src_data] ; set BX to FP_OFF(src_data)\nmov     al, es:[bx]     ; basically _AL = *src_data\npop     bx\n\npop     es\nmov     es:[bx+si], al  ; Store it\n; ----------------------------------------------------\n; ----------------------------------------------------\n\n; src_data++\ninc     word ptr [bp+src_data]\n</code></pre>\nWhen I do the most obvious thing and write <pre><code>dest[i] = *data;</code></pre> in C, the compiler generates something much more reasonable, but sadly different from the original:\n<pre><code>les  bx,[vram_ptr]   ; same as original \npush es              ; same as original\n\nles  si,[src_data]   ; different, original avoids\nmov  al,[es:si]      ; use of SI\n\npop  es              ; same as original\nmov  [es:bx+di],al   ; same as original\ninc  word [src_data] ; same as original\n</code></pre>\nAnd it also spills a loop variable to the stack that is held in <pre><code>SI</code></pre> in the original code, and uses <pre><code>DI</code></pre> instead of <pre><code>SI</code></pre> for the loop variable used in the expression. But no matter what I try, I can't get it to generate the original assembly.\nIt seems as though the compiler was somehow prevented from using <pre><code>SI</code></pre> in the data move expression, and was thus forced to generate the more complicated sequence.\nWhat kind of source code and/or compiler flags might cause this?\nFor reference, here's the full C code I have so far (which is close to the original asm aside from the mismatches I mentioned):\n<pre><code>void pascal CopyToVram(byte far* data, word size, word destOffset)\n{\n  register word i;\n  register word mask;\n\n  byte far* dest = MK_FP(0xa000, destOffset);\n\n  // These macros just generate a bunch of port IO instructions\n  EGA_SET_DEFAULT_MODE();\n  EGA_SET_DEFAULT_BITMASK();\n\n  for (i = 0; i < size; i++)\n  {\n    for (mask = 0x0100; mask < 0x1000; mask <<= 1)\n    {\n      disable();\n\n      outport(0x03c4, mask | 0x02);\n\n      // TODO: Codegen mismatch\n      dest[i] = *data;\n      data++;\n\n      enable();\n    }\n  }\n}\n</code></pre>\n",
    "votes": "3",
    "answers": 0,
    "views": "320",
    "tags": [
        "disassembly",
        "decompilation",
        "dos-exe"
    ],
    "user": "lethal-guitar",
    "time": "Jul 6, 2022 at 16:27",
    "comments": [
        {
            "user": "Robert",
            "text": "May be the code wasn't compiled at all and is inline assembler? Borland C++ 3.0 is from 1991 and at that time hand written assembler code wasn't still popular with lots of people.\n",
            "time": null
        },
        {
            "user": "lethal-guitar",
            "text": "@Robert I was wondering this as well, but I doubt it. There is definitely handwritten asm in this executable, but it's usually easy to tell apart from the compiled code. The rest of this function's asm is too close to the compiler output I get when compiling it to be entirely handwritten, and I would be surprised if someone wrote inline asm just for one assignment.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Isn't it possible to include blocks of assembler into a common C function using inline assembler (never used it, I I thought it would work this way)? Therefore not the whole function needs to be handwritten assembler.\n",
            "time": null
        },
        {
            "user": "lethal-guitar",
            "text": "@Robert it's definitely possible, but I would find it strange that someone writes this complicated inline assembly just to do a single assignment, where the compiler already does a good (better?) job. Inline asm within functions is typically used for performance critical parts, or very low-level things. If someone went to the trouble of optimizing this function with inline asm, I would expect to see things like <pre><code>REP STOSB</code></pre> and the like.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "What if you use indexes for both source and destination pointers?\n",
            "time": null
        }
    ],
    "answers_data": []
}