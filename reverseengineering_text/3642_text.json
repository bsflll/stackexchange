{
    "title": "How to find memory addresses which are read from but not written to",
    "link": "https://reverseengineering.stackexchange.com/questions/3642/how-to-find-memory-addresses-which-are-read-from-but-not-written-to",
    "content": "Analysing a bootmanager : I'm trying to track all variables which are only read from, and not written to... which will give me the external variables it uses...\nIs there any such functionality in IDA pro free? Can I write a plugin for it in the free version? Any other options for this purpose? Any other tool which can do this?\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "static-analysis",
        "memory"
    ],
    "user": "Milind R",
    "time": "Feb 7, 2014 at 21:14",
    "comments": [],
    "answers_data": [
        {
            "content": "Since you are only interested in variables that are read from, not written to, I'll assume you're talking about global variables since it makes no sense to have a local variable that's never written to.\nYou can write an IDC script to iterate through each global variable and use <pre><code>RfirstB</code></pre>, <pre><code>RnextB</code></pre>, and <pre><code>XrefType</code></pre> to determine which global variables are read from, written to, or both.\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Feb 7, 2014 at 21:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">That's a good answer.  One thing to note is that memory references through indirect memory addressing (pointers) won't be tracked explicitly in IDA (or any publicly-available reverse engineering tool).  I.e., to know what memory is being read or written to by a <code>char **</code> type, you have to know where it points.  Another example is accessing an array of structures.  This often happens in a loop, where some base pointer or index variable is updated for each iteration, and will not leave direct memory references to the individual array elements.</span>",
                    "time": null
                },
                {
                    "user": "Milind R",
                    "text": "<span class=\"comment-copy\">I actually understood what you meant about global variables now, after reading up on the way they are stored differently from local ones. Thanks, will get familiar with IDC now.</span>",
                    "time": null
                }
            ]
        }
    ]
}