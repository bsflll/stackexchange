{
    "title": "Tracing back the user code section that triggered a message",
    "link": "https://reverseengineering.stackexchange.com/questions/23552/tracing-back-the-user-code-section-that-triggered-a-message",
    "content": "I have a Windows GUI x86 executable and I have identified, in the <pre><code>.rsrc</code></pre> section, where the error string I want to trace is. Let's assume it is in <pre><code>id=83Ah</code></pre>.\nI have set a <pre><code>bpx user32:LoadStringA</code></pre> and then a break condition <pre><code>breakif([esp+8] == 83A)</code></pre>.\nThe BP fires correctly, when required. My problem now is how to identify which user code took the decision to load the string. For example, imagine this situation:\n<pre><code>if(....) {\n   displayError()  <-- This will call LoadString at some point \n}\n</code></pre>\nI am able to break on the <pre><code>LoadString</code></pre>, but when I RET, I get to a function that is used in many other code sections (such as <pre><code>AfxMessageBox</code></pre>). And I RET again and it is also a function that is used by many other code sections (like a Windows dispatcher)... and so on and so forth until I get lost without knowing where the user code that triggered the message is. I avoid system DLLs, but the portions of user code I land in look very generic and shared by other GUI components.\nThis is for example the <pre><code>Call Stack</code></pre> of my program:\n<pre><code>Address  To       From     Size     Comment            Party \n0019EF84 0041FA5E 76AC8BA0 58       user32.76AC8BA0    User\n0019EFDC 004037C1 0041FA5E 24       s3.sub_41FA42+1C   User\n0019F000 0041EE3D 004037C1 30       s3.sub_4037B0+11   User\n0019F030 0041DCE0 0041EE3D 24       s3.0041EE3D        User\n0019F054 00421883 0041DCE0 50       s3.sub_41DCC5+1B   User\n0019F0A4 004210A3 00421883 A8       s3.sub_421820+63   User\n0019F14C 00421050 004210A3 24       s3.sub_421073+30   User\n0019F170 0041FDB9 00421050 6C       s3.sub_42102A+26   User\n0019F1DC 004200BE 0041FDB9 1C       s3.sub_41FD36+83   User\n0019F1F8 76AE5CAB 004200BE 2C       s3.sub_4200A4+1A   System\n0019F224 76AD67BC 76AE5CAB E4       user32.76AE5CAB    System\n0019F308 76AD5F6D 76AD67BC 64       user32.76AD67BC    System\n0019F36C 76AD5C33 76AD5F6D 34       user32.76AD5F6D    System\n0019F3A0 76B008E2 76AD5C33 24       user32.76AD5C33    System\n0019F3C4 76B005DF 76B008E2 28       user32.76B008E2    System\n0019F3EC 76AFFAE8 76B005DF A0       user32.76B005DF    System\n0019F48C 76AFEF92 76AFFAE8 2C       user32.76AFFAE8    System\n0019F4B8 76AE5CAB 76AFEF92 2C       user32.76AFEF92    System\n0019F4E4 76AD67BC 76AE5CAB E4       user32.76AE5CAB    System\n0019F5C8 76AC6C22 76AD67BC 38       user32.76AD67BC    System\n0019F600 004209FA 76AC6C22 20       user32.76AC6C22    User\n0019F620 00421065 004209FA 20       s3.sub_4209B6+44   User\n0019F640 0041FDB9 00421065 6C       s3.sub_42102A+3B   User\n0019F6AC 004200BE 0041FDB9 1C       s3.sub_41FD36+83   User\n0019F6C8 76AE5CAB 004200BE 2C       s3.sub_4200A4+1A   System\n0019F6F4 76AD67BC 76AE5CAB E4       user32.76AE5CAB    System\n0019F7D8 76AD58FB 76AD67BC 74       user32.76AD67BC    System\n0019F84C 76AD97B1 76AD58FB 30       user32.76AD58FB    System\n0019F87C 76ACEB4E 76AD97B1 2C       user32.76AD97B1    System\n0019F8A8 00422C49 76ACEB4E 7C       user32.76ACEB4E    User\n0019F924 0041E194 00422C49 FFE606E0 s3.sub_422C1F+2A   User\n00000004 00000000 0041E194          s3.sub_41E0DC+B8   User\n</code></pre>\nI initially tried to investigate some close User sections near a System section... but they all seem like shared code that is used when other GUI elements in the application have to be displayed.\nSo what is the best approach to determine where the <pre><code>if(....)</code></pre> comparison is?\nNote: I am using x64dbg, but the process should not change wrt other debuggers\n",
    "votes": "0",
    "answers": 0,
    "views": "97",
    "tags": [
        "debugging",
        "x64dbg"
    ],
    "user": "user1156544",
    "time": "Mar 31, 2020 at 2:06",
    "comments": [
        {
            "user": "Robert",
            "text": "If the original developer wanted to separate the GUI message from the actual code that triggered the message there are various ways to do so. One way would be to use custom window messages such as <pre><code>WM_USER</code></pre> message type. In such a case the stack trace would just lead to to the event handling code. Check the process for events e.g. using Spy++ (<pre><code>spyxx.exe</code></pre>).\n",
            "time": null
        },
        {
            "user": "user1156544",
            "text": "So you mean my stack is not enough to find out (I would ned to capture WM_USER) and that with a debugger it is too complicated to find the trigger (I would need Spy++)?\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "As I said using messages is just one potential way. I don't know if it is true in your case. Thee question is more how many effort the developer made to hide what you are searching. In the end there is also the possibility that you found the wrong call or misinterpreted something.\n",
            "time": null
        }
    ],
    "answers_data": []
}