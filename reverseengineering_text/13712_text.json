{
    "title": "Reverse Engineering Windows kernel routines",
    "link": "https://reverseengineering.stackexchange.com/questions/13712/reverse-engineering-windows-kernel-routines",
    "content": "Problem\nI'm trying to reverse engineer some Windows kernel routines on a Windows 7 x86 (Home Basic) VM with kd. I have already reversed KeInitializeDpc by disassambling it. The problem with <pre><code>KeReadyThread</code></pre> is that I can't tell where the third and the fourth <pre><code>mov</code></pre> are pointing to,as the function doesn't seem to have any argument or anything that can help me.\nThis is the code\n<pre><code>lkd> uf KeReadyThread  \nnt!KeReadyThread:\n829080f6 8bff            mov     edi,edi  \n829080f8 56              push    esi  \n829080f9 8bf0            mov     esi,eax  \n829080fb 8b4650          mov     eax,dword ptr [esi+50h]  \n829080fe 8b4874          mov     ecx,dword ptr [eax+74h]  \n82908101 f6c107          test    cl,7  \n82908104 7409            je      nt!KeReadyThread+0x19 (8290810f)  \n\nnt!KeReadyThread+0x10:  \n82908106 e8e7cef6ff      call    nt!KiInSwapSingleProcess (82874ff2)  \n8290810b 84c0            test    al,al  \n8290810d 7505            jne     nt!KeReadyThread+0x1e (82908114)  \n\nnt!KeReadyThread+0x19:  \n8290810f e87c70feff      call    nt!KiFastReadyThread (828ef190)  \n\nnt!KeReadyThread+0x1e:  \n82908114 5e              pop     esi  \n82908115 c3              ret\n</code></pre>\n_KTHREAD structure\n<pre><code>lkd> dt _KTHREAD\nnt!_KTHREAD\n   +0x000 Header           : _DISPATCHER_HEADER\n   +0x010 CycleTime        : Uint8B\n   +0x018 HighCycleTime    : Uint4B\n   +0x020 QuantumTarget    : Uint8B\n   +0x028 InitialStack     : Ptr32 Void\n   +0x02c StackLimit       : Ptr32 Void\n   +0x030 KernelStack      : Ptr32 Void\n   +0x034 ThreadLock       : Uint4B\n   +0x038 WaitRegister     : _KWAIT_STATUS_REGISTER\n   +0x039 Running          : UChar\n   +0x03a Alerted          : [2] UChar\n   +0x03c KernelStackResident : Pos 0, 1 Bit\n   +0x03c ReadyTransition  : Pos 1, 1 Bit\n   +0x03c ProcessReadyQueue : Pos 2, 1 Bit\n   +0x03c WaitNext         : Pos 3, 1 Bit\n   +0x03c SystemAffinityActive : Pos 4, 1 Bit\n   +0x03c Alertable        : Pos 5, 1 Bit\n   +0x03c GdiFlushActive   : Pos 6, 1 Bit\n   +0x03c UserStackWalkActive : Pos 7, 1 Bit\n   +0x03c ApcInterruptRequest : Pos 8, 1 Bit\n   +0x03c ForceDeferSchedule : Pos 9, 1 Bit\n   +0x03c QuantumEndMigrate : Pos 10, 1 Bit\n   +0x03c UmsDirectedSwitchEnable : Pos 11, 1 Bit\n   +0x03c TimerActive      : Pos 12, 1 Bit\n   +0x03c Reserved         : Pos 13, 19 Bits\n   +0x03c MiscFlags        : Int4B\n   +0x040 ApcState         : _KAPC_STATE\n   +0x040 ApcStateFill     : [23] UChar\n   +0x057 Priority         : Char\n   +0x058 NextProcessor    : Uint4B\n   +0x05c DeferredProcessor : Uint4B\n   +0x060 ApcQueueLock     : Uint4B\n   +0x064 ContextSwitches  : Uint4B\n   +0x068 State            : UChar\n   +0x069 NpxState         : Char\n   +0x06a WaitIrql         : UChar\n   +0x06b WaitMode         : Char\n   +0x06c WaitStatus       : Int4B\n   +0x070 WaitBlockList    : Ptr32 _KWAIT_BLOCK\n   +0x074 WaitListEntry    : _LIST_ENTRY\n   +0x074 SwapListEntry    : _SINGLE_LIST_ENTRY\n   +0x07c Queue            : Ptr32 _KQUEUE\n   +0x080 WaitTime         : Uint4B\n   +0x084 KernelApcDisable : Int2B\n   +0x086 SpecialApcDisable : Int2B\n   +0x084 CombinedApcDisable : Uint4B\n   +0x088 Teb              : Ptr32 Void\n   +0x090 Timer            : _KTIMER\n   +0x0b8 AutoAlignment    : Pos 0, 1 Bit\n   +0x0b8 DisableBoost     : Pos 1, 1 Bit\n   +0x0b8 EtwStackTraceApc1Inserted : Pos 2, 1 Bit\n   +0x0b8 EtwStackTraceApc2Inserted : Pos 3, 1 Bit\n   +0x0b8 CalloutActive    : Pos 4, 1 Bit\n   +0x0b8 ApcQueueable     : Pos 5, 1 Bit\n   +0x0b8 EnableStackSwap  : Pos 6, 1 Bit\n   +0x0b8 GuiThread        : Pos 7, 1 Bit\n   +0x0b8 UmsPerformingSyscall : Pos 8, 1 Bit\n   +0x0b8 ReservedFlags    : Pos 9, 23 Bits\n   +0x0b8 ThreadFlags      : Int4B\n   +0x0bc ServiceTable     : Ptr32 Void\n   +0x0c0 WaitBlock        : [4] _KWAIT_BLOCK\n   +0x120 QueueListEntry   : _LIST_ENTRY\n   +0x128 TrapFrame        : Ptr32 _KTRAP_FRAME\n   +0x12c FirstArgument    : Ptr32 Void\n   +0x130 CallbackStack    : Ptr32 Void\n   +0x130 CallbackDepth    : Uint4B\n   +0x134 ApcStateIndex    : UChar\n   +0x135 BasePriority     : Char\n   +0x136 PriorityDecrement : Char\n   +0x136 ForegroundBoost  : Pos 0, 4 Bits\n   +0x136 UnusualBoost     : Pos 4, 4 Bits\n   +0x137 Preempted        : UChar\n   +0x138 AdjustReason     : UChar\n   +0x139 AdjustIncrement  : Char\n   +0x13a PreviousMode     : Char\n   +0x13b Saturation       : Char\n   +0x13c SystemCallNumber : Uint4B\n   +0x140 FreezeCount      : Uint4B\n   +0x144 UserAffinity     : _GROUP_AFFINITY\n   +0x150 Process          : Ptr32 _KPROCESS\n   +0x154 Affinity         : _GROUP_AFFINITY\n   +0x160 IdealProcessor   : Uint4B\n   +0x164 UserIdealProcessor : Uint4B\n   +0x168 ApcStatePointer  : [2] Ptr32 _KAPC_STATE\n   +0x170 SavedApcState    : _KAPC_STATE\n   +0x170 SavedApcStateFill : [23] UChar\n   +0x187 WaitReason       : UChar\n   +0x188 SuspendCount     : Char\n   +0x189 Spare1           : Char\n   +0x18a OtherPlatformFill : UChar\n   +0x18c Win32Thread      : Ptr32 Void\n   +0x190 StackBase        : Ptr32 Void\n   +0x194 SuspendApc       : _KAPC\n   +0x194 SuspendApcFill0  : [1] UChar\n   +0x195 ResourceIndex    : UChar\n   +0x194 SuspendApcFill1  : [3] UChar\n   +0x197 QuantumReset     : UChar\n   +0x194 SuspendApcFill2  : [4] UChar\n   +0x198 KernelTime       : Uint4B\n   +0x194 SuspendApcFill3  : [36] UChar\n   +0x1b8 WaitPrcb         : Ptr32 _KPRCB\n   +0x194 SuspendApcFill4  : [40] UChar\n   +0x1bc LegoData         : Ptr32 Void\n   +0x194 SuspendApcFill5  : [47] UChar\n   +0x1c3 LargeStack       : UChar\n   +0x1c4 UserTime         : Uint4B\n   +0x1c8 SuspendSemaphore : _KSEMAPHORE\n   +0x1c8 SuspendSemaphorefill : [20] UChar\n   +0x1dc SListFaultCount  : Uint4B\n   +0x1e0 ThreadListEntry  : _LIST_ENTRY\n   +0x1e8 MutantListHead   : _LIST_ENTRY\n   +0x1f0 SListFaultAddress : Ptr32 Void\n   +0x1f4 ThreadCounters   : Ptr32 _KTHREAD_COUNTERS\n   +0x1f8 XStateSave       : Ptr32 _XSTATE_SAVE\n</code></pre>\nSolution\nThe only thing that came to my mind as a possible solution is to run the code and see what the registers point to,but on top of not knowing whether it is correct or not, I don't know how to do it. As you may have guessed I'm pretty inexperienced.\n",
    "votes": "2",
    "answers": 3,
    "views": "1k",
    "tags": [
        "windows",
        "assembly",
        "x86"
    ],
    "user": "shxdow",
    "time": "Oct 13, 2016 at 16:11",
    "comments": [],
    "answers_data": [
        {
            "content": "Obviously, <pre><code>KeReadyThread</code></pre> has a single argument passed to it in the <pre><code>eax</code></pre> register.\nTo actually reverse your way to that argument's structure/type you'll need to do quite a bit of reverse engineering.\nLuckily for you, the guys at ReactOS already did that for you.\nIf you take a look at that link, you'll see ReactOS's implementation of <pre><code>KeReadyThread</code></pre> accepting a single parameter of the structure <pre><code>PKTREAD</code></pre>.\nThis is <pre><code>KeReadyThread</code></pre>'s code from ReactOS:\n<pre><code>113 VOID\n114 NTAPI\n115 KeReadyThread(IN PKTHREAD Thread)\n116 {\n117     KIRQL OldIrql;\n118     ASSERT_THREAD(Thread);\n119     ASSERT_IRQL_LESS_OR_EQUAL(DISPATCH_LEVEL);\n120 \n121     /* Lock the Dispatcher Database */\n122     OldIrql = KiAcquireDispatcherLock();\n123 \n124     /* Make the thread ready */\n125     KiReadyThread(Thread);\n126 \n127     /* Unlock dispatcher database */\n128     KiReleaseDispatcherLock(OldIrql);\n129 }\n</code></pre>\nAnd specifically, that dereference you're seeing at the top of the assembly you shared is the implementation of <pre><code>ASSERT_THREAD</code></pre>:\n<pre><code>#define ASSERT_THREAD (object) ASSERT((((object)->Header.Type & KOBJECT_TYPE_MASK) == ThreadObject))\n</code></pre>\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Oct 14, 2016 at 0:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "shxdow",
                    "text": "<span class=\"comment-copy\">This sort of confused me even further: why does the command i used { lkd&gt; uf KeInitializeDpc } disassable ASSERT_THREAD ? . I thought I disassembled the function you posted. I'm taking these kernel routines from a book and they are meant to introduce people to re, am I supposed to reverse engineer the arguments too or is it ok to look online ?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\"><code>ASSERT_THREAD</code> is a macro, not a function. Macros are a C preprocessor constructs. the C preprocessor does (for the sake of this discussion) a simple search&amp;replace before the C compiler starts working on the code. Thus for all intents and purposes, that code <i>is</i> part of that function.</span>",
                    "time": null
                },
                {
                    "user": "shxdow",
                    "text": "<span class=\"comment-copy\">@Nirlzr I understand what a macro is, but this doesn't answer my question: why is the macro even brought in. What I don't understand is, why by trying to disassemble the whole function by using it's <b>name</b>, I get a <i>part</i> of it that has a different name too. If my logic isn't flawed,in order to have as output <code>ASSERT_THREAD</code> I should type  <code>lkd&gt; uf ASSERT_THREAD</code> not <code>KeReadyThread</code></span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Alright. So there c compiler doesn't see any macros. Macros are translated before the compilation part so there's no <code>ASSERT_THREAD</code> object as far as the compiler/debbuger is aware.</span>",
                    "time": null
                },
                {
                    "user": "shxdow",
                    "text": "<span class=\"comment-copy\">Thank you for pointing out that I'm not disassembling KeReadyThread,but what I really can't figure out is: why is it even happening. Why in the snippet I posted, I can only see <code>ASSERT_THREAD</code> and not the rest of the code</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This Thread Popped up Due To Recent Activity\nQuoting from The Accepted Answer An Answer By Nirlzr \n\nAnd specifically, that dereference you're seeing at the top of the\n  assembly you shared is the implementation of ASSERT_THREAD:\n\nthe Disassembly and Derefernces does not belong to ASSERT_THREAD \nthe derefernces check the StackCount memeber of _KAPC_STATE.Process.StackCount\n<pre><code>kd> dt nt!_ETHREAD Tcb.ApcState.Process->StackCount.StackCount\n   +0x000 Tcb                                         : \n      +0x040 ApcState                                    : \n         +0x010 Process                                     : \n            +0x074 StackCount                                  : \n               +0x000 StackCount                                  : Pos 3, 29 Bits  \n</code></pre>\ngoogling geoffrey chappel _KTHREAD will provide more information about the overlay and  the Priortity member a char which is fitted inside KAPC_STATE for x86\n",
            "votes": "1",
            "user": "blabb",
            "time": "Nov 22, 2019 at 19:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The third move is referring to a member inside the Thread argument (shown in the ReactOS source linked by Nirlzr) which is at offset +0x50. As seen in the _KTHREAD struct there's nothing at offset +0x50 and the 2 closest members we have at that offset are ApcState and ApcStateFill. Looking further into ApcStateFill is pointless as it is just a string and would render the fourth move pointless, however ApcState is interesting as it is a _KAPC_STATE struct. Interestingly enough, ApcState has a member at +0x10 which is called Process which works accordingly with the third move where we move a member value at offset +[0x40 + 0x10]. The fourth move refers to a pointer to another struct of _KPROCESS at the Process member earlier discussed in the _KAPC_STATE struct. This pointer to a _KPROCESS + 0x70 gives us the member StackCount. And in the end, cl ends up with the value at the member StackCount which will be compared with 7.\n",
            "votes": "0",
            "user": "nameless",
            "time": "Nov 22, 2019 at 16:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}