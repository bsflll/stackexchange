{
    "title": "How should I approach reverse engineering this text encoding?",
    "link": "https://reverseengineering.stackexchange.com/questions/20109/how-should-i-approach-reverse-engineering-this-text-encoding",
    "content": "So I'm trying to hack the translation from the PS4 version of a game into the Vita version. The script files were conveniently uncompressed, and I was able to drop them in and have it working without a hitch - great!\nHowever, various other message files and quest summaries and the like are not so convenient.\nHere's a comparison of two files in a hex editor:\n\nAt first I thought it was a simple byte-pair compression, but there's obviously more to it than that, because if you look at the places which correspond to \"Let's go!\" and \"Let's do this!\" they don't start with the same string of characters at all.\nI uploaded the PS4/Vita versions of a file with rather more readable text:\nhttps://www.dropbox.com/s/bw0nvexyi9ww2be/hm%20vita?dl=0\nhttps://www.dropbox.com/s/sk74zadvndc8v9t/hm%20ps4?dl=0\nGoing through it and looking for common and recurring words, I found this:\n<pre><code>Goblin Thief\n´0Ö0ê0ó0·0ü0Õ0\nB430 D630 EA30 F330 B730 FC30 D530\n\nGoblin Thief Archer\n´0Ö0ê0ó0·0ü0Õ0¢0ü0Á0ã0ü0\nB430 D630 EA30 F330 B730 FC30 D530 A230 FC30 C130 E330 FC30\n\nAncient Grief\n¨0ó0·0§0ó0È0°0ê0ü0Õ0\nA830 F330 B730 A730 F330 C830 B030 EA30 FC30 D530\n\nGrief Screamer\n°0ê0ü0Õ0¹0¯0ê0ü0Þ0ü0\nB030 EA30 FC30 D530 B930 AF30 EA30 FC30 DE30 FC30\n\nGrief\nEA30 FC30 D530\n\nThief\nB730 FC30 D530\n</code></pre>\nSo you can see that FC30 D530 is \"ief\".\nBut then I look for more occurences of \"gr\"\n<pre><code>Deep Grudge\nÇ0£0ü0×0°0é0Ã0¸0\nC730 A330 FC30 D730 B030 E930 C330 B830\n</code></pre>\nAnd you don't see the EA30 that starts off \"Grief\".\nI have a feeling FC30 could be some kind of switch byte, either an upper case indication or possibly marking the use of some kind of lookup table? It's also interesting that all the lines which are just objectives/boss names have the --30 structure, but some of the descriptive passages don't seem to.\nThe additional problem, of course, is that the uncompressed English text from the PS4 version won't be a 100% perfect match for the text from the Vita version -- that's the whole point, after all! So even when I look at the name \"Deep Grudge\" and notice that I don't see anything which looks like it would correspond to the \"Gr\" from \"Grief\", I can't be certain that they didn't change the name in the PS4 version.\nDoes anyone have any suggestions on how I should be approaching this? If I'm right and there's actually some kind of compressed lookup table business going on, then it might be effectively impossible to reverse, right?\n",
    "votes": "13",
    "answers": 1,
    "views": "5k",
    "tags": [
        "encodings"
    ],
    "user": "Celandine Crane",
    "time": "Dec 10, 2018 at 12:10",
    "comments": [
        {
            "user": "corsiKa",
            "text": "I can't help but notice Grief screamer has an extra <pre><code>B030</code></pre> at the start that isn't present in the <pre><code>Grief</code></pre>line\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The way you can learn this encoding is to study Japanese.  :)  From the first line of your text file diff, we can see that this on the left:\n<pre><code>1131 3210 3130 3330 1021 0000 0000 0000  .12.1030.!......\n</code></pre>\nTranslates to this on the right:\n<pre><code>1100 3100 3200 1000 3100 3000 3300 3000  ..1.2....1.0.3.0.\n1000 01ff 0000 0000 0000 0000 0000 0000  .................\n</code></pre>\nThis is a very strong hint that the file on the left is using an 8-bit encoding and that the one on the right is using a 16-bit encoding.  The digits are translated in a very straightforward way, but the exclamation point (\"!\") is <pre><code>0x21</code></pre> in ASCII or UTF-8 but <pre><code>0x01ff</code></pre> is the Unicode \"fullwidth exclamation mark\" encoded as UCS-2 (that is, UTF-16 encoded as little-endian).\nSo with the hint about encoding we can see that the hex you've identified as \"Goblin Thief\"\n<pre><code>b430 d630 ea30 f330 b730 fc30 d530\n</code></pre>\nis rendered as ゴブリンシーフ which is the Katakana representation of the English words \"Goblin Thief\".  It's common for Japanese speakers to render foreign words into phonetic equivalents with Katakana.  So taking it syllable-by-syllable we have:\n<pre><code>ゴ  go\nブ  bu\nリ  ri\nン  n\nシ  shi\nー  (extended vowel)\nフ  fu\n</code></pre>\nSo if we say it aloud, \"go bu ri n shi-i fu\" sounds like \"Goblin Thief\" as pronounced by a native Japanese speaker.  You can try Google translate to experiment a bit more and to see and hear what this sounds like.\n",
            "votes": "25",
            "user": "Edward",
            "time": "Dec 10, 2018 at 14:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Can you switch around your hex words to the correct endianness <code>30b4 30d6 ..</code>? That way they form correct <a href=\"https://en.wikipedia.org/wiki/Katakana_(Unicode_block)\" rel=\"nofollow noreferrer\">Unicode values for Japanese</a>.</span>",
                    "time": null
                },
                {
                    "user": "Edward",
                    "text": "<span class=\"comment-copy\">As noted in the answer, these <i>are</i> Unicode values that just happen to be encoded as UCS-2, also known as <a href=\"http://unicode.org/faq/utf_bom.html#gen7\" rel=\"nofollow noreferrer\">UTF-16LE</a></span>",
                    "time": null
                },
                {
                    "user": "Celandine Crane",
                    "text": "<span class=\"comment-copy\">Wait, this is the bloody <i>Japanese</i> file? That's odd. I need to dig through the package and see if I can track down the actual English one then... I know for a fact that <i>some</i> of the files I extracted are the English ones because they have actual plaintext in them, which is why substituting them worked. Plus I'm 99% certain the package I have is from the SCEA version of the game. Hmmm.  Thanks ever so much, that explains a lot that was driving me nuts!</span>",
                    "time": null
                },
                {
                    "user": "Celandine Crane",
                    "text": "<span class=\"comment-copy\">Follow up note for anyone who was curious: the English text is actually stored in a completely separate file that's unique to the PS4 version of the game and is presumably pulled from to override the Japanese strings which exist in the base files. God only knows if there's any way to convince the Vita build to read from there.</span>",
                    "time": null
                },
                {
                    "user": "user202729",
                    "text": "<span class=\"comment-copy\">In other word, there is no 'special encoding' to reverse engineer...</span>",
                    "time": null
                }
            ]
        }
    ]
}