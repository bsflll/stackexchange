{
    "title": "32-bit binary stack layout on a x64 Linux OS",
    "link": "https://reverseengineering.stackexchange.com/questions/12397/32-bit-binary-stack-layout-on-a-x64-linux-os",
    "content": "Stack layout is well documented in many ways. Especially for x86 systems as there were numerous tutorials on how to exploit stack overflow on old 32-bit systems many years ago.\nSo far we can know that on a 32-bit system, the user stack starts from 0xc0000000 address (which is the limit between usermode and kernelmode).\nThis address is not the same if we take an Elf32 running on a x86-64 linux system.\nI cannot find this address but I can figure out it is 0xffffe000 thanks to gdb:\n<pre><code>(gdb) x $esp\n0xffffd4bc: 0xf7e16a83\n(gdb) x/w 0xffffdffc\n0xffffdffc: 0x00000000\n(gdb) x/w 0xffffe000\n0xffffe000: Cannot access memory at address 0xffffe000\n</code></pre>\nWe can actually see that the 0xffffe000 address points to an invalid location (or at least the process doesn't have proper permission to access this memory page).\nYet I cannot especially find a relevant source that tells us that the gnu stack of a x86 program on a x64 linux starts from 0xffffe000. Am I doing things wrong?\nI can find sources telling us about linux-gate.so.1 but I do not think this is the point here.\nAny ideas, reversers?\n",
    "votes": "7",
    "answers": 2,
    "views": "3k",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "Geoffrey R.",
    "time": "Apr 11, 2016 at 12:10",
    "comments": [
        {
            "user": "Ta Thanh Dinh",
            "text": "This is a coincidence, I have the same problem with you about the valid address of 32-bit binary stack on x64.\n",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "What values can you get then?\n",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "I found something probably relevant here: stackoverflow.com/questions/29426476/…\n",
            "time": null
        },
        {
            "user": "Geoffrey R.",
            "text": "I gets closer here: lxr.free-electrons.com/source/arch/x86/include/asm/…\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "In this article, the valid range for stack of a process is calculated from TASK_SIZE for 32-bit processes.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The valid stack access range of a (32 or 64 bit) process can be viewed by looking into its memory map. We can observe the memory map of a process with id <pre><code>pid</code></pre> by <pre><code>cat /proc/pid/maps</code></pre>, an example of a <pre><code>32-bit process</code></pre> on my 64-bit box:\n<pre><code>...\n09b58000-09b79000 rw-p 00000000 00:00 0                    [heap]\n...\nf7785000-f7787000 rw-p 001c7000 00:23 592106               /usr/lib/libc-2.20.so\n...\nf77c2000-f77c4000 r--p 00000000 00:00 0                    [vvar]\nf77c4000-f77c5000 r-xp 00000000 00:00 0                    [vdso]\n...\nf77e8000-f77e9000 rw-p 00022000 00:23 592099               /usr/lib/ld-2.20.so\nfff9b000-fffbc000 rw-p 00000000 00:00 0                    [stack]\n</code></pre>\nThen the valid range for <pre><code>stack</code></pre> is <pre><code>[0xfff9b000, 0xfffbc000)</code></pre>, memory access to an address higher or equal than <pre><code>0xfffbc000</code></pre> will trigger <pre><code>memory access violation</code></pre> exception. According to this article, this range is calculated when the kernel maps the binary into the memory, and by several functions, the interesting input for them is <pre><code>STACK_TOP</code></pre> which is defined by <pre><code>TASK_SIZE</code></pre> for 32-bit processes.\n",
            "votes": "2",
            "user": "Ta Thanh Dinh",
            "time": "Apr 12, 2016 at 14:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Geoffrey R.",
                    "text": "<span class=\"comment-copy\">Well, I guess this deserves several further investigations. Thanks for your answer.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thanks @GeoffreyR., you are welcome. In fact, I have the same question with you.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I have a partial answer.\nOne can determine wether the memory layout ends up to 0xc0000000 or 0xffffe000 thanks to the personality system call. By reading the ADDR_LIMIT_3GB flag it is possible to figure out wether a 32-bit process is mapped up to 0xc0000000 or 0xffffe000.\nI could not tell why the 0xffffe000 is relevant, except that it is 8192 bytes shorter that the end of a 4GB memory space. Maybe it has something to do with the kernel stack size.\n",
            "votes": "0",
            "user": "Geoffrey R.",
            "time": "Apr 12, 2016 at 12:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}