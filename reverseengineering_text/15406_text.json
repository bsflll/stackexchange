{
    "title": "IDA pro: jump back to previous instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/15406/ida-pro-jump-back-to-previous-instruction",
    "content": "I'm new with IDA pro and currently running with debugger, I have few questions:\n\nHow can I jump on previous instruction? Undo the latest instruction ?\nIs it possible in IDA to examine memory of an executable ? Like it is in Immunity Debugger? Something like this and examine each segment briefly like it is in Immunity Debugger ?\n",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "debugging",
        "c",
        "immunity-debugger"
    ],
    "user": "Rasty",
    "time": "May 26, 2017 at 16:46",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "check those: reverseengineering.stackexchange.com/questions/1909/… or reverseengineering.stackexchange.com/questions/11869/… or reverseengineering.stackexchange.com/questions/12087/…\n",
            "time": null
        },
        {
            "user": "Martin",
            "text": "To jump back to a previous instruction in the disassembly view, just press <pre><code>ESC</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As for the first point, in order to go back to instruction that was already executed (under the debugger), one needs to use a feature called reverse debugging (or Time Travel Debugging). As far as I know IDA's debugger doesn't have this. \nSome other tools that you could use to do a reverse debugging:\n\nradare2\nWinDbg Preview\ngdb\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Jun 21, 2018 at 17:32",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Debugging a program means executing its instruction on your CPU, \"undoing\" the last instruction is usually not possible with a standard debugger.\nBut you can debug your program in a virtual machine, take memory snapshots at given points while debugging, and restore those snapshots.\n",
            "votes": "0",
            "user": "user2823000",
            "time": "May 26, 2017 at 16:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}