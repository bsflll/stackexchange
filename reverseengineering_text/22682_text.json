{
    "title": "Is it possible to use a program's GUI abilities without the GUI?",
    "link": "https://reverseengineering.stackexchange.com/questions/22682/is-it-possible-to-use-a-programs-gui-abilities-without-the-gui",
    "content": "Is it possible to use/call programs' GUI abilities directly without using the GUI (programmatically, not by keyboarding)?\nFor example, a program with abilities nested too deeply in cascading submenus:\n\nWould it be possible to use/trigger any of those menu items directly/programmatically... as if you had clicked it directly using the GUI?\nI guess sort of like a reverse-engineered \"API\". I'd assume it'd require some sort of live debugging to see where the program reaches or calls for in memory when a GUI item is clicked. Then hopefully after you've seen where that is, you could call it yourself at will, or record the program's messaging/queuing to do it, and then you could replay that at will, able to use or activate abilities of the program without having to touch the GUI.\nAnother simple example:\n\nIn Windows Notepad, the only way to enable \"Word-Wrap\" is by clicking it in the menu bar menus (keyboard navigating the same). But behind the GUI curtain, somewhere in memory there's a function that gets called or flag bit set. \nI'm wondering if it's possible to trigger/call those abilities/functions directly yourself (programmatically), pulling the GUI puppet-strings manually, activating the functions on the other end of the strings without using the GUI.\nSince a GUI is basically just a point-and-click map with strings attached to back-end functions/code in memory, I would think this might be possible, barring program memory protections.\nNote: I'm asking this question 100% from a reverse-engineering perspective, and not for how to do this via macro/scripting/automation. I'm well aware of tools like AutoHotkey, AutoIt, etc., but that's not why I'm asking the question.\n",
    "votes": "0",
    "answers": 2,
    "views": "395",
    "tags": [
        "ida",
        "disassembly",
        "windows",
        "debugging",
        "memory"
    ],
    "user": "Coldblackice",
    "time": "Dec 7, 2019 at 12:21",
    "comments": [
        {
            "user": "0xec",
            "text": "Tools such as AutoIt, AutoHotHey, Pulover's Macro Creator are developed for the exact same purpose. Doesn't need reverse engineering at all.\n",
            "time": null
        },
        {
            "user": "Coldblackice",
            "text": "@0xec I'm not looking for macros, which all of those tools essentially equate to. I'm asking from a reverse-engineering perspective, otherwise I'd ask this on Superuser. I'm asking this only from a reversing conceptual perspective, not merely trying to find a way to do things quicker.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "This is a very broad question. Alone the two examples you gave are worlds apart. While classical Notepad uses windows and controls, Sublime Text has a single window only and drawing happens completely internally. Typically stuff like <pre><code>PostMessage</code></pre>/<pre><code>SendMessage</code></pre> should/would work, but that makes assumptions about how an application creates its windows/controls. What you're asking will likely be possible, but have to be customized for each and every target application. So macros would be the appropriate pick from the tool chest. Use Spy++ to investigate what I explained.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Tools such as WinSpy and WinSpyEx exist as alternatives to Spy++ (which comes with Visual Studio since at least version 6).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "not sure what methodology you are looking for if the said gui is under some debugger \nyou can simply detour a patch  \nor if you are under the wndproc Thread of the gui You can use apis\n(for example for checking the menu wordwrap in notepad use CheckMenuItem(); )  \nor use the oldest trick SendMessage From an external App a demo and src of the third method is below\n\nsrc compiled with 2017 community 32bit on a 32bit win 7 x86 machine using    \n<pre><code>cl /Zi /W4 /analyze /Od /EHsc /nologo MENU.CPP /link /release\n</code></pre>\nsrc\n<pre><code>#include <windows.h>\n#include <stdio.h>\n#pragma comment(lib,\"user32.lib\")\n#define MAXSUBMENUS 100\nint main(void) {\n    printf(\"lets wrappify the notes pad\n\");\n    HWND notewnd = FindWindowA(\"Notepad\", NULL);\n    if (notewnd != NULL) {\n        printf(\"notepad handle is %p\n\", notewnd);\n        HMENU menubar = GetMenu(notewnd);\n        if (menubar != NULL) {\n            printf(\"menubar handle is %p\n\", menubar);\n            int menuitemcount = GetMenuItemCount(menubar);\n            printf(\"menubar contains %d Items\n\", menuitemcount);\n            if (menuitemcount > MAXSUBMENUS) { menuitemcount = MAXSUBMENUS; }\n            HMENU submenus[MAXSUBMENUS] = { 0 };\n            int submenuitemcount[MAXSUBMENUS] = { 0 };\n            for (int i = 0; i < menuitemcount; i++) {\n                submenus[i] = GetSubMenu(menubar, i);\n                if (submenus[i] != NULL) {\n                    submenuitemcount[i] = GetMenuItemCount(submenus[i]);\n                    printf(\"submenu[%d] handle is %p and contains %d Items\n\",\n                        i, submenus[i], submenuitemcount[i]);\n                }\n            }\n            for (int i = 0; i < submenuitemcount[2]; i++) {\n                printf(\"format menu bypos %d ID = %u\n\", i, \n                    GetMenuItemID(submenus[2], i));\n            }\n            printf (\"%x\n\" , SendMessage(notewnd,WM_COMMAND,\n            MAKEWPARAM(GetMenuItemID(submenus[2],0),0),(LPARAM)NULL));\n        }\n    }\n    return 0;\n}\n</code></pre>\nor as extremecoder pointed out use the various available packages\nedit for 0xc0000022's comment\nnot sure whats special about sublime having never used it just installed it and  ran a brute based on the PID of sublime it seems to work  i gathered the Menu ID from spy++ for demo purposes but as seen from  the output one can see the Number of MEnu Item Count  as 10 in case of sublimes main window handle\ncode as follows\n<pre><code>#include <windows.h>\n#include <stdio.h>\nint  GetHwnds(DWORD InPID, HWND *somewind){\n    HWND hCurWnd = NULL;\n    int i =0;\n    do {\n        hCurWnd = FindWindowEx(NULL, hCurWnd, NULL, NULL);\n        DWORD pid = 0;        \n        GetWindowThreadProcessId(hCurWnd, &pid);\n        if (pid == InPID){\n            somewind[i++] = hCurWnd;\n            printf(\"Found hWnd %p\n\", hCurWnd);\n        }\n    }\n    while (hCurWnd != NULL);\n    return i;\n}\nvoid main(int argc,char *argv[]) {\n    if(argc !=2){\n        printf (\"usage %s pid\",argv[0]);\n        exit(0);\n    }\n    HWND subyuck[0x50] = {NULL};    \n    int yucks = GetHwnds(atoi(argv[1]),subyuck);\n    for(int i=0;i<yucks;i++){\n        if(subyuck[i] != NULL){\n            printf(\"menu %p MenuItemCount %d\n\",GetMenu(subyuck[i]),GetMenuItemCount(GetMenu(subyuck[i])));\n            SendMessage(subyuck[i],WM_COMMAND,MAKEWPARAM(436,0),MAKELPARAM(0,0));\n        }\n    }\n}\n</code></pre>\noutput \n<pre><code>C:\\Users\\XXX\\Desktop\\yucketyyuck>cl /Zi /W4 /analyze /Od yucketyyuck.cpp /link /release user32.lib\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.16.27025.1 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nyucketyyuck.cpp\nMicrosoft (R) Incremental Linker Version 14.16.27025.1\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:yucketyyuck.exe\n/debug\n/release\nuser32.lib\nyucketyyuck.obj\n\nC:\\Users\\XXX\\Desktop\\yucketyyuck>tasklist |grep -i sub*\nsublime_text.exe              3272 Console                    1     18,684 K\n\nC:\\Users\\XXX\\Desktop\\yucketyyuck>yucketyyuck.exe 3272\nFound hWnd 002104DE\nFound hWnd 00240586\nFound hWnd 00070322 <<<<<<<<<<<<<< gui thread \nFound hWnd 001D02AA\nmenu 00000000 MenuItemCount -1\nmenu 00000000 MenuItemCount -1\nmenu 001A033D MenuItemCount 10 <<<<<<<<<<<<<< \nmenu 00000000 MenuItemCount -1\n</code></pre>\na gif just in case\n\nnormally ResHack should show the Control ID's of Menu\nbut in case of sublime text reshack does not show the Menus\nI have not checked why but i just retrieved all the ControlIDS (632 of them)    for which you can SendMessage WM_COMMAND->wNotify  \nusing code below\n<pre><code>#include <windows.h>\n#include <stdio.h>\n#define MAXANY 0x100\n\nvoid enumenu(HMENU hMenu) {\n\n    for (int i = 0; i < GetMenuItemCount(hMenu); i++)\n    {\n        char menustring[MAXANY] = { 0 };\n        MENUITEMINFO mii = { 0 };\n        mii.cbSize = sizeof(MENUITEMINFO);\n        mii.fMask = MIIM_STATE | MIIM_TYPE | MIIM_SUBMENU | MIIM_ID;\n        mii.dwTypeData = menustring;\n        mii.cch = MAXANY;\n        GetMenuItemInfoA(hMenu, i, TRUE, &mii);\n        printf(\"%8u   \", mii.wID);\n        if( (mii.fState & MFS_CHECKED) == MFS_CHECKED)\n            printf(\"X   \");\n        else \n            printf(\"    \");\n\n        if (mii.fType == MFT_SEPARATOR)\n        {\n            printf(\"------------------\n\");\n        }\n        if (mii.fType == MFT_STRING)\n        {\n            printf(\"---%s\n\", menustring);\n        }\n        if (mii.hSubMenu != NULL)\n        {\n            enumenu(mii.hSubMenu);\n        }\n    }\n}\n\nint  GetHwnds(DWORD InPID, HWND *somewind) {\n    HWND hCurWnd = NULL;\n    int i = 0;\n    do {\n        hCurWnd = FindWindowEx(NULL, hCurWnd, NULL, NULL);\n        DWORD pid = 0;\n        GetWindowThreadProcessId(hCurWnd, &pid);\n        if (pid == InPID) {\n            if (i > MAXANY) { return i; }\n            somewind[i++] = hCurWnd;\n        }\n    } while (hCurWnd != NULL);\n    return i;\n}\nvoid main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"usage %s pid\", argv[0]);\n        exit(0);\n    }\n    HWND subyuck[MAXANY] = { NULL };\n    int yucks = GetHwnds(atoi(argv[1]), subyuck);\n    for (int i = 0; i < yucks; i++) {\n        if (subyuck[i] != NULL) {\n            HMENU submenu = GetMenu(subyuck[i]);\n            enumenu(submenu);\n\n        }\n    }\n}\n</code></pre>\nand the menu controlIDS (436 in case of WordWrap is checked shown by an X)\n<pre><code>  590370       ---&File\n       0       ---&New File     Ctrl+N\n       1       ---&Open Fileà   Ctrl+O\n       2       ---Open Folderà\n 1049112       ---Open &Recent\n       3       ---Reopen Closed File    Ctrl+Shift+T\n       4       ------------------\n       5       ---Restored from abyss  (all invisible menu items with this name are dittoed with \"\"\n       6       \"\"\n       7       \"\"\n       8       \"\"\n       9       \"\"\n      10       \"\"\n      11       \"\"\n      12       \"\"\n      13       \"\"\n      14       \"\"\n      15       \"\"\n      16       \"\"\n      17       \"\"\n      18       \"\"\n      19       \"\"\n      20       \"\"\n      21       \"\"\n      22       \"\"\n      23       ---Clear Items\n  262656       ---Reopen with Encoding\n            removed allen coding IDS\n      97       ---Save &Asà     Ctrl+Shift+S\n      98       ---Save A&ll\n      99       ------------------\n     100       ---New &Window   Ctrl+Shift+N\n     101       ---Close Window  Ctrl+Shift+W\n     102       ------------------\n     103       ---&Close File   Ctrl+W\n     104       ---Re&vert File\n     105       ---Close All Files\n     106       ------------------\n     107       ---E&xit\n 1245462       ---&Edit\n     108       ---&Undo Ctrl+Z\n     109       ---&Redo Ctrl+Y\n  590368       ---Undo Selection\n     110       ---Soft Undo     Ctrl+U\n     111       ---Soft Redo     Ctrl+Shift+U\n     112       ------------------\n     113       ---Cu&t  Ctrl+X\n     114       ---&Copy Ctrl+C\n     115       ---&Paste        Ctrl+V\n     116       ---Paste and &Indent     Ctrl+Shift+V\n     117       ---Paste from History    Ctrl+K, Ctrl+V\n     118       ------------------\n  262624       ---&Line\n     119       ---Indent        Ctrl+]\n     120       ---Unindent      Ctrl+[\n     121       ---Reindent\n     122       ---Swap Line Up  Ctrl+Shift+Up\n     123       ---Swap Line Down        Ctrl+Shift+Down\n     124       ---Duplicate Line        Ctrl+Shift+D\n     125       ---Delete Line   Ctrl+Shift+K\n     126       ---Join Lines    Ctrl+J\n  590472       ---Co&mment\n     127       ---Toggle Comment        Ctrl+/\n     128       ---Toggle Block Comment  Ctrl+Shift+/\n  197082       ---&Text\n     129       ---Revert Modification   Ctrl+K, Ctrl+Z\n     130       \"\"\n     131       ------------------\n     132       ---Insert Line Before    Ctrl+Shift+Enter\n     133       ---Insert Line After     Ctrl+Enter\n     134       ------------------\n     135       ---Delete Word Forward   Ctrl+Delete\n     136       ---Delete Word Backward  Ctrl+Backspace\n     137       ---Delete Line   Ctrl+Shift+K\n     138       ---Delete to End Ctrl+K, Ctrl+K\n     139       ---Delete to Beginning   Ctrl+K, Ctrl+Backspace\n     140       ------------------\n     141       ---Transpose     Ctrl+T\n  262582       ---Tag\n     142       ---Close Tag     Alt+.\n     143       ---Expand Selection to Tag       Ctrl+Shift+A\n     144       ---Wrap Selection With Tag       Alt+Shift+W\n  262672       ---Mark\n     145       ---Set Mark      Ctrl+K, Ctrl+Space\n     146       ---Select to Mark        Ctrl+K, Ctrl+A\n     147       ---Delete to Mark        Ctrl+K, Ctrl+W\n     148       ---Swap with Mark        Ctrl+K, Ctrl+X\n     149       ---Clear Mark    Ctrl+K, Ctrl+G\n     150       ------------------\n     151       ---Yank  Ctrl+K, Ctrl+Y\n  262674       ---Code Folding\n     152       ---Fold  Ctrl+Shift+[\n     153       ---Unfold        Ctrl+Shift+]\n     154       ---Unfold All    Ctrl+K, Ctrl+J\n     155       ------------------\n     156       ---Fold All      Ctrl+K, Ctrl+1\n       yyyyyyyyyyyyyyyyyyyyyyy\n     165       ------------------\n     166       ---Fold Tag Attributes   Ctrl+K, Ctrl+T\n  131614       ---Convert C&ase\n     167       ---Title Case\n     168       ---Upper Case    Ctrl+K, Ctrl+U\n     169       ---Lower Case    Ctrl+K, Ctrl+L\n     170       ---Swap Case\n  197238       ---Wrap\n     171       ---Wrap Paragraph at Ruler       Alt+Q\n      zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n     178       ---Show Completions      Ctrl+Space\n     179       ------------------\n     180       ---&Sort Lines   F9\n     181       ---Sort Lines (Case Sensitive)   Ctrl+F9\n  328312       ---Permute Lines\n     182       ---Reverse\n     183       ---Unique\n     184       ---Shuffle\n  131644       ---Permute Selections\n     185       ---Sort\n     186       ---Sort (Case Sensitive)\n     187       ---Reverse\n     188       ---Unique\n     189       ---Shuffle\n     190       \"\"\n  131646       ---&Selection\n     191       ---Split into Lines      Ctrl+Shift+L\n     192       ---Add Previous Line     Ctrl+Alt+Up\n     193       ---Add Next Line Ctrl+Alt+Down\n     194       ---Single Selection      Escape\n     195       ---Invert Selection\n     196       ------------------\n     197       ---Select All    Ctrl+A\n     198       ---Expand Selection to Line      Ctrl+L\n         tttttttttttttttttttttttttt\n  131648       ---F&ind\n     205       ---Findà Ctrl+F\n     206       ---Find Next     F3\n     207       ---Find Previous Shift+F3\n     208       ---Incremental Find      Ctrl+I\n     209       ------------------\n     210       ---Replaceà      Ctrl+H\n     211       ---Replace Next  Ctrl+Shift+H\n     212       ------------------\n     213       ---Quick Find    Ctrl+F3\n     214       ---Quick Find All        Alt+F3\n     215       ---Quick Add Next        Ctrl+D\n     216       ---Quick Skip Next       Ctrl+K, Ctrl+D\n     217       ------------------\n     218       ---Use Selection for Find        Ctrl+E\n     219       ---Use Selection for Replace     Ctrl+Shift+E\n     220       ------------------\n     221       ---Find in Filesà        Ctrl+Shift+F\n  131692       ---Find &Results\n     222       ---Show Results Panel\n     223       ---\n     224       ---Previous Result\n  131716       ---&View\n  131690       ---Side Bar\n     225       ---Hide Side Bar Ctrl+K, Ctrl+B\n     226       ------------------\n     227       ---Show Open Files\n     228       ---Hide Minimap\n     229       ---Hide Tabs\n     230       ---Hide Status Bar\n     231       ---Hide Menu\n     232       ---Show Console  Ctrl+`\n     233       ------------------\n     234       ---Enter Full Screen     F11\n     235       ---Enter Distraction Free Mode   Shift+F11\n     236       ------------------\n  131688       ---&Layout\n     237       ---Single        Alt+Shift+1\n     238       ---Columns: 2    Alt+Shift+2\n     239       ---Columns: 3    Alt+Shift+3\n     240       ---Columns: 4    Alt+Shift+4\n     241       ---Rows: 2       Alt+Shift+8\n     242       ---Rows: 3       Alt+Shift+9\n     243       ---Grid: 4       Alt+Shift+5\n  131686       ---Groups\n     244       ---Move File to New Group        Ctrl+K, Ctrl+Up\n     245       ---New Group     Ctrl+K, Ctrl+Shift+Up\n     246       ---Close Group   Ctrl+K, Ctrl+Down\n     247       ------------------\n     248       ---Max Columns: 1\n     249       ---Max Columns: 2\n     250       ---Max Columns: 3\n     251       ---Max Columns: 4\n     252       ---Max Columns: 5\n  131684       ---&Focus Group\n     253       ---Next  Ctrl+K, Ctrl+Right\n     254       ---Previous      Ctrl+K, Ctrl+Left\n     255       ------------------\n     256       ---Group 1       Ctrl+1\n     257       \"\"\n     258       \"\"\n     259       \"\"\n  197250       ---&Move File to Group\n     260       ---Next  Ctrl+K, Ctrl+Shift+Right\n     261       ---Previous      Ctrl+K, Ctrl+Shift+Left\n     262       ------------------\n     263       ---Group 1       Ctrl+Shift+1\n     264       \"\"\n     265       \"\"\n     266       \"\"\n     267       ------------------\n  131682       ---&Syntax\n  131680       ---Open all with current extension as...\n      uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\n   66212       ---&Indentation\n     417       ---Indent Using Spaces\n     418       ------------------\n     419       ---Tab Width: 1\n     420       ---Tab Width: 2\n     421       ---Tab Width: 3\n     422   X   ---Tab Width: 4\n     423       ---Tab Width: 5\n     424       ---Tab Width: 6\n     425       ---Tab Width: 7\n     426       ---Tab Width: 8\n     427       ------------------\n     428       ---Guess Settings From Buffer\n     429       ------------------\n     430       ---Convert Indentation to Spaces\n     431       ---Convert Indentation to Tabs\n   66214       ---Li&ne Endings\n     432   X   ---Windows\n     433       ---Unix\n     434       ---Mac OS 9\n     435       ------------------\n     436   X   ---&Word Wrap       <<<<<<<<<<<<<<<<<<<<<<<<<\n   66216       ---Word Wrap Column\n     437   X   ---Automatic\n     438       ------------------\n     439       ---70\n     440       ---72\n     441       ---78\n     442       ---80\n     443       ---100\n     444       ---120\n   66219       ---Ruler\n     445   X   ---None\n     446       ------------------\n     447       ---70\n     448       ---72\n     449       ---78\n     450       ---80\n     451       ---100\n     452       ---120\n     453       ------------------\n     454       ---Spell Check   F6\n     455       ---Next Misspelling      Ctrl+F6\n     456       ---Prev Misspelling      Ctrl+Shift+F6\n   66221       ---Dictionary\n     457       ---en_GB\n     458   X   ---en_US\n   66223       ---&Goto\n     459       ---Goto &Anythingà       Ctrl+P\n     460       ------------------\n     461       ---Goto Symbolà  Ctrl+R\n     462       ---Goto Symbol in Projectà       Ctrl+Shift+R\n     463       ---Goto Definitionà      F12\n     464       ---Goto Referenceà       Shift+F12\n     465       ---Goto Lineà    Ctrl+G\n     466       ------------------\n     467       ---Next Modification     Ctrl+.\n     468       ---Previous Modification Ctrl+,\n     469       ------------------\n     470       ---Jump Back     Alt+-\n     471       ---Jump Forward  Alt+Shift+-\n     472       ------------------\n   66225       ---Swi&tch File\n     473       ---Next File     Ctrl+Pagedown\n     474       ---Previous File Ctrl+Pageup\n     475       ------------------\n     476       ---Next File in Stack    Ctrl+Tab\n     477       ---Previous File in Stack        Ctrl+Shift+Tab\n     478       ------------------\n     479       ---Switch &Header/Implementation Alt+O\n     480       ------------------\n     481       ---yuckeyt yuck ddddddddddddddddddddddddddddddddddddd    Alt+1\n     482       \"\"\n     483       \"\"\n     484       \"\"\n     485       \"\"\n     486       \"\"\n     487       \"\"\n     488       \"\"\n     489       \"\"\n     490       \"\"\n     491       ------------------\n   66227       ---&Scroll\n     492       ---Scroll to Selection   Ctrl+K, Ctrl+C\n     493       ---Line Up       Ctrl+Up\n     494       ---Line Down     Ctrl+Down\n   66229       ---&Bookmarks\n     495       ---Toggle Bookmark       Ctrl+F2\n     496       ---Next Bookmark F2\n     497       ---Prev Bookmark Shift+F2\n     498       ---Clear Bookmarks       Ctrl+Shift+F2\n     499       ---Select All Bookmarks  Alt+F2\n     500       ------------------\n     501       ---(No Bookmarks)\n     502       \"\"\n     503       \"\"\n     504       \"\"\n     505       \"\"\n     506       \"\"\n     507       \"\"\n     508       \"\"\n     509       \"\"\n     510       \"\"\n     511       \"\"\n     512       \"\"\n     513       \"\"\n     514       \"\"\n     515       \"\"\n     516       \"\"\n     517       ------------------\n     518       ---Jump to Matching Bracket      Ctrl+M\n   66231       ---&Tools\n     519       ---Command Paletteà      Ctrl+Shift+P\n     520       ---Snippetsà\n     521       ------------------\n   66233       ---B&uild System\n     522   X   ---Automatic\n     523       ------------------\n     524       \"\"\n     525       \"\"\n     526       \"\"\n     527       \"\"\n     528       \"\"\n     529       \"\"\n     530       \"\"\n     531       \"\"\n     532       \"\"\n     533       \"\"\n     534       \"\"\n     535       \"\"\n     536       \"\"\n     537       ---ActionScript\n     538       ---Ant\n     539       ---C Single File\n     540       ---C++ Single File\n     541       ---Cargo\n     542       ---D\n     543       ---D dub\n     544       ---Erlang\n     545       ---Haskell\n     546       ---JavaC\n     547       ---Lua\n     548       ---Make\n     549       ---Python\n     550       ---R\n     551       ---Ruby\n     552       ---Rust\n     553       ---ShellScript\n     554       ---Syntax Tests\n     555       ------------------\n     556       ---New Build Systemà\n     557       ---&Build        Ctrl+B\n     558       ---Build Withà   Ctrl+Shift+B\n     559       ---&Cancel Build Ctrl+Break\n   66235       ---Build &Results\n     560       ---&Show Build Results\n     561       ---&Next Result  F4\n     562       ---&Previous Result      Shift+F4\n     563       ---Save &All on Build\n     564       ------------------\n     565       ---Record &Macro Ctrl+Q\n     566       ---&Playback Macro       Ctrl+Shift+Q\n     567       ---Sa&ve Macroà\n   66237       ---Macros\n     568       ---Add Line Before\n     569       ---Add Line in Braces\n     570       ---Add Line\n     571       ---Delete Left Right\n     572       ---Delete Line\n     573       ---Delete to BOL\n     574       ---Delete to EOL\n     575       ---Delete to Hard BOL\n     576       ---Delete to Hard EOL\n     577       ------------------\n   66239       ---Developer\n     578       ---New Pluginà\n     579       ---New Snippetà\n     580       ---New Syntaxà\n     581       \"\"\n     582       ------------------\n     583       ---Profile Plugins\n     584       ------------------\n     585       ---Show Scope Name       Ctrl+Alt+Shift+P\n     586       ---Install Package Controlà\n     587       \"\"\n   66241       ---&Project\n     588       ---Open Projectà\n     589       ---Switch Projectà\n     590       ---Quick &Switch Projectà\n   66243       ---Open Recent\n     591       \"\"\n     592       \"\"\n     593       \"\"\n     594       \"\"\n     595       \"\"\n     596       \"\"\n     597       \"\"\n     598       \"\"\n     599       \"\"\n     600       ---Clear Items\n     601       ------------------\n     602       ---Save Project &Asà\n     603       ---&Close Project\n     604       ---Edit Project\n     605       ------------------\n     606       ---New Workspace for Project\n     607       ---Save Workspace &Asà\n     608       ------------------\n     609       ---A&dd Folder to Projectà\n     610       ---Re&move all Folders from Project\n     611       ---R&efresh Folders\n   66245       ---Prefere&nces\n     612       ---&Browse Packagesà\n     613       ------------------\n     614       ---Settings\n     615       ---Settings û Syntax Specific\n     616       ---Settings û Distraction Free\n     617       ------------------\n     618       ---Key Bindings\n     619       ------------------\n     620       ---Color Schemeà\n     621       ---Themeà\n   66247       ---Font\n     622       ---Larger        Ctrl+=\n     623       ---Smaller       Ctrl+Shift+Keypad Plus\n     624       ------------------\n     625       ---Reset\n   66249       ---&Help\n     626       ---Documentation\n     627       ---Twitter\n     628       ------------------\n     629       ---Indexing Statusà\n     630       ------------------\n     631       ---Purchase License\n     632       \"\"\n     633       ---Enter License\n     634       \"\"\n     635       ------------------\n     636       ---Check for Updatesà\n     637       ---Changelogà\n     638       ---&About Sublime Text\n</code></pre>\n",
            "votes": "2",
            "user": "blabb",
            "time": "Dec 13, 2019 at 21:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Yuck, this isn't considerably different from the macro approach that was recommended in a comment (and turned down by the inquirer). Tools like AutoIt/AutoHotKey have these capabilities built in. Alas with tools like Sublime Text you'll be lucky to get a main menu handle based on the main window. Many cross-platform frameworks will forego the Windows \"user\" handle approach (with actual windows and control) in favor of a single window (in terms of Win32 API) and only have a single window on which custom drawing happens. So it works with Notepad. Did you try Sublime Text?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">@0xC0000022L  iam not sure what there is to yuck about  i added a brute force approach on the said  sublime</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Yes, that's certainly doable.\nYou would have to analyze what code exactly is executed when a certain GUI action is performed. That would likely require knowledge of the used GUI API. Faking a button press in Qt is completely different from faking a button press in standard WinAPI dialogs.\nThat would be the higher layer to solve it, understand what that GUI action does (send a <pre><code>WM_COMMAND</code></pre> message in WinAPI for example, or emitting a signal in Qt) and just do that.\nIf this is too closely to macroing/faking key presses for you, you'd have to see how the code does something.\nSome made-up WinAPI pseudo code could be:\n<pre><code>if(msg == WM_COMMAND and button_id == BTN_ENABLE_STATUSBAR)\n    show_statusbar();\n</code></pre>\nso if you don't want to send a fake <pre><code>WM_COMMAND</code></pre>, you could inject code that calls show_statusbar() directly. But the target doesn't have to neatly wrap its code like that. It could just set some global vars and the redraw function would then read those vars later, see the status bar flag was set to visible and thus render the status bar.\nIt all comes down to how cleanly the application separates GUI handling logic from application logic. Worst case the GUI handling code contains all of the application logic code. Then it would be difficult to just execute that code block.\nAnd best case as the made-up example where the GUI logic just calls another application logic function so you can easily do that on your own.\n",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Dec 9, 2019 at 19:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}