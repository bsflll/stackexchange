{
    "title": "How to see what compiler made PIC ASM code?",
    "link": "https://reverseengineering.stackexchange.com/questions/234/how-to-see-what-compiler-made-pic-asm-code",
    "content": "I extracted a .hex file from a PIC16F88. For example:\n<pre><code>:020000040000FA\n:100000008F3083160F0570388F009B0183129F017C\n:1000100083169F0107309C0005108312051483127C\n:1000200003131730A0006730A1002930A2000A1284\n:100030008A11A20B17280A128A11A10B15280A127D\n:100040008A11A00B13280510831203131730A00088\n:100050006730A1002930A2000A128A11A20B2C28B5\n:100060000A128A11A10B2A280A128A11A00B282829\n:020070000D2859\n:02400E00782F09\n:02401000FF3F70\n:00000001FF\n</code></pre>\nIn MPLAB, I imported this .hex file and found the disassembly code, in this case:\n<pre><code> 1   000     308F  MOVLW 0x8f                             \n 2   001     1683  BSF 0x3, 0x5                           \n 3   002     050F  ANDWF 0xf, W                           \n 4   003     3870  IORLW 0x70                             \n 5   004     008F  MOVWF 0xf                              \n 6   005     019B  CLRF 0x1b                              \n 7   006     1283  BCF 0x3, 0x5                           \n 8   007     019F  CLRF 0x1f                              \n 9   008     1683  BSF 0x3, 0x5                           \n10   009     019F  CLRF 0x1f                              \n11   00A     3007  MOVLW 0x7                              \n12   00B     009C  MOVWF 0x1c                             \n13   00C     1005  BCF 0x5, 0                             \n14   00D     1283  BCF 0x3, 0x5                           \n15   00E     1405  BSF 0x5, 0                             \n16   00F     1283  BCF 0x3, 0x5                           \n17   010     1303  BCF 0x3, 0x6                           \n18   011     3017  MOVLW 0x17                             \n19   012     00A0  MOVWF 0x20                             \n20   013     3067  MOVLW 0x67                             \n21   014     00A1  MOVWF 0x21                             \n22   015     3029  MOVLW 0x29                             \n23   016     00A2  MOVWF 0x22                             \n24   017     120A  BCF 0xa, 0x4                           \n25   018     118A  BCF 0xa, 0x3                           \n26   019     0BA2  DECFSZ 0x22, F                         \n27   01A     2817  GOTO 0x17                              \n28   01B     120A  BCF 0xa, 0x4                           \n29   01C     118A  BCF 0xa, 0x3                           \n30   01D     0BA1  DECFSZ 0x21, F                         \n31   01E     2815  GOTO 0x15                              \n32   01F     120A  BCF 0xa, 0x4                           \n33   020     118A  BCF 0xa, 0x3                           \n34   021     0BA0  DECFSZ 0x20, F                         \n35   022     2813  GOTO 0x13                              \n36   023     1005  BCF 0x5, 0                             \n37   024     1283  BCF 0x3, 0x5                           \n38   025     1303  BCF 0x3, 0x6                           \n39   026     3017  MOVLW 0x17                             \n40   027     00A0  MOVWF 0x20                             \n41   028     3067  MOVLW 0x67                             \n42   029     00A1  MOVWF 0x21                             \n43   02A     3029  MOVLW 0x29                             \n44   02B     00A2  MOVWF 0x22                             \n45   02C     120A  BCF 0xa, 0x4                           \n46   02D     118A  BCF 0xa, 0x3                           \n47   02E     0BA2  DECFSZ 0x22, F                         \n48   02F     282C  GOTO 0x2c                              \n49   030     120A  BCF 0xa, 0x4                           \n50   031     118A  BCF 0xa, 0x3                           \n51   032     0BA1  DECFSZ 0x21, F                         \n52   033     282A  GOTO 0x2a                              \n53   034     120A  BCF 0xa, 0x4                           \n54   035     118A  BCF 0xa, 0x3                           \n55   036     0BA0  DECFSZ 0x20, F                         \n56   037     2828  GOTO 0x28                              \n57   038     280D  GOTO 0xd   \n</code></pre>\nNow I want to know with what compiler this code is compiled. How can I do that? I'm looking for general ways to check what compiler made some ASM code. The code listed is just an example.\n",
    "votes": "11",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "compilers",
        "pic",
        "hex"
    ],
    "user": null,
    "time": "Mar 29, 2013 at 6:42",
    "comments": [
        {
            "user": "zetavolt",
            "text": "Excellent question, recovering the toolchain provenance of the binary code you've specified, at the very least, requires comparing the results of various PIC compilers, I don't know PIC assembly but the last two instructions look interesting for identifying the compiler (Provided your disassembler has misinterpreted the information at 0x38, how can the instruction possibly be called?). Some compilers generate prologues to functions intended for quick-n-dirty later patching that can be a giveaway as well. Best of luck!\n",
            "time": null
        },
        {
            "user": "cb88",
            "text": "You might also consider that this might not be compiled code at all.. but was written as asm.\n",
            "time": null
        },
        {
            "user": "amccormack",
            "text": "@zv_ I think your comment should be an answer.  I don't think the question should focus on a specific sample and your technique should be generic enough to accept.\n",
            "time": null
        },
        {
            "user": "amccormack",
            "text": "I think this question should be rephrased and should focus on general PIC compiler detection and not just your sample. It is OK to use your code as a \"for instance\" but you should rephrase so that you can accept answers that describe the technique and not just the answer of \"general-pic-compiler-1\"\n",
            "time": null
        },
        {
            "user": "user187",
            "text": "@amccormack I agree that zv_'s comment can be an answer. I also edited the question.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "(Answer converted from comment)\nRecovering the toolchain provenance of the binary code you've specified, at the very least, requires comparing the results of various PIC compilers, I don't know PIC assembly but the last two instructions look interesting for identifying the compiler (Provided your disassembler has misinterpreted the information at <pre><code>0x38</code></pre>, how can the instruction possibly be called?). \nSome compilers generate prologues to functions intended for quick-n-dirty later patching that can be a giveaway as well. Best of luck!\n",
            "votes": "3",
            "user": "zetavolt",
            "time": "Mar 29, 2013 at 16:08",
            "is_accepted": true,
            "comments": []
        }
    ]
}