{
    "title": "Disassembly - Why the CMP instruction is multiplying by 2 the value being compared",
    "link": "https://reverseengineering.stackexchange.com/questions/19429/disassembly-why-the-cmp-instruction-is-multiplying-by-2-the-value-being-compar",
    "content": "I'll get right to the point, I have a crack me program, that is a program with a password inside that needs to be found so that you can complete the challenge.  \nI easily found the cmp instruction with the password, but the numeric password was multiplied by 2. \nin the program does not have anything to multiply or divide the password, then this must be caused by something else\nso I had to get the hexadecimal value of the password convert to decimal and divide by 2 to have the real password.\nhere is the cmp instruction:\n<pre><code>CMP DWORD PTR SS:[EBP-C],961DB0\n</code></pre>\n\n0x961DB0 / 2 is the password.\n  EBP-C has the password.\n\nI would like to know why the password has been multiplied by 2 in this cmp instruction.\n\nA photo of the Source Code, I do not have it without being in the photo.\n\nThank you very much in advance.\n",
    "votes": "3",
    "answers": 1,
    "views": "436",
    "tags": [
        "disassembly",
        "ollydbg",
        "debuggers",
        "disassemblers",
        "crackme"
    ],
    "user": "AqueleCaraComNome",
    "time": "Sep 23, 2018 at 0:01",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "Can you replace those photos with the real code? It will make question better and reproducible for others.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The <pre><code>cmp</code></pre> instruction does not multiply anything by two. Instead, the piece of code seen in your ollydbg screen shot is the implementation of the following line from the poor quality source code image you attached:\n<pre><code>if ((!key) || (key > (0x1337 * 2000)))\n</code></pre>\nFirst, in address <pre><code>0x01051C09</code></pre>, <pre><code>key</code></pre> is compared to <pre><code>0</code></pre>. If <pre><code>key</code></pre> equals <pre><code>0</code></pre> a jump to <pre><code>0x01051C18</code></pre> is taken. Otherwise, <pre><code>key</code></pre> is compared to <pre><code>0x0961DB0</code></pre>. If <pre><code>key</code></pre> is below or equal to <pre><code>0x0961DB0</code></pre> another jump is taken. If <pre><code>key</code></pre> is greater than <pre><code>0x0961DB0</code></pre> execution continues to <pre><code>0x01051C18</code></pre>.\nAs you should've guessed by now, <pre><code>0x0961DB0</code></pre> is simply <pre><code>0x1337</code></pre> times 2000.\nInstructions <pre><code>0x01051C18</code></pre> to <pre><code>0x01051C22</code></pre> are the implementation of calling <pre><code>wrong</code></pre>, setting <pre><code>eax</code></pre> to the correct return value (<pre><code>1</code></pre>) and then jumping to where (I assume) the function prolog and <pre><code>ret</code></pre> are executed.\n",
            "votes": "4",
            "user": "NirIzr",
            "time": "Oct 1, 2018 at 17:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "AqueleCaraComNome",
                    "text": "<span class=\"comment-copy\">Thanks, but suppose we did not have the source code, how could we identify that 0x0961DB0 is 0x1337 * 2000?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">We would not necessarily recognise that. Instead, we may write condition as <code>key &gt; 0x0961DB0</code>. It's essentially the same.</span>",
                    "time": null
                },
                {
                    "user": "AqueleCaraComNome",
                    "text": "<span class=\"comment-copy\">Now I understand, thank you for clarifying the problem.</span>",
                    "time": null
                }
            ]
        }
    ]
}