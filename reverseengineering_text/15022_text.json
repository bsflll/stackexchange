{
    "title": "c++ version of MOV AL,BYTE PTR DS:[ESI]",
    "link": "https://reverseengineering.stackexchange.com/questions/15022/c-version-of-mov-al-byte-ptr-dsesi",
    "content": "I'm writing a keygen for a crack-me exercise.\nI have a problem with handling byte assignments the crack-me performs several times using instructions like <pre><code>MOV AL,BYTE PTR DS:[ESI]</code></pre> (move byte from location to AL) to change <pre><code>EAX</code></pre> for example from <pre><code>000096BA</code></pre> to <pre><code>00009662</code></pre>.\nThe crack-me overflows <pre><code>EAX</code></pre> value several times so to calculate the key I use an <pre><code>unsigned int</code></pre> in my C program.\nThe problem I have is that I do not know how I can replace a single byte value in <pre><code>unsigned int</code></pre> example from <pre><code>0x38586d</code></pre> to <pre><code>0x38498d</code></pre>, changing the second byte only.\n",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "c++",
        "c",
        "crackme"
    ],
    "user": "Marek",
    "time": "Mar 27, 2017 at 16:11",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>int eax;\nchar * esi;\n*((char *) &eax) = *esi;\n</code></pre>\n",
            "votes": "1",
            "user": "Sergey Slepov",
            "time": "Mar 26, 2017 at 20:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">It is better to provide a thorough explanation alongside the final answer</span>",
                    "time": null
                },
                {
                    "user": "Sergey Slepov",
                    "text": "<span class=\"comment-copy\">&amp;eax takes the address of eax and has the type <code>int *</code>  (char *) &amp;eax casts the int * to a char *. *((char *) &amp;eax) references the char (byte) pointed to by the char *. = assigns the char / byte pointed to by esi to the first byte of eax. HTH.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "First, most decent compilers will let you introduce assembly directly in your C code. This is not recommended but the option should be noted.\nNow, here's a sane solution; C was several bitwise operators to manipulate sets of bits inside an integer. \nThe bitwise operators we'll use here are:\n\nbinary AND operator (<pre><code>&</code></pre>):\nA bit in the result variable is only set if it was set in both input variables. For example, <pre><code>0b0011 & 0b1010</code></pre> will result in <pre><code>0b0010</code></pre>.\nbinary OR operator (<pre><code>|</code></pre>)\nA bit in the result variable will be set if it was set in at least one of the input variables. For example, <pre><code>0b0011 | 0b1010</code></pre> will result in <pre><code>0b1011</code></pre>.\nbinary NOT operator (<pre><code>~</code></pre>)\nA bit in the result variable will only be set if it was not set in the input variable. For example, <pre><code>~0b0001</code></pre> will result in <pre><code>0b1110</code></pre>.\narithmetic shift operator (<pre><code><<</code></pre>)\nA bit in the result variable will only be set if the bit  <pre><code>n</code></pre> positions to the right in the first variable was set, where <pre><code>n</code></pre> is the second variable. If that position does not exist, the bit is not set. For example, <pre><code>0b0000 0b0101 << 2</code></pre> will result in <pre><code>0b0001 0b0100</code></pre>.\n\nAnd here's how we could use them to set the lowest byte in dword <pre><code>a</code></pre> to that of char <pre><code>c</code></pre>, assuming a 32bit processor for simplicity's sake:\n<pre><code>unsigned int a = 0xa5a5a505;\nunsigned char c = 0xa0;\n</code></pre>\nFirst, we'll want to zero-out the lowest byte. We'll do that by ANDing the dword with a dword that has all of it's bits set except the 8 lowest bits (aka it's lowest byte).\n<pre><code>a = a & 0xffffff00\n</code></pre>\nAlternatively, we can use the NOT binary operator to create <pre><code>0xffffff00</code></pre> in a slightly cleaner manner, as follows:\n<pre><code>a = a & ~0xff\n</code></pre>\nAfter either of those lines, which perform exactly the same thing (and will look identical in assembly), <pre><code>a</code></pre>'s value would be <pre><code>0xa5a5a500</code></pre>.\nNow, we'll need to assign the value of <pre><code>c</code></pre> to that same byte. We'll use the OR bitwise operator in the following manner:\n<pre><code>a = a | c;\n</code></pre>\nWhich will result in <pre><code>a</code></pre> having the value of <pre><code>0xa5a5a5a0</code></pre>.\nNow, if we would like to do the same for the 2nd byte in the integer we'll shift the values by 8 bits before executing the same operators, like this:\n<pre><code>a = a & ~(0xff << 8)\n</code></pre>\nIs equivalent to:\n<pre><code>a = a & ~(0xff00)\n</code></pre>\nWhich is identical to:\n<pre><code>a = a & 0xffff00ff\n</code></pre>\nWhich will result with:\n<pre><code>a = 0xa5a50005\n</code></pre>\nAnd now, we'll add <pre><code>c</code></pre> at the 2nd byte's position:\n<pre><code>a = a | (c << 8)\n</code></pre>\nWhich in our example is:\n<pre><code>a = a | 0xa000\n</code></pre>\nWhich will result in <pre><code>0xa5a5a005</code></pre>\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Mar 27, 2017 at 16:08",
            "is_accepted": false,
            "comments": []
        }
    ]
}