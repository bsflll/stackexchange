{
    "title": "Hiding call to ptrace [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/11293/hiding-call-to-ptrace",
    "content": "This question already has answers here:\n                                \n                            \n\n\n\n\nDetecting tracing in Linux\n\n                                (3 answers)\n                            \n\nClosed 9 years ago.\n\n\n\nI am trying to detect whether my executable is running in a debugger. Here is a solution using <pre><code>ptrace</code></pre>.\nMy problem is that even if my executable is stripped (<pre><code>strip a.out</code></pre>) I am able to find with gdb the following code snippet:\n<pre><code>0x00000000004007e9: mov    $0x0,%ecx\n0x00000000004007ee: mov    $0x1,%edx\n0x00000000004007f3: mov    $0x0,%esi\n0x00000000004007f8: mov    $0x0,%edi\n0x00000000004007fd: mov    $0x0,%eax\n0x0000000000400802: callq  0x4006d0 <ptrace@plt>\n0x0000000000400807: cmp    $0xffffffffffffffff,%rax\n</code></pre>\nI simply run <pre><code>(gdb)info files</code></pre>, and disassembled the memory location belonging to <pre><code>.text</code></pre>.\nIs there a way to get rid from <pre><code><ptrace@plt></code></pre>, or is there a better way to detect the debugger beside the methods based on software breakpoints or execution time measuring?\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "gdb",
        "anti-debugging"
    ],
    "user": "robert",
    "time": "9 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "You have 2 simple options:\n\nYou can link your executable statically and then strip (add -static to compiler/linker command line). \nYou can invoke ptrace system call using inline assembly\nIf you will invoke ptrace as system call with inline assembly you can obfuscate calculation of syscall parameters (index of system call is passed via registers, and you can calculate this number instead of using correct number directly for example).\n\nEDIT:\nThe number of other, more complicated options, is endless.\nFor example you can call this ptrace by function pointer, which is calculated dynamically. There are a lot of ways to obfuscate a function pointer value.\nPlease note that using obfuscation of any kind is \"security through obscurity\" and not too much effective without other, more effective measures such as encryption.\nGood luck.\n",
            "votes": "1",
            "user": "w s",
            "time": "Nov 10, 2015 at 14:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}