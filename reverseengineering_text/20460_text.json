{
    "title": "why code at .rodata executes [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/20460/why-code-at-rodata-executes",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nHow come the following code executes if buf* is @ rodata segment ?\n<pre><code>#include <stdio.h>\n\nchar *buf[] = {\n\"\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\\n\\xc3 IS THIS DATA?\"\n};\nchar arr_chr[500] = \"I AM READ_WRITE\";\n\nint main(){\n    ((void (*)()) buf[0])();\n\n    printf(\"%s\n\", buf[0]);\n    printf(\"%s\n\", arr_chr);\n}\n</code></pre>\ncompiled with <pre><code>gcc version 7.3.0</code></pre> without flags @ x86_64-linux-gnu \n<pre><code>file</code></pre>'s output:\ncheck: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, not stripped\n",
    "votes": "1",
    "answers": 1,
    "views": "792",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "James W.",
    "time": "6 years ago",
    "comments": [
        {
            "user": "perror",
            "text": "It segfaults on my system... which is the 'normal' behavior for this code. I suspect your system to be weird. Anyway, this is definitely NOT about reverse-engineering.\n",
            "time": null
        },
        {
            "user": "James W.",
            "text": "Kowalski ? This was tested on a fresh Ubuntu VM\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "Have you tried on a real system, though ? Come on Private, I am sure you can do better than that! :-)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I think you mixed up segments and sections on ELF. Unlike PE where sections define how the application is mapped and page permissions, ELF loaders only use segments <pre><code>PT_LOAD</code></pre> to do that. Segments don't have name, so there's nothing like <pre><code>.rodata</code></pre> segment, only <pre><code>.rodata</code></pre> section. You can verify that be setting 0x0 to the field <pre><code>ElfN_Ehdr::e_shoff</code></pre>, it'll still work.\nNow regarding the initial question, it seems ELF executable used to have only two <pre><code>PT_LOAD</code></pre> segments, one is <pre><code>R-X</code></pre> and <pre><code>RW-</code></pre>. If a data is const, it'll be stored inside the first segment which is also executable. It's not true anymore on my archlinux.\n",
            "votes": "2",
            "user": "wisk",
            "time": "Jan 24, 2019 at 21:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}