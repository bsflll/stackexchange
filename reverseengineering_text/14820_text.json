{
    "title": "Behavior of undocumented Windows features",
    "link": "https://reverseengineering.stackexchange.com/questions/14820/behavior-of-undocumented-windows-features",
    "content": "What are some tricks or methods to reverse-engineer undocumented and half-documented Windows cmd commands such as the <pre><code>findstr</code></pre>, <pre><code>cd</code></pre>, <pre><code>dir</code></pre>, <pre><code>echo</code></pre>, etc to determine their behavior?\n",
    "votes": "0",
    "answers": 2,
    "views": "342",
    "tags": [
        "windows"
    ],
    "user": "Pacerier",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "Just step through them in a debugger :D\n",
            "time": null
        },
        {
            "user": "Pacerier",
            "text": "@VitalyOsipov, Is that the only/best way to do it?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is leaked source code of windows 2000. I donâ€˜t know if it covers those utilities. \nAlso the reactos project (an open source reimplementation of windows) is usually very faithful to the original.\n\nBoth source codes are not exactly what you seek, but might give you an idea what to expect when you reverse engineer the real thing.\n",
            "votes": "3",
            "user": "manduca",
            "time": "Jun 8, 2018 at 3:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">That's a neat idea! reactOS's cmd can be found here: <a href=\"https://github.com/reactos/wine/tree/master/programs/cmd\" rel=\"nofollow noreferrer\">github.com/reactos/wine/tree/master/programs/cmd</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If by \"features\" you mean windows' <pre><code>cmd.exe</code></pre> built-in tools and utility commands, there's no way other than reverse engineering <pre><code>cmd.exe</code></pre> like any other software.\nFinding it's input processing function would be the first step, then followed by finding the parts handling the specific commands you're interested in.\nThe only \"tip\" I can offer is using windows symbols server when available (IDA will automatically ask you if you'd like to use it if symbols are available), though it binds you to an EULA.\n",
            "votes": "2",
            "user": "NirIzr",
            "time": "Jun 8, 2018 at 2:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Pacerier",
                    "text": "<span class=\"comment-copy\">(Yes I mean all the \"commands\", \"tools\", \"apps\", that comes by default with a Windows installation and Windows update.) Regarding your answer, is this method what the best people in the field do or are there other better methods to approach this problem?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Generally, if documentation and other available resources are not sufficient, reverse engineering is usually the most complete solution. As a decent professional reverse engineer, I can't think of a better way to address your vague and general question.</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">and consider than if the feature is truly undocumented, it's behavior is subject to modification at any time.</span>",
                    "time": null
                }
            ]
        }
    ]
}