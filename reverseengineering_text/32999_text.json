{
    "title": "Injecting dll to x86 process above user-virtual-address",
    "link": "https://reverseengineering.stackexchange.com/questions/32999/injecting-dll-to-x86-process-above-user-virtual-address",
    "content": "First, sorry for my bad english.\nI have some program that heavely virtualized and doing dll injection behavior.\nThe target process is x86 process and execute in wow64 system.\nWhen I saw the target process's dump after dll has been injected, the dll is allocated after 0x7fffffff address. (PE Header seems deleted)\n\nSo, I used APIMonitor tool and hook several suspicious API, the program just call VirtualAlloc API and address beyond 0x7fffffff was given by it's parameter.\n\nI heard the address after 0x7fffffff in x86 process is used by kernel. So, I think just using VirtualAlloc API to allocate after 0x7fffffff will not be succeed, even if program execute on wow64 system.\nAnd, I just make program that using VirtualAlloc API with higher address and test it, the allocation failed with ERROR_INVALID_ADDRESS(0x1E7)\nIs there any way that allocate address after 0x7fffffff in x86 process using VirtualAlloc API?\nI hope for your guide. thank you.\n",
    "votes": "1",
    "answers": 0,
    "views": "42",
    "tags": [
        "dll-injection"
    ],
    "user": "schnabel",
    "time": "Jun 3, 2024 at 6:55",
    "comments": [
        {
            "user": "SergeyE",
            "text": "try to set the dll loading address to the process   by learn.microsoft.com/en-us/cpp/build/reference/…   this works in some cases - I've tested it   learn.microsoft.com/en-us/cpp/build/reference/…\n",
            "time": null
        }
    ],
    "answers_data": []
}