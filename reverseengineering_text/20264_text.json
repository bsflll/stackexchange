{
    "title": "IDA Interpreting mov instructions in a unusual way",
    "link": "https://reverseengineering.stackexchange.com/questions/20264/ida-interpreting-mov-instructions-in-a-unusual-way",
    "content": "When analysing mach-o binaries IDA seems to interpret const/literal part of x86 mov instruction(0x8B) as an offset.\nHex rerpresentation: <pre><code>8B 40 0A</code></pre>\nCorrect assembly: <pre><code>mov eax,DWORD PTR [eax+0x0A] ; 8B 40 0A</code></pre>\nIDA assembly:<pre><code>mov  eax, dword ptr ds:(loc_1DF4B8 + 3 - 1DF4B1h)[eax]</code></pre>\n<pre><code>loc_1DF4B8 + 3 - 1DF4B1 = 0x0A</code></pre> so its basicaly the same but the offset part throws of further analysis on the binary.\nIs there any option i'm missing to prevent this from happening or any scriptable way to fix it? \nEDIT: individual instructions can be fixed with s <pre><code>#</code></pre> shortcut\n",
    "votes": "1",
    "answers": 1,
    "views": "646",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "silvermoon",
    "time": "Jan 2, 2019 at 17:25",
    "comments": [],
    "answers_data": [
        {
            "content": "it seems this is due to the heuristic applied by IDA. Could you tell us how <pre><code>eax</code></pre> is initialized?\nRegarding your issue, and if IDA is wrong every times, I think your answer is on the IDA options:\n\nBut I didn't test it.\n",
            "votes": "1",
            "user": "wisk",
            "time": "Jan 2, 2019 at 21:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "silvermoon",
                    "text": "<span class=\"comment-copy\">Yes its definitely  something with heuristics but i don't think those are exposed in options (maybe it has something to with the fact the base address is 0?). Wrote a script to \"fix up\" function: <a href=\"https://hastebin.com/isezikecuh.py\" rel=\"nofollow noreferrer\">hastebin.com/isezikecuh.py</a> Just not so sure that is the proper way to fix this.    EDIT: it doesn't really matter where value comes from, it can be a static variable or a something allocated on the heap.    However in this example eax is argument passed on stack that points to begining of malloc-ed byte array containg network data.</span>",
                    "time": null
                }
            ]
        }
    ]
}