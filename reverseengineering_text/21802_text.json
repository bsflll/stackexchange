{
    "title": "How to use the book \"Reverse Engineering for Beginners\" by Yurichev?",
    "link": "https://reverseengineering.stackexchange.com/questions/21802/how-to-use-the-book-reverse-engineering-for-beginners-by-yurichev",
    "content": "I just finished skimming the book Art of Assembly by Randall Hyde.\nSo now to get my feet wet in assembly/reverse engineering reading, I started the book Reverse Engineering for Beginners. The thing is when I write C samples and produce assembly code as author stated the assembly i get in GCC differs from what the one author provides. (I use <pre><code>gcc -S -O3</code></pre> for the ones that are said to be optimized in book).\nWhat can I do to get results like book or if getting results like author's is not the point how can I get the most out of this lovely book?\n",
    "votes": "3",
    "answers": 2,
    "views": "427",
    "tags": [
        "assembly"
    ],
    "user": "Krsh",
    "time": "Jul 31, 2019 at 21:33",
    "comments": [
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "It is probably because your GCC version is different than his. Can you use the same version of GCC and disassembler and try it again?\n",
            "time": null
        },
        {
            "user": "Krsh",
            "text": "Well..idk what version he used... Right now i found out my problem is mostly those .cfi pre-suffixes.Found out how to disable them.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. It's seriously a little difficult to give advice when you don't show us. How about editing your question to include an example of what the author gives and what you get from compiling with GCC? Also nice would be to know which GCC version you are using (even if there may be no info available on what the author uses). If I were you I'd also check out <pre><code>-fno-stack-protector</code></pre> (or generally check out <pre><code>gcc -dumpspecs</code></pre> output to see what security-related default flags your GCC may be using). Last but not least try <pre><code>-O2</code></pre> ...\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "... <pre><code>-O2</code></pre> on a recent GCC version may be closer to what <pre><code>-O3</code></pre> used to be on older GCC versions. The simple reason being that several optimizations are given time to mature before they graduate up the optimization levels. In terms of library code (<pre><code>glibc</code></pre> aka the C runtime) you may also want to pass <pre><code>-D_FORTIFY_SOURCE=n</code></pre> to the <pre><code>gcc</code></pre> driver. Also check out the individual options behind the optimization levels. This particular document may actually provide a nice way of diffing them across GCC versions, too ...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "What can i do to get results like book?\n\nJust use the same version of the compiler and compile the code for the same architecture as the Author. Usually, there is explicitly stated which compiler version was used to get a particular assembly. For example:\n\nor\n\nSo, there are several different versions of compiler used and if you want to get the same results, you have to use the version described at each listing.\n\nor if getting results like author's is not the point\n\nIt's definitely not the point. The point is that you learn as much as possible when reading this book.\nI would even say it may be better to get different results than these in the book. There are several reasons for it:\n\nYou will learn how the newer versions of the GCC compiler deal with the same C code, so for example what are new optimization methods.\nYou will see different assembly performing the same task as the previous one - when you'll see big differences, you will probably want to think or search for more information about it and this way you'll remember it better.\nIt encourages you to understand the resulting assembly so you can compare it with the one presented by the Author - it's far more creative and productive work than just copying what you have already presented.\n\n\nhow can i get the most out of this lovely book?\n\nI would say, by practice. If you don't practice what you have just learned, you will forget it very quickly. You can even omit some programs written there and just experiment on your own (like the Author suggested) - just write some code and try to find its fragments in disassembly.\n",
            "votes": "4",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You just need a compiler like <pre><code>gcc</code></pre> and <pre><code>debug</code></pre> or static analysis to understanding the code doing\n",
            "votes": "1",
            "user": "Febriyanto Nugroho",
            "time": "Oct 3, 2019 at 5:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}