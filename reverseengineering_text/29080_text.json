{
    "title": "How does Borland C++ 5 exception handling work?",
    "link": "https://reverseengineering.stackexchange.com/questions/29080/how-does-borland-c-5-exception-handling-work",
    "content": "So, I'm still working on reverse-engineering an 1996 game. I have cleared a lot of roadblocks, but one thing that continues to annoy me is exception handling and RTTI metadata.\nThere is a function <pre><code>extern void _ExceptInit(void *);</code></pre> that is declared from <pre><code>BC5/SOURCE/RTL/SOURCE/THREADS/WIN32/THREAD.C</code></pre>, but its implementation is nowhere to be found - all in the entire BC5 source that contains ExceptInit are a bunch of pre-compiled .OBJ files (<pre><code>NOXX.OBJ</code></pre> / <pre><code>XXV.OBJ</code></pre>) that have no corresponding source attached. They are dis-assemblable in Ghidra and contain labels, I grant Borland that, but there are obviously no comments on how exactly that entire mechanism works.\nSame goes for RTTI metadata that lives inside compiled binaries. The \"Borland Open Architecture Handbook\" aka <pre><code>bc4boa.zip</code></pre> doesn't contain information about either, too (probably because it's too old?), and the Borland books also don't go into detail on implementation.\nAny idea where I could go on to search?\n",
    "votes": "2",
    "answers": 1,
    "views": "232",
    "tags": [
        "c++",
        "exception"
    ],
    "user": "Skynet",
    "time": "Aug 1, 2021 at 18:21",
    "comments": [
        {
            "user": "Rolf Rolles",
            "text": "You've got the <pre><code>.OBJ</code></pre> files? Dig in! What are you waiting for?\n",
            "time": null
        },
        {
            "user": "Skynet",
            "text": "The ASM files for the startup code contained a boatload of comments on how exactly the stuff works and what it does, I had hoped for a similar load of information on exceptions and RTTI since that ain't documented anywhere\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Try to find Borland C++ Builder runtime sources, IIRC it included EH and RTTI details, albeit updated for Win32. Long time ago I made scripts for parsing and labeling those structures (see <pre><code>bcc.idc</code></pre>); they probably wonâ€™t work as is for DOS code but could be useful for reference.\nEDIT: see <pre><code>struct tpid</code></pre> (RTTI) and <pre><code>struct ERRbc</code></pre> (EH) in XX.H\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jan 7, 2022 at 19:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}