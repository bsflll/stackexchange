{
    "title": "Gaps between sections",
    "link": "https://reverseengineering.stackexchange.com/questions/16461/gaps-between-sections",
    "content": "After analyzing some binaries, I noticed that the sections, .text, .data, .bss, etc, are not really adjacent. It seems to be a gap between them, why is that?\n",
    "votes": "0",
    "answers": 1,
    "views": "134",
    "tags": [
        "binary-analysis",
        "executable"
    ],
    "user": "Trey",
    "time": "Oct 1, 2017 at 17:53",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "how big of a gap? show some examples maybe.\n",
            "time": null
        },
        {
            "user": "Trey",
            "text": "Well, on PEview I can see that size(SizeOfRawData) of the .text section is 0x2C00 and its RVA is 0x10000, So I assume that this section will be between 0x10000 and 0x12C00, which means that the next one(.data) should start at 0x12C01, but that's not the case.\n",
            "time": null
        },
        {
            "user": "Brendan Dolan-Gavitt",
            "text": "In memory, I believe the minimum alignment is 4096 bytes (the arch page size on x86) so that sections can have different memory permissions. So I would expect the next section to start at 0x13000.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Sections are aligned so the next section doesn't automatically start at the end of the current section. Sections on disk and memory have different alignments. Sections on disk are usually aligned by 512 bytes which is the traditional size of a disk sector (stored in <pre><code>IMAGE_OPTIONAL_HEADER.FileAlignment</code></pre>). In memory, they are usually page aligned (stored in <pre><code>IMAGE_OPTIONAL_HEADER.SectionAlignment</code></pre>). It allows the loader to apply different memory protection permissions on different sections since permissions are applied on page by page basis. Example: <pre><code>.text</code></pre> can have <pre><code>PAGE_EXECUTE_READ</code></pre> while <pre><code>.data</code></pre> might have <pre><code>PAGE_READONLY</code></pre> permission only, if <pre><code>.data</code></pre> isn't aligned, it's content that fits in the last <pre><code>.text</code></pre>'s page will have <pre><code>PAGE_EXECUTE_READ</code></pre> permission instead of <pre><code>PAGE_READONLY</code></pre>.\n",
            "votes": "5",
            "user": "shebaw",
            "time": "Oct 2, 2017 at 13:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">there is also a performance gain to seek to an aligned offset and read without spanning pages.</span>",
                    "time": null
                }
            ]
        }
    ]
}