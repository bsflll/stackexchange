{
    "title": "What kind of knowledge do I need for Reverse Engineering? [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/9301/what-kind-of-knowledge-do-i-need-for-reverse-engineering",
    "content": "This question already has an answer here:\n                                \n                            \n\n\n\n\nWindows Wiki : Books and Tutorials [closed]\n\n                                (1 answer)\n                            \n\nClosed 9 years ago.\n\n\n\nI have some questions about reverse engineering:\n\nWhat do I need for studying RE?\nShould I know all of programing languages to study RE? (I only intend to reverse Android and Window PC applications for studying)\nDo I need any specific application to do it?\n\nOh, I did some searching on internet. However, it is too complex, and I cannot understand, especially Wikipedia. So, I would be really grateful if you guys could make it simple enough to understand.\n",
    "votes": "-3",
    "answers": 2,
    "views": "866",
    "tags": [
        "windows",
        "android"
    ],
    "user": "Star Light",
    "time": "9 years ago",
    "comments": [
        {
            "user": "user187",
            "text": "@Spl3en No, it's not. That one is specific for Windows, this one isn't (also for Android, for example).\n",
            "time": null
        },
        {
            "user": "drum",
            "text": "reddit.com/r/ReverseEngineering/comments/hg0fx/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "These suggestions may help. One sure way of becoming a better reverse engineer is to become a better \"forward engineer\"! Here's what I would suggest:\n\nTime to study and learn (again..:).\nExamine the assembly output of various compilers. Write test programs of increasing complexity and examine the assembly language output so that you get a sense of what the compiler does for any given high level construct.\nTry running binaries through a decompiler. This will allow you to see how those same programs are interpreted by a tool and allow you to begin to see the kinds of errors that the tools make.\nTry completely reverse engineering a small project. It's not hard to find source code for all kinds of things these days. Pick an open source project that you are not familiar with, compile it without peeking at the code and try to reverse engineer it entirely. Alternatively, try reverse engineering some particular routine or aspect (which is more usual).\nTry to write code to fool the decompiler. Open source projects typically don't take any anti-disassembly measures but other kinds of software (e.g. malware) often does. Learn these techniques in the forward direction and then look at the results with your reverse engineering tools. You'll get a feel for which techniques are successful and why.\n\nThere's more, I quickly remember more of that.\nHope that helps.\n@firebitsbr\n",
            "votes": "0",
            "user": "firebitsbr",
            "time": "Jul 8, 2015 at 19:28",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "I think, in my humble opinion, you will need (based on my experience):\n\nDedicated Internet Link\nPhysical equipment as architecture (x86, x86-64, arm, mips and others)\nStorage (to store samplers)\nTools - IDA Pro Freeware, gdb, radare2, etc.\nVM (Windows, Linux, Android, IOS, etc)\nTime to study and learn.\n\nThere's more, I quickly remember more of that.\nI hope this helps.\n",
            "votes": "0",
            "user": "perror",
            "time": "Jul 9, 2015 at 16:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}