{
    "title": "How can I debug if the program closes directly?",
    "link": "https://reverseengineering.stackexchange.com/questions/32750/how-can-i-debug-if-the-program-closes-directly",
    "content": "I'm trying to debug a game and it's closing under few circumstances:\n\nWhen debugging (solved by hooking IsDebuggerPresent to return false when called by the game)\nWhen setting a memory/hardware breakpoint to see what reads/writes\n\nTesting with x64dbg and cheat engine, I'm getting the same results with both tools\nI can debug some functions and put breakpoints in opcodes to see the program workflow (for example IsDebuggerPresent, I can set a breakpoint there and step in) but I'm not sure if I can do it everywhere\nThe final goal is learning to identify functions by checking what reads/writes on values\nHere are all breakpoints I've checked without results, the game closes directly:\n\nShould I trace who is closing the game to disable it? Or should I debug it differently?\nIf I have to trace, how can I do that if it doesn't hit the breakpoints when closing?\n",
    "votes": "0",
    "answers": 2,
    "views": "167",
    "tags": [
        "debugging",
        "c++",
        "x64dbg",
        "cheat-engine"
    ],
    "user": "kuhi",
    "time": "Feb 21, 2024 at 4:29",
    "comments": [
        {
            "user": "Yotamz",
            "text": "The code in your screenshot calls <pre><code>RtlQueryPerformanceCounter</code></pre> then some check, and then <pre><code>ExitProcess</code></pre>, which is a common anti-debugging technique. You are dealing with some anti-debugging features. If these anti-debugging attributes are of no interest to you, you can use a x64dbg plugins that try to bypass them. Have you tried hardware breakpoints?\n",
            "time": null
        },
        {
            "user": "kuhi",
            "text": "The code in my screenshot is the symbols tab of x64dbg... As I explain in my question when I set a breakpoint it closes directly... I've checked with ScyllaHide if that's the plugin you're refering to but it doesn't make any difference and my idea is to learn\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Possibilities worth checking:\nTry combinations of these and see if the behaviour changes:\n\nDisable all exception filtering by the debugger (pass all exceptions to the program). If the program uses custom exceptions to detect a debugger it will let them through. A common technique is throwing a SingleStep exception or a breakpoint exception and catching it. If the handler doesn't get called then there probably is a debugger attached.\nEnable all exceptions (the opposite of 1). If the program throws exceptions expecting some kind of handler code running - you will see them earlier and decide how to handle them.\nNOP or otherwise skip calls to <pre><code>SetUnhandledExceptionFilter</code></pre>. This function allows another technique for detecting an attached debugger.\nNOP calls to <pre><code>NtSetInformationThread</code></pre>. This API has a specific <pre><code>ThreadHideFromDebugger</code></pre> flag that, well, hides the running thread from an attached debugger.\nPut the breakpoint(s) in the function you want to break at but not on its first instruction (maybe on the ending <pre><code>RET</code></pre>).\nBreak on process exit. You should be able to see the last state of some memory parts and registers. (not sure if x64dbg has this feature)\n",
            "votes": "1",
            "user": "Yotamz",
            "time": "Feb 22, 2024 at 12:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "kuhi",
                    "text": "<span class=\"comment-copy\">hi, sorry for late reply, not sure how to do 1 and 2 with x64dbg... hook set for 3 and 4 correctly... ok for 5... which debugger has that feature you mention in 6? It still closes when setting a breakpoint</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "After testing several methods, the easiest ended up being TitanHide.\nWith TitanHide, setting only ThreadHideFromDebugger:\n\nAnd enabling my hook for isDebuggerPresent to return false always, I can breakpoint and debug the game normally.\nFor PatchGuard I've used EfiGuard.\n",
            "votes": "0",
            "user": "kuhi",
            "time": "Mar 23, 2024 at 18:36",
            "is_accepted": true,
            "comments": []
        }
    ]
}