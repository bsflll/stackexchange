{
    "title": "Is it possible to get the formula out of a blackbox using neural network",
    "link": "https://reverseengineering.stackexchange.com/questions/19114/is-it-possible-to-get-the-formula-out-of-a-blackbox-using-neural-network",
    "content": "I have a so. library which I know the \"C\" interface but I don't have access to the source code only the disassembled code which is hard to understand at least for me.\nI know the input parameters (including the expected ranges of the parameters) and I get the corresponding result of the formula.\nI wrote a small program to test every combination of the input parameters and record the results.\nFor example I recorded these pairs (all possible combinations are over 430.000):\n<pre><code>param1;param2;result\n26.4;63.6;50.490\n32.0;107.7;48.552\n70.2;65.4;21.277\n79.1;71.4;14.923\n18.8;48.0;55.703\n65.4;19.9;24.704\n58.9;85.6;29.345\n48.0;50.6;37.128\n17.3;19.7;56.732\n72.6;40.1;19.564\n59.2;42.1;29.131\n43.1;33.7;40.627\n47.2;52.1;37.699\n33.6;55.2;47.410\n31.7;49.3;48.766\n22.5;19.4;53.165\n33.7;66.0;47.338\n49.2;82.4;36.271\n31.3;91.3;49.052\n42.2;43.2;41.269\n65.3;92.8;24.776\n13.2;24.5;59.545\n13.6;57.0;59.270\n59.5;48.6;28.917\n61.3;27.1;27.632\n</code></pre>\nI already tried to train a neural network + back propagation with k=5 sigmoid activation neuron and 1 hidden layer with a learn factor of gamma=0.1 and 10000 steps but I get only poor results.\nIt is possible to train a neural network to generate nearly the same results (for example with an error of ~0.001) as the so. library function?\nIs my neural network wrong? Is there a better method?\nAny idea or help is welcome!\nedit:\nthanks @Rok Tavčar I added an image of the data points as a 3d plot.\n\nIt looks like two linear 2d surfaces but at some point it jumps a bit.\nI guess I can divide it as two linear functions. Now, I need to figure out how I do a 2d linear regression. If somebody could give me hint that would be grateful.\nNevertheless, the .so library has more complex functions, which dimensional is higher (up to 6). So I can't plot it anymore. I need a more general approach but I will also give it a try to understand the disassembled arm code as  @0xC0000022L suggested.\n",
    "votes": "-1",
    "answers": 2,
    "views": "173",
    "tags": [
        "functions"
    ],
    "user": "foobar12",
    "time": "Aug 27, 2018 at 22:52",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. The questions you ask are off-topic and what you don't ask is up to anyone's guess. What's wrong with trying to learn to understand the disassembly? Any specific questions regarding that would be perfectly on-topic here.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "No, you cannot use neural network (NN) to solve problems like this (you probably could, but it would be way to complex). If you already used NN you know that they can get output only if they see it in training set. For example in this case you would need to train NN on all possible outcomes. Another problem or how NN works is that they to set linear borders in each dimension of input data and try to find best match on which side of border is correct result. This is mostly usefull when output is discrete not continous.\nWhat you could do beside disassembly is use  SMT solver, but you will still need to know something about function you are trying to reverse. \nAnother out a box idea is that with so low possible combinations you can easily (Unless your function is slow) draw graph of (almost) all combinations and try to guess function.\n",
            "votes": "2",
            "user": "Rok Tavčar",
            "time": "Aug 21, 2018 at 6:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "thanks @all Finally, I was able to understand the disassembled code. \nThe function is as follow (I used IDA free for that):\n<pre><code>static double test_function(double xmm0) {\n    double xmm1 = 100.0;\n    xmm1 = xmm1 - xmm0;\n    xmm1 = xmm1 * 0.7;\n\n    if (xmm1 < 50) {\n        xmm1 = xmm1 * 1.02;\n    } else {\n        xmm1 = xmm1 * 0.98;\n    }\n\n   return xmm1;\n}\n</code></pre>\nMy first reverse engineered snippet from a disassembled code. Yay! :)\nI will try to reverse engineer a more complex function. Maybe I need your help again.\n",
            "votes": "1",
            "user": "foobar12",
            "time": "Aug 21, 2018 at 18:17",
            "is_accepted": true,
            "comments": []
        }
    ]
}