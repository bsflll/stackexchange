{
    "title": "Reversing Qt application",
    "link": "https://reverseengineering.stackexchange.com/questions/11990/reversing-qt-application",
    "content": "I want to reverse-engineer a Qt crackme written for linux. I would like to follow where introduced text gets. I have found this <pre><code>gdb</code></pre> macro to print QStrings (Qt5). To test it I wrote a simple helloworld application containing:\n<pre><code>QString str(\"almafa\");\nqDebug() << str;\n</code></pre>\nThis prints the QString as expected.\n<pre><code>(gdb) printqs5static str\n(Qt5 QString)0xffffdf50 length=6: \"almafa\"\n</code></pre>\nAfter this I tried to inspect QStrings where no variable names are present.\nThe compiled code looks like (in <pre><code>radare2</code></pre>):\n<pre><code>|           0x00400ab7      488d45b0       leaq -0x50(%rbp), %rax\n|           0x00400abb      488d55c0       leaq -0x40(%rbp), %rdx\n|           0x00400abf      4889d6         movq %rdx, %rsi\n|           0x00400ac2      4889c7         movq %rax, %rdi\n|           0x00400ac5      e816feffff     callq sym.QMessageLogger::debug\n|           0x00400aca      488d55a0       leaq -0x60(%rbp), %rdx\n|           0x00400ace      488d45b0       leaq -0x50(%rbp), %rax\n|           0x00400ad2      4889d6         movq %rdx, %rsi\n|           0x00400ad5      4889c7         movq %rax, %rdi\n|           0x00400ad8      e863020000     callq sym.QDebug::operator__\n</code></pre>\nI do not have experience debugging Qt applications, but I expected that from the above code snippet that at <pre><code>0x400ad8</code></pre> either <pre><code>rsi</code></pre> or <pre><code>rdi</code></pre> will be the QString. Unfortunately <pre><code>printqs5static $rsi</code></pre> is not working. <pre><code>i r $rsi</code></pre> gives <pre><code>0x7ffffffdf50</code></pre>, the address from <pre><code>printqs5static str</code></pre> result.\nThe question is how to inspect QStrings when only memory addresses are available?\nEdit: The web page I am referring is down at this moment, but a cashed version is here.\n<pre><code>gdb</code></pre>pretty printers  are also able to print QStrings if there are symbolic names available. Still do not know how to work without them.\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb",
        "qt"
    ],
    "user": "robert",
    "time": "May 23, 2017 at 12:37",
    "comments": [
        {
            "user": "broadway",
            "text": "I'd take a look at the following related question: reverseengineering.stackexchange.com/questions/6828/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Did you try <pre><code>printqs5static $rdi</code></pre>? Assuming that call goes to the function with the prototype <pre><code>QDebug & QDebug::operator<<(const QString & s)</code></pre>, then it's <pre><code>rdi</code></pre> that should contain the <pre><code>QString</code></pre>, not RSI.\nAnother option is to dump memory around <pre><code>rdi</code></pre> and <pre><code>rsi</code></pre>. I doubt the object is super complicated, so there should be a pointer to a normal C string nearby.\n",
            "votes": "1",
            "user": "Gdogg",
            "time": "Feb 19, 2016 at 0:31",
            "is_accepted": false,
            "comments": []
        }
    ]
}