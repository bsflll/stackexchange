{
    "title": "How to know in which language/technology program (.exe) is written?",
    "link": "https://reverseengineering.stackexchange.com/questions/3362/how-to-know-in-which-language-technology-program-exe-is-written",
    "content": "How to understand if exe/dll is written in C++/.Net/Java or in any other language. I tried to use Dependency walker but not able to get required information.\n",
    "votes": "56",
    "answers": 7,
    "views": "161k",
    "tags": [
        "disassembly",
        "windows",
        "binary-analysis",
        "static-analysis",
        "executable"
    ],
    "user": "Pranit Kothari",
    "time": "Jan 11, 2014 at 3:42",
    "comments": [
        {
            "user": "perror",
            "text": "Usually the compiler used to build the executable file leave some explicit strings about itself. Try to look at the extra sections left in the executable. And, second, if no explicit tag is left, you will be able to deduce the original language (and probably the compiler) by recognizing the ABI used to produce the assembler.\n",
            "time": null
        },
        {
            "user": "CppLearner",
            "text": "It's worthwhile to remember that a program can be written in more than one languages and then converted or exported to a binary.\n",
            "time": null
        },
        {
            "user": "atdre",
            "text": "Mandiant's Red Curtain had this functionality, wonder if you can reverse what they did there?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "(reposting my SO answer to a similar question)\nIn many cases it is possible to identify the compiler used to compile the code, and from that, the original language.\nMost language implementations include some kind of runtime library to implement various high-level operations of the language. For example, C has the CRT which implements file I/O operations (<pre><code>fopen</code></pre>, <pre><code>fread</code></pre> etc.), Delphi has compiler helpers for its <pre><code>string</code></pre> type (concatenation, assignment and others), ADA has various low-level functions to ensure language safety and so on. By comparing the code of the program and the runtime libraries of the candidate compilers you may be able to find a match.\nIDA implements this approach in the FLIRT technology. By using the signatures, IDA is able to determine most of the major compilers for DOS and Windows. It's somewhat more difficult on Linux because there's no single provider of compiler binaries for it, so signatures would have to be made for every distro.\nHowever, even without resorting to the runtime library code, it may be possible to identify the compiler used. Many compilers use very distinct idioms to represent various operations. For example, I was able to guess that the compiler used for the Duqu virus was Visual C++, which was later confirmed.\n",
            "votes": "43",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": ".NET could be identified by import which you can see using dependency warker - check if there is an import of <pre><code>mscorlib.dll</code></pre> which is a core lib of .net framework. \nC++ can be identified by \n\n\nlooking at the assembly - it uses this call convention.\nPEid can show partial info about what compiler and run-time were used. In general it uses list of signature for that.\nDetect It Easy - this tool is still maintained and has pretty interesting features.\n",
            "votes": "16",
            "user": "Abhinav",
            "time": "Jan 12, 2018 at 16:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">For some reason I can't unRAR <code>PEid</code>. Windows Defender removes it as malware.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Marco Pontello's TrID software can usually identify what was used to compile a file.\n",
            "votes": "12",
            "user": "Avery3R",
            "time": "Jan 5, 2014 at 7:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Thomas Weller",
                    "text": "<span class=\"comment-copy\">Note: free for non-commercial use only</span>",
                    "time": null
                },
                {
                    "user": "mattyb",
                    "text": "<span class=\"comment-copy\">Do you have a guide on how to use it? I've downloaded the main program but cannot find the database of definitions it requires as a separate package? I see where the definitions are on the website, but I haven't been able to figure out how to download them.</span>",
                    "time": null
                },
                {
                    "user": "Avery3R",
                    "text": "<span class=\"comment-copy\">The def download is right under the main program download</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Java bytecode files can be identified by their magic number: <pre><code>0xCAFEBABE</code></pre> at the beginning of the file. Also the standard naming convention is to have these files' names end in <pre><code>.class</code></pre>.\nHowever, @hexafraction warns in a comment: \"Java classfiles would not have their magic number or file extension visible when packed into a .exe PE, except if they were unpacked (assuming that they're just packed in the first place, and not recompiled to machine code)\"\n",
            "votes": "4",
            "user": "jcora",
            "time": "Sep 4, 2014 at 19:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "nanofarad",
                    "text": "<span class=\"comment-copy\">Java classfiles would not have their magic number or file extension visible when packed into a .exe PE, except if they were unpacked (assuming that they're just packed in the first place, and not recompiled to machine code)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Stud_PE (free) scans a lot of signatures of PE files (.EXEs and .DLLs).\n",
            "votes": "2",
            "user": "Thomas Weller",
            "time": "Jan 5, 2014 at 20:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can detect a .net assembly by looking at the PE headers. Read the CLR spec and the PE/COFFEE spec for details.\nJava uses it's own class file format. I'm not too familiar with it, but it should be possible to positively id a class file.\nNative language development is mostly about heuristics. Things like calling conventions, prologues, epilogues, etc. A recursive descent disassembled, plus an idiom recognizer can likely id the source compiler. GCC and class generate very distinctive code, for example.\n",
            "votes": "1",
            "user": "Scott Wisniewski",
            "time": "Jan 7, 2014 at 9:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "(blatant plug)\nprotectionid (pid.gamecopyworld.com) reports the compiler info (turn it on in the configuration)\nto do it, its a multitude of things\nchecking for byte patterns\nchecking imports (mscoree.dll, msvcr*.dll and so on)\nchecking entrypoint code\nchecking mz stub\nchecking linker version\nand a few other things\nexample output\nScanning -> C:\\ProtectionID.source\\problematic.files\\solved\\detected\\Agile.NET\n6.2.0.16.AgileNETUnpackMe\\AgileUnpackMe.exe\nFile Type : 32-Bit Exe (Subsystem : Win GUI / 2), Size : 7680 (01E00h) Byte(s)\n[File Heuristics] -> Flag : 00000100000001001101000000110000 (0x0404D030)\n[Entrypoint Section Entropy] : 5.25 (section #0) \".text   \" | Size : 0x1288 (4744) byte(s)\n[DllCharacteristics] -> Flag : (0x8540) -> ASLR | DEP | NOSEH | TSA\n[ImpHash] -> f34d5f2d4577ed6d9ceec516c1f5a744\n[SectionCount] 3 (0x3) | ImageSize 0x8000 (32768) byte(s)\n[VersionInfo] Product Name : AgileUnpackMe\n[VersionInfo] Product Version : 1.0.4999.25574\n[VersionInfo] File Description : AgileUnpackMe\n[VersionInfo] File Version : 1.0.4999.25574\n[VersionInfo] Original FileName : AgileUnpackMe.exe\n[VersionInfo] Internal Name : AgileUnpackMe.exe\n[VersionInfo] Legal Copyrights : Copyright 2013\n[Debug Info] (record 1 of 1) (file offset 0x1414)\nCharacteristics : 0x0 | TimeDateStamp : 0x522C69AD | MajorVer : 0 / MinorVer : 0 -> (0.0)\nType : 2 (0x2) -> CodeView | Size : 0x57 (87)\nAddressOfRawData : 0x3230 | PointerToRawData : 0x1430\nCvSig : 0x53445352 | SigGuid A75CE0F5-0D67-4FC4-A2C612B95C81F742\nAge : 0x6 | Pdb : c:\\AgileUnpackMe\\AgileUnpackMe\\obj\\x86\\Debug\\AgileUnpackMe.pdb\n[!] AgileDotNet detected\n[CompilerDetect] -> .NET\n[.] .Net Info -> v 2.5 | x86 managed (/platform:x86) | Flags : 0x00000003 ->\nCOMIMAGE_FLAGS_ILONLY | COMIMAGE_FLAGS_32BITREQUIRED |\n[.] Entrypoint (Token) : 0x06000006\n[.] MetaData RVA : 0x00002184 | Size : 0x00000C0C (3084)\n[.] MetaData->Version 1.1 -> v2.0.50727\n[.] Flags : 0x0 | Streams : 0x5 (5)\n\nScan Took : 0.156 Second(s) [00000009Ch (156) tick(s)] [539 scan(s) done]\n",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "May 7, 2021 at 13:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}