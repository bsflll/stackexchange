{
    "title": "Creating IDA Pro debugger plugins - API documentation and examples?",
    "link": "https://reverseengineering.stackexchange.com/questions/1899/creating-ida-pro-debugger-plugins-api-documentation-and-examples",
    "content": "Are there any good resources for developing debugger plugins in IDA Pro using the SDK that describe the IDA debugger API? An example of this is the IDA Pro ARM debugger plugin on Sourceforge. There seem to be few projects that have accomplished this. Specifically, how do you make a plugin in IDA which registers itself as one of the available debuggers and allows stepping through the IDA database while controlling a target?\n",
    "votes": "14",
    "answers": 4,
    "views": "7k",
    "tags": [
        "ida",
        "debuggers",
        "ida-plugin"
    ],
    "user": "dingo_kinznerhook",
    "time": "Apr 22, 2013 at 20:36",
    "comments": [],
    "answers_data": [
        {
            "content": "None of the answers so far answer the actual question so here goes.\nA debugger plugin differs from a \"normal\" one in two points:\n\nit has <pre><code>PLUGIN_DBG</code></pre> in the plugin's flags.\nin init(), it must set the global variable <pre><code>dbg</code></pre> to a pointer to an implementation of <pre><code>debugger_t</code></pre> structure. See <pre><code>idd.hpp</code></pre> for the definition.\n\nFor examples, see <pre><code>plugins/debugger</code></pre> in the SDK, and also the recently updated <pre><code>idados</code></pre> plugin. Warning: making debugger plugins is not for the faint of heart.\n",
            "votes": "7",
            "user": "Igor Skochinsky",
            "time": "Apr 23, 2013 at 13:04",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "You can look for manual of IDA Plug-in in C/C++ here.\nAlso You may watch a talk of IDA-Pro Creator Ilfak Guilfanov on Recon 2008 \"BUILDING PLUGINS FOR IDA PRO\" at SecurityTube\nAnd there is also IDAPython to create small automations too.\n",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Apr 22, 2013 at 21:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "dingo_kinznerhook",
                    "text": "<span class=\"comment-copy\">I already have resources on IDA plugin writing - I'm looking for resources that describe the IDA debugger API.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@DenisLaskov: when I took the IDA training three and a half years ago Elias told us that Python could now also be used to write plugins and loaders, so \"small automations\" is somewhat of an understatement ;)</span>",
                    "time": null
                },
                {
                    "user": "Denis Laskov",
                    "text": "<span class=\"comment-copy\">@0xC0000022L :) You totally right, I forgot to add quotes around 'automation' :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The debughook.py example script from the idapython suite illustrates all debug events that can be processed by a debugger plugin.\nExample script\nHere's a very simple script that colorizes all instructions as you trace them with the debugger.\n<pre><code># Simple script that colorizes all instruction the debugger halts at or\n# the user traces with the debugger in yellow. Instruction that are hit\n# a ssecond time are colored in red.\n\nfrom idaapi import *\nfrom idc import *\n\nclass Colorizer(DBG_Hooks):\n\n  def __init__(self):\n    DBG_Hooks.__init__(self)\n    self.locations_ = set()\n\n  def colorize(self, ea):\n    if ea in self.locations_:\n      SetColor(ea, CIC_ITEM, 0x2020c0)\n    else:\n      SetColor(ea, CIC_ITEM, 0x80ffff)\n      self.locations_.add(ea)\n\n  def dbg_bpt(self, tid, ea):\n    self.colorize(ea)\n    return 0\n\n  def dbg_step_into(self):\n    self.colorize(GetRegValue(\"eip\"))\n\ntry:\n  if debughook:\n    print(\"Removing previous hook ...\")\n    debughook.unhook()\nexcept:\n  pass\n\ncolorizer = Colorizer()\ncolorizer.hook()\n</code></pre>\nSome notes\nIf you read from process memory in one of your debugger callbacks, you need to call refresh_debugger_memory() first (see file comment for RefreshDebuggerMemory() in idc.py). If you can, avoid that call since it is somewhat expensive.\nYou can easily access all register via the cpu instance from the idautils package:\n<pre><code>print \"EAX has the value: %X\" % cpu.Eax\n</code></pre>\nTo read the current value from the top of the stack, use something like\n<pre><code>print \"TOS: %X\" % Dword(cpu.Esp)\n</code></pre>\n",
            "votes": "4",
            "user": "newgre",
            "time": "Apr 22, 2013 at 23:17",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The IDA Pro Book 2nd edition from Chris Eagle has a little info in chapter 24 on interacting with the debugger through IDC and the SDK, but is more automation focused. Other than that maybe reading the source of other plugins that are doing this such as the ARM debugger plugin referenced in the question and digging through dbg.hpp in the SDK to see what it exposes. It also appears the source for IDA's debugger plugins is available in plugins/debugger in the SDK. I haven't seen writing a debugger plugin specifically documented.\n",
            "votes": "2",
            "user": "binarybitme",
            "time": "Apr 22, 2013 at 22:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}