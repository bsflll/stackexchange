{
    "title": "Why does PE ImageBase address change in memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/25686/why-does-pe-imagebase-address-change-in-memory",
    "content": "I'm reversing a malicious 32-bit x86 Windows executable. Statically reviewing PE headers in Ghidra, I see that <pre><code>ImageBase</code></pre> is set to <pre><code>0x400000</code></pre> as expected. However, when the binary is loaded into memory, the initial RVA does not match the <pre><code>ImageBase</code></pre> defined in the file. For example, I have seen the in-memory base address set to <pre><code>0x4B0000</code></pre> and <pre><code>0x900000</code></pre>. This behavior occurs on a clean VM, and when debugging with Immunity and x32dbg as well as IDA Free.\nMy understanding is that the Windows loader reads <pre><code>ImageBase</code></pre> and uses that offset to begin mapping sections into virtual address space. Because system code handles loading, and my system is clean upon first execution, my assumption is that the unusual <pre><code>ImageBase</code></pre> is a symptom of a loader nuance rather than tampering. I've never encountered this scenario and would appreciate any insights.\nMD5:  <pre><code>1f63d04ee95ea041f2f6b1e818d94a7c</code></pre>\nSHA1: <pre><code>823ad6abb05f2393c44cf4b7f1d00e32ac04d1d1</code></pre>\n\n<pre><code>ImageBase</code></pre> set to <pre><code>0x400000</code></pre> when viewing PE headers in Ghidra:\n\n\n<pre><code>ImageBase</code></pre> in memory-mapped PE header (<pre><code>0x4B0000</code></pre>) does not match <pre><code>ImageBase</code></pre> set in static file:\n\n\nPE sections mapped into memory with <pre><code>ImageBase</code></pre> at <pre><code>0x4B0000</code></pre>\n",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "malware",
        "anti-debugging",
        "pe32",
        "virtual-memory"
    ],
    "user": "j5bb",
    "time": "Aug 17, 2020 at 2:49",
    "comments": [
        {
            "user": "blabb",
            "text": "if your system is aslr enabled (any is > xp) then this is a security feature  and windows loader will randomize the address space layout  on each run\n",
            "time": null
        },
        {
            "user": "j5bb",
            "text": "Thanks for bringing ASLR to my attention @blabb. I'll keep that feature in mind going forward. After disabling ASLR on a fresh Windows 10 VM and restarting, I continued to see a non-<pre><code>0x400000</code></pre> <pre><code>ImageBase</code></pre> when loading the binary into various debuggers. I note this here only to rule out ASLR as the cause of the RVA randomization in this particular case.\n",
            "time": null
        },
        {
            "user": "BoRRis",
            "text": "ASLR is for the imported DLLs generally. This is the preferred base address. However, if this memory location is occupied by other image, the loader has the right to place it at other locations provided it gets enough continous space in memory.\n",
            "time": null
        },
        {
            "user": "Utkonos",
            "text": "@j5bb It depends on which version of Windows 10 you are using with regards to ASLR. The last version of 10 that can disable ASLR is build 1703. In all builds later than that one, the switches that say they disable ASLR have no effect.  Also, in each disassembler: Ghidra, IDA, Binary Ninja etc, there is a setting to rebase the database to match the base address in memory. This can alleviate some of the pain.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is just a preferred address. Windows can load the binary at almost any address and rebase it to this new location.\n\nImageBase: The preferred address of the first byte of image when loaded into memory; must be a multiple of 64 K. The default for DLLs is 0x10000000. The default for Windows CE EXEs is 0x00010000. The default for Windows NT, Windows 2000, Windows XP, Windows 95, Windows 98, and Windows Me is 0x00400000.\n\nSource: MSDN\n",
            "votes": "9",
            "user": "Pawe≈Ç ≈Åukasik",
            "time": "Aug 17, 2020 at 5:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">... provided relocation information exists üòÅ</span>",
                    "time": null
                }
            ]
        }
    ]
}