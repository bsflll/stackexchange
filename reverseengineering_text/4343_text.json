{
    "title": "Calling Lua by C/C++ in compiled applications",
    "link": "https://reverseengineering.stackexchange.com/questions/4343/calling-lua-by-c-c-in-compiled-applications",
    "content": "So, currently I've been reverse engineering an application, that allows Lua coding. Because for some special purposes, I need to call Lua directly by C/C++ coding. However, as this application is compiled obviously, I can't simply write a function that calls it. I would need the signature of the original functions (incl. the mask) and then write the function prototype, with calling convention, return type, etc. and later compile it as DLL, then inject it.\nAll this was done already. I've got the signature by IDAPro using the SigMaker plugin, made the base functions for scanning for the pattern and the masks. \nSo, that's how for example the Lua Print Functions looks like:\n<pre><code>DEC_FUNC(__cdecl, DWORD, print, int a1); \n</code></pre>\nLooking into the Lua source, a1 is \"lua_State *L\". How would I now call this function and for example print \"hello world\" in Lua? Excuse me for my incompetence in such things like that, but I've been stuck to this for a couple of days now.\nFor comparison you may look here to the code part from lbaselib.c (in the Lua source):\n<pre><code>static int luaB_print (lua_State *L) {\nint n = lua_gettop(L);  // number of arguments\nint i;\nlua_getglobal(L, \"tostring\");\nfor (i=1; i<=n; i++) {\nconst char *s;\nlua_pushvalue(L, -1);  // function to be called\nlua_pushvalue(L, i);   // value to print\nlua_call(L, 1, 1);\ns = lua_tostring(L, -1);  // get result\nif (s == NULL)\n  return luaL_error(L, LUA_QL(\"tostring\") \" must return a string to \"\n                       LUA_QL(\"print\"));\nif (i>1) fputs(\"\\t\", stdout);\nfputs(s, stdout);\nlua_pop(L, 1);  // pop result\n}\nfputs(\"\n\", stdout);\nreturn 0;\n}    \n</code></pre>\nThanks in advance. If some more information is needed, I may provide it of course.\n",
    "votes": "1",
    "answers": 0,
    "views": "499",
    "tags": [
        "dll",
        "c++"
    ],
    "user": "Zuka",
    "time": "May 16, 2014 at 14:31",
    "comments": [
        {
            "user": "offbyseveral",
            "text": "I'm confused about whether this code already integrated lua or not: you first say that it does, and then that it doesn't but that you'd like it to.\n",
            "time": null
        },
        {
            "user": "Zuka",
            "text": "@offbyseveral It is already integrated. I have a compiled application, which has integrated Lua, but no pdb, etc. I would like to inject a DLL that would call a Lua function (aka hijack) from within the application. So, I used the SigMaker plugin to match the unique signature inside the binary (so I won't have to look for the address of the function every single time again when the binary is re-compiled and addresses change). The question is: How do I call a Lua function inside the binary with my DLL without making use of the integrated Lua (in the EXE/binary) environment?\n",
            "time": null
        }
    ],
    "answers_data": []
}