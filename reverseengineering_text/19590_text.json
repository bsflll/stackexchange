{
    "title": "Importance of Compiler Version in generating a signature",
    "link": "https://reverseengineering.stackexchange.com/questions/19590/importance-of-compiler-version-in-generating-a-signature",
    "content": "I load a reference elf that I cross-compiled for AArch64 into IDA Pro, idb2pat to generate a .pat which I then process through sigmake.\nI then use the signature file (in the appropriate IDA Pro directory) to work on a commercial image, however it only identifies perhaps one or two functions (of many hundreds) even though I know the binary I am examining was built off the reference source that I used to build the reference elf that I generated a .pat (and then a signature for).\nThe commercial elf has all debug/compiler info stripped... pretty ruthlessly so I have to guess what gcc it was compiled with and then cross-compile the reference source using this guessed gcc version.\nMy question is how important is the compiler version when building an elf to generate signatures from? If I get the version incorrect will all my signatures simply fail to match the target binary I am working with?\nThanks for any help!\n",
    "votes": "5",
    "answers": 1,
    "views": "425",
    "tags": [
        "ida",
        "elf",
        "flirt-signatures"
    ],
    "user": "Hi Lo",
    "time": "Oct 10, 2018 at 2:05",
    "comments": [],
    "answers_data": [
        {
            "content": "Yes, getting the compiler version right is pretty important, as well as the compilation options.\nFLIRT relies on fixed byte patterns and does not tolerate even slight differences in the generated code. A different version of compiler may have drastically different register allocator or optimization algorithms, which may result in very different binary for the same source. In addition, <pre><code>idb2pat</code></pre> probably is not tuned for AArch64 and might not mark relocatable bytes properly, leading to overly restrictive patterns. A better option is to generate patterns from the object files (<pre><code>.o</code></pre>) or static libraries (<pre><code>.a</code></pre>) with <pre><code>pelf</code></pre> since it can use relocation information to mark wildcard bytes.\nIf you have just a single binary, I would suggest to just match it against the source code manually, using straight old human intuition and references between functions/string literals. This will likely be faster than finding the correct compiler version and options.\nAnother option is to use a more flexible diffing utility like Diaphora  which has more algorithms besides fixed byte pattern matching.\nIf you need this on scale, you'll need to gather many compiler versions and try various options that affect code generation (at least the optimization level, i.e. <pre><code>-O0, -O1, -O2, -O3</code></pre>). You should also try other compilers like llvm/clang (both the public version and ARM's customized one).\nFor a quick test, you can use Compiler Explorer on some short code snippets to see if you can find a compiler and set of options to match the code you're seeing in the binary.\n",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Oct 10, 2018 at 8:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Hi Lo",
                    "text": "<span class=\"comment-copy\">Igor, yes I am using Diaphora but it doesn't help a great deal, a little yes. I can see some similiarties, thankyou for the great advice. Built the reference from many toolchains without matching success.. your advice very helpful and will report back any progress.</span>",
                    "time": null
                }
            ]
        }
    ]
}