{
    "title": "Special Properties of Delphi (Object Pascal) Executables",
    "link": "https://reverseengineering.stackexchange.com/questions/2716/special-properties-of-delphi-object-pascal-executables",
    "content": "While reading some threads on other reverse engineering forums, I learned that executable programs compiled in Delphi have special properties. I'm not sure what those special properties are but I think it somehow makes them harder to reverse engineer. Does anyone know what these special properties are?\n",
    "votes": "7",
    "answers": 3,
    "views": "6k",
    "tags": [
        "executable"
    ],
    "user": "Penguin",
    "time": "Aug 31, 2013 at 3:48",
    "comments": [],
    "answers_data": [
        {
            "content": "Delphi uses an object-oriented language based on Pascal, it is similar in many ways to reversing C++. Here are some things specific to Delphi that I found important to know when reversing such applications.\nLibraries and required functions from the RTL (Delphi Run Time Library) are usually statically  compiled in the application binary. This results in large binaries with a large number of functions. Components code is usually placed at the beginning of the executable by the compiler and user code is placed after. Properly identifying and naming library functions can save you a lot of time, if using IDA make sure the appropriate FLIRT signatures are applied (probably one of the bds signature for recent applications). IDR also has its own set of signatures and can sometimes provide other useful information like class names and decompiled code. It is possible to export data from IDR to an IDC script and load it in IDA, the IDA signatures should be reapplied after as the IDC will remove some function names.\nThe RTL is well documented on the website of Embarcadero which bought Delphi (don't waste your time searching on the Borland website).\nDelphi uses the fastcall convention, however it is different than Windows fastcall. The parameters are passed in this order : EAX, EDX, ECX, the others on the stack. For classes, the this pointer is passed in EAX. When a constructor is called, the structure of the class is passed in EAX and the this pointer is returned in EAX. Constructors can be identified as they call System::ClassCreate().\nDelphi uses Pascal-style strings. The length of the string is specified at the start of the string. Strings stored in the binary file are in C-style format, they first need to be converted by calling the LStrAsg method. To know where strings are used in the program you need to follow the converted string, a typical call will look like this:\n<pre><code>mov     eax, ds:off_497050        ; Pascal string\nmov     edx, offset a1_37 ; C-style string \"1.37\"\ncall    @System@@LStrAsg$qqrpvpxv ; System::LStrAsg(void*,void*)\n</code></pre>\n",
            "votes": "8",
            "user": "ekse",
            "time": "Sep 2, 2013 at 4:50",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "There are many Delphi-specific \"programming elements\" such as classes, units, VCL libraries, etc. For more information, you may want to refer to A Beginner's Guide to Delphi Programming.\nHowever, in terms of reverse engineering applications written in Delphi (and extracting information on these \"programming elements\"), the tool DeDe is invaluable.\n",
            "votes": "3",
            "user": "Jason Geffner",
            "time": "Aug 31, 2013 at 21:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "When reverse engineering a Delphi/C++ builder target I always use the IDR tool.\nA very helpful feature is that IDR can generate a map file for Ida Pro.\n\nIDR (Interactive Delphi Reconstructor) – a decompiler of executable\n  files (EXE) and dynamic libraries (DLL), written in Delphi and\n  executed in Windows32 environment.\nThe program firstly is intended for the companies, engaged by\n  development of anti-virus software. It can also help programmers to\n  recover lost source code of programs appreciably.\nThe current version of the program can process files (GUI and console\n  applications), compiled by Delphi compilers of versions Delphi2 –\n  DelphiXE2.\nFinal project goal is development of the program capable to restore\n  the most part of initial Delphi source codes from the compiled file\n  but IDR, as well as others Delphi decompilers, cannot do it yet.\n  Nevertheless, IDR is in a status considerably to facilitate such\n  process. In comparison with other well known Delphi decompilers the\n  result of IDR analysis has the greatest completeness and reliability.\n  Moreover interactivity does work with the program comfortable and (we\n  shall not be afraid of this word) pleasant.\nIDR make static analysis (analyzed file is not loaded to memory and\n  executed) that allows to safely investigate viruses, trojans and other\n  malware applications, those which executing is dangerous or is not\n  desirable.\nThe program does not require any installation activity and does not do\n  any records in Windows registry.\nBelow screenshot of IDR main window is shown. You can find examples of\n  IDR working results on separate page. For detailed acquaintance with\n  opportunities IDR there is a help file in format CHM which can be\n  downloaded on page of download or directly from this link.\n",
            "votes": "1",
            "user": "Remko",
            "time": "Sep 2, 2013 at 12:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}