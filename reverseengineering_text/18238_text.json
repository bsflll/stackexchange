{
    "title": "Know which bytes are opcode and which operands in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/18238/know-which-bytes-are-opcode-and-which-operands-in-ida",
    "content": "I want to extract a generic signature of a function in IDA and wanted to use just the opcodes of the instructions without its operands.\nExample:\n\nFrom the first instruction I want to know the bytes that tell the disassembler that it is a MOVZX instruction.\nFrom the second and third one the ones that say it is a MOV instruction (probably 8B).\nAnd so on..\nI'm aware that some instructions have modifiers. I just want to know the bytes that translate to certain mnemonic.\n",
    "votes": "1",
    "answers": 1,
    "views": "873",
    "tags": [
        "ida",
        "disassembly",
        "disassemblers"
    ],
    "user": "0xfede7c8",
    "time": "May 11, 2018 at 15:25",
    "comments": [],
    "answers_data": [
        {
            "content": "In general this is not solvable since the opcode and operands may be sharing the same bytes (e. g. some instructions encode part of their opcode in the mod R/M byte, which can also  contain some of the operands at the same time), but you can get some  approximation by inspecting the <pre><code>Operands</code></pre> array of the <pre><code>insn_t</code></pre> structure returned by the <pre><code>decode_insn</code></pre> function. The <pre><code>offb</code></pre> member of each <pre><code>op_t</code></pre> element is supposed to be the offset of the bytes corresponding to the operand in the instruction bytes. \nNote that it may be 0 since itâ€™s not always possible to determine operand location at the byte level, especially on non-x86 architectures. For more info check the <pre><code>ua.hpp</code></pre> header in the SDK.\n",
            "votes": "4",
            "user": "Igor Skochinsky",
            "time": "May 11, 2018 at 20:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">Or you could use insn_t::itype</span>",
                    "time": null
                },
                {
                    "user": "Willem Hengeveld",
                    "text": "<span class=\"comment-copy\">Note also that many risc cpu's store operands as bitfields in the opcode.</span>",
                    "time": null
                }
            ]
        }
    ]
}