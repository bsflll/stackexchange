{
    "title": "Calling a function with a variable number of args from a proxy DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/30427/calling-a-function-with-a-variable-number-of-args-from-a-proxy-dll",
    "content": "The program I'm messing with has builtin logging. Using a proxy DLL, I managed to activate it by calling the right functions from the real DLL. However, I got stuck at using the actual logging functions, as the program crashes with Error 0xC0000142 whenever I get close to using them.\nHere's what I'm doing in my proxy DLL:\n<pre><code>typedef void (*FDLAddr_t)(void);\nFDLAddr_t ForceDebugLog;\n\ntypedef void (*LIAddr_t)(char const *, ...);\nLIAddr_t LogInfo;\n\nvoid setupFuncs() {\n    HMODULE trueDll= GetModuleHandleA(\".\\\\trueDll.dll\");\n    ForceDebugLog = (FDLAddr_t)GetProcAddress(trueDll, \"?ForceDebugLog@@YAXXZ\");\n    // LogInfo = (LIAddr_t)GetProcAddress(trueDll, \"?LogInfo@@YAXPBDZZ\");\n}\n</code></pre>\nNow, I can just do <pre><code>ForceDebugLog();</code></pre> and logging gets enabled. However, as soon as I uncomment the <pre><code>LogInfo</code></pre> line, the program crashes on startup with Windows showing the error 0xc0000142.\nFurther experimentation shows that <pre><code>GetProcAddress</code></pre> returns the address of <pre><code>LogInfo</code></pre> in the DLL. Also, the line appears to be fine if <pre><code>LogInfo</code></pre> was a <pre><code>FARPROC</code></pre>, as that works without a problem. As soon as I add the cast to <pre><code>LIAddr_t</code></pre>, the error comes back.\nHow can I work around this issue? Or do I need to take a different approach? All binaries involved are 32 bit.\n",
    "votes": "1",
    "answers": 1,
    "views": "103",
    "tags": [
        "windows",
        "dll",
        "functions"
    ],
    "user": "mindoverflow",
    "time": "May 20, 2022 at 20:24",
    "comments": [],
    "answers_data": [
        {
            "content": "As it turns out, the code above works correctly and the issue was somewhere else entirely.\nWhile looking at my DLL in ghidra, I noticed that there were some strings defined that appeared nowhere in my code. As it turns out, some old object files from earlier experiments were accidentally linked into the DLL. One of the experiments was a reimplementation of LogInfo which caused the compiler/linker to produce an incorrect result.\n",
            "votes": "1",
            "user": "mindoverflow",
            "time": "May 27, 2022 at 8:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}