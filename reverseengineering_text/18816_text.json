{
    "title": "What is the format of this binary file?",
    "link": "https://reverseengineering.stackexchange.com/questions/18816/what-is-the-format-of-this-binary-file",
    "content": "I have a binary file that I found on a 3D printer that is used to program a dsPIC30F5011 microcontroller. It is responsible for some basic data encryption. The only problem is, I am not sure how this file is formatted.\nIt is raw binary, not like an Intel HEX file or anything. Here's a few sample lines:\n\n0C4230050037600010E0801802003B21\n0C424001F02C1A00370004BE6011B819\n0C42506B09200982CF0200390882CFE0\n0C42600441B06942520E003208003BDD\n\nFor the first line:\nSo the first byte (0x0C) is the length of the data.\nThe next two bytes (0x4230) is the address (I believe it is twice the address, I'll explain that further down)\nThen is the data (length 0x0C in this case)  - 050037600010E0801802003Bh\nThe last two bytes are a Checksum  - 2's complement of the lower byte of the sum of all bytes (length through end of data). \n\nThe reason I believe the address listed is twice the address desired is in the Programming Manual the Intel Hex format says:\n\nâ€¢ AAAA - is a four-digit hexadecimal address\n  representing the starting address of the data\n  record. Format is high byte first followed by low\n  byte. The address is doubled because this format\n  only supports 8-bits. Divide the value by two to\n  find the real device address.\n\nIn fact, this format closely matches the Intel HEX format, although it isn't in ASCII format, nor does it use valid record types.\nIn addition, the last few commands in the file reference address 0x0008 - 0x01FF. Dividing this by 2 gives us 0x0004 - 0x00FF, which according to the datasheet is the interrupt vector locations.\nI have been poking at this for ages, and I can't seem to understand how this is actually translated to the MCU. For one thing, the addresses all increment in 16 byte increments, despite the fact that there is only 12 bytes of data in that line. \nIf anyone can make any sense out of this, I feel like I am at wit's end on this one.\nHere's the full file (42 KB)\nAnd here's some more hex if you don't feel like downloading the file:\n<pre><code>0C4210889FBE8A9FBE0105780100E077\n0C422004003508003C0000E0200032E3\n0C4230050037600010E0801802003B21\n0C424001F02C1A00370004BE6011B819\n0C42506B09200982CF0200390882CFE0\n0C42600441B06942520E003208003BDD\n0C42708281716101648904D10884D34B\n0C42808B05E80442E8F9FF3A0500371E\n0C429008044489844C8B05E90442E9D1\n0C42A0FBFF3A1B01070AF0A701F0A089\n0C42B04F05BE4F04BE000006889FBEF4\n0C42C08A9FBE8C1F783801073F013335\n0C42D003866C6450E12E00326420E193\n0C42E03300326150E12F00326120E118\n0C42F0310032858555EB07B009002035\n0C430008042005003708044489844CA0\n0C43100A003106034387834B00015371\n0C432081815BF8FF330203BE0800A09F\n0C433008044489844CF6FF39C639DDCE\n0C43408301730100321300208904D1B6\n0C43500884D30998A30500320800A7D8\n0C43600300A08904D10884D38B05E879\n0C43708904D10884D30001EB0281D243\n0C4380E4000701F0A10CF0A701F0A080\n0C43901701376420E11901320801BE5A\n0C43A00200BEF7FF376120E11401327B\n0C43B06000B8F3FF3700002001F82780\n0C43C0F0FF3704002010013703F0A2CA\n0C43D0889FBE8A9FBE8C1F78F30007F8\n0C43E0FA00336450E14F00326420E129\n0C43F052003203826C07003B0905D02C\n0C44000306D0820F540C065D02003948\n0C44100200328901780306788582558D\n0C442004003D0003FD8103FD8502EA5D\n0C44308B8542840F7202003B6000107C\n0C4440E080186011B80005EB7A28E15C\n0C44500A0039060078C75DDDF707B2EE\n0C44608780752D00378281710A017879\n0C44706105608180D10080D38502E9E5\n0C4480F9FF3B06044087844802003B23\n0C4490600414E0841C0988A3070032BB\n0C44A08A81718281716101648904D1FC\n0C44B00884D38B05E81700370978A3B7\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "420",
    "tags": [
        "binary-analysis",
        "firmware",
        "memory",
        "pic"
    ],
    "user": "user3397540",
    "time": "Jul 16, 2018 at 21:15",
    "comments": [],
    "answers_data": [
        {
            "content": "As you found, the binary format is similar to the Intelhex format, even if that is text.\nOne important thing to note is that the program space is addressed in 16 bit words, but stores only 24 bits of resulting 32 bit words. The topmost byte is a \"phantom byte\" as the documentation calls it. When read, it is always zero.\nAll \"records\" are 16 bytes long.\n\nThe first byte is the length of the data.\nThe next two bytes in big-endian are the byte address of the data. The actual address in the program space is only the half of this value, as each program space word is 16 bits wide.\nThere is no record type marker.\nThe actual data follow, as many as the first byte says. The values are in little-endian.  Since the program space stores only 24 bits, the phantom byte it is not included in the data.\nThe last byte is the checksum. You can look at it as the two's complement of the sum of the other bytes. But you could as well add it to this sum and the resulting byte shall be zero.\n\nThis is an example in details:\n<pre><code>0C4230050037600010E0801802003B21\n</code></pre>\n\nThe first byte is <pre><code>0C</code></pre>, meaning there are 12 data bytes.\nThe address is <pre><code>4230</code></pre>, giving an address of 0x4230 / 2 = 0x2118.\nThe data bytes are <pre><code>050037600010E0801802003B</code></pre>, resulting in 8 program space words: 0x0005, 0x37, 0x0060, 0x10, 0x80E0, 0x18, 0x0002, 0x3B. The instruction codes are 0x370005, 0x100060, 0x1880E0, 0x3B0002.\n<pre><code>21</code></pre> is the checksum, and 0x0C + 0x42 + ... + 0x21 gives 0x300. Check.\n\nThe linked complete file has few duplicate entries and some zero-data entries. Perhaps this comes from the build or conversion process.  However, it makes some sense.\nThis is part of the vector table:\n\n\n\nProgram flash address\nAddress in file\nData bytes\nProgram space value\nMeaning\n\n\n\n\n0x0004\n0x0008\n<pre><code>00 04 00</code></pre>\n0x000400\nReserved\n\n\n0x0006\n0x000c\n<pre><code>66 24 00</code></pre>\n0x002466\nOscillator Fail Trap Vector\n\n\n0x0008\n0x0010\n<pre><code>90 24 00</code></pre>\n0x002490\nAddress Error Trap Vector\n\n\n0x000a\n0x0014\n<pre><code>ba 24 00</code></pre>\n0x0024ba\nStack Error Trap Vector\n\n\n\nFor another plausibility check I disassembled (by hand using the Programmer's Reference Manual, there can be errors) the oscillator fail trap interrupt:\n\n\n\nProgram flash address\nAddress in file\nData bytes\nProgram space value\nAssembly code\n\n\n\n\n0x2466\n0x48cc\n<pre><code>36 00 f8</code></pre>\n0xf80036\npush RCOUNT\n\n\n0x2468\n0x48d0\n<pre><code>80 9f be</code></pre>\n0xbe9f80\npush.d w0\n\n\n0x246a\n0x48d4\n<pre><code>82 9f be</code></pre>\n0xbe9f82\npush.d w2\n\n\n0x246c\n0x48d8\n<pre><code>84 9f be</code></pre>\n0xbe9f84\npush.d w4\n\n\n0x246e\n0x48dc\n<pre><code>86 9f be</code></pre>\n0xbe9f86\npush.d w6\n\n\n0x2470\n0x48e0\n<pre><code>34 00 f8</code></pre>\n0xf80034\npush PSVPAG\n\n\n0x2472\n0x48e4\n<pre><code>00 c0 b3</code></pre>\n0xb3c000\nmov.b #0, w0\n\n\n0x2474\n0x48e8\n<pre><code>a0 01 88</code></pre>\n0x8801a0\nmov w0, PSVPAG\n\n\n0x2476\n0x48ec\n<pre><code>00 00 fa</code></pre>\n0xfa0000\nlnk #0\n\n\n0x2478\n0x48f0\n<pre><code>40 a7 a8</code></pre>\n0xa8a740\nbset 0x0740, #10\n\n\n0x247a\n0x48f4\n<pre><code>80 20 a9</code></pre>\n0xa92080\nbclr NSTDIS, #4\n\n\n0x247c\n0x48f8\n<pre><code>e0 02 20</code></pre>\n0x2002e0\nmov #0x002e, w0\n\n\n0x247e\n0x48fc\n<pre><code>17 01 07</code></pre>\n0x070117\nrcall 0x26ae\n\n\n0x2480\n0x4900\n<pre><code>00 80 fa</code></pre>\n0xfa8000\nulnk\n\n\n0x2482\n0x4904\n<pre><code>34 00 f9</code></pre>\n0xf90034\npop PSVPAG\n\n\n0x2484\n0x4908\n<pre><code>4f 03 be</code></pre>\n0xbe034f\npop.d w6\n\n\n0x2486\n0x490c\n<pre><code>4f 02 be</code></pre>\n0xbe024f\npop.d w4\n\n\n0x2488\n0x4910\n<pre><code>4f 01 be</code></pre>\n0xbe014f\npop.d w2\n\n\n0x248a\n0x4914\n<pre><code>4f 00 be</code></pre>\n0xbe004f\npop.d w0\n\n\n0x248c\n0x4918\n<pre><code>36 00 f9</code></pre>\n0xf90036\npop RCOUNT\n\n\n0x248e\n0x491c\n<pre><code>00 40 06</code></pre>\n0x064000\nretfie\n",
            "votes": "1",
            "user": "the busybee",
            "time": "Mar 5 at 13:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}