{
    "title": "How can I extract the structure of an operand with displacement in IDAPython?",
    "link": "https://reverseengineering.stackexchange.com/questions/14218/how-can-i-extract-the-structure-of-an-operand-with-displacement-in-idapython",
    "content": "Consider the following instruction:\n<pre><code>\n8D 8C 4E B0 2F FF FF  LEA    ECX, [ESI+ECX*2-0xD050]\n</code></pre>\nUsing IDAPython, how can I extract the structure of the second operand? I'd like to know things like:\n\n<pre><code>ESI</code></pre> is the base register\n<pre><code>ECX</code></pre> is the index register\n<pre><code>2</code></pre> is the index constant\n<pre><code>-0xD050</code></pre> is the displacement constant\n\nIts ok if I have to make a bunch of IDAPython API calls together. So far, I've had to resort to string parsing, and I'd really like to get rid of this.\n\nThe most relevant API function I've found is <pre><code>idautils.DecodeInstruction()</code></pre>, yet it doesn't seem to completely cover the structure of the second operand. See below for my exploration:\n<pre><code>i = idautils.DecodeInstruction(<ea from above>)\n\n# operand type\nassert i.Op2.type == idc.o_disp\n\n# operand value type\nassert i.Op2.dtyp == idc.dt_dword\n\n# operand flags\nassert i.Op2.flags == idc.OF_SHOW\n\n# structure of o_displ operand is like:\n#\n#    Memory Reg [Base Reg + Index Reg + Displacement].\n\ndef get_reg_const(reg):\n    '''\n    fetch register number from string name.\n    '''\n    ri = idaapi.reg_info_t()\n    idaapi.parse_reg_name(reg, ri)\n    return ri.reg\n\n# we probably expect to find these constants in the operand structure\nassert get_reg_const('ecx') == 1\nassert get_reg_const('esi') == 6\n\n# the operand structure\nassert unsigned2signed(i.Op2.addr)  ==  0xD050  # displacement\nassert i.Op2.n          == 1   # operand number\nassert i.Op2.phrase     == 4   # \"number of register phrase\", don't know what this means\nassert i.Op2.reg        == 4   # \"number of register\", don't see how this applies\nassert i.Op2.specflag1  == 1   # unknown interpretation, could be \"ecx\"!?!\nassert i.Op2.specflag2  == 78  # 0x4E, unknown interpretation\nassert i.Op2.specflag3  == 0   # probably empty\nassert i.Op2.specflag4  == 0   # probably empty\nassert i.Op2.specval    == 0x200000  # unknown interpretation\nassert i.Op2.value      == 0   # \"outer displacement\" (none here)\n</code></pre>\n",
    "votes": "6",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "x86",
        "idapython"
    ],
    "user": "Willi Ballenthin",
    "time": "Dec 21, 2016 at 18:41",
    "comments": [
        {
            "user": "Jongware",
            "text": "This answer to a similar question (although the question itself turned out to be a misunderstanding) suggests applying a regex to the entire string.\n",
            "time": null
        },
        {
            "user": "Willi Ballenthin",
            "text": "yeah, i would specifically like to avoid parsing string representations of the operands.\n",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "I found the following three API functions that might be relevant: <pre><code>get_op_tinfo2</code></pre>, <pre><code>get_operand_immvals</code></pre>, <pre><code>get_opinfo</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There doesn't seem to be an elegant solution to this. Looks like if you would be writing a plugin in C you would be able to call <pre><code>sib_base</code></pre>, <pre><code>sib_index</code></pre>, <pre><code>sib_scale</code></pre> to get the info.\nHere's how you could do it in Python.\n<pre><code>from idautils import DecodeInstruction\nfrom idaapi import get_reg_name\n\nea = 0x20AC5 # Assuming this ea is a lea\ni = DecodeInstruction(ea)\n\nhasSIB = i.Op2.specflag1\nsib = i.Op2.specflag2\n\nif hasSIB:\n    base = sib  & 7\n    index = (sib >> 3) & 7\n    scale = (sib >> 6) & 3\n    size = 4 if i.Op2.dtyp == idaapi.dt_dword else 8\n    print '[{} + {}{} + {:x}]'.format(\n        get_reg_name(base, size),\n        get_reg_name(index, size),\n        '*{}'.format(2**scale) if scale else '',\n        i.Op2.addr\n    )\n</code></pre>\nExample Output:\n<pre><code>[ebx + eax*4 + 8c]</code></pre>\n",
            "votes": "7",
            "user": "Jongware",
            "time": "Dec 31, 2016 at 21:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Willi Ballenthin",
                    "text": "<span class=\"comment-copy\">this is just what i was looking for, thanks!</span>",
                    "time": null
                }
            ]
        }
    ]
}