{
    "title": "Cannot trace an MS-DOS COM file",
    "link": "https://reverseengineering.stackexchange.com/questions/3113/cannot-trace-an-ms-dos-com-file",
    "content": "When debugging the following com file in MS-DOS, I can successfully run the program with <pre><code>-g</code></pre> and it terminates normally, but when I trace it <pre><code>-t 1000</code></pre>, the program throws an illegal operation exception and terminates after +/- 800 instructions.  I traced the file manually, but I cannot see why it aborts (it does write to some data to the lower memory regions, but that shouldn't affect the debugger).\nThe COM file can be found here.\nBoth MS Debug and the Freedos <pre><code>DEBUG.exe</code></pre> give the same results (albeit that they crash at a different point in the execution).  Both the WinXP virtual x86 environment and dosbox give the same results.\nAny thoughts on why this is happining?\nEDIT:\nA trace can be found in this pastebin.\nThis trace was made with Dosbox running the FreeDOS debugger using these software.\nI looked into the MASM code from the debugger: normally no INT3 should\nbe used for a single-step trace. Also note the fact that all the registers and flags are messed up.\n",
    "votes": "5",
    "answers": 1,
    "views": "628",
    "tags": [
        "debuggers",
        "dos-com"
    ],
    "user": "Johnny Cache",
    "time": "Dec 3, 2013 at 8:33",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "Paste a trace log.\n",
            "time": null
        },
        {
            "user": "user3271",
            "text": "Seeing that the error with which the debugger crashes depends on the debugger (crashes at different points during the execution), the most probable explanation would be that some part of the debugger got overwritten. But how exactly can I test that hypothesis? I can't put any page protection or anything in real mode.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "These instructions:\n<pre><code>6401.AX=0000 BX=0811 CX=0004 DX=0000 SP=FFF8 BP=0000 SI=8020 DI=8000\n6402.DS=F800 ES=F800 SS=06F1 CS=0811 IP=051F NV UP EI PL ZR NA PE NC\n6403.0811:051F F3AB              REP     STOSW\n6404.AX=0000 BX=0811 CX=0003 DX=0000 SP=FFF8 BP=0000 SI=8020 DI=8002\n6405.DS=F800 ES=F800 SS=06F1 CS=0811 IP=051F NV UP EI PL ZR NA PE NC\n6406.0811:051F F3AB              REP     STOSW\n6407.AX=0000 BX=0811 CX=0002 DX=0000 SP=FFF8 BP=0000 SI=8020 DI=8004\n6408.DS=F800 ES=F800 SS=06F1 CS=0811 IP=051F NV UP EI PL ZR NA PE NC\n6409.0811:051F F3AB              REP     STOSW\n</code></pre>\nare overwriting the interrupt table - specifically interrupt 0 and intending to write interrupt 1.  The Trace uses interrupt 1, so it is interrupting that write.  The next trace instruction that occurs after that last REP completes will trigger an interrupt using the partially overwritten new address instead of the debugger's one.\nThe effects are entirely unpredictable at that point.\nYou can't trace through this one automatically.  It will require some interaction from you.\n",
            "votes": "4",
            "user": "peter ferrie",
            "time": "Dec 1, 2013 at 5:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}