{
    "title": "Dissassembly when you have partial source?",
    "link": "https://reverseengineering.stackexchange.com/questions/10701/dissassembly-when-you-have-partial-source",
    "content": "So, as you may know, many android bootloaders are based on the Little Kernel project on codeaurora, and as such one could say you have partial source to most android bootloaders, typically in the firmware packages you can find on the vendor sites, minus the proprietary bits most vendors add instead of the standard open source fastboot protocol.\nWith this in mind, what would be the best method to approach this disassembly?\nI am currently working against the output of <pre><code>objdump -D</code></pre> on the binary and comparing that to the same output on the compiled object files from the little kernel build. There are a number of 1:1 matches, but there are some portions that, while apparently analogous, are not quite correct. One would assume this to be due to changes made by the company, but I can't be sure on this matter.\n",
    "votes": "2",
    "answers": 1,
    "views": "301",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "hanetzer",
    "time": "Aug 24, 2015 at 6:33",
    "comments": [],
    "answers_data": [
        {
            "content": "The linear sweep provided by <pre><code>objdump</code></pre> should do the job quite nicely with a small amount of work afterward. The reasons are:\n\nBootloaders are quite small and simple code requiring only small amount of external calls (even system calls are few). \nThis is ARM assembly code, which means that this is aligned-instructions. There is no way to confuse the disassembler by shifting one byte ahead the code.\nThere is no real obfuscation in these programs, except for small compiler tricks or a few optimization.\n\nSo, even if there will probably be some extra work afterward, most of the code should be recovered nicely with a simple linear sweep.\n",
            "votes": "1",
            "user": "perror",
            "time": "Aug 24, 2015 at 6:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "hanetzer",
                    "text": "<span class=\"comment-copy\">I'm more after techniques that can be used to ease reversing the objdump output into human readable code/psuedocode by avoiding known bits provided by the partial source</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">What would be the expected output then ? Could you be a bit more precise on what you expect at the end ?</span>",
                    "time": null
                },
                {
                    "user": "hanetzer",
                    "text": "<span class=\"comment-copy\">Say I have source for {a..w}.c, and I generate assembly for their object files, and I wish to compare them to the assembly output of the final binary to determine source (approximate) for x.c, y.c, and z.c added by the vendor. What would be the best way of determining which assembly code belongs to known source?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">If it was binary only diffs, I would have advised you to look at BinDiff (or similar tools), but here you want also a link to known source code which makes it a bit more complex (surprisingly because you have more information). I do not know any tool that help to track down a link between a binary and a base of source files... Yet, this is a very interesting problem...</span>",
                    "time": null
                },
                {
                    "user": "hanetzer",
                    "text": "<span class=\"comment-copy\">Perhaps I should cook up a tool myself, then</span>",
                    "time": null
                }
            ]
        }
    ]
}