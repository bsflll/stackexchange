{
    "title": "Help me find how the RFID copier writes the values in the tag",
    "link": "https://reverseengineering.stackexchange.com/questions/33250/help-me-find-how-the-rfid-copier-writes-the-values-in-the-tag",
    "content": "At first it may seems that it uses ascii but the values don't match.\nThe numbers 1-15 seem to written in the first nibble(without knowing what the rest bits mean)\nFor higher values i don't have a clue.\nThe data received seems to be correct because the header is always right.\nBefore the header and after the data received there are many zeros.\nI donâ€™t have any information on the RFID writer I use. Is a generic Chinese with no documentation. The tag is the EM4305. And the reader I use is based on EM4095 in read only config.\n\n\n\nData\nHeader\nWritten Value on Tag\n\n\n\n\n00000000 00110001\n0111111111\n0000000001\n\n\n00000000 01010010\n0111111111\n0000000002\n\n\n00000000 01100011\n0111111111\n0000000003\n\n\n00000000 10010100\n0111111111\n0000000004\n\n\n00000001 00101001\n0111111111\n0000000009\n\n\n00000001 01001010\n0111111111\n0000000010\n\n\n00000001 11101111\n0111111111\n0000000015\n\n\n00001100 01010001\n0111111111\n0000000050\n\n\n00010011 01111111\n0111111111\n0000000075\n\n\n00011000 01100101\n0111111111\n0000000099\n",
    "votes": "0",
    "answers": 1,
    "views": "54",
    "tags": [
        "encodings",
        "serial-communication",
        "protocol"
    ],
    "user": "arisk4",
    "time": "Oct 7, 2024 at 18:41",
    "comments": [
        {
            "user": "jsotola",
            "text": "when dealing with binary data, stop using decimal notation ... use hexadecimal or binary notation ... keep the decimal values only as comments\n",
            "time": null
        },
        {
            "user": "arisk4",
            "text": "@jsotola the decimals are just number I put to the RFID writer to write in the tag. The keypad has only decimals.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Investigating the values you show I assume this encoding, with bit numbered from 15 (the left most) to 0 (the right most).\n\nBits 15 and 14 are unknown. In your examples they are always zero. It could be an bit of the value and its parity.\nBits 13 to 10 are the bits 7 to 4 of the value.\nBit 9 is the parity bit for bits 13 to 10, making parity even.\nBits 8 to 5 are the bits 3 to 0 of the value.\nBit 4 is the parity bit for bits 8 to 5, making parity even.\nBits 3 to 0 are the XOR result of bits 13 to 10 and bits 8 to 5.\n\n\n\n\n15 & 14\n13 to 10\n9\n8 to 5\n4\n3 to 0\nbinary\ndecimal\n\n\n\n\n00\n0000\n0\n0001\n1\n0001\n00000001\n1\n\n\n00\n0000\n0\n0010\n1\n0010\n00000010\n2\n\n\n00\n0000\n0\n0011\n0\n0011\n00000011\n3\n\n\n00\n0000\n0\n0100\n1\n0100\n00000100\n4\n\n\n00\n0000\n0\n1001\n0\n1001\n00001001\n9\n\n\n00\n0000\n0\n1010\n0\n1010\n00001010\n10\n\n\n00\n0000\n0\n1111\n0\n1111\n00001111\n15\n\n\n00\n0011\n0\n0010\n1\n0001\n00110010\n50\n\n\n00\n0100\n1\n1011\n1\n1111\n01001011\n75\n\n\n00\n0110\n0\n0011\n0\n0101\n01100011\n99\n",
            "votes": "0",
            "user": "the busybee",
            "time": "Oct 7, 2024 at 12:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "arisk4",
                    "text": "<span class=\"comment-copy\">I think that make sense!!! the tags memory is 32 bits for each address, but I posted only the 16bits because the rest was zero. Ill do more tests with bigger numbers (the rfid copier can write up to 10 digits number). An interesting fact is that when I put 9999999999(10 digits of 9) it doesn't let me maybe it has something to do with the memory...</span>",
                    "time": null
                },
                {
                    "user": "the busybee",
                    "text": "<span class=\"comment-copy\">@arisk4 (32 bits - 4 XOR bits) / 5 bits per 4-bit data = 5 4-bit groups, giving you a maximum of 2^20 - 1 = 1048575. You might want to check that this value works, and 1048576 does not. You can try powers of 2 to find the actual usable width. -- If you extend your question with more and bigger values, I will extend my answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}