{
    "title": "GNU Assembler - Tricore - how to set origin?",
    "link": "https://reverseengineering.stackexchange.com/questions/14571/gnu-assembler-tricore-how-to-set-origin",
    "content": "I have a compiled Tricore binary that I am patching. By creating a .asm file from IDA Pro of a function and reformatting it, I can get it to reassemble faithfully apart from call (relative) and jump (relative) instructions. One of the reasons for going through this was so that the assembler would automatically recalculate the offsets from the program counter for the relative jumps and calls in the relocated code.\nThe failure is because the .org 0x80280000 is not working as I hoped and the a.out file has a base of 0x0 so the call and j are not reachable from that address. I do not want to alter the code to absolute calli. \nThis fails:\n<pre><code>.org 0x80280000\ncall 0x8027024C\nj    0x80292420\n</code></pre>\norgtest1.s: Assembler messages:\norgtest1.s:2: Error: Opcode/operand mismatch: call 0x8027024C\norgtest1.s:3: Error: Opcode/operand mismatch: j 0x80292420\nThis fails:\n<pre><code>call 0x8027024C\nj    0x80292420\n</code></pre>\norgtest1.s:1: Error: Opcode/operand mismatch: call 0x8027024C\norgtest1.s:2: Error: Opcode/operand mismatch: j 0x80292420\nThis succeeds:\n<pre><code>call 0x7024C\nj    0x92420\n</code></pre>\nThe problem is not that the instructions are illegal (and jumping to a lower address is legal), but that I cannot find a way to tell the assembler where the origin is.\nI do not know if this is expected behaviour from GNU AS? I am reading that it cannot calculate addresses lower than .org, and indeed if I set an .org of 0x8000 and call 0x2404 it ends up at 0xA404 so the call instruction is simply adding the displacement to the program counter and not calling an absolute address.\n",
    "votes": "3",
    "answers": 0,
    "views": "1k",
    "tags": [
        "assembly",
        "reassembly",
        "call"
    ],
    "user": "John Banks",
    "time": "Feb 4, 2017 at 23:10",
    "comments": [
        {
            "user": "julian",
            "text": "<pre><code>as</code></pre> assembles source code into relocatable object files. Relocation is performed by <pre><code>ld</code></pre> which links relocatable files into executable files like <pre><code>a.out</code></pre>. The base address of <pre><code>.text</code></pre> will be 0x0 until the assembled relocatable object file is linked, which is when relocation is performed and  <pre><code>ld</code></pre> sets the program entry point to a memory address like 0x80280000.\n",
            "time": null
        },
        {
            "user": "John Banks",
            "text": "Thanks SYS_V. I think this will be a limitation for my use case. I think I will end up moving binary blobs and fixing the call and jump targets at the hex level, rather than putting the assembly into my project to be reassembled. I just thought the reassembly route could be more elegant. I have a demo of Tasking I can try, but although it says it is Aurix only, the command line tools seem to have switches to get it to stick to Tricore 1.3 instruction set. I would prefer to use one toolchain, but will report back any success with this method.\n",
            "time": null
        }
    ],
    "answers_data": []
}