{
    "title": "Read and write to register with Frida",
    "link": "https://reverseengineering.stackexchange.com/questions/27925/read-and-write-to-register-with-frida",
    "content": "I have an instruction that looks like this in Ghidra:\n<pre><code>       100168ff0 e9 13 00 32     orr        w9,wzr,#0x1f\n</code></pre>\nUsing <pre><code>lldb</code></pre> I can set a breakpoint on the instruction after this, read <pre><code>w9</code></pre> to confirm what value it is storing and modify it if needs be.\nI am trying to do something similar with Frida with the following script:\n<pre><code>var t_module = 'testApp';\nvar loadAddress = Module.getBaseAddress(t_module);\nvar instructionOffset = ptr(0x168ff4);\n\nvar toAtt = loadAddress.add(instructionOffset);\n\nInterceptor.attach(toAtt, {\n    onEnter: function(args) {\n        console.log(\"[+] Module base address found at \" + loadAddress)\n        console.log(\"[+] Found instruction at \" + toAtt)\n        console.log(\"[+] Attempting to read w9: \" + this.context.w9)\n    }\n});\n</code></pre>\nhowever trying to read <pre><code>w9</code></pre> just returns <pre><code>undefined</code></pre>.  It is defined here so is not that Frida is calling it something else.\nI can confirm the right address is being reached using:\n<pre><code>Memory.readByteArray(ptr(\"0x102ab4ff0\"),4)\n</code></pre>\nwhere <pre><code>0x102ab4ff0</code></pre> is the address printed by the script, and comparing it to the instruction at the beginning from Ghidra.\nI'm not sure if I've misunderstood something about Frida or where I should attach. This is the closest question I could find and that just says to use <pre><code>this.context.eax</code></pre>.\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ios",
        "register",
        "frida",
        "arm64",
        "aarch64"
    ],
    "user": "Jon",
    "time": "Jul 1, 2021 at 11:48",
    "comments": [
        {
            "user": "James W.",
            "text": "did you see any of your logs from <pre><code>onEnter</code></pre>? ( also, you don't need to <pre><code>.add</code></pre> a <pre><code>ptr</code></pre>, you can just add the offset using <pre><code>.add(0x11)</code></pre>. there is no <pre><code>eax</code></pre> in arm64 ) to answer your question please print <pre><code>console.log(JSON.stringify(this.context))</code></pre>\n",
            "time": null
        },
        {
            "user": "Jon",
            "text": "Thank you very much @whoopdedoo! This suggestion helped me work out the problem.  The comment about eax was more to illustrate that that was what I understood to be the correct way to address a register as opposed to eax being used by arm64, I am a complete RE n00b though so it was a fair assumption to make.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The issue was that <pre><code>w9</code></pre> is a 32-bit register and I was using a 64 bit device.  By calling <pre><code>this.context.x9</code></pre> for the 64 bit register the Frida script worked perfectly.  Many thanks to @whoopdedoo, their suggestion to log <pre><code>this.context</code></pre> was what led me to search more about ARM registers and realise my mistake.\n",
            "votes": "1",
            "user": "Jon",
            "time": "Sep 10, 2021 at 15:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}