{
    "title": "Can Windbg trace function calls within a module?",
    "link": "https://reverseengineering.stackexchange.com/questions/12778/can-windbg-trace-function-calls-within-a-module",
    "content": "I want to log any functions within a specific module that are called during an execution. \nI tried !for_each_function and wt command. However, since the target module doesn't have any symbols, !for_each_function cannot recognize any functions. wt command seems only able to trace with one function.\nI know IDA debugger can trace function calls. But my current problem is that I only want to trace the functions in a specific module. I'm not sure if IDA can do that. Also I'm wondering if IDA debugger can break on module load (similar to 'sxe ld:modulename' in windbg..\nI actually just need the address of all the function that are called. I was thinking if there is any way to set breakpoint on all RET within a module...But haven't figure out how to do that ...\n",
    "votes": "6",
    "answers": 1,
    "views": "5k",
    "tags": [
        "windbg"
    ],
    "user": "user15580",
    "time": "Jun 2, 2016 at 3:00",
    "comments": [],
    "answers_data": [
        {
            "content": "opening calc.exe in windbg \n<pre><code>windbg calc    \n</code></pre>\nskipping all the ldrint system calls \n<pre><code>bp calc!WinMain ; g    \n</code></pre>\ntracing only calc module from eip to some specific address and printing the return values\n(please note using arbitrary values as EndAddress may possibly corrupt the \ncode by inserting 0xcc in middle of instruction )  \n<pre><code>0:000> wt -l 2 -oR -m calc =@eip @eip+5fa   \n</code></pre>\ntrace result with return values (trimmed )\n<pre><code>   30     0 [  0] calc!WinMain\n    5     0 [  1]   kernel32!GetModuleHandleWStub\n    1     0 [  1]   kernel32!GetModuleHandleW\n   11     0 [  1]   KERNELBASE!GetModuleHandleW eax = b40000\n   32    17 [  0] calc!WinMain\n   11     0 [  1]   USER32!LoadStringW eax = a\n   36    28 [  0] calc!WinMain\n    3     0 [  1]   calc!CCalculatorSQM::onAppEntry\n    5     0 [  2]     msvcrt!time\n   24     0 [  2]     msvcrt!_time32 eax = 574fd43e\n    5    29 [  1]   calc!CCalculatorSQM::onAppEntry eax = 574fd43e\n   41    62 [  0] calc!WinMain\n   12     0 [  1]   calc!McGenEventRegister\n   38     0 [  2]     ntdll!EtwEventRegister eax = 0\n   14    38 [  1]   calc!McGenEventRegister eax = 0\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n  364 12901 [  0] calc!WinMain\n   24     0 [  1]   USER32!GetMessageW eax = 1\n  372 12925 [  0] calc!WinMain\n   21     0 [  1]   USER32!TranslateAcceleratorW eax = 0\n  378 12946 [  0] calc!WinMain\n   19     0 [  1]   calc!CContainer::HandleGlobalTabbing eax = 0\n  382 12965 [  0] calc!WinMain\n\n13347 instructions were executed in 13346 events (0 from other threads)\n</code></pre>\nsummary and wt broke where instructed\n<pre><code>ole32!CoInitialize                                    1       8       8       8\noleacc!ATL::CComObject<CPropMgr>::Release             1      16      16      16\noleacc!CPropMgr::SetHwndPropStr                       5      66      66      66\n\n0 system calls were executed\n\neax=000cf030 ebx=00000000 ecx=00b94210 edx=76f070b4 esi=00b94210 edi=766e667e\neip=00b41c2f esp=000cef5c ebp=000cfcc4 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246\ncalc!WinMain+0x7d5:\n00b41c2f e8e2010000      call    calc!CEditBoxInput::HandleWinMainMessage (00b41e16)\n0:000> ? calc!WinMain+5fa\n\nnote eip expression and EndAddress in wt command \n    Evaluate expression: 11803695 = 00b41c2f\n</code></pre>\n",
            "votes": "5",
            "user": "blabb",
            "time": "Jun 2, 2016 at 6:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}