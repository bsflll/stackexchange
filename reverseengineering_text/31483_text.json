{
    "title": "Weird anti-debugging mechanism",
    "link": "https://reverseengineering.stackexchange.com/questions/31483/weird-anti-debugging-mechanism",
    "content": "I am trying to grasp an anti-debugging trick used in this program. Upon attaching any debugger (x64dbg, VEH debugger) the software crashes after about 2 seconds.\nx64dbg shows me that the following instruction causes an exception:\n\nAfter stepping over it, control immediately transfers to <pre><code>ntdll._KiUserExceptionDispatcher</code></pre>, calling some vectored exception handler, which eventually ends up executing <pre><code>int 0x29</code></pre> (KiRaiseSecurityFailure), crashing the program.\nThe log shows the following information regarding the exception\n<pre><code>EXCEPTION_DEBUG_INFO:\n           dwFirstChance: 1\n           ExceptionCode: C0000005 (EXCEPTION_ACCESS_VIOLATION)\n          ExceptionFlags: 00000000\n        ExceptionAddress: 16B224E1\n        NumberParameters: 2\nExceptionInformation[00]: 00000000 Read\nExceptionInformation[01]: 00000000 Inaccessible Address\n</code></pre>\nThis subroutine is referenced exactly once where it is getting pushed:\n<pre><code>16B22405 | 50                             | push eax                                                                       |\n16B22406 | 6A 00                          | push 0                                                                         |\n16B22408 | 56                             | push esi                                                                       |\n16B22409 | 68 C024B216                    | push <sub_16B224C0>       // HERE                                              |\n16B2240E | 6A 00                          | push 0                                                                         |\n16B22410 | 6A 00                          | push 0                                                                         |\n16B22412 | E8 4CF92800                    | call <sub_16DB1D63>                                                            |\n</code></pre>\nLooking into <pre><code>sub_16DB1D63</code></pre> it is used here (ebp+10h):\n<pre><code>16DB1D84 | 56                             | push esi                                                                       |\n16DB1D85 | FF75 14                        | push dword ptr ss:[ebp+14]                                                     | [ebp+14]:sub_16DB1E7B\n16DB1D88 | FF75 10                        | push dword ptr ss:[ebp+10]                                                     | [ebp+10]:sub_16DB1E7B\n16DB1D8B | E8 64000000                    | call <sub_16DB1DF4>                                                            |\n</code></pre>\nNow it gets weird... This subroutine apparently calls <pre><code>GetModuleHandleExW</code></pre>:\n<pre><code>16DB1E19 | 8B4D 08                        | mov ecx,dword ptr ss:[ebp+8]                                                   |\n16DB1E1C | 8B45 0C                        | mov eax,dword ptr ss:[ebp+C]                                                   |\n16DB1E1F | 890E                           | mov dword ptr ds:[esi],ecx                                                     |\n16DB1E21 | 8946 04                        | mov dword ptr ds:[esi+4],eax                                                   |\n16DB1E24 | 8D46 0C                        | lea eax,dword ptr ds:[esi+C]                                                   |\n16DB1E27 | 50                             | push eax                                                                       |\n16DB1E28 | 51                             | push ecx                                                                       |\n16DB1E29 | 6A 04                          | push 4                                                                         |\n16DB1E2B | FF15 803DE316                  | call dword ptr ds:[<sub_16E33D80>]    // GetModuleHandleExW stub               |\n</code></pre>\nSo it is passing a function address as the module name? Any ideas what kind of black magic this might be?\nAlso in general, what are some ways to trace back such exceptions to their origins? Since vectored exception handlers are registered globally (process-wide), I can't really figure out which instruction exactly caused it (looking at the call stack, there are no suspicious instructions/threads).\nSome more info: I tried several user-mode anti-anti-debugging plugins such as ScyllaHide & TitanHide. Same result. Passing all exceptions to the debuggee does not help either, although I am pretty sure this is an exception-based anti-debug mechanism.\nEdit: Stupid me should have looked at the docs. Apparently, if you pass ˋGET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS (0x00000004)ˋ, then passing in any address as the module name parameter will also get the module handle. I still have no idea why this is done, though.\n",
    "votes": "3",
    "answers": 0,
    "views": "374",
    "tags": [
        "anti-debugging"
    ],
    "user": "millionmilesaway",
    "time": "Jan 28, 2023 at 23:04",
    "comments": [
        {
            "user": "blabb",
            "text": "iirc thevfirst 64 k 0 to 0c10000 is not mapoed in any process va accessing ds:[0] will result in 0xc0000005  so you may need yo find the veh handler or seh hsndler and look at it  jmp eac slso will point to null so this is dead end\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "If attaching the debugger triggers a crash soon afterwards, it's likely that the debugger is being detected and that the crash is intentional, and possibly this code is executed only in that case.\n",
            "time": null
        }
    ],
    "answers_data": []
}