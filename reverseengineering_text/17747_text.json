{
    "title": "How to force IDA pro to list some bytes as a specified instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/17747/how-to-force-ida-pro-to-list-some-bytes-as-a-specified-instruction",
    "content": "Please first read this My previous question, and then continue the following:\n****\nThe binary file size loaded into IDA is 0x1e400 = 123k, and when I try to only change the \"Loading address\" to 0x2000000, IDA throws this error: \"The loading address should belong to RAM or ROM\"\n\nIf I check the \"Create RAM Section\" and set the RAM size to 0x2000000, and set the \"ROM start address\" to 0x2000000, IDA detects most of the string references and function calls correctly but new problems arises:\n\nIDA saves the work in a 2GB file which makes saving/loading slow.\nSome references won't be detected correctly (when address fields does not have the 0x2000000). \n(More important problem) IDA doesn't detect some instructions where before IDA was able to detect them correctly) and the bad thing is that IDA gives error when I try to convert them to instruction using MakeCode command.\n\nHow can I manually add those undetected instructions into instructions.\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "idapython",
        "idapro-sdk"
    ],
    "user": "Gholi GholiZade",
    "time": "Mar 20, 2018 at 19:31",
    "comments": [],
    "answers_data": [
        {
            "content": "I was the one who advised you to change the loading offset. It sounds like weird stuff is happening as a result of the way you loaded the binary into IDA. I've had similar weird issues before when dealing with segments and loading addresses. Hopefully getting the segmentation working properly will resolve the issues with references/ability to define code.\nThere are a couple of similar, yet different methods you can use, most of them on the <pre><code>Edit->Segments</code></pre> submenu. The first thing I'd try would be loading the program at base address <pre><code>0x0</code></pre> like you did originally, then trying <pre><code>Edit->Segments->Rebase Program</code></pre>. If that didn't work, I'd try <pre><code>Edit->Segments->Move Current Segment</code></pre>, or <pre><code>Edit->Segments->Edit Segment</code></pre>.\n",
            "votes": "0",
            "user": "Rolf Rolles",
            "time": "Mar 20, 2018 at 21:43",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Gholi GholiZade",
                    "text": "<span class=\"comment-copy\">Hello, Thanks, It worked by Rebasing the segments.</span>",
                    "time": null
                }
            ]
        }
    ]
}