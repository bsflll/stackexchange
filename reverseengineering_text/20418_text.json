{
    "title": "How to identify if buffer allocate on stack or heap?",
    "link": "https://reverseengineering.stackexchange.com/questions/20418/how-to-identify-if-buffer-allocate-on-stack-or-heap",
    "content": "When I looking on Ida with static analyze I see that buffer pass to function/ function fill data in buffer.\nHow can I know if this buffer allocate in stack/ heap?\n",
    "votes": "1",
    "answers": 2,
    "views": "850",
    "tags": [
        "ida",
        "stack",
        "heap"
    ],
    "user": "Keystone",
    "time": "Jan 19, 2019 at 19:57",
    "comments": [],
    "answers_data": [
        {
            "content": "If it's address is above or equal to the stack pointer (esp/rsp), it's on the stack\notherwise, it's on the heap or was on a previous stack-frame (and now is out of scope and should not be used)\nIf you want to know but just looking at the address: if the address starts with <pre><code>0x7f</code></pre>, it's on the stack.\nThat might not always be right though, a program can control the value of the stack pointer and can decide to change it (not likely but feasible)\n",
            "votes": "1",
            "user": null,
            "time": "Jan 19, 2019 at 18:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Keystone",
                    "text": "<span class=\"comment-copy\">thank you ,but I talking about static analyze</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you want to find out statically, you have to inspect the call site to your function and see where the buffer argument comes from.\nYou may have to go back multiple layers until you either clearly see it's on the stack (if the address of a local memory area is passed in), or it comes from a call like <pre><code>VirtualAlloc</code></pre>, <pre><code>malloc</code></pre>, <pre><code>new</code></pre>, <pre><code>HeapAlloc</code></pre> (VirtualAlloc and HeapAlloc being Windows-specific APIs), in which case the memory is located on the heap.\n",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Feb 20, 2019 at 0:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">Heapalloc calls VirtualAlloc if allocation request size is greater than a threshold level (iirc requests &gt;512 KB) and  heapAlloc doesn't require a system call as it allocates within a preallocated heap area  virtualalloc transitions from umode to kmode for allocation and it allocation is of page level granularity so a virtual alloced memory isnt traceable in !heap algos</span>",
                    "time": null
                }
            ]
        }
    ]
}