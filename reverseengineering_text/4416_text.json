{
    "title": "Transforming an assembly line into C",
    "link": "https://reverseengineering.stackexchange.com/questions/4416/transforming-an-assembly-line-into-c",
    "content": "When I see the assembly line:\n<pre><code> MOV ESI, DWORD PTR DS:[EBP+0x8]\n</code></pre>\nAnd, when Ollydbg shows me that <pre><code>[EBP+0x8] = 00000000</code></pre>, then can I write it in C like this:\n<pre><code> int *esi = NULL;\n</code></pre>\nOr, should I use the stack address <pre><code>EBP + 0x8</code></pre> which is <pre><code>0x0012FF43</code></pre> and write something like:\n<pre><code> int *esi = &0012FF43\n</code></pre>\nI would say that the first is the right answer, but I am very confused about that.\n",
    "votes": "4",
    "answers": 5,
    "views": "569",
    "tags": [
        "assembly",
        "c"
    ],
    "user": "user3097712",
    "time": "May 31, 2014 at 11:09",
    "comments": [],
    "answers_data": [
        {
            "content": "Brackets mean 'contents of'... so it would be more like:\n<pre><code>int esi = 0;\n</code></pre>\n-or-\n<pre><code>int esi = *(ebp+8); /* assuming ebp is correct */\n</code></pre>\n-or-\n<pre><code>int esi = (int)*(ebp+8); /* assuming ebp is (void*) or (char*)\n                            we need to pull 4 bytes to get value */\n</code></pre>\nI would hope that <pre><code>(EBP+0x8)</code></pre> would not be <pre><code>0x12FF43</code></pre>, as the stack pointer is supposed to be aligned to 4 or 8 byte addresses (4 for 32bit cpu's, 8 for 64bit, generally 16 byte aligned in 64bit though).\nOdd to see a <pre><code>DS:</code></pre> modifier for the EBP register, as it's usually <pre><code>SS:</code></pre>, only works well if <pre><code>DS=SS</code></pre>, or both are <pre><code>0</code></pre>.  Nitpicky, but you have to be when playing that close to the metal.\n",
            "votes": "3",
            "user": "lornix",
            "time": "May 23, 2014 at 4:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lornix",
                    "text": "<span class=\"comment-copy\">Yes, can use EBP with DS:, just odd to see it used in a non-stack setting.  It's so very often used to set up a stack frame in functions, sometimes forget it's a regular full register.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">It's pretty common to not have a frame pointer and use EBP as a general purpose register. After all, ia32 is extremely register starved. Btw pointer arithmetic on void pointers is illegal so the (void *) case up there would not work and the (char *) case would simply read a char and cast to int so it would be incorrect. You need to cast to (int *) before reading the value but add to a (char *). It might also be interesting to note that if the second translation of the assembly to C was correct you'd be very likely to see a LEA instruction instead of a MOV.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<pre><code>[EBX+8]</code></pre> is the second <pre><code>dword</code></pre> variable of this stack frame. If it's being put in <pre><code>esi</code></pre> it's probably a pointer operation so maybe <pre><code>memcpy(dest,src,0x100)</code></pre> would include that line if <pre><code>src</code></pre> was set to <pre><code>NULL</code></pre> after being declared \n<pre><code>char *src = argument;</code></pre>.\nThat's the most realistic as you don't generally access esi directly from C.\nOf course in my example, <pre><code>memcpy</code></pre> would segfault when <pre><code>NULL</code></pre> was dereferenced.\n",
            "votes": "2",
            "user": "perror",
            "time": "May 31, 2014 at 11:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "offbyseveral",
                    "text": "<span class=\"comment-copy\"><a href=\"http://stackoverflow.com/questions/1856320/purpose-of-esi-edi-registers\" title=\"purpose of esi edi registers\">stackoverflow.com/questions/1856320/â€¦</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I think there is a misunderstand here. <pre><code>ESI</code></pre> is a register not a variable, so:\n<pre><code>int *esi = NULL;\n</code></pre>\nIf you want to assign value to <pre><code>esi</code></pre> in C, you should use the inline assembly brackets <pre><code>asm {}</code></pre>.\nAlso, usually in OllyDbg <pre><code>MOV ESI, DWORD PTR DS:[EBP+0x8]</code></pre> line appears at the beginning of functions like that:\n<pre><code>push ebp\nmov ebp, esp\npush esi\nmov esi, [ebp +8]\n...\n</code></pre>\nThat means <pre><code>esi</code></pre> will get the pointer of first argument of function. So, to write your line in C language, you should write a function with at least one parameter. The first parameters you pass to this functions will be value of <pre><code>esi</code></pre>.\n",
            "votes": "1",
            "user": "perror",
            "time": "Jun 3, 2014 at 14:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<pre><code>MOV ESI, DWORD PTR DS:[EBP+0x8]</code></pre>\nLoad 4 bytes from <pre><code>EBP+0x8</code></pre> into <pre><code>ESI</code></pre>.\n<pre><code>ESI</code></pre> does not become a pointer unless <pre><code>[EBP+0x8]</code></pre> holds an address, so without knowing that, you cant really know if you should set <pre><code>ESI</code></pre> to <pre><code>NULL</code></pre>.\nIts helpful while reading assembly to translate each line into C but sometimes you need to understand what types are used in the rest of the code to convert it correctly.\n",
            "votes": "1",
            "user": "perror",
            "time": "Jun 3, 2014 at 14:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "let's say for example:\n<pre><code>EBP = 00100000</code></pre>\nthen:\n<pre><code>EBP+8 = 00100008</code></pre>\nthen the code become:\n<pre><code>MOV ESI, DWORD PTR DS:[00100008]</code></pre>\nthis means copy to the register <pre><code>ESI</code></pre> the dword that located in the address <pre><code>00100008</code></pre>\nso you could write <pre><code>MOV ESI, DWORD PTR DS:[00100008]</code></pre> in c as:\n<pre><code>int esi = *0x00100008;</code></pre>\n",
            "votes": "0",
            "user": "dieSdiesneB",
            "time": "Aug 22, 2016 at 16:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}