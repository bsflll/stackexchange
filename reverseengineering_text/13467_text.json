{
    "title": "VirtualProtect return value",
    "link": "https://reverseengineering.stackexchange.com/questions/13467/virtualprotect-return-value",
    "content": "VirtualProtect is straightforward but I get some results that I can't explain. Something's going on in the background probably but I'd like to know what.\nThe following is under Windows 7 SP1 Ultimate x64, using a DLL compiled for Windows 10 by VS 2015. The DLL modifies some other DLL in memory.\nThe result DLL was working fine under Win 7 but it was crashing under Win 10 (no dump produced). So I started following the code in case it was something obvious.\nThe code that looked strange, is the following (in pseudocode):\n<pre><code>if (VirtualProtect(BaseAddr, BaseSize, PAGE_EXECUTE_READWRITE, &dwProtect) == 0)\n        {\n            GetLastError());\n            goto _exit;\n        }\n</code></pre>\nAt this point, the new protection should be 0x40 (PAGE_EXECUTE_READWRITE).\nThe current protection that comes back in dwProtect is 0x2 (PAGE_READONLY).\n...some more code here that writes data in the modified memory block...\n<pre><code>_exit:\nif (VirtualProtect(BaseAddr, BaseSize, PAGE_EXECUTE_READWRITE, &dwProtect) == 0)\n            {\n                GetLastError());\n            }\n</code></pre>\nAt this point, the dwProtect gets the value 0x80  !! Why? Shouldn't it be 0x40 ?\nIf on the second call I try to restore the original value (0x2) by passing the saved dwProtect, it still doesn't return 0x40. (I think it returned 0x4).\nI even tried setting it to 0x80 on the first call. It came back the same (0x80). It didn't double it but the DLL would crash.\nThe question is, why on the second call, it doesn't return back the value I set it to on the first call.\nThanks in advance for any clarification.\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "memory",
        "exploit",
        "patching"
    ],
    "user": "kanenas",
    "time": "Sep 8, 2016 at 17:48",
    "comments": [],
    "answers_data": [
        {
            "content": "This seems to be working as intended.\nFlag 0x80 is PAGE_EXECUTE_WRITECOPY. You can look it up in msdn.\n\nIf a memory page with the \"PAGE_EXECUTE_READWRITE\" access protection attributes is requested from the OS, then a page with the \"PAGE_EXECUTE_WRITECOPY\" attributes, not the \"PAGE_EXECUTE_READWRITE\" attributes is given.\nThe reason for that behavior is so simple, that is, the OS memory manager wants to physically share the page between all the process instances (since it is guaranteed to be the same in all the process instances before any write).\n\nFind the full source here, copyright to Walied Assar\n",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "kanenas",
                    "text": "<span class=\"comment-copy\">Thank you much. Good to know. I had started doubting what I was seeing :)</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">No problem ;) Accept it, if you like it</span>",
                    "time": null
                }
            ]
        }
    ]
}