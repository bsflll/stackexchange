{
    "title": "What does this combination SCAS and STOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/9439/what-does-this-combination-scas-and-stos",
    "content": "I have a simple snippet with several instructions:\n<pre><code>01:    mov   edi, [ebp+8]\n02:    mov   edx, edi\n03:    xor   eax, eax\n04:    or    ecx, 0FFFFFFFFh\n05:    repne scasb\n06:    add   ecx, 2\n07:    neg   ecx\n08:    mov   al, [ebp+0Ch]\n09:    mov   edi, edx\n10:    rep   stosb\n11:    mov   eax, edx\n</code></pre>\nI should explain:\n\n1.What is the type of the <pre><code>[ebp+8]</code></pre> in line <pre><code>01</code></pre> and <pre><code>[ebp+C]</code></pre>  in\n  line <pre><code>08</code></pre>, respectively.\n2.What this code does?\n\n\nLine <pre><code>01</code></pre> is something like <pre><code>edi = *(ebp+8)</code></pre>, it stores destination address, not sure. But i can't explain line <pre><code>08</code></pre>\nBy following the <pre><code>intel</code></pre> manual <pre><code>SCASB (scan byte string)</code></pre> i assume what this code does initialize a buffer for the string, repeatedly writes <pre><code>0</code></pre> byte <pre><code>eax</code></pre> times, then assign <pre><code>al</code></pre> to <pre><code>edi</code></pre>.\n",
    "votes": "2",
    "answers": 2,
    "views": "822",
    "tags": [
        "assembly",
        "x86",
        "decompile"
    ],
    "user": "Roman Kiselenko",
    "time": "Jul 25, 2015 at 16:36",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>ebp</code></pre> points to the stack, which is where function parameters are stored. <pre><code>ebp+8</code></pre> is your first parameter, and <pre><code>ebp+0C</code></pre> the second one.\nThe first parameter is a pointer to a 0-terminated string, and gets loaded into <pre><code>edi</code></pre>.\nThe <pre><code>repne scasb</code></pre> instruction will increment <pre><code>edi</code></pre>, and decrement <pre><code>ecx</code></pre>, until either <pre><code>ecx</code></pre> is zero or <pre><code>edi</code></pre> points to a byte that is equal to the one in <pre><code>al</code></pre> - 0 in your case, so this scans for the end of a C string.\nAdding 2 to <pre><code>ecx</code></pre>, then negating it, will make it equal to the string length. Try it out yourself on paper with an example or two.\n<pre><code>eax</code></pre> gets the second pararmeter of the function, from <pre><code>ebp+0C</code></pre>.\nThe string (the address of the string has been saved in <pre><code>edx</code></pre> and is back in <pre><code>edi</code></pre>) gets overwritten with the byte in <pre><code>al</code></pre> - your second function parameter.\n\nSo what this function does is overwrite a null-terminated string of unknown length (parameter 1) with a sequence of identical bytes (parameter 2).\n",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Jul 25, 2015 at 8:56",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "emulating the sequence with powershell\n<pre><code>cat scasb.ps1\n$edx=$edi=$args[0];  $eax=0; $ecx=-1;\nwhile($edi[$ecx--]){}; $ecx+=2;  $ecx=-$ecx;\n\"length of string using .net method \"+$edi.length;\n\"length of string using repne scasb \"+$ecx;\n$edi=$edx.tochararray()\nwhile($ecx){$edi[--$ecx]=$args[1]};  $ofs=\"\"; $edx;[string]$edi\n</code></pre>\nresult\n<pre><code>powershell -f scasb.ps1 \"abracadabra gili gili choo\" r\nlength of string using .net method 26\nlength of string using repne scasb 26\nabracadabra gili gili choo\nrrrrrrrrrrrrrrrrrrrrrrrrrr\n</code></pre>\n",
            "votes": "0",
            "user": "blabb",
            "time": "Jul 27, 2015 at 14:06",
            "is_accepted": false,
            "comments": []
        }
    ]
}