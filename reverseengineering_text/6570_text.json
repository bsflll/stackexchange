{
    "title": "Using GDB to look at stack",
    "link": "https://reverseengineering.stackexchange.com/questions/6570/using-gdb-to-look-at-stack",
    "content": "I'm not experienced with GDB, and trying to examine an executable. I want to find the value of <pre><code>%eax</code></pre> at certain times, and whether it's ever <pre><code>called</code></pre> or <pre><code>jumped</code></pre>.\nI was only given the executable, and it doesn't have any breakpoints.\nIf I enter <pre><code>run</code></pre>, the program runs and then finishes, and no commands workâ€”I get \"No symbol table is loaded\" and \"No registers.\"\nDissembling the executable (<pre><code>objdump -d</code></pre>) doesn't help, the result is 130,000 lines long.\nHow can I do this analysis?\nUpdate: I used PEDA successfully; I set breakpoints at the functions and stepped through the program using <pre><code>next</code></pre>.\n",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "exploit",
        "assembly"
    ],
    "user": "LonelyWebCrawler",
    "time": "Nov 5, 2014 at 3:41",
    "comments": [],
    "answers_data": [
        {
            "content": "First, you really need to set a breakpoint somewhere if you want <pre><code>gdb</code></pre> to stop before the program end.\nThen, you should really try to use <pre><code>peda</code></pre>, a set of configuration and Python scripts for <pre><code>gdb</code></pre> designed for reverse-engineering software.\nTake a look at:\n\nThe official page\nThe Github page\nSlides from BlackHat'12\n",
            "votes": "3",
            "user": "perror",
            "time": "Nov 3, 2014 at 11:57",
            "is_accepted": true,
            "comments": [
                {
                    "user": "LonelyWebCrawler",
                    "text": "<span class=\"comment-copy\">Thanks, I'll try it. But does it help with my problem?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">In fact, yes. Because the stack of the current process is displayed by <code>peda</code> (look at the <code>stack</code> section of the display). And, in fact, each time you hit the <code>nexti</code> or <code>stepi</code> function, the new stack is displayed. So, I guess this is exactly you are looking for.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I re-read your question, and it seems that you did not set a breakpoint at all. You have to understand that setting a first breakpoint should be prior to the <code>run</code> command. Because, if you don't, you will never be given the opportunity to interact with <code>gdb</code> and your program.</span>",
                    "time": null
                },
                {
                    "user": "LonelyWebCrawler",
                    "text": "<span class=\"comment-copy\">Unfortunately I can't add any break points. Do you think it's feasible to dissemble the program and then execute the assembly line by line? Is that possible?</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">What do you mean by \"I can't add any breakpoint?\"... If you can start a PTRACE, you should be able to do so... Try to get the entrypoint through <code>info files</code>, then set a breakpoint on it.</span>",
                    "time": null
                }
            ]
        }
    ]
}