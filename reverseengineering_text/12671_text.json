{
    "title": "Win32 x86 prologue disassembly",
    "link": "https://reverseengineering.stackexchange.com/questions/12671/win32-x86-prologue-disassembly",
    "content": "I have the following disassembly of a function prologue with comments. I'm unclear on what the author means in this line of disassembly \"lea edi,[ebp-0xcc]  ; getting the lowest address of stack frame\". Dumping the headers of the executable I see the following in the OPTIONAL HEADER VALUES: 100000 size of stack reserve 1000. Windows Threads default stack size is 1MB so I'm believe the values from dumpbin are in units of Kilo.\nCan you please clarify this statement:\nlea edi,[ebp-0xcc]   ; getting the lowest address of stack frame\n<pre><code>push ebp            ; establishing stack frame \nmov ebp,esp         ; save stack pointer in ebp\nsub esp,0xcc        ; creating stack frame for local variables\npush ebx            ; saving registers that might be used\npush esi            ; outside\npush edi            ;                                     \nlea edi,[ebp-0xcc]  ; getting the lowest address of stack frame \nmov ecx,0x33        ; filling stack frame with 0xCC\nmov eax,0xcccccccc  ; \nrep stosd           ;\n</code></pre>\n",
    "votes": "3",
    "answers": 1,
    "views": "285",
    "tags": [
        "disassembly",
        "windows",
        "debugging",
        "windbg",
        "thread"
    ],
    "user": "dcrearer",
    "time": "Nov 29, 2022 at 7:08",
    "comments": [
        {
            "user": "dcrearer",
            "text": "After looking further at the disassemble I see where that sub esp,0xcc establishes space on the stack for locals. Hence the lea edi, ebp-0xcc. Saves the lowest stack address in edi.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "this doesnt have anything to do with stack size in pe header   \n<pre><code>assume  esp = 1200cc \nso ebp will also be 1200cc\nsub esp,0xcc  will make esp 120000   \nthe three pushes will alter esp but not ebp   \nso  edi will be 120000   after that operation   \necx = counter == 33  eax = 0xcccccccc \nso rep stosd will fill the space from 120000 to 1200cc with 0xcccccccc\n</code></pre>\nsimply put it is  memset(&ebp,0xcc,0xcc);\n",
            "votes": "1",
            "user": "blabb",
            "time": "May 17, 2016 at 18:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "dcrearer",
                    "text": "<span class=\"comment-copy\">thanks for the feedback. After looking at the disassembly in further depth. I was able to understand the sequence of instruction. I appreciate your input on this question.</span>",
                    "time": null
                }
            ]
        }
    ]
}