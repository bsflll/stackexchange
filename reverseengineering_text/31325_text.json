{
    "title": "Cannot find references to functions in vtables",
    "link": "https://reverseengineering.stackexchange.com/questions/31325/cannot-find-references-to-functions-in-vtables",
    "content": "First time doing RE work and I am working on a rather large C++ binary.\nIn Ghidra, there are many functions that do not appear to have any meaningful references to them (unlike some functions where there is a list of places where the function is called/branched to). I assume that these functions are virtual functions, and that the reference is in the vtable.\nHowever, I expect that a reference to the function should still be found in the vtable data, and I should be able to see where the function is called by looking for read accesses on the vtable field. But Ghidra does not show any reference to the function from anything that looks like a vtable.\nThe only references that Ghidra finds to these functions are a bunch of places called \"frame descriptor entry\" and \"LSDA call site record\", which I understand are to do with exception handling?\nThis is seriously frustrating. I'll be working on a function and then follow the path up through all the functions that call it in order to find where some particular operation is being performed, and then suddenly reach a dead end at one of these functions that apparently isn't called anywhere.\nI'm aware that Ghidra doesn't have particularly good support for C++, but the vtable still exists and the data for it has to be in memory somewhere so Ghidra should still be able to find it right? As it is I don't even know where the vtables are.\nEDIT: Is it normal for these references to not show up? If so, how does one go about finding the vtables and determining which functions they point to, or determining which vtables point to a given function? I don't know what I should expect to be seeing, and the only examples that I can find are trivial examples with only one or two classes and with various kinds of type information available and automatically filled in, rather than a real-world example with lots of <pre><code>FUN_012345678</code></pre> labels and <pre><code>undefined</code></pre> parameters and stripped and optimised object code.\n",
    "votes": "5",
    "answers": 0,
    "views": "329",
    "tags": [
        "c++",
        "ghidra",
        "arm",
        "arm64",
        "vtables"
    ],
    "user": "micheal65536",
    "time": "Dec 28, 2022 at 2:52",
    "comments": [],
    "answers_data": []
}