{
    "title": "OBD II scanner reverse engineering",
    "link": "https://reverseengineering.stackexchange.com/questions/15550/obd-ii-scanner-reverse-engineering",
    "content": "Newbie here. I'm working on an OBD II scanner and have made a hardware using STM32. It uses its inbuilt peripherals to communicate with the OBD bus (like CAN, K-Line, etc).\nQuestion: Are there any projects where one has reverse engineered an OBD II scanner to know what it is sending over the bus. I need to know what it is doing during initialization and PID requests so that I can improve my self-made system.\nSimilar question asked in Motor Vehicle Maintenance and Repair: [Link] But there were no answers.\n",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "firmware",
        "hardware"
    ],
    "user": "clamentjohn",
    "time": "Jun 14, 2017 at 8:29",
    "comments": [],
    "answers_data": [
        {
            "content": "\"OBD II\" could mean a multitude of protocols. Can you be more specific with the ISO protocol you are using? For a lot of applications the material is available and that is always easier than reverse engineering which can then be focused. If manufacturer specific, please name the vehicle.\nI have used a simple Y connector to snoop CAN bus comms. I have disassembled engine control unit code to understand and modify manufacturer specific comms.\n",
            "votes": "1",
            "user": "John Banks",
            "time": "Jun 14, 2017 at 22:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">Out of curiosity, how did you acquire the ECU code? Its hard for me to find ECU firmware via a web search</span>",
                    "time": null
                },
                {
                    "user": "John Banks",
                    "text": "<span class=\"comment-copy\">@SYS_V There are a dozens of forums where flash images are available and a few where their disassembly is discussed. There is open source reflashing software available that can read and write flash in a vehicle through the OBD II port. I am not sure of the etiquette of links to forums on here, but if you have something specific in mind and links are allowed I can try to point in the right direction if it is a vehicle I know anything about.</span>",
                    "time": null
                },
                {
                    "user": "John Banks",
                    "text": "<span class=\"comment-copy\">Not used to Markdown on here so deleted, in a hurry so just some names: openecu.org (but appears down but look for Ecuflash), nefmoto, RomRaider, forums.evolutionm.net Ecuflash forum. There are others for chip tuners. Sorry not on Twitter. If there is some way to contact otherwise, happy to help.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Usually it's done through ELM327 device so most of OBD II scanners are not talking to the car directly but trought ELM327 device, which provide serial interface for the developer and does all hardware handshake itself. For example:\nhttp://www.obdtester.com/pyobd-download\n",
            "votes": "1",
            "user": "Anton Kukoba",
            "time": "Dec 12, 2017 at 10:01",
            "is_accepted": false,
            "comments": []
        }
    ]
}