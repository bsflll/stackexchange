{
    "title": "ARM bx instruction branches to address not specified as argument",
    "link": "https://reverseengineering.stackexchange.com/questions/25246/arm-bx-instruction-branches-to-address-not-specified-as-argument",
    "content": "I'm debugging an ARM cortex M4 (STM32F4) running FreeRTOS.\nInside the assembly FreeRTOS function <pre><code>vPortSVCHandler</code></pre>, there's a branch instruction\n<pre><code>bx r14\n</code></pre>\nusing GDB, I step through instruction by instruction and find that r14 (lr) contains the value <pre><code>0xfffffffd</code></pre> (not a valid address) immediately before the bx instruction is executed.\nFor some reason, GDB doesn't follow the <pre><code>bx</code></pre> instruction with <pre><code>si</code></pre> (hangs), but I'm still able to <pre><code>step</code></pre> via openOCD.  I find that the function that's branched to is in fact a valid function at address <pre><code>0x08012abc</code></pre>.\nFrom the ARM docs on <pre><code>bx</code></pre>, its argument should be a register containing an address to branch to.  \nClearly, I'm misunderstanding or looking at the wrong docs.\nI tried tweaking <pre><code>lr</code></pre> with GDB just before the branch instruction.  Changing it to <pre><code>0x0</code></pre> or <pre><code>0xfffffff7</code></pre> results in a hard fault shortly after the branch.\nHow does this branch instruction, when called with a value of <pre><code>0xfffffffd</code></pre>, result in branching to a valid function at <pre><code>0x08102abc</code></pre>?\n",
    "votes": "5",
    "answers": 1,
    "views": "923",
    "tags": [
        "arm"
    ],
    "user": "RemarkableBucket",
    "time": "Jun 9, 2020 at 5:10",
    "comments": [],
    "answers_data": [
        {
            "content": "Values around <pre><code>FFFFFFFF</code></pre> are used in Cortex-M for  exception returns\n(ECX_RETURN). Currently defined values:\n\n0xFFFFFFF1 - return to Handler mode, restore state from main stack\n0xFFFFFFF9 - return to Thread mode, restore state from main stack\n0xFFFFFFFD - return to Thread mode, restore state from process stack\n\nSo the actual branch address is taken from the stack (MSP or PSP, depending on the low bits of the value). See the linked document for more details. \nSince GDB is mostly used for user-mode debugging, it does not expect such shenanigans and probably tries to set a breakpoint at the value of <pre><code>LR</code></pre> which naturally fails. OpenOCD knows about exceptions and is able to step properly.\n",
            "votes": "12",
            "user": "Igor Skochinsky",
            "time": "Jun 10, 2020 at 7:44",
            "is_accepted": true,
            "comments": []
        }
    ]
}