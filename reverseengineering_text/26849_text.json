{
    "title": "Advice on how to attack my first reverse engineering project?",
    "link": "https://reverseengineering.stackexchange.com/questions/26849/advice-on-how-to-attack-my-first-reverse-engineering-project",
    "content": "Suppose you've never done reverse engineering before (apart from taking apart already-broken tape recorders). Also suppose you had a machine as pictured below, with a serial-looking and another multi-pin connector on the back. Thirdly, suppose you wanted to use this console as a computer input, hoping to gain control of more than just the keyboard part (it's got a trackball, a hefty jog/cue wheel, rotary dials, blinkenlights, and a two-line character VFD display).\nLastly, suppose you don't have access to any technical specifications! No user manual, no installation guide, no service manual, not even a crappy nth-generation photocopy of the pin-outs. The company no longer exists, and the archive of their web site is of no help. Pretty much all I have is that this console runs on \"90-264V\" and draws \"<42W\".\nOn the plus side, I (used to) know the operation of this console very well. For instance, I can tell you it's got no real brains -- that is in a separate computer, this is merely the controller for it. The main computer costs thousands, and anyway is purpose-built and not useful as a general computing device (I don't think this runs a regular operating system \"behind the scenes\", at least I could recognize no tell-tale signs from the boot sequence, file system naming, or something like that).\nI am confident that I could surely figure out the main power pins based on the red and black wires going to that Molex connector ... but the rest of those pins? All that functionality? I don't even know where to start.\nI am a programmer by trade, I'm pretty good with my hands, including competency with a soldering iron and a multimeter. I don't have (access to) an oscilloscope, signal analyzer, or any such fanciness.\nA few hints for me? Is this even doable?\n\n\n\nEDIT: By the way, these are the chassis: The Display chassis on top of the Comms chassis (neither of which I have, or plan to acquire).\n",
    "votes": "9",
    "answers": 1,
    "views": "3k",
    "tags": [
        "hardware",
        "communication",
        "physical-attacks"
    ],
    "user": "noughtnaut",
    "time": "Jan 25, 2021 at 15:44",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "If it really was connected to some old computer, people over at retrocomputing SE should be able to help with info.\n",
            "time": null
        },
        {
            "user": "noughtnaut",
            "text": "Good idea, although I don't think it's old enough to be retro in that sense.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It was made by humans so there's a spec.\n\nI googled it.\nHere's a manual which talks about the Axial MX from Accom ~2005. If it's a series of edit controllers, they'll likely work the same under the hood and use the same protocol from one version to the next.\n\nLooks like an RS422 Serial. So you just need to hook it up to a computer with a serial port and take a look at what data is transmitted when you hit a key. You'll have to figure out some of the serial port parameters such as rate, parity, etc, but this should get you going.\n",
            "votes": "12",
            "user": "pythonpython",
            "time": "Jan 23, 2021 at 16:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "noughtnaut",
                    "text": "<span class=\"comment-copy\">I bow in respect of your awesome google-fu. I tried all sorts of keywords, but that there is good!</span>",
                    "time": null
                },
                {
                    "user": "noughtnaut",
                    "text": "<span class=\"comment-copy\">Ah, so basically it's an RS422 serial connection. I know nothing about it, but that can be learned.</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">You might look at this: <a href=\"https://github.com/devttys0/baudrate/blob/master/baudrate.py\" rel=\"nofollow noreferrer\">github.com/devttys0/baudrate/blob/master/baudrate.py</a></span>",
                    "time": null
                },
                {
                    "user": "ssokolow",
                    "text": "<span class=\"comment-copy\">It's an edit controller with RS-422 running over a DE-9, so that's probably a <a href=\"https://en.wikipedia.org/wiki/9-Pin_Protocol\" rel=\"nofollow noreferrer\">Sony 9-Pin (A.K.A. P1) Protocol</a> connector. The pinout chart appears to match up. According to the linked Wikipedia article, \"The communication parameters are 38,400 baud, 8 data bits, odd parity and 1 stop bit (38k4/8O1).\" It links to this <a href=\"ftp://ftp.jurassic.nl/mirrors/ftp.sgi.com/sgi/video/rld/vidpage/s9pinnt.html\" rel=\"nofollow noreferrer\">protocol description</a>.</span>",
                    "time": null
                },
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">Great find @ssoklow! I found a similar PDF describing the protocol (<a href=\"http://ffv.com/pdf/Recon-4-Serial-Control-Protocol.pdf\" rel=\"nofollow noreferrer\">ffv.com/pdf/Recon-4-Serial-Control-Protocol.pdf</a>)</span>",
                    "time": null
                }
            ]
        }
    ]
}