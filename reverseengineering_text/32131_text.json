{
    "title": "Create exe that jumps directly into main()-function from C",
    "link": "https://reverseengineering.stackexchange.com/questions/32131/create-exe-that-jumps-directly-into-main-function-from-c",
    "content": "I am using x64dbg to explore image files on Windows. After the computer finishes prowling ntdll.dll it jumps to OptionalHeader.AddressOfEntryPoint.\nBut this is not my main()-function.\n\nWhat is this code in my EXE that is not mine?\nCan you remove it so there is only my main()-function remaining?\nDo you know a way to find the main()-function easily?\n",
    "votes": "0",
    "answers": 1,
    "views": "115",
    "tags": [
        "c",
        "pe",
        "x64dbg"
    ],
    "user": "AirToTec",
    "time": "Aug 4, 2023 at 16:12",
    "comments": [
        {
            "user": "josh poley",
            "text": "You are looking at CRT initialization. You don't say what toolset you are using but with microsoft tooling, look at the /ENTRY linker flag.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The code that runs before your <pre><code>main</code></pre> function is the C Runtime (CRT) initialization code. There are ways to remove it, such as via the <pre><code>/NODEFAULTLIB</code></pre> and <pre><code>/ENTRY</code></pre> command-line options to the linker, but be careful what you wish for. If any of your code calls functions in the C standard library (such as <pre><code>printf</code></pre>, <pre><code>malloc</code></pre>, etc.), you will not be able to link your code into a final binary unless you provide your own implementations for those functions. Your implementations must be from scratch; you won't be able to rely upon any standard library functions, or implement them using any third-party library that itself relies upon the standard library. This is not a beginner-friendly task, to put it mildly.\nTo find the <pre><code>main</code></pre> function in a binary: first, note that tools such as IDA do this automatically. To do it manually, first familiarize yourself with the CRT functions that execute before <pre><code>main</code></pre>, find where it calls <pre><code>main</code></pre>. Then, for any given binary, you can locate the address of <pre><code>main</code></pre> by examining those CRT functions around the locations where they call <pre><code>main</code></pre>.\n",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Aug 4, 2023 at 21:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}