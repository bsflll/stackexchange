{
    "title": "How to use dnSpyEx or some other .NET debugger to attach to a .NET process started with a process-hollowing technique?",
    "link": "https://reverseengineering.stackexchange.com/questions/31472/how-to-use-dnspyex-or-some-other-net-debugger-to-attach-to-a-net-process-start",
    "content": "I have a .NET executable that is started using the process-hollowing technique. Here's how it looks from the Detect-It-Easy tool:\n\nI can open the image file for that process (from disk) with dnSpyEx, but when I try to attach to it with a debugger while it's running (after it was process-hollowed), my breakpoints don't hit:\n\nAny idea how to attach to such process with a debugger - dnSpy or some other one?\n",
    "votes": "5",
    "answers": 1,
    "views": "940",
    "tags": [
        "debugging",
        "unpacking",
        ".net",
        "packers",
        "dnspy"
    ],
    "user": "c00000fd",
    "time": "Jan 25, 2023 at 8:55",
    "comments": [],
    "answers_data": [
        {
            "content": "You can insert an infinite loop in the code that you can find once you attach to the process.\n\nRight click the method you want to put a breakpoint on and select <pre><code>Edit Method</code></pre>.\n\nAdd an infinite loop  inside an <pre><code>if</code></pre> before the code where you wanted to put the breakpoint: <pre><code>bool a = true;if(a){while(true){}}</code></pre>. Click <pre><code>Compile</code></pre>.\nSave module.\nRun the sample as desired.\nAttach to the process with DnSpy (you may need to run it as admin) and pause (<pre><code>Break all</code></pre>) the debugger, which will stop at the infinite loop.\nThe instruction where you wanted to put the breakpoint is the first after the <pre><code>else</code></pre>. Right click this instruction and select <pre><code>Set Next Statement</code></pre>.\n\n\n\nThis is similar to the <pre><code>EBFE</code></pre> technique.\nNote that the definition of <pre><code>bool a = true;</code></pre> and the <pre><code>if</code></pre> surrounding the <pre><code>while(true)</code></pre> is needed to trick the debugger to avoid that compilation remove the rest of the code. If the compiler is still able to remove it, you can try a bit more difficult condition to trick the debugger such as <pre><code>int a = 3; int b = 2; if(a*2-b+1==5){while(true){}};</code></pre>\n",
            "votes": "3",
            "user": "Ana María Martínez Gómez",
            "time": "Jan 25, 2023 at 12:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Hmm, that's an interesting idea. But how would I insert my code into it if my breakpoints don't hit? See that second screenshot.</span>",
                    "time": null
                },
                {
                    "user": "Ana María Martínez Gómez",
                    "text": "<span class=\"comment-copy\">You need to insert the code before the sample is run. Note running the sample is step 4.</span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Thanks. That's an interesting technique. I tried it, but step 5 doesn't produce the result that you described. The dnSpy breaks but then it doesn't switch to the source code line. And even if I click \"Show next statement\", nothing happens. My guess is that it can't find symbols.</span>",
                    "time": null
                }
            ]
        }
    ]
}