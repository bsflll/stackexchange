{
    "title": "neovim: pwntools process automatically stops when trying to invoke interactive shell",
    "link": "https://reverseengineering.stackexchange.com/questions/31447/neovim-pwntools-process-automatically-stops-when-trying-to-invoke-interactive-s",
    "content": "I'm using python pwntools.\nI'm using python 3.10.x\nThis line of code should open a shell for me:\n<pre><code>io.interactive()</code></pre>\nBut while running this file from vim using\n<pre><code>!./%</code></pre> it doesn't open the shell doesn't invoke as it was supposed to be. The process stops contrarily.\nThe code:\n<pre><code>#!/usr/bin/python3\nfrom pwn import *\n\nelf = context.binary = ELF(\"house_of_force\")\nlibc = elf.libc\n \ngs = '''\ncontinue\n'''\ndef start():\n    if args.GDB:\n        return gdb.debug(elf.path, gdbscript=gs)\n    else:\n        return process(elf.path)\n \n# Select the \"malloc\" option, send size & data.\ndef malloc(size, data):                                                                                                                                                                                            \n    io.send(\"1\")                                                                                                                                                                                                   \n    io.sendafter(\"size: \", f\"{size}\")                                                                                                                                                                              \n    io.sendafter(\"data: \", data)                                                                                                                                                                                   \n    io.recvuntil(\"> \")                                                                                                                                                                                             \n                                                                                                                                                                                                                   \n# Calculate the \"wraparound\" distance between two addresses.                                                                                                                                                       \ndef delta(x, y):                                                                                                                                                                                                   \n    return (0xffffffffffffffff - x) + y                                                                                                                                                                            \n                                                                                                                                                                                                                   \nio = start()                                                                                                                                                                                                       \n                                                                                                                                                                                                                   \n# This binary leaks the address of puts(), use it to resolve the libc load address.                                                                                                                                \nio.recvuntil(\"puts() @ \")                                                                                                                                                                                          \nlibc.address = int(io.recvline(), 16) - libc.sym.puts                                                                                                                                                              \n                                                                                                                                                                                                                   \n# This binary leaks the heap start address.                                                                                                                                                                        \nio.recvuntil(\"heap @ \")                                                                                                                                                                                            \nheap = int(io.recvline(), 16)                                                                                                                                                                                      \nio.recvuntil(\"> \")                                                                                                                                                                                                 \nio.timeout = 0.1                                                                                                                                                                                                   \n                                                                                                                                                                                                                   \n# =============================================================================                                                                                                                                    \n                                                                                                                                                                                                                   \n# =-=-=- EXAMPLE -=-=-=                                                                                                                                                                                            \n                                                                                                                                                                                                                   \n# The \"heap\" variable holds the heap start address.                                                                                                                                                                \nlog.info(f\"heap: 0x{heap:02x}\")                                                                                                                                                                                    \n                                                                                                                                                                                                                   \n# Program symbols are available via \"elf.sym.<symbol name>\".                                                                                                                                                       \nlog.info(f\"target: 0x{elf.sym.target:02x}\")                                                                                                                                                                        \n                                                                                                                                                                                                                   \n# The malloc() function chooses option 1 from the menu.                                                                                                                                                            \n# Its arguments are \"size\" and \"data\".                                                                                                                                                                             \nmalloc(24, b\"Y\"*24)                                                                                                                                                                                                \n                                                                                                                                                                                                                   \n# The delta() function finds the \"wraparound\" distance between two addresses.                                                                                                                                      \nlog.info(f\"delta between heap & main(): 0x{delta(heap, elf.sym.main):02x}\")\n\n# =============================================================================\n\nio.interactive()\n</code></pre>\nError:\n<pre><code>/home/pegasus/Documents/Courses/HeapLAB-main/house_of_force/./exploit.py:19: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  io.sendafter(\"size: \", f\"{size}\")\n/home/pegasus/.local/lib/python3.10/site-packages/pwnlib/tubes/tube.py:813: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  res = self.recvuntil(delim, timeout=timeout)\n/home/pegasus/Documents/Courses/HeapLAB-main/house_of_force/./exploit.py:21: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes\n  io.recvuntil(\"> \")\n[*] delta between heap & main(): 0xfffffffffebd9816\n[*] Switching to interactive mode\n[*] Stopped process '/home/pegasus/Documents/Courses/HeapLAB-main/house_of_force/house_of_force' (pid 7496)\n\n</code></pre>\n",
    "votes": "2",
    "answers": 0,
    "views": "377",
    "tags": [
        "python",
        "binary",
        "shellcode",
        "pwntools"
    ],
    "user": "NobinPegasus",
    "time": "Jan 20, 2023 at 14:04",
    "comments": [],
    "answers_data": []
}