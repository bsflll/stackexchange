{
    "title": "Is there any way to decompile a .NET assembly or program?",
    "link": "https://reverseengineering.stackexchange.com/questions/77/is-there-any-way-to-decompile-a-net-assembly-or-program",
    "content": "Are there any tools available to take an already compiled .dll or .exe file that you know was compiled from C# or Visual Basic and obtain the original source code from it?\n",
    "votes": "42",
    "answers": 8,
    "views": "82k",
    "tags": [
        "decompilation",
        "dll",
        ".net",
        "pe"
    ],
    "user": "APerson",
    "time": "Apr 2, 2013 at 21:17",
    "comments": [
        {
            "user": "jyz",
            "text": "ILSpy is probably the best choice (IMHO)\n",
            "time": null
        },
        {
            "user": "Remko",
            "text": "Because decompiling .net is very easy most .net code is protected or obfuscated. So in order to use any of the tools suggested in the answer you must remove this protection (if present) first.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "ILSpy is a great open-source decompiler.\n\nILSpy Features\n\nAssembly browsing\nIL Disassembly\nSupport C# 5.0 \"async\"\nDecompilation to C#\nSupports lambdas and 'yield return'\nShows XML documentation\nDecompilation to VB\nSaving of resources\nSave decompiled assembly as .csproj\nSearch for types/methods/properties (substring)\nHyperlink-based type/method/property navigation\nBase/Derived types navigation\nNavigation history\nBAML to XAML decompiler\nSave Assembly as C# Project\nFind usage of field/method\nExtensible via plugins (MEF)\nAssembly Lists\n",
            "votes": "50",
            "user": "Mick",
            "time": "Nov 16, 2019 at 18:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Joseph",
                    "text": "<span class=\"comment-copy\">Combine it with this useful add-on for Visual Studio <a href=\"http://public.carr-designs.com/releases/SourceFlySetup.msi\" rel=\"nofollow noreferrer\">SourceFly</a> so you can open ILSpy from Visual Studio. Though it doesn't support Visual Studio 2012 in its latest release.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I've used JetBrains dotPeek (free of charge) before with some success.\nAny JetBrains software I've ever used has been very solid.\nIt is not quite the 'original source' but it is very readable C# - about the closest thing I would expect to get. Quote from their website:\n\nWhat's Cool about dotPeek?\n\nDecompiling .NET 1.0-4.5 assemblies to C#\nSupport for .<pre><code>dll</code></pre>, <pre><code>.exe</code></pre>, <pre><code>.zip</code></pre>, <pre><code>.vsix</code></pre>, <pre><code>.nupkg</code></pre>, and <pre><code>.winmd</code></pre> files\nQuick jump to a type, assembly, symbol, or type member\nEffortless navigation to symbol declarations, implementations, derived and base symbols, and more\nAccurate search for symbol usage with advanced presentation of search results\nOverview of inheritance chains\nSupport for downloading code from source servers\nSyntax highlighting\nComplete keyboard support\ndotPeek is free!\n\n\nThe last point is free as in free beer, not as in free speech.\n",
            "votes": "25",
            "user": "0xC0000022L",
            "time": "Apr 17, 2013 at 4:34",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Recently I've been using dnSpy [forked from ILSpy by the creator(s) of de4dot] as my main tool for the decompiling and live debugging of .NET code\nhttps://github.com/0xd4d/dnSpy\n\nMain difference from ILSpy :\n\nUses dnLib to read assemblies (vs ILSpy's Mono.Cecil)  \n\nhttps://github.com/0xd4d/dnlib\n\ndnlib was created because de4dot needed a robust .NET assembly library \n  that could handle all types of obfuscated assemblies. de4dot used to use Mono.Cecil but since Mono.Cecil can't handle obfuscated assemblies, \n  doesn't fully support mixed mode assemblies, doesn't read .NET assemblies \n  the same way the CLR does and many other missing features de4dot needed, dnlib was a necessity. The API is similar because it made porting de4dot to dnlib a lot easier.\n",
            "votes": "14",
            "user": "Kalibr",
            "time": "Dec 4, 2015 at 0:31",
            "is_accepted": false,
            "comments": [
                {
                    "user": "BlueRaja - Danny Pflughoeft",
                    "text": "<span class=\"comment-copy\">How is it different from/better than ILSpy?</span>",
                    "time": null
                },
                {
                    "user": "Kalibr",
                    "text": "<span class=\"comment-copy\">This is my first answer, is linking to an external discussion appropriate?   : <a href=\"https://www.reddit.com/r/ReverseEngineering/comments/3jau4m/dnspy_a_net_assembly_editor_decompiler_and/\" rel=\"nofollow noreferrer\">reddit.com/r/ReverseEngineering/comments/3jau4m/…</a> ... I will also summarize above.</span>",
                    "time": null
                },
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">I can vouch for dnSpy, it think its better than any other similar .NET tool out there. It can even debug the process.</span>",
                    "time": null
                },
                {
                    "user": "bennofs",
                    "text": "<span class=\"comment-copy\">I can really recommend this one. It is the only free tool I found that supports debugging of assembly.</span>",
                    "time": null
                },
                {
                    "user": "orad",
                    "text": "<span class=\"comment-copy\">Use it with <a href=\"https://marketplace.visualstudio.com/search?term=dnspy&amp;target=VS\" rel=\"nofollow noreferrer\">this Visual Studio extension</a>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There is a free tool available called JustDecompile which does that.\nSome features:\n\n\nCreating a Visual Studio project from an assembly in order to export lost projects or obtain multiple classes without the need to copy and paste code. At present, JustDecompile is able to export decompiled code only to C#.\nExporting code directly from the command prompt\nQuickly loading core .NET assemblies (.NET 2, .NET3.5, .NET 4, .NET 4.5, WinRT Metadata and Silverlight)\nDirectly editing assemblies loaded into the program\n",
            "votes": "11",
            "user": "APerson",
            "time": "Apr 16, 2013 at 13:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Michael Bahig",
                    "text": "<span class=\"comment-copy\">JustDecompile has a De4Dot Deobfuscator plugin that will help with obfuscated exe</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I have used .NET Reflector (Note: Commercial, but trial available) several times and quite like it:\nhttp://www.red-gate.com/products/dotnet-development/reflector/\n",
            "votes": "9",
            "user": "QAZ",
            "time": "Mar 20, 2013 at 16:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "JMcAfreak",
                    "text": "<span class=\"comment-copy\">Some examples of use cases would be a good addition to this answer. Currently, it is too vague to be of much use besides offering a tool and its website. Giving some real use examples helps define the product a little better.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you are interested into a decompiler on API level: https://code.google.com/p/facile-api/ (in Java though)\n",
            "votes": "3",
            "user": "TomSmartBishop",
            "time": "Dec 3, 2015 at 8:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Hyeonseo Yang",
                    "text": "<span class=\"comment-copy\">Yeah! I was searching for a java library! Thanks :)</span>",
                    "time": null
                },
                {
                    "user": "TomSmartBishop",
                    "text": "<span class=\"comment-copy\">Let me know what you are making ;-) Cheers</span>",
                    "time": null
                },
                {
                    "user": "Hyeonseo Yang",
                    "text": "<span class=\"comment-copy\">I am expecting to add \".NET support\" feature to this Disassembler app (<a href=\"https://github.com/KYHSGeekCode/Android-Disassembler\" rel=\"nofollow noreferrer\">github.com/KYHSGeekCode/Android-Disassembler</a>).  :)</span>",
                    "time": null
                },
                {
                    "user": "TomSmartBishop",
                    "text": "<span class=\"comment-copy\">Nice, let me know how that works out.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I would second the answer about ILSPY as being a really great.net decompiler.  Also, checkout de4dot for deobfuscation.  This is a cool writeup of it in action. \nhttp://blogs.cisco.com/security/talos/reversing-multilayer-net-malware\nCompiled visual basic can be a different and painful animal. \nhttp://vrt-blog.snort.org/2014/08/discovering-dynamically-loaded-api-in.html?m=1\n",
            "votes": "1",
            "user": "tyh",
            "time": "Mar 22, 2015 at 22:27",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Thomas Weller",
                    "text": "<span class=\"comment-copy\">How is compiled Visual Basic (6) related to .NET?</span>",
                    "time": null
                },
                {
                    "user": "tyh",
                    "text": "<span class=\"comment-copy\">The original question asked about Visual Basic as well.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": ".NET assemblies (.exe and .dll) can be decompiled online at Decompiler.com\nThe author is affiliated with the mentioned website it appears (username: www.Decompiler.com).\n",
            "votes": "-1",
            "user": "0xC0000022L",
            "time": "Sep 28, 2020 at 19:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">\"Post good, relevant answers, and if some (but not all) happen to be about your product or website, that’s okay. However, you must disclose your affiliation in your answers.\"</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik given the username, I think that qualifies as disclosure, no? But I'll also add a note, in case the username ever changes 😉 ... but I do find the answer lacking. I'll ask the other mods to have a look and ask their advice. I feel a downvote is enough, though.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">@0xC0000022L I like things to be explicit, but agree it might have been enough. Thx for the edit anyway.</span>",
                    "time": null
                }
            ]
        }
    ]
}