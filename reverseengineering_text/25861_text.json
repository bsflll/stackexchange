{
    "title": "How to probe my smart thermostat for reprogramming?",
    "link": "https://reverseengineering.stackexchange.com/questions/25861/how-to-probe-my-smart-thermostat-for-reprogramming",
    "content": "I got a Greenlite AIRZ thermostat which connects to my home wifi so that I can change the settings remotely on my phone. The Android app is, however, difficult to use, so I'm thinking about making my own. I found its IP address, put it in a browser, and it said verbatim <pre><code>File / not_found</code></pre>. The thermostat also rejects my request to connect to port 21/22. How should I proceed from here? Is the underscore between <pre><code>not</code></pre> and <pre><code>found</code></pre> a quirk of a specific server that would allow me to probe further?\n",
    "votes": "2",
    "answers": 3,
    "views": "215",
    "tags": [
        "smart-devices"
    ],
    "user": null,
    "time": "Apr 1, 2021 at 15:00",
    "comments": [
        {
            "user": "Steffen Ullrich",
            "text": "This is not really about information security. If you are trying to reverse engineer how the device works better ask at Reverse Engineering.\n",
            "time": null
        },
        {
            "user": "multithr3at3d",
            "text": "Without more specific details, I think this question boils down to \"how to reverse engineer this system\" which is probably better answered in book format. That said, you could be on the right track using those artifacts to learn more about the system.\n",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "Good start point would be decompiling the android application and checking how does it perform settings change\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The best approach here would be to look at the App, that way you know exactly what to send (especially when they add some encryption or signing). The second best option would be to look at the network traffic and hope that it's easy to figure out how it works from that. If that also doesn't work the last option in my opinion would be to attack the device itself: As mentioned in other responses you are looking for UART, JTAG or other debug ports. Also you can look for SPI Flashes, NAND Flashes, eMMC Memory and read those out then. But this is the most difficult method which should only be followed when the other methods don't work or you have a good reason to do so (to discover \"secret\" functionality for example).\n",
            "votes": "1",
            "user": "Richi",
            "time": "Sep 13, 2020 at 20:59",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You have to debug its hardware.\nSearch for its serial port.\nLook into UART.\nhttps://www.societyofrobots.com/microcontroller_uart.shtml\nYou have to do a boundary scan, and figure out its hardware boundries. You can do that through JTAG\nhttps://www.jtag.com/boundary-scan/\n",
            "votes": "0",
            "user": "user3288107",
            "time": "Sep 13, 2020 at 5:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">The JTAG recommendation should come with a huge disclaimer.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I do agree with Richi's answer.\nYou've got three ways to do it:\n\nThe simplest method would be to sniff the traffic of the Android App, try to see the commands sent and state received from the device (if any). You may want to bypass SSL Pinning if any does exist.\nThe second method would be to reverse engineer the existing Android App, and try to extract the API authentication/credentials, endpoints and communication data.\nThe third overkill method would be to go for the device itself.\n\nIn case you don't want to touch the hardware, maybe a simpler approach would be to look for a config backup/firmware from the device's official website, and try to extract the file system and analyze the apps/scripts that execute at the OS startup. That would be way harder if the binary was compressed/encrypted somehow.\n",
            "votes": "0",
            "user": "Abdullah Mohamed",
            "time": "Feb 23, 2021 at 9:55",
            "is_accepted": false,
            "comments": []
        }
    ]
}