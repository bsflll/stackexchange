{
    "title": "Is there a way to set the number special purpose registers in IDA pro with a script?",
    "link": "https://reverseengineering.stackexchange.com/questions/3038/is-there-a-way-to-set-the-number-special-purpose-registers-in-ida-pro-with-a-scr",
    "content": "IDA has this nifty habit that when it doesn't know what a special purpose register is, it just drops in the number of the register instead. While this is all well and fine, I'd like to be able to correct these items in my database. I know I can just adjust the [arch].cfg file; however, that applies the changes to ALL processors of that architecture, which isn't always the correct behavior.  Instead, I'd like to only change the registers per database that I'm working on.\nSo I started down the IDAPython path and I can easily get the unnamed registers:\n<pre><code>for r in range(220,240):\n    uknName = get_reg_name(r,0)\n    print(\"Got: '%s' for register %d \") % (unkName,r)\n    if unkName is None:\n        # I'd like to fix this but I can't\n        # set_reg_name(r,<something I read from a file>)\n</code></pre>\nWhere I've run into issues is that I can't seem to find the IDAPython idc/idaapi/idautils function that I can use to rename the it. Do you know what the magic python sauce is that would allow me to rename these items? I've been trying to find something in the official docs here but haven't had any luck.\nUPDATE: Equivalent Functionality\nAs mentioned below, this isn't \"possible\" with the IDA API (as is also noted in my original implied statement of \"I read all of this and can't find a way to do it.\"  The following code will provide you an equvilent bit of information ... but I've not found an efficient way to implement it so I just keep this snip-it around and hack it up as needed. It provides the same as the \"RightClick->Rename\" that you can use to rename a given register per function ... sadly, not a good way to do an entire database. Mucked up for x86 since it was the only image I had available:\n<pre><code>ea = ScreenEA()\nfunc = idaapi.get_func(ea)\nregvar = idaapi.find_regvar(func, ea, \"eax\")\n# print(var_dump(regvar))\n# associated \"rename variable\" magic\nidaapi.rename_regvar(func, idaapi.find_regvar(func, ea, \"eax\"), \"asdfd\")\n</code></pre>\n",
    "votes": "7",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "ida",
        "idapython"
    ],
    "user": "Wyatt",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "byzero",
            "text": "I have a problem: the meaning of your answer is that rename the register name? such that: mov eax,ebx; when scripting it: it will be changed into mov asdfd,ebx? I think it will be changed same as before, but when I use it in my IDA 7.0 pro, It does not work.\n",
            "time": null
        },
        {
            "user": "Wyatt",
            "text": "You've happened upon a problem nearly 5 years old. The meaning of the answer is exactly what is stated - it will rename the registers for that function. The IDA python API has additionally changed in 5 years time and is likely not the same as it once was, though I can't imagine it's much different to implement now. Additionally, if you're on a mac, you're probably getting <pre><code>rax</code></pre> instead of <pre><code>eax</code></pre> because it's 64bit.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This cannot be done with either IDA C or IDA Python. There is no API function to rename a register. Check the docs: https://www.hex-rays.com/products/ida/support/idapython_docs/\n",
            "votes": "2",
            "user": "MrSynAckSter",
            "time": "Feb 12, 2015 at 17:57",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Wyatt",
                    "text": "<span class=\"comment-copy\">Basically what we've found. I've updated with our \"solution\" but it's definitely not an ideal solution.</span>",
                    "time": null
                }
            ]
        }
    ]
}