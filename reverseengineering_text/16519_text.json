{
    "title": "See how classes are used in a Unity 3D game [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/16519/see-how-classes-are-used-in-a-unity-3d-game",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm trying to understand how the procedural generation in a particular Unity 3D game works. I do not have the source code/project file, just a windows build.\nI've opened up a dll called <pre><code>Assembly-UnityScript.dll</code></pre> with ILSpy and found some classes, but it's not immediately apparent how the classes are put together, i.e. how and when methods on the classes are called.\nI've looked at some tutorials but they are all concerned with injecting their own code into the game. I'm just interested in how my target game does what it does. \nIs there any straightforward way to figure out how the classes are used?\n",
    "votes": "1",
    "answers": 1,
    "views": "413",
    "tags": [
        "windows",
        "dll",
        "c#"
    ],
    "user": "Ryan1729",
    "time": "7 years ago",
    "comments": [
        {
            "user": "Nordwald",
            "text": "Sidenote: Its propably not worth the effort of reverse engineering for the purpose of reimplementation. There are tons of resources about procedural generation. Calculate a seed, generate 2d-noise (heightmap), tune in some parameters and use your seed for randomness.\n",
            "time": null
        },
        {
            "user": "user15338",
            "text": "Everything you need should be within Assembly-UnityScript.dll, have you tried exporting the files via ILSpy, and opening the project in Visual Studio?\n",
            "time": null
        },
        {
            "user": "Ryan1729",
            "text": "@JacobPersi I have now. I opened the dll, clicked File -> Save Code, which produced a .csproj file along with the same .cs files I had seen inside ILSpy. I didn't expect building to work but I tried it anyways and the build errors out when it gets to a part in a <pre><code>CompilerGenerated</code></pre> namespace called <pre><code>__enterName_Update$callable0$30_61__</code></pre>. I'm guessing that's some kind of hook/callback back into the rest of the game, where the part I\"m currently interested in takes place.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "it's not immediately apparent how the classes are put together, i.e.\n  how and when methods on the classes are called\n\nI'm afraid there is no free lunch here.\nWhat you can tackle this with two approaches:\n\nStatic disassembly (look at the disassembled code and try to make sense of it)\nDynamic analysis (e.g. use a debugger like dnSpy) This way you can 'watch' the acutal generation process.\n",
            "votes": "2",
            "user": "Nordwald",
            "time": "Oct 10, 2017 at 7:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ryan1729",
                    "text": "<span class=\"comment-copy\">Until <a href=\"https://github.com/0xd4d/dnSpy/issues/393\" rel=\"nofollow noreferrer\">this dnSpy issue</a> is addressed, it looks like I'm stuck with option 1. That, or copying the disassembled code out, guessing at how the classes interact and creating an executable that generates stuff and debugging that.</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">You could also try any other debugger capable of debugging mono binaries. There are some VS plugins for that, or you could try command line debugging.</span>",
                    "time": null
                }
            ]
        }
    ]
}