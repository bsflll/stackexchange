{
    "title": "Can the return value of this function be determined with static analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/27648/can-the-return-value-of-this-function-be-determined-with-static-analysis",
    "content": "I have an assignment and I tried solving it. However I can't seem to solve it, despite double checking everything and investing multiple hours.\nMy task is to reverse engineer the following functions to high-level C-code and determine the return value of <pre><code>f(1,2,3)</code></pre>.\nGiven Task:\n\nThis is my approach:\n\nThe problem:\n<pre><code>f(1,2,3)</code></pre> can not be determined, because line 6 in <pre><code>function f</code></pre> results in a jump to <pre><code>loc_56C</code></pre>, where <pre><code>g(2,3)</code></pre> is called. In line 14 <pre><code>push dword ptr [ebp+0Ch]</code></pre> is used, however only 2 parameter are supplied for <pre><code>function g</code></pre> at line 16 (8 Byte), meaning we do not know what lies on that memory location (12 Byte above base pointer). As a result, the return value can not be determined.\nIs it true, that <pre><code>f(1,2,3)</code></pre> can not be determined?\n",
    "votes": "3",
    "answers": 1,
    "views": "221",
    "tags": [
        "assembly"
    ],
    "user": "Fluctuation23",
    "time": "Jul 19, 2022 at 2:04",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "<pre><code>call</code></pre> puts something on the stack too...\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "maybe think like what will ebp+8 be when f is called  like f(1,2,3)  and on what condition g() would be called ? or may be cheat for the sake of learning put this in an assembly file assemble and singlestep :)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The control flow of the above program goes in following order <pre><code>main -> f -> g -> f -> main</code></pre>\n<pre><code>main</code></pre> calls <pre><code>f</code></pre> with 1,2,3.\nstack----\n3\n2\n1\nret\nebp\nNotice the push instructions and calling convention. <pre><code>function f</code></pre> checks whether <pre><code>1 == 0</code></pre> (ebp - 8). The answer is no. So, it calls <pre><code>function g</code></pre>. This is the major hint for you. I am sure you will be able to figure rest of it :-)\n",
            "votes": "3",
            "user": "Viktor",
            "time": "Jul 19, 2022 at 2:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}