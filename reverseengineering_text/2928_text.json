{
    "title": "How can I locate exported functions of an EXE or DLL? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/2928/how-can-i-locate-exported-functions-of-an-exe-or-dll",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am trying to do some experimenting with certain system files (DLLs, EXEs) in Windows and would like to know how I can get information about the functions that they contain. I want to be able to call some of them just as if Windows does. How could one do this? \nI guess I would need to know what the function names are, and how to call the functions by their names, and what parameters to pass.\n",
    "votes": "-2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "windows",
        "pe",
        "c++",
        "symbols"
    ],
    "user": "user1632018",
    "time": "11 years ago",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Get the functions? That is, the function names, their relative addresses, their addresses after being loaded into a process, the arguments they require? It's unclear what you are asking.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "TL;DR you can call anything, locating the right part of code is the hard part.\nexport table\nIf you mean 'just as Windows does', then you mean the functions of the DLL that are available to the others, ie the exported ones? in this case, you need to parse the export table - check pefile for a readable and reliable implementation.\nlocating any function\nIDA\nIf you actually mean 'all the functions, including the internal ones', then you need to disassemble and tell the difference from code and data. in this case, your best bet is to open the files in IDA - with symbols preferrably - and export the function list.\nmanually\nIf you want to do that manually, then you need your own smart disassembler, which is far from trivial: sometimes, compilers generate some code that doesn't immediately look like parts of a function.\ncalling identified functions\nOnce you've located the functions, you can just call them directly, without the need of injection, but you have to make sure you have the exact same version of the DLL. hard_imports use such a method to call pieces of code directly.\n",
            "votes": "8",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">Good answer, but: <i>can</i> you actually call functions externally that are not exported? The usual function, <code>GetProcAddress</code>, needs either an exported name or ordinal value.</span>",
                    "time": null
                },
                {
                    "user": "user1632018",
                    "text": "<span class=\"comment-copy\">I am geussing if they are not exported than you would need to inject into the process.</span>",
                    "time": null
                },
                {
                    "user": "user1632018",
                    "text": "<span class=\"comment-copy\">BTW thanks Ange. That helped. I did mean the exported functions. I actually originally had that in the description then decided to change it thinking others would know what I am talking about.</span>",
                    "time": null
                }
            ]
        }
    ]
}