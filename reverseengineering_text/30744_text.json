{
    "title": "jump to invalid address when emulating",
    "link": "https://reverseengineering.stackexchange.com/questions/30744/jump-to-invalid-address-when-emulating",
    "content": "I am currently working on a deobfuscation tool for a Windows Driver (which is obfuscated). I am using Capstone to disassemble and Unicorn to emulate. I have run into a weird issue where the indirect jump (<pre><code>jmp rbp</code></pre>) jumps to invalid memory and I don't understand why. Can anyone shed some light on the issue. Since <pre><code>rbp</code></pre> is calculated in the block below, i didn't include any other parts of the binary.\nThe address that it jumps to is 0x000000014CC3A390; but my base is at 0x140000000 and my driver's size is 0xB64000 bytes.\nOther addresses are in the 0x140xxxxxx range but this one seems so weird and I don't know why.\nOther notes:\n<pre><code>0x1409F4F92 + 0xc242cdf = 0x14CC37C71</code></pre>\n<pre><code>seg007:00000001409F4F84 loc_1409F4F84:                          ; CODE XREF: seg007:00000001406E3AE2â†‘j\nseg007:00000001409F4F84                 mov     rcx, 4B1Fh\nseg007:00000001409F4F8B                 lea     rax, cs:14CC37C71h\nseg007:00000001409F4F92                 mov     rsi, rax\nseg007:00000001409F4F95                 mov     rbp, rsi\nseg007:00000001409F4F98                 mov     rbx, rsi\nseg007:00000001409F4F9B                 mov     rdx, rax\nseg007:00000001409F4F9E                 shl     rbp, 1\nseg007:00000001409F4FA1                 xor     rbx, rcx\nseg007:00000001409F4FA4                 and     rbx, rsi\nseg007:00000001409F4FA7                 and     rdx, rcx\nseg007:00000001409F4FAA                 sub     rbp, rsi\nseg007:00000001409F4FAD                 xor     rdx, rax\nseg007:00000001409F4FB0                 sub     r9, 4\nseg007:00000001409F4FB4                 xor     rbx, rbp\nseg007:00000001409F4FB7                 mov     rsi, rbx\nseg007:00000001409F4FBA                 movsxd  rbx, dword ptr [rsp]\nseg007:00000001409F4FBE                 add     rsi, rcx\nseg007:00000001409F4FC1                 add     rdx, rsi\nseg007:00000001409F4FC4                 mov     rax, rdx\nseg007:00000001409F4FC7                 mov     rcx, rsp\nseg007:00000001409F4FCA                 mov     rbp, rax\nseg007:00000001409F4FCD                 add     rbp, rbx ; last operation that matters\nseg007:00000001409F4FD0                 mov     rbx, rsp\nseg007:00000001409F4FD3                 sar     rbx, 3Fh\nseg007:00000001409F4FD7                 shr     rbx, cl\nseg007:00000001409F4FDA                 mov     rdx, rsp\nseg007:00000001409F4FDD                 xor     ecx, ecx\nseg007:00000001409F4FDF                 cmp     rsp, 40h ; '@'\nseg007:00000001409F4FE3                 cmovnb  rbx, rcx\nseg007:00000001409F4FE7                 mov     rdi, rdx\nseg007:00000001409F4FEA                 mov     rax, 4\nseg007:00000001409F4FF1                 mov     rcx, rax\nseg007:00000001409F4FF4                 shl     rdi, cl\nseg007:00000001409F4FF7                 xor     ecx, ecx\nseg007:00000001409F4FF9                 mov     rsi, rdx\nseg007:00000001409F4FFC                 cmp     rax, 40h ; '@'\nseg007:00000001409F5000                 cmovnb  rdi, rcx\nseg007:00000001409F5004                 mov     rcx, rax\nseg007:00000001409F5007                 shl     rsi, cl\nseg007:00000001409F500A                 xor     ecx, ecx\nseg007:00000001409F500C                 sub     rdi, rdx\nseg007:00000001409F500F                 cmp     rax, 40h ; '@'\nseg007:00000001409F5013                 cmovnb  rsi, rcx\nseg007:00000001409F5017                 xor     rsi, rax\nseg007:00000001409F501A                 sub     rsi, rdi\nseg007:00000001409F501D                 mov     rdx, rsi\nseg007:00000001409F5020                 sub     rdx, rbx\nseg007:00000001409F5023                 mov     rsp, rdx\nseg007:00000001409F5026                 jmp     rbp\n</code></pre>\n",
    "votes": "2",
    "answers": 0,
    "views": "89",
    "tags": [
        "ida",
        "disassembly",
        "binary-analysis",
        "x86",
        "x86-64"
    ],
    "user": "Ayyware",
    "time": "Aug 8, 2022 at 6:56",
    "comments": [],
    "answers_data": []
}