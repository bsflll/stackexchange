{
    "title": "Attempting to RE DI-8002W Dlink Firmware. Cannot find file system",
    "link": "https://reverseengineering.stackexchange.com/questions/19116/attempting-to-re-di-8002w-dlink-firmware-cannot-find-file-system",
    "content": "I'm attempting to reverse engineer the DI-8002W firmware from Dlink in order to search for vulnerabilities within the router. I'm at the point where I've recovered the Linux Image, but I cannot recover the file system itself at the moment. I'll walk through what I've done so far.\nFirmware can be found here - http://support.dlink.com.cn/ProductInfo.aspx?m=DI-8002W (Second Option)\nExtracting uImage\nUnzipping the download shows us <pre><code>DI_8002W-16.07.26A1.trx</code></pre>. This appears to be invalid from a strictly \"trx\" format, but rather has some Dlink specific information in the first 76 bytes such as <pre><code>VER216.07.26</code></pre>, etc. I strip this off with DD to get the uBoot image from the trx file. \n<pre><code>binwalk DI_8002W-16.07.26A1.trx \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n76            0x4C            uImage header, header size: 64 bytes, header CRC: 0x6850C842, created: 2016-08-03 22:52:13, image size: 5612788 bytes, Data Address: 0x80000000, Entry Point: 0x8000C2F0, data CRC: 0xBE8E9338, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: \"Linux Kernel Image\"\n140           0x8C            LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 8550244 bytes\n</code></pre>\n<pre><code>dd if=DI_8002W-16.07.26A1.trx of=clean.trx bs=1 skip=76</code></pre>\nuImage\nAt this point it appears that I have a valid uImage file, comprising of a linux kernel image and lzma compressed data. \n<pre><code>mkimage -l clean.trx \nImage Name:   Linux Kernel Image\nCreated:      Thu Aug  4 08:52:13 2016\nImage Type:   MIPS Linux Kernel Image (lzma compressed)\nData Size:    5612788 Bytes = 5481.24 kB = 5.35 MB\nLoad Address: 80000000\nEntry Point:  8000c2f0\n</code></pre>\n<pre><code>file clean.trx: u-boot legacy uImage, Linux Kernel Image, Linux/MIPS, OS Kernel Image (lzma), 5612788 bytes, Wed Aug  3 22:52:13 2016, Load Address: 0x80000000, Entry Point: 0x8000C2F0, Header CRC: 0x6850C842, Data CRC: 0xBE8E9338</code></pre>\nI presume the files / file system is located in the lzma data, so once again I extract this out, removing the header from the file.\n<pre><code>dd if=clean.trx of=uboot.lzma skip=64 bs=1</code></pre>\nLZMA data\nfile confirms we have valid LZMA data (at least according to the magic bytes).\n<pre><code>file uboot.lzma: LZMA compressed data, non-streamed, size 8550244</code></pre>\nI decompress the file with unlzma uboot.lzma and get the following file. This is about as much diagnostic information that I know how to provide.\n<pre><code>file uboot: data\n\nmkimage -l uboot \nImage Type:   MVEBU Boot from (null) Image\nImage version:0\nData Size:    -4 Bytes = 4194304.00 kB = 4096.00 MB\nLoad Address: 00000000\nEntry Point:  00000000\n\nbinwalk uboot \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n3399752       0x33E048        Linux kernel version \"2.6.36+ (root@jhl-ubuntu) (gcc version 3.4.2) #2035 Wed Aug 3 18:52:00 EDT 2016\"\n3587968       0x36BF80        CRC32 polynomial table, little endian\n3608048       0x370DF0        Base64 standard index table\n3900536       0x3B8478        xz compressed data\n3959784       0x3C6BE8        HTML document header\n3959845       0x3C6C25        HTML document footer\n3962060       0x3C74CC        HTML document header\n3962252       0x3C758C        HTML document footer\n3962416       0x3C7630        HTML document header\n3962785       0x3C77A1        HTML document footer\n3986999       0x3CD637        Neighborly text, \"neighbor %.2x%.2x.%pM lostde\"\n</code></pre>\nI'm looking to transition from this point to discovering / analysing the file system to look for vulnerabilities. Attempting to perform binwalk extraction (i.e binwalk -eM *) is leading to what appears to be a recursing result of the same files being extracted over and over. In other words, an extraction folder with three files are created. Going into this folder and performing binwalk -eM on any of these files will extract exactly the same three files once more.\nI'm lost on how we can transition from this point to recovering the file system.\nAny thoughts or areas you can suggest I could read up would be greatly appreciated.\n",
    "votes": "1",
    "answers": 0,
    "views": "223",
    "tags": [
        "firmware"
    ],
    "user": "Peleus",
    "time": "Aug 21, 2018 at 1:13",
    "comments": [],
    "answers_data": []
}