{
    "title": "How to compile c, cpp and python code as \"Released/Final\" version?",
    "link": "https://reverseengineering.stackexchange.com/questions/3752/how-to-compile-c-cpp-and-python-code-as-released-final-version",
    "content": "I want to know if there are ways to compile C, C++ and Python code in order to not be able to reverse engineering it over Linux or not?\nI have heard there are some ways over Windows to do it, but I am working on Linux. \nI want to compile my code securely, as released or final version.\nUPDATE \nAt least I want to make it hard for usual users to disassemble, \nI am using GCC for C and C++, also I would be thankful if you introduce me best compiler for Python.\n",
    "votes": "3",
    "answers": 2,
    "views": "736",
    "tags": [
        "python",
        "c",
        "c++",
        "compilers",
        "software-security"
    ],
    "user": "MLSC",
    "time": "Feb 24, 2014 at 10:18",
    "comments": [
        {
            "user": "Kevin",
            "text": "Bruce Schneier's column today linked to an article about research in this field: eprint.iacr.org/2013/451.pdf The paper will probably not tell you how to solve this, but it will give you a good idea of just how much research there is into your problem.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You cannot prevent reverse engineering. You can make it more or less harder but you cannot prevent it. No.\nUpdate\nOk, as the author updated it with a more clearer question... this is what one can do:\n\nStrip symbols from the binaries. At the very least.\nObfuscate the code. This may help: https://stackoverflow.com/questions/4111808/c-c-compiler-generating-obfuscated-code. \nPack or protect the binary. I know no good available protector for Linux, sorry.\n\nAs for the Python code... If you're lucky enough, you can use Shedskin to compile to native code and then apply the same techniques discussed before. If not, you may give a try to Cython instead of Python. Also, there is a question here about obfuscating Python code.\nPS: Anyway, in my opinion, code protection is overrated. You cannot prevent a decided person or group from reverse engineering a piece of software and, sometimes, it's a lose of time and money.\n",
            "votes": "7",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "MLSC",
                    "text": "<span class=\"comment-copy\">Ok ..that's exactly what I want..How is it possible with compiler? Thanks</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "As for C compiler (gcc), first make sure you do not make a mistake of compiling it with <pre><code>-g</code></pre> option (adds symbols for debugging, basically whole source code).\n\n-g  Produce debugging information in the operating system's native format\n\nSecondly, try with <pre><code>-s</code></pre> option:\n\n-s  Remove all symbol table and relocation information from the executable.\n\nWithout function names is would be harder to reverse engineer it. Take a look at <pre><code>man strip</code></pre>. I haven't tried it, but something like\n\nstrip --strip-debug objfile\n\nor:\n\nstrip --strip-unneeded objfile\n\non your object files could be useful.\nTurn on as much optimisation as you can <pre><code>-O3</code></pre>. It is really hard to read an optimized assembly, making it another impediment. There is really no good way of preventing disassembly and reverse-engineering, but it makes it harder.\nAs for Python, it is absolutely OK to ship only <pre><code>.pyc</code></pre> bytecode files. It is compiled version of source code for Python Virtual Machine. How do I create a .pyc file?. Try this one, maybe it is what you need. User can run bytecode file using <pre><code>python</code></pre> just as easily as a source code file.\nLastly, try to google for code obfuscation. It makes no sense to obfuscate C++ code, but maybe someone knows if code obfuscation is a good strategy for Python.\n",
            "votes": "4",
            "user": "user2622016",
            "time": "Feb 24, 2014 at 13:02",
            "is_accepted": false,
            "comments": []
        }
    ]
}