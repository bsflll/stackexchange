{
    "title": "How to do static analysis to identify pointer from concrete value in assembly?",
    "link": "https://reverseengineering.stackexchange.com/questions/5984/how-to-do-static-analysis-to-identify-pointer-from-concrete-value-in-assembly",
    "content": "So basically I am writing some code to do analysis work on disassembled assembly code.\nI am trapped in this issue for a while, here is an simple example of a disassembled asm code by objdump, basically all the address symbols have been translated into concrete value.\n<pre><code>1. mov 0x8408080, %eax\n2. ....\n3. call *%eax\n</code></pre>\nSo basically for the above example, it is easy to determine that <pre><code>0x8408080</code></pre> used in line 1 is an address of code, and I know it is relatively easy to heuristically consider all the value falling into the range of <pre><code>.text section</code></pre> as a pointer. \nHowever, how to use static analysis to automatically identify this issue? (I want to write a tool to analyze large amount of code as accurate as possible)\nI know somehow I should use constant propagation to forwardly do the analysis, but  basically as I am new to program analysis, I just don't know actually where to start..\nDoes anyone have experiences like this? Or is there any implemented tools I can look for help..?\n",
    "votes": "10",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "static-analysis"
    ],
    "user": "lllllllllllll",
    "time": "Jul 31, 2014 at 1:28",
    "comments": [],
    "answers_data": [
        {
            "content": "Some decompilers (phoenix for example) use Value Set Analysis to recover the cfg.\nPaper Abstract\n\nThis paper concerns static-analysis algorithms for analyzing binary executables. The aim of the work is to recover intermediate representations (IRs) that are similar to those that can be created for a program written in a high-level language. Our goal is to perform this task for programs such as viruses, worms, and mobile code. For such programs, symbol-table and debugging information is either entirely absent, or cannot be relied upon if present; hence, the analysis described in the paper makes no use of symbol-table/debugging information.\n\nThe main analysis discussed in the paper, called value-set analysis, tracks address-valued and integer-valued quantities simultaneously. It is related to pointer-analysis algorithms that have been developed for programs written in high-level languages, which determine an over-approximation of the set of variables whose addresses each pointer variable can hold. At the same time, value-set analysis is similar to range analysis and other numeric static-analysis algorithms that over-approximate the integer values that each variable can hold.\nThe techniques described in the paper have been implemented as part of CodeSurfer/x86, a prototype tool for browsing (``surfing''), inspecting, and analyzing x86 executables.\n",
            "votes": "6",
            "user": "perror",
            "time": "Jul 31, 2014 at 6:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Thank you for your answer. I actually have read some papers about VSA. Basically, is it the right way to use VSA..? It is doable to leverage VSA on analyzing the \"candidacy of indirect control flow transfer\", which is a extremely critical issue in reverse engineering based static analysis. However, IMHO, I can not figure the relation between VSA and what I proposed..</span>",
                    "time": null
                },
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">anyway, CodeSurfer/x86 is not open source, and I find it really hard to even somehow re-implement a toy version only targeting on the issue I presented...</span>",
                    "time": null
                },
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">It's not the only option of course. A simpler option, which is also quite successful, is simple recursive disassembly augmented with heuristics. This is the approach ida takes, to good practical effect. As for open source, I believe vine implements vsa and bap has at least a partial implementation per this blog post in 2012 <a href=\"http://edmcman.bitbucket.org/blog/2012/07/23/cfg-recovery-in-bap/\" rel=\"nofollow noreferrer\">edmcman.bitbucket.org/blog/2012/07/23/cfg-recovery-in-bap</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Basically, distinguish between values, addresses and instruction is the role of a type recovery system.\nThere is an excellent seminal paper from Alan Mycroft about a technique called type-based decompilation (ESOP'99) which might give you some ideas on how to do.\nAnother, more recent, paper describes the technique that is currently used in the Phoenix decompiler which is called: TIE: Principled Reverse Engineering of Types in Binary Programs (NDSS'11) written by people from CMU and that give an in-depth of the technique they use.\nApart from that, the reconstruction of the shape of the types (array, struct, etc.) can be done by using the DIVINE technique (VMCAI'07) by Reps and Balakrishnan. A more extensive journal paper (TOPLAS'10) has been also published by both authors that gather all their work about the topic.\nStill, there are a lot of other works on this domain, but I believe the papers I cited above to be, more or less, the current trend in the 'type-recovery' domain.\n",
            "votes": "3",
            "user": "perror",
            "time": "Jul 31, 2014 at 11:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}