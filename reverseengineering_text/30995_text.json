{
    "title": "Dumping .NET Dynamic Methods",
    "link": "https://reverseengineering.stackexchange.com/questions/30995/dumping-net-dynamic-methods",
    "content": "I have a .NET exe that creates DynamicMethods whose bodies are built from a byte array and later called. I'm able to access the array, and even to disassemble it \"raw\" starting from the bytes to get an idea of what the method is doing but i'm unable to dump these methods to disk in a reliable way. I've tried with dnSpy by copying the resulting IL instructions, however i need to do this for something like 70 functions, some of them over 3000 bytes long and i'm trying to automate it. The problem i have is that an instruction like this\n<pre><code>IL_0002: newobj     Void .ctor(System.Exception)/System.Diagnostics.StackTrace\n</code></pre>\ncorresponds to:\n<pre><code>raw bytes : 02 73 02 00 00 06\n\nIL_0002 newobj  0x06000002 \n</code></pre>\nHowever, the way it's stored on disk becomes:\n<pre><code>raw bytes : 02 73 E5 00 00 0A\n\nIL_0002 newobj  0x0A0000E5 \n</code></pre>\nI've read the ECMA specification for CIL but i haven't found how these tokens are translated or what offsets are used in this particular computation.\nTLDR\nWhat i'm trying to do is to restore the bodies of methods of an executable that have been replaced with random junk from their byte representation in an automated way, ideally by rewriting the section that's supposed to contain the instructions.\nI hope it's not too similar to another question regarding .NET (and the same challenge i believe) that's still open.\nsimilar question, i believe my problem is different though.\n",
    "votes": "2",
    "answers": 0,
    "views": "318",
    "tags": [
        "disassembly",
        "decompilation",
        ".net",
        "dnspy"
    ],
    "user": "Net_Newb",
    "time": "Oct 14, 2022 at 20:48",
    "comments": [],
    "answers_data": []
}