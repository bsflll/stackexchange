{
    "title": "ARMCC/C++ Empty Vtable entries",
    "link": "https://reverseengineering.stackexchange.com/questions/16672/armcc-c-empty-vtable-entries",
    "content": "I am reversing an application for the 3ds which are compiled with ARMCC.\nI found the vtables of the key classes and have a problem figuring out how the C++ representation of these was.\nVtable of first base class:\n<pre><code>fBase::dtor\n0                     // no dtorFree\nfBase::function1\nfBase::function2\n...\nfBase::function13\n</code></pre>\nVtable of second base class:\n<pre><code>sBase::dtor\n0                     // no dtorFree\nsBase::function1\nfBase::function2\n...\nsBase::function13\n</code></pre>\nNow the problematic one:\nVtable of Actor class:\n<pre><code>Actor::dtor\n0                     // no dtorFree\nsBase::function1\nfBase::function2\n... (3-12)\nsBase::function13\n0                     // gap in vtable?\nActor::function14\nActor::function15\n... (16-19)\nActor::function20\n0                     // gap in vtable?\nActor::function21\nActor::function22\n... (23-34)\nActor::function35\n</code></pre>\nAt the beginning I assumed that these are pure virtual function (Actor::function20-1()=0;) but these \"gaps\" in the vtables are not \"overwritten\" by any top level classes and thus the gaps also end up in their vtables.\nWhat causes these empty vtable entries and how'd the C++ representation look like?\n",
    "votes": "3",
    "answers": 2,
    "views": "353",
    "tags": [
        "decompilation",
        "c++",
        "arm",
        "virtual-functions"
    ],
    "user": "iBent",
    "time": "Oct 31, 2017 at 10:33",
    "comments": [],
    "answers_data": [
        {
            "content": "Two possibilities come to mind:\n\nThese are slots for pure virtual methods. In many implementations the compiler provides something like <pre><code>__purecall</code></pre>  or <pre><code>__cxa_pure_virtual</code></pre> to catch accidental calls, but since they are not supposed to happen anyway, a NULL works just as well on resource-constrained platforms.\nItanium C++ ABI reserves two slots preceding the function table itself for the offset to top and typeinfo pointer. \n\nIn most classes, offset to top is 0 and the typeinfo pointer can be zero as well if RTTI is not used, so normally you would see two zeroes between vtables, so I strongly suspect you have the case #1. \nAs for why they're not overridden, maybe it's a bug in the source code. As long as they're not actually called it's all kosher from the C++ point of view AFAIK.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Oct 31, 2017 at 11:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "After reversing a bit more:\nIt cannot be __cxa_pure_virtual. I found the implementation for that in my binary.\nIt looks like the compiler just did some very poor optimizations: The virtual function slot is never called so the corresponding functions were optimized away but it didn't actually shift the slot indices. Interesting.\n",
            "votes": "0",
            "user": "iBent",
            "time": "May 22, 2020 at 8:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}