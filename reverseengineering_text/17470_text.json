{
    "title": "explain java bytecode",
    "link": "https://reverseengineering.stackexchange.com/questions/17470/explain-java-bytecode",
    "content": "I saw java bytecode that need to compare to var,\nif they equal return true, else .....\n<pre><code>if(var1==var2)\n   return true;\nelse\n{ ...}\n</code></pre>\non bytecode\n<pre><code>aload 1\naload 2\nif_acmpne 6\niconst 1\nireturn\n</code></pre>\nI understand iconst1 and ireturn to return true. and understand aload1 and aload2 to load 2 var to stack.\nBut how <pre><code>if_acmpne 6</code></pre> works? what is 6?\nthank\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "java",
        "byte-code"
    ],
    "user": "cdcsccd",
    "time": "Feb 14, 2018 at 21:17",
    "comments": [
        {
            "user": "dsasmblr",
            "text": "6 is a label/branchoffset. If the comparison shows that the two values are not equal, then execution jumps to the instruction at location 6 (in your example, that is). Good resources here (cs.au.dk/~mis/dOvs/jvmspec/ref--24.html) and here (en.wikipedia.org/wiki/Java_bytecode_instruction_listings).\n",
            "time": null
        },
        {
            "user": "cdcsccd",
            "text": "@dsasmblr in this case 6  is that mean  instruction  no..6  from the beginning of my function? is that depend on my os or on somthing else? or 6 is always  instruction  no. 6?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The <pre><code>if_acmpne</code></pre> instruction pops two objects off the stack and compares them. If they are not equal, then it jumps to the provided offset, which in this case is 6 bytes from the start of the method code.\nIn general, you can learn about all of the bytecode instructions by reading the JVM specification here: https://docs.oracle.com/javase/specs/\n",
            "votes": "1",
            "user": "Antimony",
            "time": "Feb 14, 2018 at 22:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "cdcsccd",
                    "text": "<span class=\"comment-copy\">in this case 6  is that mean  instruction  no..6  from the beginning of my function? is that depend on my os or on somthing else? or 6 is always  instruction  no. 6?</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Instruction sizes are defined by the bytecode format and are OS independent. Most instructions are one byte long (hence the term bytecode), but some are longer. <code>if_acmpne</code> itself is 3 bytes for instance. Again, you really need to read the JVM spec.</span>",
                    "time": null
                },
                {
                    "user": "cdcsccd",
                    "text": "<span class=\"comment-copy\">I read the JVM spec, but when i open this class with Krakatau that show that the number that come after if_acmpne define lable name</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">@cdcsccd That's the assembler being helpful. Working with the raw bytes directly is a huge pain, so assemblers define a human readable format which can be mapped to and from the underlying binary classfile. If you want to see the raw classfile, use a hex editor.</span>",
                    "time": null
                }
            ]
        }
    ]
}