{
    "title": "Can my C# program be dumped from memory and reversed into source code?",
    "link": "https://reverseengineering.stackexchange.com/questions/13781/can-my-c-program-be-dumped-from-memory-and-reversed-into-source-code",
    "content": "I have a client application that, once the user is authenticated with my server, sends a byte array which is then loaded using Assembly.Load. I am pretty sure once that happens, even if the loaded bytes are dumped from memory, they cannot be used to re-construct source code. I just wanted to confirm this, or get more information in case I am wrong.\nThanks!\n",
    "votes": "2",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "decompilation",
        ".net"
    ],
    "user": "DynamicKeyword",
    "time": "Feb 11, 2021 at 11:53",
    "comments": [
        {
            "user": "Ghassan Idriss",
            "text": "What if a user reverses your client application and modifies it to save the code you are sending over to disk for inspection? Or captures the data with wireshark or fiddler for inspection?  Seems like it would be able to be reversed in that way given some effort. On a side note, I think it is a really bad idea to send executable code over the wire to your client for execution. Seems like bad practice to me.\n",
            "time": null
        },
        {
            "user": "DynamicKeyword",
            "text": "I did not think about the modification to save code. I'll have to address that (not sure how yet, maybe just checksum the client application and send it on the server to see if it matches). As for capturing data, it is encrypted and needs to reach the client to be properly decrypted. Also, the client is encrypted with Enigma protector.\n",
            "time": null
        },
        {
            "user": "Ghassan Idriss",
            "text": "Still with modification to the client (assuming also in C#) would be trivial to accomplish that. Also, Enigma can be unpacked easily as can most .NET protections. This tool has worked for me in unpacking Enigma VM lifeinhex.com/improved-static-enigma-virtual-box-unpacker  I would never assume that just because it is packed with a commercial product that it can't be unpacked. Even if no tool like above were available, someone who is willing to put in the work can get it done.\n",
            "time": null
        },
        {
            "user": "DynamicKeyword",
            "text": "So am I out of luck? Would checking for modifications of the client work? Now that I think of it, anything I think of can be spoofed if they do indeed modify the client. Hmm. I guess I'm not correctly using code hosting.\n",
            "time": null
        },
        {
            "user": "Ghassan Idriss",
            "text": "Maybe using a language that takes a lot more work to reverse engineer might be worth using instead of C# if it is that much of a concern for you. Maybe C++ instead? You can do some nice obfuscation on it for free with something like LLVM obfuscator which makes it even more of a pain in to reverse. But again.. given someone with time and determination there is not much you can do. I am no pro on the matter... maybe someone with more experience can chime in. This is why I only commented.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It is in fact trivial to dump the byte array or the module directly from dnSpy.\nTo mimic the described scenario I wrote some trivial example code:\n<pre><code>using System.IO;\nusing System.Reflection;\n\nnamespace DumpAssembly\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var rawAssembly = File.ReadAllBytes(\"Test.dll\");\n            var assembly = Assembly.Load(rawAssembly);\n            foreach(var type in assembly.ExportedTypes)\n            {\n                if (type.Name == \"Test\")\n                {\n                    var method = type.GetMethod(\"DoCoolStuff\");\n                    method.Invoke(null, null);\n                    break;\n                }\n            }\n        }\n    }\n}\n</code></pre>\nDrop the generated assembly in dnSpy, start debugging and step a little through the Main method. Soon you will be able to save the newly-loaded module:\n\nOnce the module is saved, opening it in dnSpy will easily give away your intellectual property:\n\nNow a partial solution for this is obfuscating your module with something like ConfuserEx (it's open source, commercial products are available). This might slow down your attackers but it would be naive to assume they cannot decompile and understand your code within a reasonable amount of time.\n",
            "votes": "8",
            "user": "mrexodia",
            "time": "Oct 21, 2016 at 22:20",
            "is_accepted": true,
            "comments": [
                {
                    "user": "DynamicKeyword",
                    "text": "<span class=\"comment-copy\">Yeah, this seems to be what I was looking for. Didn't think it was THIS easy.</span>",
                    "time": null
                },
                {
                    "user": "DynamicKeyword",
                    "text": "<span class=\"comment-copy\">Also, this is a bit out-of-scope if this question.  The situation is, I use Enigma protector to pack the client executable that is to be distributed. So maybe there's a way I can verify that the file has not been unpacked/tampered with. I was thinking by sending the MD5 hash of the executed client to the server and making sure it matches. But now I'm wondering if they could just alter the client so that it sends me the correct MD5.</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">You can indeed modify the client to send the correct data over the line. You should run under the assumption that your code is being looked at.</span>",
                    "time": null
                },
                {
                    "user": "Elmue",
                    "text": "<span class=\"comment-copy\">dnSpy is one of these completely undocumented tools. It is useless for me because after attaching to a process the Assembly Editor shows only the Microsoft assemblies (System.Windows.Forms etc), but not the assemblies of my application.</span>",
                    "time": null
                },
                {
                    "user": "mrexodia",
                    "text": "<span class=\"comment-copy\">Try the Debug -&gt; Modules menu.</span>",
                    "time": null
                }
            ]
        }
    ]
}