{
    "title": "Find the kernel structure that contains device name",
    "link": "https://reverseengineering.stackexchange.com/questions/3233/find-the-kernel-structure-that-contains-device-name",
    "content": "I'm using WinDbg to try enumerate drivers and their associated devices. Getting the driver name is very easy. It is found in the _DRIVER_OBJECT structure. Unfortunately, the _DEVICE_OBJECT does not contain the name of the device. \nUsing the <pre><code>!devobj</code></pre> command I can see the name of the device, but I would like to find the table/structure that contains the name.\n",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "windbg",
        "kernel-mode"
    ],
    "user": "ben_re",
    "time": "Dec 20, 2013 at 16:36",
    "comments": [],
    "answers_data": [
        {
            "content": "So assuming like you said, you have the linear address of your device object, use the windbg extension <pre><code>!object 0xlinearaddress</code></pre>. Based on your windows build, it will display the linear address of the object header. Which in memory exists right below the object.\nUse windbg to parse the <pre><code>OBJECT_HEADER</code></pre> structure for you. Starting with Windows 7 you are going to have a member called <pre><code>InfoMask</code></pre>, earlier versions have <pre><code>NameInfoOffset</code></pre>. \nIf you have an earlier build, <pre><code>NameInfoOffset</code></pre> is subtracted from the linear base of the object header, to get you the base of an <pre><code>OBJECT_HEADER_NAME_INFO</code></pre> structure for that object.\nIf you have a Windows 7 build or later, <pre><code>InfoMask</code></pre> is a bitmask describing other creator structures that exist before the beginning of the header. It is computed using the <pre><code>ObInfoMaskToOffsetTable</code></pre> which contains the offset to the <pre><code>OBJECT_HEADER_NAME_INFO</code></pre> structure for the object. It is always at a constant location but the <pre><code>InfoMask</code></pre> should be used to determine if the object is named, because not all objects are required to be named.\nSo a quick example for you, let's say you have a device object at <pre><code>fffffa8001234560</code></pre>. Let's also presume you are using Windows 7 x64.\nYour name info would be:\n<pre><code>dt nt!_object_header_name_info fffffa8001234560-0x30-0x20\n</code></pre>\n-0x30 to base of header\n-0x20 because in this case <pre><code>InfoMask</code></pre> used in the table has an index value of 0x20.\nThis structure contains the name relative to it's object directory. \nAlso have a look at the exported kernel routine <pre><code>ObQueryNameInfo</code></pre>.\n",
            "votes": "8",
            "user": "everdox",
            "time": "Dec 20, 2013 at 18:34",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "From what I remember, both XP and Win7 always had this format:\n<pre><code>object_directory_followed</code></pre> by <pre><code>object_header</code></pre> whose <pre><code>_QUAD</code></pre> part (opaque do not use this field) points to the <pre><code>OBJECT</code></pre>\nIf you did <pre><code>dt nt!_Object_header_name_info <address of object> - 0x28</code></pre>:\n<pre><code>kd> !devobj \\Device\\Beep;dt nt!_OBJECT_HEADER_NAME_INFO 86884db8-28\nDevice object (86884db8) is for:\n Beep \\Driver\\Beep DriverObject 86e703b8\nCurrent Irp 00000000 RefCount 0 Type 00000001 Flags 00000044\nDacl e1020c34 DevExt 86884e70 DevObjExt 86884ec8 \nExtensionFlags (0000000000)  \nDevice queue is not busy.\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"Beep\"\n   +0x00c QueryReferences  : 1\nkd> !devobj \\Device\\00000013\nDevice object (86fe7cd0) is for:\n 00000013 \\Driver\\PnpManager DriverObject 86fe9328\nCurrent Irp 00000000 RefCount 0 Type 00000004 Flags 00001040\nDacl e1020c34 DevExt 86fe7d88 DevObjExt 86fe7d90 DevNode 86fe7b88 \nExtensionFlags (0x00000010)  DOE_START_PENDING\nDevice queue is not busy.\nkd> dt nt!_OBJECT_HEADER_NAME_INFO 86fe7cd0-28\n   +0x000 Directory        : 0xe100d670 _OBJECT_DIRECTORY\n   +0x004 Name             : _UNICODE_STRING \"00000013\"\n   +0x00c QueryReferences  : 1\n</code></pre>\n",
            "votes": "2",
            "user": "Ange",
            "time": "Dec 23, 2013 at 16:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}