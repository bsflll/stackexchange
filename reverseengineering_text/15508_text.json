{
    "title": "How to convert the dumped firmware (from linksys-wrt54gl via JTAG port) in an understandable format",
    "link": "https://reverseengineering.stackexchange.com/questions/15508/how-to-convert-the-dumped-firmware-from-linksys-wrt54gl-via-jtag-port-in-an-un",
    "content": "Issuing some commands for the dumped firmware:\n<pre><code>$ du -h fw.bin\n4.0 M\n\n$ file fw.bin\nfw.bin: data\n\n$ file -i fw.bin\nfw.bin: application/octet-stream; charset=binary\n\n$ binwalk fw.bin\n-\n\n$ enca -L none fw.bin\n-\n</code></pre>\nThe way that I have dumped the firmware is by using the JTAG port:\n\nAnd the pins on the linksys router are set according to the figure described in the datasheet (www.cse.buffalo.edu/~bina/amrita/cse524/wrt54gl.pdf):\n\nAnd the corresponding pins from the BusPirate v3.6 is put on based on the reference (dangerousprototypes.com/docs/Bus_Pirate_I/O_Pin_Descriptions):\nThe OpenOCD command has been issued such as:\n<pre><code>sudo openocd -f interface/buspirate.cfg -f board/linksys-wrt54gl.cfg -c \"init\"\n</code></pre>\nThe configurations for BusPirate\n<pre><code>interace/buspirate.cfg</code></pre>:\n<pre><code>interface buspirate\nbuspirate_port /dev/ttyUSB0\nbuspirate_speed normal\nreset_config srst_only\n</code></pre>\nand the <pre><code>board/linksys-wrt54gl.cfg</code></pre>:\n<pre><code># Linksys WRT54GL v1.1\n#\nsource [find target/bcm5352e.cfg]\nset partition_list {\n    CFE         { Bootloader                    0x1c000000 0x00040000 }\n    firmware    { \"Kernel+rootfs\"               0x1c040000 0x003b0000 }\n    nvram       { \"Config space\"                0x1c3f0000 0x00010000 }\n}\n\n# External 4MB NOR Flash (Intel TE28F320C3BD90 or similar)\nset _FLASHNAME $_CHIPNAME.flash\nflash bank $_FLASHNAME cfi 0x1c000000 0x00400000 2 2 $_TARGETNAME\n</code></pre>\nand the source, <pre><code>target/bcm5352e.cfg</code></pre> , it refers to:\n<pre><code>set _CHIPNAME bcm5352e\nset _CPUID 0x0535217f\n\njtag newtap $_CHIPNAME cpu -irlen 8 -ircapture 0x1 -irmask 0x1f -expected-id $_CPUID\n\nset _TARGETNAME $_CHIPNAME.cpu\ntarget create $_TARGETNAME mips_m4k -endian little -chain-position $_TARGETNAME\n\ngdb_memory_map disable\n$_TARGETNAME configure -event gdb-attach {\n   reset\n   halt\n}\n</code></pre>\nI open a new terminal and telnet into the socket openocd has opened for communication and I dump the firmware as follows:\n<pre><code>dump_image fw.bin 0x1c000000 0x00400000\n</code></pre>\nThe values are adapted from the <pre><code>linksys-wrt54gl.cfg</code></pre> file shown previously.\nAny Ideas what might be wrong using/connecting the JTAG and dumping the firmware?\nInfo about the current Linksys-Wrt54gl:\nModel: WRT54GL-EU\nFirmware Version: v4.30.7, Jun.20, 2006\nA copy of the \"dumped\" firmware can be obtained here:\nhttps://www.dropbox.com/s/kl02cnc5qqddx1x/fw.bin?dl=0\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "debugging",
        "binary-analysis",
        "firmware",
        "mips",
        "jtag"
    ],
    "user": "alperc",
    "time": "Jun 29, 2017 at 17:00",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "what if you try <pre><code>-EB</code></pre>?\n",
            "time": null
        },
        {
            "user": "alperc",
            "text": "then its andi instruction that is repeated all the way.\n",
            "time": null
        },
        {
            "user": "Brandon Bryant",
            "text": "from the <pre><code>set partition_list {     CFE         { Bootloader                    0x1c000000 0x00040000 }     firmware    { \"Kernel+rootfs\"               0x1c040000 0x003b0000 }     nvram       { \"Config space\"                0x1c3f0000 0x00010000 }</code></pre> It appears you might be dumping the bootloader instead of the firmware.\n",
            "time": null
        },
        {
            "user": "alperc",
            "text": "But shouldn't I be able to see this in $binwalk. The dumped data looks garbage. And even though I only dump the \"Kernel+rootfs\" which is the core of the firmware, it still cannot recognize anything.\n",
            "time": null
        },
        {
            "user": "Brandon Bryant",
            "text": "what does <pre><code>dump_image fw.bin 0x1c040000 0x003b0000</code></pre> do? if <pre><code>0x1c040000 0x003b0000</code></pre> is the offsets for the kernel+rootfs shouldn't you be using those values?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The firmware itself most likely is not a binary. Also usually when you run file it will tell you something like: \n<pre><code>file busybox \nbusybox: ELF 32-bit MSB executable, MIPS, MIPS32 version 1</code></pre>. My guess is that you haven't actually extracted any binaries yet. My advice would be to use something like binwalk to extract specific files and binaries from the firmware. Running objdump on an entire firmware will probably give you an object dump of every single binary in your firmware and that could be a lot.\n",
            "votes": "2",
            "user": "Brandon Bryant",
            "time": "Jun 27, 2017 at 21:36",
            "is_accepted": false,
            "comments": [
                {
                    "user": "alperc",
                    "text": "<span class=\"comment-copy\">Actually, I have issued binwalk but it couldn't recognize anything. I used enca to detect the encoding, but it couldn't either. Do you have any suggestions?</span>",
                    "time": null
                },
                {
                    "user": "Brandon Bryant",
                    "text": "<span class=\"comment-copy\">I can offer a few. I would like to gather some more information about your router. If you could post what firmware version you are using, what hardware version your wrt54gl is, and if its not too lengthly, what steps you've taken to dump the firmware. I did go to the linksys page and download the Ver.4.30.18 (build 6) firmware and then I ran a simple binwalk against it and found a few things. I'm thinking maybe what is going on is that you got that flash memory from the device instead of the firmware</span>",
                    "time": null
                },
                {
                    "user": "alperc",
                    "text": "<span class=\"comment-copy\">Actually,I am not sure if I have dumped the firmware correctly using the JTAG, but I will make an edit section on the actual post, where I will explain further details.</span>",
                    "time": null
                }
            ]
        }
    ]
}