{
    "title": "Does x64dbg display the whole memory info even for a simple program opened?",
    "link": "https://reverseengineering.stackexchange.com/questions/19015/does-x64dbg-display-the-whole-memory-info-even-for-a-simple-program-opened",
    "content": "I'm very new in software reverse engineering. I created a very simple <pre><code>c</code></pre> program using Visual Studio and the code is listed below. \n<pre><code>#include <stdio.h>\n\nvoid main()\n{\n    int x, y, z;\n\n    while(1)\n    {\n        x = 0;\n        y = 1;\n        do\n        {\n            printf(\"%d\n\", x);\n\n            z = x + y;\n            x = y;\n            y = z;\n        } while (x < 255);\n    }\n\n}\n</code></pre>\nAfter compiled the program, I use <pre><code>x64dbg</code></pre> opened the compiled output file <pre><code>project1.exe</code></pre>. \n\nWhy for such a simple program, x64dbg displays this huge amount of assembly code (this seems happen to other disassembler too)?  See the scroll bar you get it. Is it because x64dbg show all memory info here? If so, that means I can find all other programs running on my computer from  this panel, right?\nThanks in advance for any clarification. This is probably a noob question but I can't find the answer online.\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "memory",
        "x64dbg"
    ],
    "user": "Just a learner",
    "time": "Aug 8, 2018 at 18:38",
    "comments": [
        {
            "user": "NirIzr",
            "text": "Please try to paste text in code blocks instead of images of code.\n",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "You are currently looking at the system breakpoint, which resides in ntdll.dll. Just press F9 to go to your entry point. You can also use Ctrl+G and type “main” to go to your main.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The image in query can't be viewed.\nI assume you are asking ----\n\nwhy I can't see the assembly code pertaining to my code portion only\nand what are those extra assembly code which I didn't seem to write\nstaring at me\n\nThe apparently extra code that is shown while you disassemble a console application are inserted by the compiler and is called c runtime initialization code  aka CRT code.\nA console application needs an input mechanism and an output mechanism\nso before your code is called the compiler puts those code in place\nyou can find the source for such code in your visual studio directory under\n<pre><code>C:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\crt\\src\\vcruntime>cd ..\n\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\crt\\src>ls\narm  concrt  i386  linkopts  stl  vccorlib  vcruntime  x64\n\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\crt\\src>cd vcruntime\n\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\crt\\src\\vcruntime>ls *main*\ndll_dllmain.cpp       exe_main.cpp     exe_wmain.cpp     ManagedMain.cpp\ndll_dllmain_stub.cpp  exe_winmain.cpp  exe_wwinmain.cpp  vcruntime_dllmain.cpp\n\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\crt\\src\\vcruntime>cat exe_main.cpp\n//\n// exe_wwinmain.cpp\n//\n//      Copyright (c) Microsoft Corporation. All rights reserved.\n//\n// The mainCRTStartup() entry point, linked into client executables that\n// uses main().\n//\n#define _SCRT_STARTUP_MAIN\n#include \"exe_common.inl\"\n\n\n\nextern \"C\" int mainCRTStartup()\n{\n    return __scrt_common_main();\n}\n\nC:\\Program Files\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\crt\\src\\vcruntime> \n</code></pre>\nIf you don't want to see such code do not create a console app\nbut write a bare-minimum windows app and handle all the input and output mechanisms on your own.\nfor example, your code can be rewritten like this:\n<pre><code>#include <windows.h>\n\nvoid mymain() {\n    int x, y, z;\n    char buff[0x100];\n\n    while(1)\n    {\n        x = 0;\n        y = 1;\n        do\n        {\n            wsprintf(buff , \"%d\n\", x);\n            MessageBoxA(NULL,buff,\"test\",MB_OK);\n\n            z = x + y;\n            x = y;\n            y = z;\n        } while (x < 255);\n    }\n\n}\n</code></pre>\nand compiled an linked like this from vc command prompt (you can set these options from project settings also but i wont get into discussing property pages here)\n<pre><code>cl /GS-  /Zi /W4 /analyze /nologo /Od bare.cpp /link /release /entry:mymain /subsystem:windows user32.lib\n</code></pre>\n<pre><code>/GS</code></pre> disables buffer security checks   /entry says to the compile i dont want all the stuff you drop into my binary just start from here.\n<pre><code>/subsystem:windows</code></pre> says I don't want your black screen blinking at me.\nI will write on my own hyperspace and read through telepathy and bingo you get a slim and trim 3 kb excutable with just this disassembly.\n<pre><code>dumpbin /disasm bare.exe\nMicrosoft (R) COFF/PE Dumper Version 14.14.26430.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\nDump of file bare.exe\n\nFile Type: EXECUTABLE IMAGE\n\n?mymain@@YAXXZ:\n  00401000: 55                 push        ebp\n  00401001: 8B EC              mov         ebp,esp\n  00401003: 81 EC 0C 01 00 00  sub         esp,10Ch\n  00401009: B8 01 00 00 00     mov         eax,1\n  0040100E: 85 C0              test        eax,eax\n  00401010: 74 5D              je          0040106F\n  00401012: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],0\n            00\n  00401019: C7 45 F8 01 00 00  mov         dword ptr [ebp-8],1\n            00\n  00401020: 8B 4D FC           mov         ecx,dword ptr [ebp-4]\n  00401023: 51                 push        ecx\n  00401024: 68 10 20 40 00     push        402010h\n  00401029: 8D 95 F4 FE FF FF  lea         edx,[ebp-10Ch]\n  0040102F: 52                 push        edx\n  00401030: FF 15 04 20 40 00  call        dword ptr [__imp__wsprintfA]\n  00401036: 83 C4 0C           add         esp,0Ch\n  00401039: 6A 00              push        0\n  0040103B: 68 14 20 40 00     push        402014h\n  00401040: 8D 85 F4 FE FF FF  lea         eax,[ebp-10Ch]\n  00401046: 50                 push        eax\n  00401047: 6A 00              push        0\n  00401049: FF 15 00 20 40 00  call        dword ptr [__imp__MessageBoxA@16]\n  0040104F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]\n  00401052: 03 4D F8           add         ecx,dword ptr [ebp-8]\n  00401055: 89 4D F4           mov         dword ptr [ebp-0Ch],ecx\n  00401058: 8B 55 F8           mov         edx,dword ptr [ebp-8]\n  0040105B: 89 55 FC           mov         dword ptr [ebp-4],edx\n  0040105E: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]\n  00401061: 89 45 F8           mov         dword ptr [ebp-8],eax\n  00401064: 81 7D FC FF 00 00  cmp         dword ptr [ebp-4],0FFh\n            00\n  0040106B: 7C B3              jl          00401020\n  0040106D: EB 9A              jmp         00401009\n  0040106F: 8B E5              mov         esp,ebp\n  00401071: 5D                 pop         ebp\n  00401072: C3                 ret\n_wsprintfA:\n  00401073: FF 25 04 20 40 00  jmp         dword ptr [__imp__wsprintfA]\n_MessageBoxA@16:\n  00401079: FF 25 00 20 40 00  jmp         dword ptr [__imp__MessageBoxA@16]\n\n  Summary\n\n        1000 .rdata\n        1000 .reloc\n        1000 .text\n</code></pre>\nEDIT\nThe screen shot seems to be inlined after I posted the answer\nand the code in screen shot belongs to <pre><code>ntdll.dll</code></pre> and not your module. <pre><code>ntdll</code></pre> is a dll that is mandatory for any application and it provides the\nlow level resources and routines for transitioning into kernel space.\nGo to  modules pane (Alt+m I would guess as x64dbg uses ollydbg ui shorcuts ) and select your module and follow its entry point to look at your code.\n",
            "votes": "3",
            "user": "Viktor",
            "time": "Jul 4, 2022 at 19:17",
            "is_accepted": true,
            "comments": []
        }
    ]
}