{
    "title": "Code generation patterns of compilers",
    "link": "https://reverseengineering.stackexchange.com/questions/10831/code-generation-patterns-of-compilers",
    "content": "After reading the question of zespri it was interesting for me to read something about the code generation patterns of different compilers in order to reverse better and quicker. Do you know good articles/books/advices or another resources where I could read this?\nI know that there are several function call conventions but it would be nice to know about artefacts of compiler code generation that aren't worth of attention while reversing.\n",
    "votes": "2",
    "answers": 1,
    "views": "224",
    "tags": [
        "ida",
        "assembly",
        "compilers"
    ],
    "user": "0xDEADC0DE",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "This might be a good start: hex-rays.com/products/ida/tech/flirt/in_depth.shtml\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I personally enjoy Reverse Engineering for Beginners (by Dennis Yurichev). \nThe book shows (among other things) lots of common code patterns being compiled to different architectures and using different compilers.\nThis way you can learn about the idiosyncrasies of the individual compilers by comparing how they transform the same code.\nNOTE: Please don't let the title of the book trick you. This is not your typical \"for beginners\" book. The author keeps adding content but the original title remains. It is actually beginner to intermediate level but of course that depends on who you are talking to :)\n",
            "votes": "3",
            "user": "Carlos Garcia",
            "time": "Sep 10, 2015 at 18:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}