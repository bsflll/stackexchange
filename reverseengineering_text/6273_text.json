{
    "title": "Right order of function arguments",
    "link": "https://reverseengineering.stackexchange.com/questions/6273/right-order-of-function-arguments",
    "content": "i have the following function with three arguments:\n<pre><code> sub_602667B proc near \n\n arg_0 = dword ptr 4\n arg_4 = dword ptr 8\n arg_8 = dword ptr 0Ch\n\n push    [esp+arg_8]\n push    [esp+4+arg_4]\n push    15\n push    [esp+0Ch+arg_0]\n</code></pre>\nThen I make the following sketch : \n<pre><code> esp, ebp -> | Old EBP        |  +0\n             | Return Address |  +4\n             | Argument 1     |  +8\n             | Argument 2     |  +12\n             | Argument 3     |  +16\n</code></pre>\nAnd now I have the following on my paper:\n<pre><code>   push    [esp+arg_8]     => is Argument 2,( because esp + 12(=0Ch) = Argument 2\n   push    [esp+4+arg_4]   => is Argument 2,( because esp + 4 + 8 = Argument 2 )\n   push    15\n   push    [esp+0Ch+arg_0] => is Argument 3,( because esp + 12 + 4 = 16 = Argument 3\n</code></pre>\nSo my question would be : Is that sketch ok? I wanted to ask because the point that Argument 2 is pushed twice and Argument 1 is not taken surprises me\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "assembly",
        "stack",
        "arguments"
    ],
    "user": "user3097712",
    "time": "Sep 21, 2014 at 13:41",
    "comments": [],
    "answers_data": [
        {
            "content": "Your code snippet does not contain <pre><code>push esp, ebp</code></pre>, so why would there be an \"old EBP\" on the stack? At the beginning of the function, your stack should look like this:\n<pre><code>esp + 00 | return address\nesp + 04 | Argument 1 (arg_0)\nesp + 08 | Argument 2 (arg_4)\nesp + 0C | Argument 3 (arg_8)\n</code></pre>\nAfter that, remember that <pre><code>esp</code></pre> changes after each <pre><code>push</code></pre>. IDA is already doing the maths for you and splitting the displacement into the <pre><code>+4</code></pre> and <pre><code>+arg_4</code></pre> parts â€” they represent \"balance <pre><code>esp</code></pre> back to its initial value\" and \"convert the remaining offset to a local variable\", respectively. The function is pushing exactly those variables which are referenced:\n<pre><code>push    [esp+arg_8]      ; Argument 3\npush    [esp+4+arg_4]    ; Argument 2\npush    15\npush    [esp+0Ch+arg_0]  ; Argument 1\n</code></pre>\n\nIf you want to find out more, you can highlight the <pre><code>[esp+4+arg_4]</code></pre> part in the disassembly and press Q to convert the displacement to a single number.\nThen go to Options > General... > Disassembly and enable the <pre><code>Display disassembly line parts: [x] Stack pointer</code></pre> setting. \nNow you see the difference between the <pre><code>esp</code></pre> value at the start of the function and the <pre><code>esp</code></pre> value in the current line.\nSubtract that difference from the displacement in the <pre><code>push</code></pre>, and you should get the right local variable.\n",
            "votes": "1",
            "user": "DCoder",
            "time": "Sep 21, 2014 at 14:28",
            "is_accepted": true,
            "comments": []
        }
    ]
}