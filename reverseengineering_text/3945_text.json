{
    "title": "Using Python pydbg - Find out what addresses does an instruction access",
    "link": "https://reverseengineering.stackexchange.com/questions/3945/using-python-pydbg-find-out-what-addresses-does-an-instruction-access",
    "content": "I want to know how to accomplish this task with python pydbg. How does pydbg trace an instruction? For instance: should I set a breakpoint at the instruction address? Then what should I do?\nThe Instruction:\n<pre><code>Address                Opcode\ngame.exe+31C2CB        eax,[ecx+00000FB0]\n</code></pre>\nSo, using pydbg. I want to find out what addresses does this instruction access.\nMore Info:\n\nPlatform: Windows 7 x64\nPython 2.7\nGame: World of warcraft x32\n\nWhat I am actually doing is a Bot that will read the player's health from the process memory and depending on the percentage it will heal him.\nThe problem is that the address for the player's health is dynamic. I've followed a lot of guides on how to find pointers for dynamic addresses / how to defeat DMA, but with no success.\nSo, I am trying to find another way of finding the player's health address which is by tracing the instruction that accesses it.\nI can do this by using cheat engine but I want to implement this feature into my bot so it can automatically find the player's health address.\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "python",
        "memory"
    ],
    "user": "A.Sherif",
    "time": "Feb 23, 2017 at 18:02",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "So, how did you get the instruction with Python?\n",
            "time": null
        },
        {
            "user": "A.Sherif",
            "text": "I did not get the instruction with python, I got it using cheat engine.\n",
            "time": null
        },
        {
            "user": "Stolas",
            "text": "Try to make your question more compact, better explained and show your own Google Attempts (Research we call it).\n",
            "time": null
        },
        {
            "user": "Stolas",
            "text": "Trying to cheat in World of Warcraft with debuggers is really hard (from what I gathered). Good luck with your project, also consider the implications of your character getting banned..\n",
            "time": null
        },
        {
            "user": "A.Sherif",
            "text": "I am not really trying to cheat or anything i just wanted to challenge myself to do any good project and i came up with this idea. I do not play the game (used to play it from a few years ago) and i do not have an account on blizzard, just using a private server. Am following the famous saying \"Code to learn coding\". Thanks for your time and help! I appreciate it :)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use a number of modules for this. It all depends on what you exactly want, my guess is to write a Cheater Application of sorts (due to the term cheat engine).\nThus I'd recommend to use a standalone Module.\nThese are a small list of Python modules that can disassemble code:\n\npydbg \npyida \ndistorm \nradare2 \npyew \nbyteplay\n",
            "votes": "2",
            "user": "Stolas",
            "time": "Mar 25, 2014 at 7:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "A.Sherif",
                    "text": "<span class=\"comment-copy\">Thanks for your reply, I decided that am going to use pydbg so i edited the question based on it. I've searched for pydbg, downloaded it, played with it for a while and read about it on <a href=\"http://pedramamini.com/PaiMei/docs/PyDbg/private/pydbg.pydbg.pydbg-class.html\" rel=\"nofollow noreferrer\">pedramamini.com/PaiMei/docs/PyDbg/private/â€¦</a> its really awesome and even helps in memory reading which i hope i knew about it earlier! but i still have no clue how to trace the instruction. Thanks again.</span>",
                    "time": null
                }
            ]
        }
    ]
}