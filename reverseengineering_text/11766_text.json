{
    "title": "How Do I get proficient at Reverse engineering?",
    "link": "https://reverseengineering.stackexchange.com/questions/11766/how-do-i-get-proficient-at-reverse-engineering",
    "content": "Please bear with me as I explain this situation.\nMaybe 10 days ago I took up the challenge of reverse engineering an Android app. Learning from scratch, I installed ADB, Apktool, Android Studio, Notepad++ with Smali highlighting etc. My approach has been to write test programs in Android studio that mirror the workings of the APK, and then decompile with Apktool to help me do Smali modifications. I've been successful in modifying the application to log all HTTP requests, headers, cookies, and post data to the android log.\nMy next challenge was to figure out how an important algorithm in the app works. This is what stumped me. I spent the last 3 or 4 days spending the majority of my day analysing Smali code making almost no progress. Apparently the algorithm is done (at least in part if not mostly) in a native library with the .so extension.\nOne of the extremely frustrating things about Reverse engineering is how small the community is. There are very few resources on the web (At least compared to other things). I've probably bitten off more than I can chew. I always attempt difficult projects that are above my skill level. For this task, I'm guessing I need to become very familiar with ARM and I'll have to use IDA Pro to analyse the .so file? To explain my knowledge level:\n\nI have very little experience using Ollydbg in Windows (I have slight\nunderstanding of registers and CMP, JMP, ADD commands, etc.)\nI have no\nexperience using IDA Pro. I'm quite new to reverse engineering, but I've had success with simple Smali modding because it's simple in\nsome situations.\nI know basic Java (To be clear, I'm not a complete beginner, variables, for loops, arrays, classes (to an extent) are second nature to me)\nI know basic C++ if not more than\nbasic\nI've done a lot of VB.NET programming.\nI feel quite knowledgeable in Python.\n\nSo I'm experienced with programming, but not really reverse engineering. How in over my head am I attempting to understand this complex native library (When I already know practically nothing about native libraries/JNI)? Could the professionals here please give me some specific examples of how I can get to the level where I am knowledgeable enough to complete my goal? I don't want to just give up because this is a difficult challenge. Please give me suggestions of how I can progress enough to complete my goal. I assume I'll need to learn IDA Pro and how ARM works.\nThanks\n",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "android",
        "apk"
    ],
    "user": "43.52.4D.",
    "time": "Jul 26, 2021 at 9:15",
    "comments": [
        {
            "user": "SSpoke",
            "text": "There is nearly nothing you have to know with IDA PRO if <pre><code>F5 key</code></pre> works on your SO file functions.. you could do <pre><code>CTRL+F5</code></pre> and read code which if you understand programming language you would have not so much difficulty understanding the algorithm it pumps out. If you cannot do F5.. then yes.. you will have more difficulty.. since it's <pre><code>.so</code></pre> to my understanding this means linux.. I only did <pre><code>.DLL</code></pre> / <pre><code>.EXE</code></pre> with IDA PRO have no idea how <pre><code>.so</code></pre> files handle.. could be exactly the same just different operating systems.\n",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "If you have alot of time.. find out which export of the <pre><code>.so</code></pre> file you need and trace it in ollydbg.. I'm sure ollydbg is ported to linux and could load up <pre><code>.so</code></pre> files, so a artificial call of that export making a simple program that loads up that <pre><code>.so</code></pre> file and calls that export and trace it. If all else falls.. and you need answer to that algorithm what I usually do is make TCP/UDP servers for a specific <pre><code>.dll</code></pre> file call then retrieve the answers by sending specific packets to my server.\n",
            "time": null
        },
        {
            "user": "SSpoke",
            "text": "did you try both <pre><code>idaq</code></pre>? and <pre><code>idaq64</code></pre>? It should work.. I found this post indicating it's the same thing on windows and linux reverseengineering.stackexchange.com/questions/2664/â€¦\n",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "@43.52.4D. Reversing (even java hah) is more involved than a bit of googling and asking strangers on the Internet for advice. One needs to understand (at least a bit) how the underlying stuff actually works. Think and experiment, that's my only advice.\n",
            "time": null
        },
        {
            "user": "Vitaly Osipov",
            "text": "@43.52.4D. That's what reversing boils down to - thinking and figuring it out :) There are no tricks or magic spells, only human brain vs binary code. A bit like in math - paper and pencil, everything else is crutches\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I spent the last 3 or 4 days\n  spending the majority of my day analysing Smali code making almost no\n  progress.\n\nI know it feels like you've made \"no progress\", but I'd encourage you to not look at it that way. You spent 3 or 4 days figuring out which approaches don't work, which is in itself progress. And you also built up 3 or 4 days of reverse engineering experience, regardless of how fruitful the immediate outcome was.\n\nApparently the algorithm is done (at least in part if not\n  mostly) in a native library with the .so extension.\n...\nHow in over my head am I attempting to understand this complex native library?\n\nGiven that you've determined that the Java code calls out to the .so library, it shouldn't be too difficult to find the native function in the .so library since the native function would be exported-by-name for JNI compatibility. This means that you don't in fact need to \"understand this complex native library\" in its entirety, but rather just the one native function in question (in addition to the functions that that function calls).\nIf the native code is not heavily obfuscated and if you have Hex-Rays for ARM, it should be relatively easy to understand the target function. If, on the other hand, you don't have Hex-Rays, then you can use the evaluation version of IDA Pro to disassemble the target function. You'd need to manually analyze the ARM instructions to determine what the function is doing. Although that can be tedious, ARM instructions and the architecture in general are very well-documented. Approach it as you would when learning any new programming language.\nStart analyzing the function from the very first instruction, and keep high-level notes on what each instruction is doing in the context of the function. Keep track of what values get stored in what registers and how memory is used. On first-pass, your goal is to determine what the function is doing (based on the instructions). Once you've extrapolated what the function is doing, your second-pass should focus on trying to understand why the function is doing what it's doing. After some time, things should begin to \"click\" in your mind, you'll get that \"aha!\" moment, and you'll understand how the target algorithm works.\n",
            "votes": "8",
            "user": "Jason Geffner",
            "time": "Jan 15, 2016 at 14:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Nitpick: JNI functions don't have to be exported by name. They could be registered in an obfuscated JNI_OnLoad function. I've never seen that in the wild though.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">This is very true: \"I know it feels like you've made \"no progress\", but I'd encourage you to not look at it that way. You spent 3 or 4 days figuring out which approaches don't work, which is in itself progress. And you also built up 3 or 4 days of reverse engineering experience, regardless of how fruitful the immediate outcome was.\"</span>",
                    "time": null
                },
                {
                    "user": "43.52.4D.",
                    "text": "<span class=\"comment-copy\">@JasonGeffner well I realized the code was using a native library partly from searching online about others attempting to crack the same algorithm, and partly because there was a .so file in the lib folder matching the  function names in Smali. Searching for the library name without the extension turns up zero results.  But I think I know where it begins to be called. The difficult part for me now is because I have no idea how native libraries are called so I don't know what to search for. Knowing what parameters are passed to it, would be helpful.</span>",
                    "time": null
                },
                {
                    "user": "43.52.4D.",
                    "text": "<span class=\"comment-copy\">@JasonGeffner an interesting side approach is POSSIBLY just figuring out what parameters get passed to the function and then whenever I need to use the algorithm to generate a value, maybe I could just call the .so file without ever learning how the algorithm actually works. (Especially if it turns out to be a colossal set of instructions)</span>",
                    "time": null
                },
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">If you don't have hex-rays, you might be able to use retdec as well, which produces some reasonably high quality output (relative to typical output of native code decompilers). <a href=\"https://retdec.com/\" rel=\"nofollow noreferrer\">retdec.com</a></span>",
                    "time": null
                }
            ]
        }
    ]
}