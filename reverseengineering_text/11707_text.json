{
    "title": "How to stop IDA debugger when a register is set to a particular value?",
    "link": "https://reverseengineering.stackexchange.com/questions/11707/how-to-stop-ida-debugger-when-a-register-is-set-to-a-particular-value",
    "content": "I use the following script to set IDA in trace mode and make it stop as soon as EAX register is set to a given value :\n<pre><code>#include <idc.idc>\n\nstatic main()\n{\n    auto r_eip, code, eax;\n\n    EnableTracing(TRACE_STEP, 1);\n\n    for ( code = GetDebuggerEvent(WFNE_ANY|WFNE_CONT, -1); // resume\n        code > 0;\n        code = GetDebuggerEvent(WFNE_ANY, -1) )\n    {                  \n        r_eip = GetEventEa();\n\n        eax = GetRegValue(\"EAX\");\n        Message(\"EAX:%08Xh\n\", eax);\n\n        if ( eax == 0x00000001 )\n            break;\n    }\n\n    PauseProcess();\n    EnableTracing(TRACE_STEP, 0);    \n}\n</code></pre>\nHowever it does not work : i get the following error message : \"Variable 'EAX' is undefined\nIf i put the line with <pre><code>eax = GetRegValue(...)</code></pre> in comment, in run but then eax is always zero.\nThe code is adapted from here :\nhttps://www.hex-rays.com/products/ida/debugger/scriptable.shtml\n",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "ida-plugin",
        "breakpoint",
        "register"
    ],
    "user": "tigrou",
    "time": "Jan 6, 2016 at 17:41",
    "comments": [
        {
            "user": "0xec",
            "text": "See here\n",
            "time": null
        },
        {
            "user": "tigrou",
            "text": "I already saw that page. What is suggested is to use <pre><code>eax</code></pre> variable directly without <pre><code>GetRegValue()</code></pre> call. I tried (and had to add <pre><code>auto eax</code></pre> to avoid error) : <pre><code>eax</code></pre> is always 0. I also tried the script posted at 22:05.45 :same there  : <pre><code>eax</code></pre> is zero.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use the following IDC script for the purpose. It would stop whenever register <pre><code>eax</code></pre> contains 0. The debugger must be running when the script is executed.\n<pre><code>#include <idc.idc>\n\nstatic main()\n{\n    for(;;)\n    {\n        StepInto();\n        if (GetDebuggerEvent(WFNE_SUSP, -1) == STEP)\n        {\n            if (eax == 0) \n            {\n                break;\n            }\n        }        \n    }\n    PauseProcess();\n}\n</code></pre>\n",
            "votes": "3",
            "user": "0xec",
            "time": "Jan 6, 2016 at 20:58",
            "is_accepted": true,
            "comments": [
                {
                    "user": "tigrou",
                    "text": "<span class=\"comment-copy\">Thanks it works ! (although it is very slow, but this is to be expected)</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@tigrou For a faster implementation, you can use DBI frameworks such as Intel Pin and DynamoRIO.</span>",
                    "time": null
                },
                {
                    "user": "tigrou",
                    "text": "<span class=\"comment-copy\">Actually it was used to debug DOSBOX, through idados. Unfortunately DOSBOX does not support memory read breakpoints, so the only way was to inspect registers continuously.</span>",
                    "time": null
                }
            ]
        }
    ]
}