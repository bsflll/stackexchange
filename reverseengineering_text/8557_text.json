{
    "title": "Where are page permissions stored in an ELF binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/8557/where-are-page-permissions-stored-in-an-elf-binary",
    "content": "Perhaps I am misunderstanding how this works, but to my knowledge ELF binaries can either have NX protections for the stack, or not. What I am assuming is that there is a place in the binary that spells this out, but I'm not sure exactly where this information is stored. \nHow do you figure out the page permissions for an ELF binary from a disassembly?\n",
    "votes": "3",
    "answers": 2,
    "views": "597",
    "tags": [
        "disassembly"
    ],
    "user": "MrSynAckSter",
    "time": "Mar 25, 2015 at 18:27",
    "comments": [
        {
            "user": "MrSynAckSter",
            "text": "Turns out it's in the headers, but I might leave the question up for other people who had trouble googling it like me. Serves me right for not knowing the ELF header format.\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "Well, you can always answer your own question.\n",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "I will when I am eligible, unless someone answers it in a fancy way :)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Permissions are in the p_flags member of the program header.\n<pre><code>       typedef struct {\n           uint32_t   p_type;\n           Elf32_Off  p_offset;\n           Elf32_Addr p_vaddr;\n           Elf32_Addr p_paddr;\n           uint32_t   p_filesz;\n           uint32_t   p_memsz;\n           uint32_t   p_flags;\n           uint32_t   p_align;\n       } Elf32_Phdr;\n\n       p_flags     This member holds a bit mask of flags relevant to the\n                   segment:\n\n                   PF_X   An executable segment.\n                   PF_W   A writable segment.\n                   PF_R   A readable segment.\n\n                   A text segment commonly has the flags PF_X and PF_R.  A\n                   data segment commonly has PF_X, PF_W and PF_R.\n</code></pre>\n",
            "votes": "6",
            "user": "broadway",
            "time": "Mar 26, 2015 at 6:41",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "The ELF binaries have in them headers named \"program headers\". When the kernel loads up a binary into memory, it only cares about 3 types of headers. <pre><code>PT_LOAD</code></pre> indicating whether or not the content corresponding to the header needs to be loaded into memory, <pre><code>PT_GNU_STACK</code></pre> indicating whether or not the stack needs to be made executable and <pre><code>PT_INTERP</code></pre> for determining the interpreter used to execute the binary.\nSo yes, the kernel sets the stack as non-executable or executable depending on whether or not a program header is present in the ELF. The ELF process can later use <pre><code>mmap/mmap2/mprotect</code></pre> libc/system calls to give executable privileges to specific pages in memory.\n",
            "votes": "2",
            "user": null,
            "time": "Mar 28, 2015 at 14:11",
            "is_accepted": false,
            "comments": []
        }
    ]
}