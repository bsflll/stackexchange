{
    "title": "GDB - Send Python output to the program after SIGINT",
    "link": "https://reverseengineering.stackexchange.com/questions/24610/gdb-send-python-output-to-the-program-after-sigint",
    "content": "I am trying to learn GDB to better understand buffer overflows but I can't find an answer to my problem which is how can I send a Python-generated output to the program when the program asks for user input (the gets function in my code below). I can type CTRL+C to send SIGINT but I have not found any way to send the output back to the program.\nSample program (disregard the buffer overflow):\n#include \nint main(int argc, char **argv)\n{\nchar buf[8];\ngets(buf);\nprintf(\"%s\n\", buf);\nreturn 0;\n}\n\nSample Python script I want to do:\n\npython -c \"print 'A' * 10\"\n\nThe Python output I want the gets function to read:\n\nAAAAAAAAAA\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "gdb",
        "python"
    ],
    "user": "Tomik",
    "time": "Apr 4, 2020 at 14:00",
    "comments": [
        {
            "user": "perror",
            "text": "You can also see this question.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can specify the input you want to pass to the program when executing \"run\" via GDB:\n<pre><code>(gdb) r <<< $(python -c \"print 'A' * 10\")\n</code></pre>\nExample:\n<pre><code>(gdb) r <<< $(python -c \"print 'A' * 10\")\nStarting program: /media/sf_CTFs/stackoverflow/24610/test <<< $(python -c \"print 'A' * 10\")\nAAAAAAAAAA\n[Inferior 1 (process 953) exited normally]\n(gdb)\n</code></pre>\n[Edit, based on comment]\nIf you want to be able to interactively decide what the next input you want to send is, without scripting the whole thing beforehand (and assuming that you can't or don't want to use a library such as <pre><code>pwntools</code></pre> to automate the decision process), you might be able to make use of named pipes. However I can't promise that this is the best or most convenient way. At the very least, this method is OS dependent. \nFirst, create a named pipe:\n<pre><code>root@kali:~# mkfifo my_pipe\n</code></pre>\nThen, open two shells. \nOn one shell, redirect GDB's input as the pipe's output:\n<pre><code>root@kali:/media/sf_CTFs/stackoverflow/24610# gdb -nh test < ~/my_pipe\n</code></pre>\nOn the other shell, open a Python REPL and connect to the named pipe:\n<pre><code>>>> f = open(\"/root/my_pipe\", \"w\")\n</code></pre>\nThe moment you open the pipe, you should see GDB get unblocked on the first shell:\n<pre><code>Reading symbols from test...\n(No debugging symbols found in test)\n(gdb)\n</code></pre>\nNow, define the following function in the Python REPL:\n<pre><code>>>> def cmd(f, s): f.write(s); f.write(\"\n\"); f.flush()\n...\n</code></pre>\nYou should be able to enter input for GDB using the newly defined <pre><code>cmd</code></pre> command. For example, to run the program, enter:\n<pre><code>>>> cmd(f, \"r\")\n</code></pre>\nThis will run the program in the other shell:\n<pre><code>(gdb) Starting program: /media/sf_CTFs/stackoverflow/24610/test\nPlease enter input\n</code></pre>\nYou can break GDB with CTRL+C, just remember that all commands need to be entered via <pre><code>cmd</code></pre>.\nWhen the time is right, you can send your Python command:\n<pre><code>>>> cmd(f, 'A' * 10)\n</code></pre>\nIt will be received in the other side:\n<pre><code>(gdb) Continuing.\nAAAAAAAAAA\n[Inferior 1 (process 1187) exited normally]\n</code></pre>\nDon't forget to close the named pipe when you're done:\n<pre><code>>>> f.close()\n</code></pre>\nIf this works for you, you can go ahead and create a Python script that acts as an interactive shell, instead of using the REPL.\n",
            "votes": "0",
            "user": "Dvd848",
            "time": "Apr 4, 2020 at 19:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Tomik",
                    "text": "<span class=\"comment-copy\">For this to work, if the program requested more inputs, I would have to script all inputs that are sent from STDIN. Is it possible to do this if I interrupt the program manually and then want to perform another redirection from STDIN?</span>",
                    "time": null
                },
                {
                    "user": "Dvd848",
                    "text": "<span class=\"comment-copy\">Edited my answer with a suggestion (if I've understood your intention correctly). There might be a straightforward way to achieve the same thing which I'm not aware of.</span>",
                    "time": null
                },
                {
                    "user": "Tomik",
                    "text": "<span class=\"comment-copy\">This is exactly what I needed, thank you. I tried it and it works. It is not as convenient and straight-forward as I hoped, but it gets the job done.</span>",
                    "time": null
                }
            ]
        }
    ]
}