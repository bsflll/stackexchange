{
    "title": "What is the correct argument for the disassembled function / constructor?",
    "link": "https://reverseengineering.stackexchange.com/questions/29482/what-is-the-correct-argument-for-the-disassembled-function-constructor",
    "content": "I have the following code disassembled by Ghidra. It first initialises the local variable of the particular type (local_68) and then passes it to the constructor. The variable seems to be initialised just as a particular object type, i.e. <pre><code>Game</code></pre>. But the constructor expects (according to the decompiler) pointer to that object, i.e. <pre><code>Game * this</code></pre>.\nSo, is there a standard way the constructor is called in situation like this?\nAnd what should be there in this case, the object or a pointer to it?\nI am trying to see currently what would make the program run, as it is currently failing. Which might be because the way I have setup the constructor is not right.\nHere is the calling function:\n<pre><code>int main(int param_1,char **param_2,char **param_3)\n\n{\n  int iVar1;\n  Game local_68 [96];\n  \n  gladius::Game::Game(local_68);\n  iVar1 = gladius::Game::main(local_68,param_1,param_2,param_3);\n  gladius::Game::~Game(local_68);\n  return iVar1;\n}\n</code></pre>\nAnd here is the constructor I am interested in:\n<pre><code>Game * __thiscall gladius::Game::Game(Game *this)\n\n{\n  *(undefined8 *)this = 0;\n  *(undefined8 *)(this + 8) = 0;\n  *(undefined8 *)(this + 0x10) = 0;\n  *(undefined8 *)(this + 0x18) = 0;\n  *(undefined8 *)(this + 0x20) = 0;\n  *(undefined8 *)(this + 0x28) = 0;\n  *(undefined8 *)(this + 0x30) = 0;\n  *(undefined8 *)(this + 0x38) = 0;\n  *(undefined8 *)(this + 0x40) = 0;\n  *(undefined8 *)(this + 0x48) = 0;\n  *(undefined8 *)(this + 0x50) = 0;\n  return this;\n}\n</code></pre>\n",
    "votes": "1",
    "answers": 0,
    "views": "82",
    "tags": [
        "decompilation",
        "c++"
    ],
    "user": "Irbis77",
    "time": "Oct 31, 2021 at 15:53",
    "comments": [],
    "answers_data": []
}