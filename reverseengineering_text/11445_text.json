{
    "title": "Load symbols from __objc_* sections in LLDB",
    "link": "https://reverseengineering.stackexchange.com/questions/11445/load-symbols-from-objc-sections-in-lldb",
    "content": "When an executable that has been stripped is opened in lldb, lldb doesn't know the names of any functions and breakpoints have to be set manually on hex addresses, which is very annoying.\nHowever, for Objective C executables, at least, it should be possible to reconstruct the addresses of functions from the Objective C runtime information in the object file: __DATA,__objc_classlist , __TEXT,__objc_methname , and so on.\nIs there a way to do this in lldb currently? Or is it just ignoring that information?\n",
    "votes": "1",
    "answers": 2,
    "views": "912",
    "tags": [
        "osx",
        "lldb"
    ],
    "user": "Brennan Vincent",
    "time": "Nov 30, 2015 at 23:37",
    "comments": [],
    "answers_data": [
        {
            "content": "I solved this problem for gdb a few years ago, see Import class-dump info into GDB on Stack Overflow.\nIâ€™m not sure if lldb has an <pre><code>add-symbol-file</code></pre> equivalent command. Loading symbols from location in memory from the lldb-dev mailing list suggests that you may have to create your own .dSYM file instead of a .stabs file.\n",
            "votes": "3",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Since the <pre><code>Objc</code></pre> data (selectors) has to be available to the <pre><code>Objc</code></pre> code in order for it to run.\nLLDB can set breakpoints according to selectors using the <pre><code>breakpoint set -n \"[SomeClass someFunction:]\"</code></pre> command. You can also check the LLDB tutorial.\n",
            "votes": "1",
            "user": "tmr232",
            "time": "Dec 1, 2015 at 9:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Brennan Vincent",
                    "text": "<span class=\"comment-copy\">This doesn't work if the executable doesn't have symbols -- that's my point.</span>",
                    "time": null
                },
                {
                    "user": "tmr232",
                    "text": "<span class=\"comment-copy\">Sounds odd, as it did work for me in the past. I'll try looking into it when I have some time.</span>",
                    "time": null
                }
            ]
        }
    ]
}