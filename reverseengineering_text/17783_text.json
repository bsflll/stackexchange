{
    "title": "IDAPython Decompile - connect assembly to pseudo-code line",
    "link": "https://reverseengineering.stackexchange.com/questions/17783/idapython-decompile-connect-assembly-to-pseudo-code-line",
    "content": "I'm trying to write a small application that can show for each\nline of the de-compiled psuedo code of a certain function\nthe assembly instruction that responsible for it.\nfor example if we have a function invocation in the pseudo code - i want to show all the push to stack instructions + the call instruction:\n<pre><code>sample_function(a,b)\n\n//will be mapped to:\n\npush b\npush a\ncall sample_function\n</code></pre>\nI've tried to scan the objects that are returned by the decompile method and gone through some examples: vds1, vds4, ... Haven't found a solution.\nIs this mapping is saved somewhere? In IDA i can access the other direction when it shows in the assembly the pseudo code as comments.\nThanks!\n",
    "votes": "3",
    "answers": 0,
    "views": "810",
    "tags": [
        "ida",
        "decompilation",
        "idapython"
    ],
    "user": "sborpo",
    "time": "Mar 24, 2018 at 5:00",
    "comments": [
        {
            "user": "kshh23",
            "text": "Were you able to figure this out?\n",
            "time": null
        },
        {
            "user": "Irbis77",
            "text": "There is a disassembly option in VS 2019. Not ideal, but pretty close. You can jump in and out assembly code while debugging.\n",
            "time": null
        }
    ],
    "answers_data": []
}