{
    "title": "Reliable way to recognize STL template classes?",
    "link": "https://reverseengineering.stackexchange.com/questions/12718/reliable-way-to-recognize-stl-template-classes",
    "content": "Since the template classes are different between instantiation, it is extremely difficult for library recognition using universal patterns.\nBut the control flow graph and references to system call of those template functions should be almost the same.\nSo is there a good and reliable way to identify and recognize these STL classes ?\nNote: some classes using template like <pre><code>std::string</code></pre> is fixed. These classes can be recognized by FLAIR (Fast Library Acquisition for Identification and Recognition).\n",
    "votes": "6",
    "answers": 0,
    "views": "918",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "Misty",
    "time": "May 23, 2016 at 17:38",
    "comments": [
        {
            "user": "tibar",
            "text": "STL is mostly about performance and algorithm, I do not see how you could recognize <pre><code>std::copy</code></pre> after it has been optimized...\n",
            "time": null
        },
        {
            "user": "Misty",
            "text": "oh I know there must be some stl functions cannot be recognized, but classes like vector should be easier to be recognized. Some inline functions can be ignored simply.\n",
            "time": null
        }
    ],
    "answers_data": []
}