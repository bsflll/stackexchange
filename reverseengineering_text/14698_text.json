{
    "title": "Can I reverse engineer a pdf file to identify the creator's name?",
    "link": "https://reverseengineering.stackexchange.com/questions/14698/can-i-reverse-engineer-a-pdf-file-to-identify-the-creators-name",
    "content": "Here is a quick question. Someone told me that I can reverse engineering a pdf file, extracting and analyzing the underlying XML files, and figure out the creator's name for this pdf.\nHowever, I googled such approach for a while, and cannot figure out a feasible solution. Could anyone shed some light on this point..? Thank you in advance!\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "digital-forensics",
        "pdf"
    ],
    "user": "lllllllllllll",
    "time": "Feb 20, 2017 at 17:10",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "by \"creator\", do you mean the human author of the document or the program which produced the PDF? please clarify.\n",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "@IgorSkochinsky, thank you for your reply. \"creator\" I mean the author of the document.\n",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "@IgorSkochinsky, the \"human author\"\n",
            "time": null
        },
        {
            "user": "Max Wyss",
            "text": "There is no underlying XML file per se. You can, however, get at the metadata of the document. Manually, you would do that in Acrobat/Reader and display the document properties. Programmatically, you would look out for a tool which can extract the metadata … I think even ExifTool is capable to get metadata out. However, you will get the author only if there is actually an entry in that according field.\n",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "@MaxWyss I see. Thank you, I tried to open with Acrobat and check the metadata info; however, there is no authorship entry. I guess such information is not embedded in the pdf I am testing. Thank you!\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The PDF format is not based on XML but uses a PostScript-inspired dictionary format for its \"objects\" and streams for other data such as images. There are following  places where document metadata is stored:\n\nthe <pre><code>/Info</code></pre> dictionary containing keys such as \"Author\" , \"Producer\", \"Title\" etc.\nthe <pre><code>/Metadata</code></pre> dictionary which may contain an XML stream with additional information.\n\nHere's an example of retrieving this information using the low-level PDF parsing tool by Didier Stevens:\nFirst,  display the \"trailer\" (something like table of contents of the PDF):\n\npdf-parser.py -e t Excite_Project_ZN.pdf \n\n<pre><code>trailer\n  <<\n    /Size 3373\n    /Root 1 0 R\n    /Info 219 0 R\n    /ID [<3572219E83326040B0789EBEAE24A285><3572219E83326040B0789EBEAE24A285>]\n  >>\n\ntrailer\n  <<\n    /Size 3373\n    /Root 1 0 R\n    /Info 219 0 R\n    /ID [<3572219E83326040B0789EBEAE24A285><3572219E83326040B0789EBEAE24A285>]\n    /Prev 2126182\n    /XRefStm 2119246\n  >>\n</code></pre>\nNow let's check the <pre><code>/Info</code></pre> object (number 219):\n\npdf-parser.py -o 219 Excite_Project_ZN.pdf\n\n<pre><code>obj 219 0\n Type:\n Referencing:\n\n  <<\n    /Title ()\n    /Author (Alex Matrosov)\n    /Keywords (CTPClassification=CTP_PUBLIC:VisualMarkings=)\n    /CreationDate \"(D:20161121224130-08'00')\"\n    /ModDate \"(D:20161121224130-08'00')\"\n    /Producer '(\\xfe\\xff\\x00M\\x00i\\x00c\\x00r\\x00o\\x00s\\x00o\\x00f\\x00t\\x00\\xae\\x00 \\x00P\\x00o\\x00w\\x00e\\x00r\\x00P\\x00o\\x00i\\x00n\\x00t\\x00\\xae\\x00 \\x002\\x000\\x001\\x006)'\n    /Creator '(\\xfe\\xff\\x00M\\x00i\\x00c\\x00r\\x00o\\x00s\\x00o\\x00f\\x00t\\x00\\xae\\x00\\x00P\\x00o\\x00w\\x00e\\x00r\\x00P\\x00o\\x00i\\x00n\\x00t\\x00\\xae\\x00 \\x002\\x000\\x001\\x006)'\n  >>\n</code></pre>\nSo here we have the tile and the author. But there is more. If we check the Root object (number 1):\n<pre><code>>pdf-parser.py -o 1 Excite_Project_ZN.pdf\n\nobj 1 0\n Type: /Catalog\n Referencing: 2 0 R, 220 0 R, 3370 0 R, 3371 0 R\n\n  <<\n    /Type /Catalog\n    /Pages 2 0 R\n    /Lang (en-US)\n    /StructTreeRoot 220 0 R\n    /MarkInfo\n      <<\n        /Marked true\n      >>\n    /Metadata 3370 0 R\n    /ViewerPreferences 3371 0 R\n  >>\n</code></pre>\nWe can see the reference to <pre><code>/Metadata</code></pre>. Let's check it:\n<pre><code>>pdf-parser.py -o 3370 Excite_Project_ZN.pdf\n\nobj 3370 0\n Type: /Metadata\n Referencing:\n Contains stream\n\n  <<\n    /Type /Metadata\n    /Subtype /XML\n    /Length 3230\n  >>\n</code></pre>\nThis is a stream which needs to be extracted:\n<pre><code>>pdf-parser.py -o 3370 -x metadata.xml Excite_Project_ZN.pdf \n</code></pre>\nThe output is this XML:\n<pre><code><?xml version=\"1.0\"?>\n<?xpacket begin=\"\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n<x:xmpmeta x:xmptk=\"3.1-701\" xmlns:x=\"adobe:ns:meta/\">\n<?xpacket end=\"w\"?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n<rdf:Description xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\" rdf:about=\"\">\n<pdf:Producer>Microsoft® PowerPoint® 2016</pdf:Producer>\n<pdf:Keywords>CTPClassification=CTP_PUBLIC:VisualMarkings=</pdf:Keywords>\n</rdf:Description>\n<rdf:Description rdf:about=\"\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n<dc:title>\n<rdf:Alt>\n<rdf:li xml:lang=\"x-default\"/>\n</rdf:Alt>\n</dc:title>\n<dc:creator>\n<rdf:Seq>\n<rdf:li>Alex Matrosov</rdf:li>\n</rdf:Seq>\n</dc:creator>\n</rdf:Description>\n<rdf:Description rdf:about=\"\" xmlns:xmp=\"http://ns.adobe.com/xap/1.0/\">\n<xmp:CreatorTool>Microsoft® PowerPoint® 2016</xmp:CreatorTool>\n<xmp:CreateDate>2016-11-21T22:41:30-08:00</xmp:CreateDate>\n<xmp:ModifyDate>2016-11-21T22:41:30-08:00</xmp:ModifyDate>\n</rdf:Description>    \n\n<rdf:Description rdf:about=\"\" xmlns:xmpMM=\"http://ns.adobe.com/xap/1.0/mm/\">    \n<xmpMM:DocumentID>uuid:9E217235-3283-4060-B078-9EBEAE24A285</xmpMM:DocumentID>    \n<xmpMM:InstanceID>uuid:9E217235-3283-4060-B078-9EBEAE24A285</xmpMM:InstanceID>    \n</rdf:Description>    \n</rdf:RDF>\n\n</x:xmpmeta>\n</code></pre>\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Feb 23, 2017 at 13:40",
            "is_accepted": true,
            "comments": [
                {
                    "user": "lllllllllllll",
                    "text": "<span class=\"comment-copy\">Thank you Igor, this is exactly what I am looking for. Fantastic.</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">When I run <code>pdf-parser.py -o &lt;metadataobj&gt; -x metadata.xml Excite_Project_ZN.pdf </code> I get nothing =/ despite having a stream length of <code>/Length 1134</code></span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">for me <code>-x</code> is <b>extract malformed content</b> I had to use <code>-d metadata.xml</code> for dump. Which worked fine.. You may want to <a href=\"https://reverseengineering.stackexchange.com/posts/14713/edit\">edit</a> and update unless you're sure you meant <code>-x</code>. Alternatively I can just write it out the screen with <code>-c</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}