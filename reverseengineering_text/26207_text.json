{
    "title": "ARM binary dissasembly, Hopper works, Ghidra and Radare2 don't for some functions",
    "link": "https://reverseengineering.stackexchange.com/questions/26207/arm-binary-dissasembly-hopper-works-ghidra-and-radare2-dont-for-some-function",
    "content": "I'm disassembling a large ARM binary and I see that for some functions both Ghidra and Radare2 appear to fail to disassemble certain functions whereas Hopper works for those same functions\nIn Ghidra - I see question marks at the (correct) address disassembly\n<pre><code>                         LAB_1006750e0                                   XREF[1]:     1006750d0(j)  \n   1006750e0 00 00 80 d2     mov        x0,#0x0\n   1006750e4 f4 03 13 aa     mov        x20,x19\n   1006750e8 b0 00 00 94     bl         FUN_1006753a8                                    undefined FUN_1006753a8()\n   1006750ec f0 ff ff 17     b          LAB_1006750ac\n   1006750f0 e2              ??         E2h\n   1006750f1 f3              ??         F3h\n   1006750f2 ff              ??         FFh\n   1006750f3 10              ??         10h\n   1006750f4 1f              ??         1Fh\n   1006750f5 20              ??         20h     \n   1006750f6 03              ??         03h\n   ...\n</code></pre>\nIn radare2 - after seeking to the address and running af and pdf, I get:\n\"Linear size differs too much from the bbsum, please use pdr instead.\"\nWhat can I do here to get these functions to disassemble in Ghidra and radare2?\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "radare2",
        "ghidra"
    ],
    "user": "user1247196",
    "time": "Nov 1, 2020 at 2:31",
    "comments": [],
    "answers_data": [
        {
            "content": "I can only address the Ghidra-part of your question:\nGenerally speaking, you can always instruct Ghidra to create a function at a given position by marking it and hitting <pre><code>F</code></pre> (default key binding for \"Create Function\" of the \"FunctionPlugin) or by selecting \"Create Function\" from the context menu.\nThe question marks are there because Ghidra couldn't or didn't disassemble this part and hence doesn't have any assembly instructions to display. But this may change as soon as you create a function.\nConcretely, right click on <pre><code>1006750f0</code></pre> and select \"Create Function\" from the context menu. This should give you both a disassembly and a decompiled function.\nAnother general remark: Function identification is a hard problem and there are a lot of different algorithms and heuristics used by different tools (IDA, radare2, Hopper, Ghidra, ...) to approach it. None of those is perfect and sometimes some of those tools perform better then others.\n",
            "votes": "-1",
            "user": "born",
            "time": "Nov 1, 2020 at 23:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mumbel",
                    "text": "<span class=\"comment-copy\">The disassembly stopped because that is the end of that flow, it's an unconditional branch, you need to probably go higher up (lower address) to find the correct entry point for this code.  Pressing 'd' for disassemble will generate assembly code.</span>",
                    "time": null
                }
            ]
        }
    ]
}