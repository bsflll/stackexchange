{
    "title": "Unable to use CreateRemoteThread in target process",
    "link": "https://reverseengineering.stackexchange.com/questions/18575/unable-to-use-createremotethread-in-target-process",
    "content": "I'm trying to get a debugger attached to a malware, but it seems to pick up whenever a new remote thread is created (which makes it so I can't use Scyllahide).\nEven if I suspend all threads, it does the following:\nWhen a new remote thread is created(<pre><code>CreateRemoteThread</code></pre> / <pre><code>ZwCreateThread</code></pre>) (internally calling <pre><code>CreateThread</code></pre> is ok) it patches a <pre><code>0xC3(ret)</code></pre> to the entry point. \nI tried suspending it on creation then resuming it later but as soon as it is resumed the entry point gets patched before it can execute.\nI've looked at hooks in PCHunter, there is no hooks in unnamed functions or thread related functions.\nIDA Pro isn't helping much, the process is obfuscated a lot.\nI don't know what should be the next step at this point, so I'm hoping someone can help me figure this out. \nIt looks like a hook or a callback is set somewhere but I don't know of any callback that gets executed on thread creation(at least in usermode) and I can't seem to find any hook related to threads in windows dll's.\n",
    "votes": "3",
    "answers": 1,
    "views": "501",
    "tags": [
        "windows",
        "x86-64",
        "x64dbg",
        "thread"
    ],
    "user": "David",
    "time": "Jun 22, 2018 at 2:30",
    "comments": [
        {
            "user": "Anton Kukoba",
            "text": "Why don't you use kernel mode debugger?\n",
            "time": null
        },
        {
            "user": "josh",
            "text": "You write \"Ida Pro isn't helping much..\". Do you get Ida attached or are you able to run under Ida?\n",
            "time": null
        },
        {
            "user": "David",
            "text": "Process is x64 so I can't attach IDA's debugger on it. Kernel mode debugger was also detected. Managed to modify an existing thread entry point to run another thread's entry point to get around this.\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "tls callback might help you.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The act of injecting a thread will trigger a call to any Thread Local Storage callbacks which the PE file might carry, even when all other threads are suspended.  Such a callback might be responsible for overwriting your thread code, since the callback has access to the important thread information such as its entry-point.\n",
            "votes": "1",
            "user": "peter ferrie",
            "time": "Jun 30, 2018 at 22:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I seem to recall there was a vulnerability in IDA some time ago connected to the TLS callbacks.</span>",
                    "time": null
                },
                {
                    "user": "David",
                    "text": "<span class=\"comment-copy\">How would they access the entry point of the thread? The target is obfuscated and I can't seem to figure out much of their callback, also tried making a test program with a TLS callback, I can't seem to get the entry point with the args or GetThreadContext (Rcx is a negative value)</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">the callback runs within the same process-space as the just-created thread.  Then it's just a matter of the callback calling NtQueryInformationThread to ask for the thread's entrypoint, then calling VirtualProtect(exec+write) on that address, and finally overwriting the entrypoint code with the RET.</span>",
                    "time": null
                }
            ]
        }
    ]
}