{
    "title": "Appropriate function to set NTFS extended attributes: ZwSetEaFile or NtSetEaFile",
    "link": "https://reverseengineering.stackexchange.com/questions/17310/appropriate-function-to-set-ntfs-extended-attributes-zwseteafile-or-ntseteafile",
    "content": "I am making a program to set those attributes with C++. With IDA, I find that <pre><code>lxcore.sys</code></pre> driver uses <pre><code>ZwSetEaFile()</code></pre> and <pre><code>LxssManager.dll</code></pre> uses <pre><code>NtSetEaFile()</code></pre> function to set NTFS extended attributes. Here are the functions mentioned in ntdl.dll (using IDA v7):\n\nHere is the Microsoft documentation of ZwSetEaFile():\n<pre><code>NTSTATUS ZwSetEaFile(\n  _In_  HANDLE           FileHandle,\n  _Out_ PIO_STATUS_BLOCK IoStatusBlock,\n  _In_  PVOID            Buffer,\n  _In_  ULONG            Length\n);\n</code></pre>\nBut I'm not sure which one is appropriate to use? Is there any difference between them using in a user mode software?\n",
    "votes": "2",
    "answers": 2,
    "views": "624",
    "tags": [
        "disassembly"
    ],
    "user": "Biswapriyo",
    "time": "Jan 27, 2018 at 16:21",
    "comments": [],
    "answers_data": [
        {
            "content": "There is no difference at the user mode level. The difference only exists when called from kernel mode in how the function arguments are passed in whether the parameters are guaranteed valid (Zw) or whether they should be verified (Nt). This documentation from Microsoft may shed some more light.\n",
            "votes": "6",
            "user": "cimarron",
            "time": "Jan 27, 2018 at 19:07",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "the op appears to have deleted some questions he posed as comments and accepted an answer\nso this answer might appear to be not relevant to the present context   \nop commented if one could call the api in user_mode without loading ntdll.dll\nor calling either of the two variants of the api viz NtSetEaFile or ZwSetEaFile\nthis answer shows how that can be done\nthe syscall number belongs to win7 sp1 32 bit\non compiling and executing a 0 byte text file will be created\nwhose extended info can be checked with ladislav zezulas filetest utility\nor by checking the ntfs usn change records   \n<pre><code>#include <windows.h>\n#include <winternl.h>\ntypedef struct _MYEABUFF {\n    ULONG neoff; UCHAR flg; UCHAR nlen; USHORT vlen; char eaname[0x100];\n}MyEaBuff, *PMyEaBuff;\nint main() {\n    HANDLE fhand = CreateFileA(\"testec.txt\", GENERIC_READ | GENERIC_WRITE,\n    FILE_SHARE_READ|FILE_SHARE_WRITE,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,NULL);\n    const char *Eaname=\"EATEST\";const char *EaValue=\"This is the text For EATEST\";\n    UCHAR nlen=(UCHAR)strlen(Eaname);USHORT EaValueLen=(USHORT)strlen(EaValue);\n    IO_STATUS_BLOCK iosb ={0}; MyEaBuff Buff ={0};\n    Buff.neoff = 0; Buff.flg = 0; Buff.nlen = nlen; Buff.vlen = EaValueLen;\n    strcpy_s(Buff.eaname, nlen + 1, Eaname);\n    strcpy_s(Buff.eaname + nlen + 1, EaValueLen + 1, EaValue);\n    PVOID iosb_ptr = &iosb; PVOID Buff_ptr = &Buff;\n    __asm {\n        push 108h\n        push Buff_ptr\n        push iosb_ptr\n        push fhand\n        call ntseaf\n        jmp exit\n    }\nntseaf:\n    __asm {\n        mov eax, 142h\n        mov edx, 7ffe0300h\n        call dword ptr ds : [edx]\n        retn 4\n    }\nexit:\n    return 0;\n} \n</code></pre>\nresult of the bin checked with cjdump.exe (old msdn mag code)\n<pre><code>C:\\testea>cl /nologo testea.cpp\ntestea.cpp\n\nC:\\testea>testea.exe\n\nC:\\testea>CJDump.exe | grep testec.txt\nUsn(0x0000000129433C28) Reason(0x00000100) testec.txt < USN_REASON_FILE_CREATE\nUsn(0x0000000129433C78) Reason(0x00000500) testec.txt < USN_REASON_EA_CHANGE|0x100\nUsn(0x0000000129433CC8) Reason(0x80000500) testec.txt < USN_REASON_CLOSE|0x500\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Jan 29, 2018 at 14:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}