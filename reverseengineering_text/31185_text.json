{
    "title": "Compression format used for various data (images, text, etc.) in a 1997 video game",
    "link": "https://reverseengineering.stackexchange.com/questions/31185/compression-format-used-for-various-data-images-text-etc-in-a-1997-video-ga",
    "content": "I've been trying to reverse engineer the format of data files from the 1997 video game Helicops. I have experience reverse engineering binary files from games of this period but limited exposure to compression schemes.\nI've been able to figure out the header format (which I've documented here; it uses an XOR \"cipher\" with the key <pre><code>0xAA</code></pre>), but the individual data blocks within each file use a form of compression I haven't been able to figure out.\nI'm certain the data are compressed: the header in each DAT file contains a table listing each data block's name, starting offset, and two values: one is the length of the data block in the DAT file and the other appears to be the data block's uncompressed length (notably, it's 768 for multiple data blocks that appear to be colour tables; 768 = 256 colours * 3 bytes/colour and these data blocks have names that end with \"ACT\", i.e., Adobe Color Table, and some include obvious grayscale ramps).\nMy full notes on the compression scheme are here, but I haven't been able to figure out much. Here's a summary:\n\nIn multiple data files, <pre><code>0xFF</code></pre> is followed by 8 uncompressed bytes. This is consistent across multiple files containing different types of recognizable data (ASCII text and colour palettes), so it seems likely that all the game's data files use the same type of compression.\nCurrently, I have no idea how <pre><code>0xFF</code></pre> translates to \"the next 8 bytes are uncompressed data\". Since the header uses an XOR cipher, I've tried XORing it with various values (<pre><code>0xAA</code></pre> since that's the key for the header data, <pre><code>0xF7</code></pre> since that gives <pre><code>0x08</code></pre>, etc.) but I haven't come up with any that make sense for <pre><code>0xFF</code></pre> and some of the other values that are clearly compression-related. My guess is that ranges of bits within each byte contain different compression-related info, but that the bytes need to be altered in some way first.\nBased on bytes that are evidently uncompressed data, it's clear that there are many sequences of bytes related to data compression (see examples in the sample data below), but I haven't been able to figure out how to decode them.\nI suspect the compression scheme uses some form of run-length encoding and/or something along the lines of LZ77 where references to sequences elsewhere in the data are used to reduce overall size.\n\nI've uploaded a sample DAT file, <pre><code>PIC.DAT</code></pre>, here. It contains substantial quantities of ASCII text that make identifying compression-related bytes fairly easy. A list of its data blocks (parsed from its header) is here.\nHere are some sample data from the data block starting at offset 184456 in <pre><code>PIC.DAT</code></pre> (<pre><code>PIC.DAT</code></pre>'s header identifies this block as being associated with the third mission set, \"Data Space Demon\", and the first mission in that set, \"Tower Attack\"; note that these strings appear in the data below):\n\n\n\n\nBytes\nNotes/ASCII\n\n\n\n\nFF\n\n\n\n52 45 4D 20 4D 69 73 73\n\"REM Miss\"\n\n\nFF\n\n\n\n33 31 2E 50 49 43 20 2D\n\"31.PIC -\"\n\n\nFE FD F4\n\n\n\n20 54 6F 77 65 72 20\n\" Tower \"\n\n\nBF 28\nBF = 191/-65, 28 = 40/40\n\n\n54 6F 6B 79 6F\n\"Tokyo\" (not part of level name)\n\n\n05 03 29 FB 0D 0A EE F1\n\n\n\n44 61 74 61 20\n\"Data \"\n\n\nFF\n\n\n\n53 70 61 63 65 20 44 65\n\"Space De\"\n\n\nEF\n239/-17\n\n\n6D 6F 6E\n\"mon\"\n\n\n2C 05 04\n\n\n\n41 74 74\n\"Att\"\n\n\nF7\n247/-9\n\n\n61 63 6B\n\"ack\"\n\n\n19 03\n\n\n\n43 6F 70 69\n\"Copi\"\n\n\nFF\n\n\n\n65 64 20 66 72 6F 6D 20\n\"ed from \"\n\n\n7F\n\n\n\n48 43 5F 57 6F 72 6B\n\"HC_Work\"\n\n\nFC F6 FE 5E 0E\n\n\n\n20 20 31 2D 32 33 2D\n\"  1-23-\"\n\n\n7F\n\n\n\n39 37 20 44 42 0D 0A\n\"97 DB\\r\n\"\n\n\n19 03 F1 2A 84 0F 8A 02 19 03\n\n\n\n[remaining bytes follow]\n\n\n\n\n\nThere are additional sample data here, including colour palettes (some of which appear to be minimally-compressed).\nI'd appreciate any suggestions regarding how this compression format might work! I'll credit any assistance in the file format documentation I'm writing.\n",
    "votes": "2",
    "answers": 2,
    "views": "246",
    "tags": [
        "decompress"
    ],
    "user": "Reign of Error",
    "time": "Nov 27, 2022 at 0:40",
    "comments": [],
    "answers_data": [
        {
            "content": "It's a very similar compression method to that used in\nthis question.\nSpecifically, the compressed data begins with a flag byte. Each bit of this in turn (from bit 0 to bit 7) indicates that the next decompressed byte(s) are generated by -\n\n(when the flag bit is 1) copying a single literal byte from the compressed data stream or\n(when the flag bit is 0) copying between N bytes from elsewhere in the decompressed data stream. The length and location of these bytes are encoded in  the following 2 bytes in the compressed data stream.\n\nHence <pre><code>0xFF</code></pre> is 8x <pre><code>1</code></pre>s and represents 8 uncompressed bytes.\nYour example file begins with 2 of these, as you identified.\nThese are then followed by an <pre><code>FE</code></pre> = <pre><code>0b11111110</code></pre>\nSo this is followed by -\n\n1 compressed byte-pair <pre><code>FD F4</code></pre>, and\n7 uncompressed literal bytes <pre><code>20 54 6F 77 65 72 20</code></pre>\n\nI think the length part of the compressed byte pair is likely given by 3 + the last nibble (in this case 3+4=7.)\nI haven't quite found an interpretation for the offset/location part of these 2 bytes that works consistently yet though.\n",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Jan 5, 2023 at 15:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Reign of Error",
                    "text": "<span class=\"comment-copy\">Thanks, this is very helpful! Knowing this I'm going to take another look at the color palettes (some of which are <a href=\"https://github.com/CahootsMalone/helicops-stuff/blob/main/file-format-dat.md#sample-data\" rel=\"nofollow noreferrer\">here</a>); given the relative simplicity of their data, they should help to narrow down the meaning of the compressed byte pairs.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The mix of readable text fragments and high byte values makes me suspect LZSS but it may also be some simple RLE-like algorithm. To be completely sure youâ€™d need to find the code which decompresses this data in the executable code.\n",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Dec 4, 2022 at 23:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}