{
    "title": "How to reverse engineer Electron V8 Snapshot Data Blobs?",
    "link": "https://reverseengineering.stackexchange.com/questions/26441/how-to-reverse-engineer-electron-v8-snapshot-data-blobs",
    "content": "Electron apps nowadays seem to have a <pre><code>snapshot_blob.bin</code></pre> and a <pre><code>v8_context_snapshot.bin</code></pre>. I am having a hard time trying to find specification of this file type. It doesn't match with <pre><code>.wasm</code></pre>. Files may be platform / CPU architecture specific binaries (and may vary depending on the platform) but I am not sure. They have no typical entry point like a normal PE.\nAny advice on reverse engineering these snapshot data blob binary files would be appreciated! I am actually looking for a tool like x64dbg or IDA Pro but also thinking of making a similar debugger by myself if there isn't any available. However, the file specs are needed first. Thanks.\n",
    "votes": "1",
    "answers": 0,
    "views": "1k",
    "tags": [
        "disassembly",
        "websites"
    ],
    "user": "Haapavuo",
    "time": "Dec 4, 2020 at 15:50",
    "comments": [
        {
            "user": "blabb",
            "text": "a google search says src/snapshot/snapshot.cc in google v8 git code base describes the format a cursory glance on vscode snapshot_blob.bin on hxd shows 7.8.279.23-electron.0 in my m/c at offset 10 so have you been there ? doesn't it help ?\n",
            "time": null
        },
        {
            "user": "Haapavuo",
            "text": "Yes I have. It doesn't help at all. I have even tried to decode the opcodes manually by following the opcodes inside V8 repository. However, I believe that they don't match since the snapshot is Electron specific. It even has Electron version number written in it if you look into it with i.e. a hex editor. So V8 source alone does not help. We need more information.\n",
            "time": null
        },
        {
            "user": "IdanB",
            "text": "There has been some develop of Ghidra plugin that can aid in that direction. See: github.com/PositiveTechnologies/ghidra_nodejs Only problem is that solution work for .JSC, and the snapshot is somehow different format...\n",
            "time": null
        }
    ],
    "answers_data": []
}