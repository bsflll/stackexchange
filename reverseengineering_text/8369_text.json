{
    "title": "How to efficiently debug Loops with OllyDbg/Immunity?",
    "link": "https://reverseengineering.stackexchange.com/questions/8369/how-to-efficiently-debug-loops-with-ollydbg-immunity",
    "content": "I'm currently reversing a function which looks like the following\n<pre><code>.text:0040383F 8D 04 BF          lea     eax, [edi+edi*4]\n.text:00403842 6A 14             push    20\n.text:00403844 C1 E0 03          shl     eax, 3\n.text:00403847 99                cdq\n.text:00403848 59                pop     ecx\n.text:00403849 F7 F9             idiv    ecx\n.text:0040384B 03 45 08          add     eax, [ebp+arg_0]\n.text:0040384E 8A 84 30 C8 31 00+mov     al, [eax+esi+31C8h]\n.text:00403855 32 C3             xor     al, bl\n.text:00403857 88 84 3E 28 27 00+mov     [esi+edi+2728h], al\n.text:0040385E 47                inc     edi\n.text:0040385F 81 FF 07 0B 00 00 cmp     edi, 0B07h\n.text:00403865 75 D8             jnz     short loc_40\n</code></pre>\nSince I don't have any clue what's going there I wanted to Debug this part with OllyDbg. I want to understand what's inside al, bl and the result of xor al, bl for all \"0B07h\" steps the loop is running.\nI just saw that Immunity provides some sort of scripting functionality. Is it possible to achieve this with a simple python script in Immunity? Maybe there are other ways with OllyDbg?\nI just want something like:\n<pre><code>If EIP == \"403855\" then print al, bl\nElse go_ahead\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "982",
    "tags": [
        "ollydbg",
        "debugging",
        "immunity-debugger",
        "xor"
    ],
    "user": "mr.proton",
    "time": "Mar 3, 2015 at 15:28",
    "comments": [],
    "answers_data": [
        {
            "content": "No scripting required.\nIn OllyDbg's disassembly window, left-click on line <pre><code>.text:00403855 32 C3             xor     al, bl</code></pre> to select the line, then right-click on the selected line and choose <pre><code>Breakpoint → Conditional log...</code></pre>.\nIn the breakpoint dialog box that opens up, use the following options:\n\nPress OK, run the program, and every time <pre><code>.text:00403855 32 C3             xor     al, bl</code></pre> is executed, OllyDbg will print the values of <pre><code>al</code></pre> and <pre><code>bl</code></pre> to the log window.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Mar 3, 2015 at 15:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "mr.proton",
                    "text": "<span class=\"comment-copy\">Hm looks kinda different for me, see <a href=\"http://www.pic-upload.de/view-26305059/Bildschirmfoto-2015-03-03-um-17.58.30.png.html\" rel=\"nofollow noreferrer\">pic-upload.de/view-26305059/…</a> Which version do you use?</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">I'm using the latest version, 2.01 - <a href=\"http://www.ollydbg.de/odbg201.zip\" rel=\"nofollow noreferrer\">ollydbg.de/odbg201.zip</a></span>",
                    "time": null
                },
                {
                    "user": "mr.proton",
                    "text": "<span class=\"comment-copy\">Awesome. Thanks! Works fine with 2.01</span>",
                    "time": null
                }
            ]
        }
    ]
}