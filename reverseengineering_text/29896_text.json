{
    "title": "stack explanation from https://revers.engineering/applied-re-the-stack/",
    "link": "https://reverseengineering.stackexchange.com/questions/29896/stack-explanation-from-https-revers-engineering-applied-re-the-stack",
    "content": "I've been reading [1] (By Daax Rynd) to get an understanding the stack and at around the 12th page, I'm a bit stumped by how the value <pre><code>60</code></pre> from <pre><code>sub rsp, 60</code></pre> was arrived at.\n[Note, all code and quotes are from that page and not my own]\nGiven the following C code:\n<pre><code>void do_math(void)\n{\n    int x = 10;\n    int y = 44;\n    int z = 36;\n    int w = 109;\n    int a[4] = { 1, 2, 3, 4 };\n    a[0] = x * a[0];\n    a[1] = y * x;\n    a[2] = a[1] * z;\n    a[3] = w * a[2];\n    printf(\"%d\n\", a[3]);\n}\n</code></pre>\nwhich was compiled to the following assembly [copied verbatim from the website.]:\n<pre><code>//\n// Assembly listing of main()\n//\nmov qword ptr [rsp+24], r8\nmov qword ptr [rsp+16], rdx\nmov dword ptr [rsp+8], ecx\nsub rsp, 40\ncall do_math\nxor eax, eax\nadd rsp, 40\nret 0\n//\n// Assembly listing of do_math()\n//\npush rbp\nmov rbp, rsp\nsub rsp, 60\n...\n</code></pre>\nI got stuck at the <pre><code>sub rsp, 60</code></pre>.  Reading the explanation on the next page:\n\nThen the stack allocates space using sub rsp, 60h. This is our local\nvariable storage space. If we look at our C excerpt you’ll notice that we\nhave a total of 8 integer variables, as well as a 4 character string used as\na format string for printf. That means we’re utilizing 32 bytes + 4 for\ncharacter storage for a total of 36 bytes. Well that’s not good, it’s not\n16-byte aligned. Let’s add 8, 44 – still not 16-byte aligned. Add another 8\nand we get 52, damn it – no dice. The stack is still misaligned. Add another\n8 and we have 60. 60 is a multiple of 16, so we’d have to allocate that much\nspace on the stack to keep it aligned, thus the sub rsp, 60h. Unfortunately,\nthe majority of that storage will be unused since it’s just for alignment\npurposes. Note that all the operands in these instructions are in\nhexadecimal.\n\nAs noted, the <pre><code>sub rsp, 60</code></pre> is actually <pre><code>sub rsp, 0x60</code></pre>.\n[0x60 = 96 decimal]\nAs I grasped that C code, there are 8 integers and 1 4-character string; thus, as stated, 36 bytes need to be placed in the stack.\nI thought I understood the issue of 16-byte alignment; but given the above explanation, I'm not entirely sure anymore.\nMy understanding is that since 36 bytes are required PLUS the Return instruction pointer address that needs to be placed in the stack, there\nshould be 36 + 8 = 44 bytes.  But that isn't 16-byte aligned.  So the closest 16-byte alignment would be 80 (0x50).\nBut instead, the author used 0x60 and I'm confused as how he got to that value (particularly the part where he added continually added 8 bytes to 36 bytes a few times, i.e. 36 +8 = 44, 44 + 8 = 52,  and finally 52 + 8 = 60).  Then he claims that 60 is a multiple of 16?  (which it isn't, as far as I know) [but, 0x60 is a multiple of 16]\nCan someone please clarify where I'm going wrong?\nThanks\n[1] - https://revers.engineering/applied-re-the-stack/\n",
    "votes": "0",
    "answers": 0,
    "views": "73",
    "tags": [
        "assembly",
        "stack"
    ],
    "user": "ewokx",
    "time": "Jan 19, 2022 at 8:32",
    "comments": [
        {
            "user": "julian",
            "text": "The explanation from the site is both confusing and incorrect. As you have noted, since decimal 60 does not equal hexadecimal 0x60, <pre><code>sub rsp, 0x60</code></pre> cannot be properly explained by adding numbers up to equal decimal 60. The example code and disassembly are not a good choice for learning about stack frames and stack alignment. You would be better served by using Compiler Explorer or compiling simple programs and analyzing their disassembled machine code on your own machine.\n",
            "time": null
        },
        {
            "user": "ewokx",
            "text": "@julian Thanks!  I appreciate the clarification.  That's the closest I came with help to understanding that.  But will take a look at the link.\n",
            "time": null
        }
    ],
    "answers_data": []
}