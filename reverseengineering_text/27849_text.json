{
    "title": "Checksum verification of an apk does not the same as my java program",
    "link": "https://reverseengineering.stackexchange.com/questions/27849/checksum-verification-of-an-apk-does-not-the-same-as-my-java-program",
    "content": "I'm from the sysadmin side of the IT and have not much experience in programing.\nI have an app that lets me screen share Android apps on my car's display.\nSadly there is a whitelist baked into the app, which prevents other apps (e.g. NewPipe) from running.\nI tought I would try reversing it. The modification of the whitelist is easy (.json) but there is some checksuming of the whitelist involved.\nI did a decompilation with jadx-gui and backsmali, tried to modify the smali code and recompile it again.\nI did not know what exactly to change in the smali code, because I am not really familiar with it.\nThe method was try and error, but I always got errors.\nSo I thought I could alter the checksum for my modifyed whitelist, but that also did not work as intended.\nI have extracted the code to run locally but the hash of the original file does not match the one, compiled into the apk and I'm not shure why\nThis is the jadx-gui reversed code snipped (exceptions removed):\n<pre><code>    private boolean j() {\n    InputStream inputStream = null;\n    try {\n        if (!\"whitelist/whitelist\".equals(\"whitelist/whitelist\")) {\n            throw new IllegalArgumentException(\"the whitelist path has to be \\\"whitelist/whitelist\\\", to access the dexguard encrypted file.\");\n        }\n        InputStream open = this.b.getAssets().open(\"whitelist/whitelist\");\n        byte[] bArr = new byte[ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES];\n        MessageDigest instance = MessageDigest.getInstance(\"SHA-256\");\n        while (true) {\n            int read = open.read(bArr);\n            if (read <= 0) {\n                break;\n            }\n            instance.update(bArr, 0, read);\n        }\n        if (!String.format(\"%64s\", new BigInteger(1, instance.digest()).toString(16)).replace(' ', '0').equals(this.b.getString(o.h.whitelist_checksum))) {\n            Log.e(\"MS-LL:LiveServiceFact.\", \"Invalid whitelist!\");\n            if (open != null) {\n                try {\n                    open.close();\n                } catch (IOException e2) {\n                }\n            }\n            return false;\n        } else if (open == null) {\n            return true;\n        } else {\n            try {\n                open.close();\n                return true;\n            } catch (IOException e3) {\n                return true;\n            }\n        }\n</code></pre>\nThe <pre><code>ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES</code></pre> is <pre><code>8192</code></pre> and the <pre><code>o.h.whitelist_checksum</code></pre> is <pre><code>2131689879</code></pre>, which is not a SHA-256 string.\nMy checksum checker looks like this:\n<pre><code>import java.io.File;\nimport java.io.IOException;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.InputStream;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass checksum {\n\npublic static void main(String[] args) {\n    try {\n        InputStream inputStream = null;\n        File file = new File(\"whitelist\");\n        int DEFAULT_BUFFER_SIZE_IN_BYTES = 8192;\n        int whitelist_checksum = 2131689879;\n\n        if (!\"whitelist/whitelist\".equals(\"whitelist/whitelist\")) {\n            throw new IllegalArgumentException(\"the whitelist path has to be \\\"whitelist/whitelist\\\", to access the dexguard encrypted file.\");\n        }\n        InputStream open = new FileInputStream(file);\n        byte[] bArr = new byte[DEFAULT_BUFFER_SIZE_IN_BYTES];\n        MessageDigest instance = MessageDigest.getInstance(\"SHA-256\");\n        while (true) {\n            int read = open.read(bArr);\n            if (read <= 0) {\n                break;\n            }\n            instance.update(bArr, 0, read);\n        }\n        System.out.println(String.format(\"%64s\", new BigInteger(1, instance.digest()).toString(16)).replace(' ', '0'));\n        if (!String.format(\"%64s\", new BigInteger(1, instance.digest()).toString(16)).replace(' ', '0').equals(Integer.toString(whitelist_checksum))) {\n            System.out.println(\"Invalid whitelist!\");\n        } else {\n            System.out.println(\"correct whitelist!\");\n        }\n    }\n    catch (FileNotFoundException ex){System.out.println(\"File not found\");}\n    catch (NoSuchAlgorithmException ex){System.out.println(\"Algorythm not found\");}\n    catch (IOException ex){System.out.println(\"IOException\");}\n}\n}\n</code></pre>\nBut gives me <pre><code>d9821f5190db1b21aabc58da45a802b529148bb8a952760c0ca4a6330817f174</code></pre> as checksum of the extracted whitelist and not <pre><code>2131689879</code></pre>.\nWhere am I missing something?\nThanks in advance, Simon\n",
    "votes": "0",
    "answers": 0,
    "views": "319",
    "tags": [
        "android",
        "java",
        "apk"
    ],
    "user": "Simon Sutter",
    "time": "Jun 15, 2021 at 18:24",
    "comments": [
        {
            "user": "Andrew T.",
            "text": "<pre><code>this.b.getString(o.h.whitelist_checksum)</code></pre> hints on <pre><code>getString(int)</code></pre>. Look for String resources instead.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Smali code may be a bit \"bloated\" compared to Java but modifying it is easy. You just have to identify the <pre><code>if</code></pre> statement that branches on the result of the equals comparison. Usually this should be an <pre><code>if-nez</code></pre> or <pre><code>if-eqz</code></pre> . Depending on if you want to keep the if or the else part just comment out that line or replace it with an <pre><code>goto</code></pre> and delete the parameter from the if (only leave the jump target). That disables the SHA-checking of the whitelist.\n",
            "time": null
        },
        {
            "user": "Simon Sutter",
            "text": "@AndrewT. I was able to find the checksum sting in the resources. Sadly I have used text search to find it and was not able to find out how <pre><code>2131689879</code></pre> leads to resource.arsc/res/values/strings.xml. But I get the Idea of it. @Robert I did try to remove every <pre><code>if</code></pre> in the smali <pre><code>j()</code></pre> method one after another, but it did not work. Would be cool to remove the checksumming, but replace the string also works.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Do not just remove all if commands, only remove the one you want to skip. Jadx provides both Java and Smali view, switch between them and map Java code to Smali code do identify which if statement to modify (remove or replace with permanent branch). The <pre><code>BigInteger</code></pre> usage should be a good place to start as it is close to the conditional branch and it is only used right before that point.\n",
            "time": null
        }
    ],
    "answers_data": []
}