{
    "title": "Extracting obj-c class list from a machO",
    "link": "https://reverseengineering.stackexchange.com/questions/32319/extracting-obj-c-class-list-from-a-macho",
    "content": "I'm trying to analyze and get the full list of selectors and their related classes in objective-c by first reading the <pre><code>__objc_classlist</code></pre> section and getting pointers to the struct <pre><code>objc_class</code></pre> list to traverse my way to <pre><code>class_ro_t</code></pre> struct from the <pre><code>bits</code></pre> member and then get to the the struct <pre><code>method_list_t</code></pre> and then get all the methods implementations and selectors.\nI read my macho file and set the cursor to the section's <pre><code>addr</code></pre> member and then try to read pointer sized values, problem is I'm getting completely different values from what I inspect in ghidra for example where I see another pointer value that leads to an actualyl <pre><code>objc_class</code></pre> instance.\nI validated my code with just printing the bytes at this place:\n<pre><code>dd bs=1 \"skip=2240984\" \"count=$((2240992 - 2240984))\" if=framework | xxd</code></pre>\nWhere <pre><code>2240984</code></pre> is the start address of the <pre><code>__objc_classlist</code></pre> section and I observe same pointer values as in my code, so I wonder what I am doing wrong and why in ghidra I see different valid pointer values?\n",
    "votes": "0",
    "answers": 1,
    "views": "335",
    "tags": [
        "ghidra",
        "ios",
        "mach-o",
        "macos"
    ],
    "user": "Jorayen",
    "time": "Sep 25, 2023 at 15:26",
    "comments": [],
    "answers_data": [
        {
            "content": "I would need to concrete binary you are talking about for specifics, but it's plausible that you are running into the concept of \"Chained Fixup Pointers\"\nThe value you are reading from the raw binary could then be the pointer sized value that encodes the information that is later used by the loader to write the correctly rebased pointer to this location.\nIt's not clear to me if your script is running inside Ghidra, or parsing the binary itself? With a Ghidra Script there should be APIs to read the fixed up value after rebasing.\n",
            "votes": "0",
            "user": "Florian Magin",
            "time": "Sep 27, 2023 at 8:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jorayen",
                    "text": "<span class=\"comment-copy\">Youre probably right, I read it's probably the case due to the binary being arm64 macOS 13 or something, I'm wondering why the objc runtime even encode these pointers and they're in need of a rebase/ The objc_classlist is the classlist of the binary itself, sure it contains binding and rebase information for imported symbols but why for its owned class list?</span>",
                    "time": null
                },
                {
                    "user": "Jorayen",
                    "text": "<span class=\"comment-copy\">Ok just to clarify I'm not using running my scripts in Ghidra I just use it as a basis to analyze a macho myself. I've parsed the chained_fixups and I don't see any rebase value with a target of <code>2240984</code> which is the start of the <code>__objc_classlist</code> section, Maybe I just don't understand what I should do with the values of the <code>dyld_chained_ptr_64_rebase</code> struct and how it would help me to produce fixed values for whatever in the addresses of the <code>__objc_classlist</code> section. Also I've noticed that if I search for the <code>_OBJC_CLASS_$_XXX</code> symbol in the sym table the value of it is just the</span>",
                    "time": null
                },
                {
                    "user": "Jorayen",
                    "text": "<span class=\"comment-copy\">address shown in Ghidra, so did I even need to parse the chained fixups?</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">Ghidra should already show the rebased pointers. But I'm not sure if this is the question you are asking?</span>",
                    "time": null
                },
                {
                    "user": "Jorayen",
                    "text": "<span class=\"comment-copy\">No, just to clarify I'm using ghidra only as a tool to verify my own macho parsing. I've been able to parse the chained fixups, but what I do not understand is how from the rebase/bind structure do I get the fixed pointer values of data in the <code>__objc_classlist</code> section? I'm looking at the rebases of the chain (as far as I understand <code>__objc_classlist</code>  is own binary classes so no binding info is needed her - but I might be wrong?) and I have the <code>target</code> field of the struct <code>dyld_chained_ptr_64_rebase</code> (from xnu <code>macho/fixup-chains.h</code>) and I wonder how do I go about from this struct data to</span>",
                    "time": null
                }
            ]
        }
    ]
}