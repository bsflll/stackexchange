{
    "title": "Set register to specific value for use in autoanalysis in IDA Pro 6.9",
    "link": "https://reverseengineering.stackexchange.com/questions/13101/set-register-to-specific-value-for-use-in-autoanalysis-in-ida-pro-6-9",
    "content": "I'm using IDA Pro 6.9 with some PowerPC disassembly. The code sets up <pre><code>r13</code></pre> to a value, say 0x10000, then offsets that register to load and store memory in that region. <pre><code>r13</code></pre> is never modified again in the code, it is only used for loading/storing data by offsetting.\n<pre><code>e_stb     r7, -0x56E2(r13)\n</code></pre>\nI'm hoping there is a way to tell IDA the value of r13 so that it will automatically generate a reference to the correct memory location so that I get something like:\n<pre><code>e_stb     r7, -0x56E2(r13) # Named_Location\n</code></pre>\nAs well as the value at that location when I hover with the mouse.\nUpdate:\nIgor Skochinsky gave what is the correct answer but didn't fix my specific problem. \nThe answer seems to have worked anywhere r13 is used in an add instruction, <pre><code>e_add16i r31, r13, -0x2DF2 # unk_4000ADE2</code></pre> but is not working for direct relative load/store instructions, <pre><code>e_stb r3, -0x2E08(r13)</code></pre> (no variable name, offset in red).\nThis might be a bug in IDA.\n",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "register",
        "pointer",
        "powerpc"
    ],
    "user": "Joe",
    "time": "Jul 21, 2016 at 13:24",
    "comments": [],
    "answers_data": [
        {
            "content": "Just set it in processor options.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jul 21, 2016 at 11:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Joe",
                    "text": "<span class=\"comment-copy\">So this seems to be exactly what I want, completely missed that option when I was poking around. However, when I set this value and force a reanalysis IDA doesn't update the instructions, it shows the <code>e_stb     r7, -0x56E2(r13)</code> as before, no changes. Also, if it helps, the offset, <code>-0X56E2</code> is red which seems to indicate IDA is trying to do something with it.  Have any other ideas? I'll mark your answer accepted as this does seem the right way, just something isn't working for me.</span>",
                    "time": null
                },
                {
                    "user": "Joe",
                    "text": "<span class=\"comment-copy\">Ok, so the answer seems to have worked anywhere r13 is used in an add instruction, <code>e_add16i  r31, r13, -0x2DF2 # unk_4000ADE2</code> but is not working for direct relative load/store instructions, <code>e_stb     r3, -0x2E08(r13)</code> (no variable name, offset in red).</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Does the final address exist? If yes, send a bug report.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Regarding the potential bug in IDA: \nFirst of all, you can add references yourself with <pre><code>idaapi.add_cref</code></pre> and <pre><code>idaapi.add_dref</code></pre> IDAPython APIs. This may be done with relatively simple script like this:\n<pre><code>import idaapi\nimport idautils\nimport idc\n\npredefined_r13 = YOUR_R13_VALUE\n\nfor h in idautils.Heads():\n    dis = idc.GetDisasm(h) #probably there is another way to do it and parsing textual assembly is not the best option\n    pos = dis.find (\"(r13)\")\n    if pos != -1: #we have your register here\n          splitted = dis[:pos].split() \n          lastarg = splitted[-1]\n          lastarg_numeric = int(lastarg, 16)\n          addr = predefined_r13 + lastarg_numeric\n          idaapi.add_dref(h, addr, idc.dr_O)\n</code></pre>\nOf course this script should be extended:\nthe expression with r13 may be more complicated,the type of data reference may be different and it may be the code reference at all, and the problem is already solved for part of the cases as it is wrote in the answer by @Igor Skochinsky, but the general idea is illustrated pretty well.\nIn addition (if you want to override the work of disassembler) you can install your own disassembler module hook as @Rolf Rolles did in this article which will recompute all these things (you'll need to override <pre><code>idaapi.IDP_Hooks.custom_emu</code></pre> ), but adding data references is probably easier way to achieve your goal.\n",
            "votes": "1",
            "user": "w s",
            "time": "Jul 21, 2016 at 14:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Joe",
                    "text": "<span class=\"comment-copy\">Thanks for the input and sample script. I'll probably end up doing something like that, a little too tedious to continue adding manual xrefs/comments.</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">btw, did you reanalyze the program after applying the r13 value in analyzer options (Options-&gt;General-&gt;Analysis-&gt;Reanalyze program) ?</span>",
                    "time": null
                },
                {
                    "user": "Joe",
                    "text": "<span class=\"comment-copy\">I did, that is when it got the add instructions correct, but not the load/store instructions.</span>",
                    "time": null
                },
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">Great stuff, I also suffered from \"what is the plural of split\" variable naming issues.  I tend to go with <code>splut</code></span>",
                    "time": null
                }
            ]
        }
    ]
}