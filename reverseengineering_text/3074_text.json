{
    "title": "Decompiling a 1990 DOS application",
    "link": "https://reverseengineering.stackexchange.com/questions/3074/decompiling-a-1990-dos-application",
    "content": "I have some crucial data written decades ago by an ancient 16bit DOS application. There are no docs, no source, and no information about the author. Just the 16 bit exe. I guess it's time for me to learn how to decompile stuff, since it seems the only way to restore file format. I've tried OllyDbg, it looks really great, but it can't 16 bit.\nIs there a disassembler/debugger capable of working with such executables? \nI know DOSbox, the app runs in it all right. The problem is, I don't need to run it, I need to understand the file format in which it writes data. Do you think starting some old 16bit DOS debugger/decompiler in DOSbox sounds like an idea? If yes, could you please name a decent DOS debugger?\nThanks.\nP.S.: I copypasted this question from StackOverflow, because I didn't know about ReverseEngineering section when I was asking it. Please delete it if it's against the rules.\n",
    "votes": "32",
    "answers": 9,
    "views": "62k",
    "tags": [
        "debugging",
        "disassemblers",
        "dos-exe"
    ],
    "user": "ScumCoder",
    "time": "Nov 23, 2013 at 8:03",
    "comments": [
        {
            "user": "Jongware",
            "text": "Can you share one, or preferably more, data files? Decompiling an entire executable is a lot of work. If you have a general idea what to look for -- magic values, constants, data structures, etc. -- you can concentrate on relevant parts only, rather than disassembling some huge routine that turns out to only calculate the width of a dialog box.\n",
            "time": null
        },
        {
            "user": "Till",
            "text": "It sounds a bit as if you are underestimating this task, hence my comment; Depending on the complexity of the written data (mostly text vs. plenty of mixed binary data) and the expected precision of your file-format reversing, the expectable investment for achieving your goal might easily exceed a month of hard work.\n",
            "time": null
        },
        {
            "user": "tuantm",
            "text": "I recommend to using Turbo Debugger as @Ange's answer. Because the UI of TD is similar to the OllyDbg as you like. Link to download: phatcode.net/downloads.php?id=280\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Two great disassemblers—lost in time—specifically for DOS and 16 bit programs. They were the IDA PRO of their days…\n\nWindows Codeback Disassmbler (WCB): Extremely rare to find. Never misses beginnings of a routine. Never\n\nSourcerer (If you can find it. The disassembler to go to when professionals wanted to disassemble any file. Industrial strength, more options than you can throw a bone at, extremely useful. Don't forget to download <pre><code>INTERRUPT LIST</code></pre> interpretations and <pre><code>COLLECT INTERRUPT</code></pre> lists at the end).\n\n\nIDA is good. Not nearly good enough when it comes to these two.\nMy personal choice: Sourcerer.\nSYMDEB.EXE, the symbolic debugger from Microsoft for DOS.\nTurbodebugger --- not that much.\nHope that helps.\nAnonymous.\n",
            "votes": "15",
            "user": "Ian Boyd",
            "time": "Nov 29, 2022 at 7:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">are you sure it's not Sourcer, from V Communications ? I didn't mention it because it wouldn't enable to take note and manipulate them like IDA would.</span>",
                    "time": null
                },
                {
                    "user": "ScumCoder",
                    "text": "<span class=\"comment-copy\">Looks like WCB stands for 'Windows CodeBack'. Its Readme says this: \"The current version does not include support for conventional DOS .EXE files\".</span>",
                    "time": null
                },
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">well, most DOS tools aren't for sale anymore ;)</span>",
                    "time": null
                },
                {
                    "user": "i336_",
                    "text": "<span class=\"comment-copy\">It looks like you want to google \"wcb105a.zip\" for WCB. It's actually surprisingly findable. If 1.05 is not the newest version, I'd appreciate finding out.</span>",
                    "time": null
                },
                {
                    "user": "dorien",
                    "text": "<span class=\"comment-copy\">It is indeed possible to find wcb. For my particular old dos .exe it however says I need dll files, which I don't have.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The Reko Decompiler is updated regularly and works for 16-bit DOS executables. \nIt can generate C code from the disassembly.\nIt's written in C#/.NET so requires mono if you want to run it on linux or macos.\n",
            "votes": "6",
            "user": "movAX13h",
            "time": "Dec 29, 2019 at 0:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "there are no decent decompiler for 16b DOS afaik\nDosbox has an integrated debugger, otherwise try TurboDebugger - and opening the file in IDA simultaneously to document on the go. Also check this recent blogpost about such a situation.\n",
            "votes": "5",
            "user": "Ange",
            "time": "Nov 28, 2013 at 11:18",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">And of course: <a href=\"https://github.com/wjp/idados\" rel=\"nofollow noreferrer\">github.com/wjp/idados</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Ghidra (which is free) is able to disassemble x86 16-bit applications and even to decompile them to C (something you can't do with IDA).\n",
            "votes": "5",
            "user": "tigrou",
            "time": "Feb 5, 2020 at 14:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RedDragonWebDesign",
                    "text": "<span class=\"comment-copy\">Any tips for getting Ghidra to properly decompile DOS API calls? I like Ghidra, but by default it decompiles <code>MOV AH, 0x30; INT 0x21</code> into <code>pcVar8 = (code *)swi(0x21);</code> I'd rather it decompiled it into something easier to read, like <code>dosAPICall(0x30)</code>, and also not drop the <code>0x21</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I know this question is old, but for future reference. You can download DOSBOX Debug version. It will give you a nice debug window where you can stem trough the assembler code. just run debug.exe program.exe og press alt+pause when the application is running. You need to know assembler to understand the output, but it is a very strong utility to look trough a programs code.\n",
            "votes": "4",
            "user": "nivs1978",
            "time": "Feb 15, 2017 at 10:46",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ScumCoder",
                    "text": "<span class=\"comment-copy\">I already did that, but thanks for the answer either way. (Also, IMHO there is no such thing as an \"old question\" - even if the OP has already solved his problem and doesn't need your answer, it may still help other people who stumble upon this thread from web search).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If you don't care about dynamic analysis, you should give a try to radare2 (a free software), that can (among other things) disassemble 16bit DOS binaries very well.\n",
            "votes": "3",
            "user": "jvoisin",
            "time": "Nov 29, 2013 at 17:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ange",
                    "text": "<span class=\"comment-copy\">Disassembling is the bare minimum for reversing, though.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Two useful DOS debuggers come into my mind: \n\nSoftIce \nDeGlucker. \n\nSoftIce is commercial, DeGlucker is freeware.\nEdit: Gametools (G3X) is also a very useful TSR debugger for DOS. The best feature in Gametools is its memory scanner that can scan memory for exact values, for greater values than previous time and for lesser values than previous time. Then you can set hardware memory breakpoints on the matching memory addresses (when you have sufficiently few memory addresses left, usually after some rounds) and that way you can find the essential routines that access those memory addresses. If I had to reverse-engineer a DOS application, I would definitely start with Gametools.\n",
            "votes": "3",
            "user": "nrz",
            "time": "Dec 13, 2013 at 0:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "My answer is a little late; newcomer to this site. The Decompiler project was initiated in order to decompile MS-DOS EXE and COM binaries. The project has both a command-line and a GUI tool:\nhttps://sourceforge.net/projects/decompiler/\nUse the following command with the command-line tool to decompile COM programs:\n<pre><code>decompile --default-to ms-dos-com myprog.com\n</code></pre>\nIn the GUI, use the menu command <pre><code>File</code></pre> > <pre><code>Open as...</code></pre> to open the COM file and specify a start address like 0800:0100.\n",
            "votes": "3",
            "user": "John Källén",
            "time": "Jul 25, 2015 at 8:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Dark Debugger v0.04: small V86 mode debugger based on DeGlucker for DOS with build in assembler (FASM). Dark Debugger is a perfect debugger in order to u\nunpack protected executable files.\nhttp://www.ndn.muxe.com/download/file/DD.7Z\nhttps://board.flatassembler.net/topic.php?t=18708\n",
            "votes": "0",
            "user": "ManIron30",
            "time": "Feb 25, 2023 at 10:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}