{
    "title": "Windbg: going from vftable to c++ class",
    "link": "https://reverseengineering.stackexchange.com/questions/6436/windbg-going-from-vftable-to-c-class",
    "content": "As part of an assignment, I am delving into the world of Internet Explorer, and am trying to figure out exactly what class(es) are being allocated on the heap.\nIn the <pre><code>mshtml!CEventObj::GenericGetElement()</code></pre> method, the <pre><code>eax</code></pre> register points to an instance of a class, <pre><code>edi</code></pre> points to the object it references, and <pre><code>esi</code></pre> points to the vftable.\nThis being said, I inserted a breakpoint that would list these registers each time through the function, and they always point to the same vftable.\nThe vftable in question is <pre><code>mshtml!CBodyElement</code></pre>, but does this actually mean that all these instances are of the <pre><code>CBodyElement</code></pre>, or could they be for classes derived from <pre><code>CBodyElement</code></pre>. \nIf they are from derived classes, how do I determine the actual classes being allocated ?\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "dynamic-analysis",
        "windbg"
    ],
    "user": "dnraikes",
    "time": "Oct 13, 2014 at 8:26",
    "comments": [],
    "answers_data": [
        {
            "content": "A derived class will get its own <pre><code>vtable</code></pre> if it overrides any of the virtual functions.\nIf the derived class does not override any virtual functions, it will use the original <pre><code>vtable</code></pre>.\nI would say that your assumption is correct ~90% of the time.\nThe best that you can do for static type recovery, is to look at the <pre><code>vtable</code></pre> being used.\nWhat you can do to help a bit is to turn one PageHeap with stack tracking (<pre><code>gflags.exe /i iexplore.exe +hpa +ust</code></pre>) and look at the address allocated for the object (<pre><code>!heap -p -a 0xaddress</code></pre>).  This will give you a full stack trace to the allocation-site of the object, which is sometimes to determine the type of object (e.g. if a <pre><code>Factory</code></pre> pattern was used).\nFinally, there are additional dynamic analysis tricks you can play.  I wrote a Pin tool and IDA Python plugin, ida-splode for almost exactly this application.  By capturing information at runtime, you can enhance your IDA traces.  Below is an example screenshot from the slide deck.  The better symbol information you have (or the better fleshed-out your IDB is), the better the information you get.\n",
            "votes": "2",
            "user": "Zach Riggle",
            "time": "Oct 13, 2014 at 21:48",
            "is_accepted": true,
            "comments": []
        }
    ]
}