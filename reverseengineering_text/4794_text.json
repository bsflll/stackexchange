{
    "title": "Convert C to MIPS assembly code? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/4794/convert-c-to-mips-assembly-code",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nYou could help solve this problem?\nBest regards!\n<pre><code>int bonus(int *l, int n){                              \nint i, j, aux;                      \nfor(i = 0; i < n; i++){                \n    for(j = 0; j < n - i; j++){                  \n        if(l[j] > l[j+1]){\n            aux = l[j];\n            l[j] = l[j+1];\n            l[j+1] = aux;\n        }\n    }\n}\n}\n</code></pre>\n",
    "votes": "-7",
    "answers": 1,
    "views": "8k",
    "tags": [
        "assembly",
        "c",
        "mips"
    ],
    "user": "Iv4nLar1",
    "time": "10 years ago",
    "comments": [
        {
            "user": "perror",
            "text": "Just use a compiler... it is meant for this kind of purpose, no ?\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "Also, this isn't a \"we do your homework for you\" site.\n",
            "time": null
        },
        {
            "user": "Dmitry Janushkevich",
            "text": "Sounds off-topic in RE. We usually deal with the reverse process -- assembly to higher-level code transformation.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It is one of the questions where you'll get much more knowledge if you do it yourself. To do this you have to install and use MIPS compiler and MIPS disassembler.\n<pre><code>Command line with QNX toolchain:\n\nmips-unknown-nto-qnx6.5.0-gcc -c ./mipst.c\nmips-unknown-nto-qnx6.5.0-objdump -d ./mipst.o\n\n./mipst.o:     file format elf32-tradbigmips\n\n\nDisassembly of section .text:\n\n00000000 <bonus>:\n   0:   27bdffe0    addiu   sp,sp,-32\n   4:   afbe001c    sw  s8,28(sp)\n   8:   03a0f021    move    s8,sp\n   c:   afc40020    sw  a0,32(s8)\n  10:   afc50024    sw  a1,36(s8)\n  14:   afc00010    sw  zero,16(s8)\n  18:   0800003e    j   f8 <bonus+0xf8>\n  1c:   00000000    nop\n  20:   afc0000c    sw  zero,12(s8)\n  24:   08000034    j   d0 <bonus+0xd0>\n  28:   00000000    nop\n  2c:   8fc2000c    lw  v0,12(s8)\n  30:   00021080    sll v0,v0,0x2\n  34:   8fc30020    lw  v1,32(s8)\n  38:   00621021    addu    v0,v1,v0\n  3c:   8c430000    lw  v1,0(v0)\n  40:   8fc2000c    lw  v0,12(s8)\n  44:   24420001    addiu   v0,v0,1\n  48:   00021080    sll v0,v0,0x2\n  4c:   8fc40020    lw  a0,32(s8)\n  50:   00821021    addu    v0,a0,v0\n  54:   8c420000    lw  v0,0(v0)\n  58:   0043102a    slt v0,v0,v1\n  5c:   10400019    beqz    v0,c4 <bonus+0xc4>\n  60:   00000000    nop\n  64:   8fc2000c    lw  v0,12(s8)\n  68:   00021080    sll v0,v0,0x2\n  6c:   8fc30020    lw  v1,32(s8)\n  70:   00621021    addu    v0,v1,v0\n  74:   8c420000    lw  v0,0(v0)\n  78:   afc20008    sw  v0,8(s8)\n  7c:   8fc2000c    lw  v0,12(s8)\n  80:   00021080    sll v0,v0,0x2\n  84:   8fc30020    lw  v1,32(s8)\n  88:   00621021    addu    v0,v1,v0\n  8c:   8fc3000c    lw  v1,12(s8)\n  90:   24630001    addiu   v1,v1,1\n  94:   00031880    sll v1,v1,0x2\n  98:   8fc40020    lw  a0,32(s8)\n  9c:   00831821    addu    v1,a0,v1\n  a0:   8c630000    lw  v1,0(v1)\n  a4:   ac430000    sw  v1,0(v0)\n  a8:   8fc2000c    lw  v0,12(s8)\n  ac:   24420001    addiu   v0,v0,1\n  b0:   00021080    sll v0,v0,0x2\n  b4:   8fc30020    lw  v1,32(s8)\n  b8:   00621021    addu    v0,v1,v0\n  bc:   8fc30008    lw  v1,8(s8)\n  c0:   ac430000    sw  v1,0(v0)\n  c4:   8fc2000c    lw  v0,12(s8)\n  c8:   24420001    addiu   v0,v0,1\n  cc:   afc2000c    sw  v0,12(s8)\n  d0:   8fc30024    lw  v1,36(s8)\n  d4:   8fc20010    lw  v0,16(s8)\n  d8:   00621823    subu    v1,v1,v0\n  dc:   8fc2000c    lw  v0,12(s8)\n  e0:   0043102a    slt v0,v0,v1\n  e4:   1440ffd1    bnez    v0,2c <bonus+0x2c>\n  e8:   00000000    nop\n  ec:   8fc20010    lw  v0,16(s8)\n  f0:   24420001    addiu   v0,v0,1\n  f4:   afc20010    sw  v0,16(s8)\n  f8:   8fc30010    lw  v1,16(s8)\n  fc:   8fc20024    lw  v0,36(s8)\n 100:   0062102a    slt v0,v1,v0\n 104:   1440ffc6    bnez    v0,20 <bonus+0x20>\n 108:   00000000    nop\n 10c:   03c0e821    move    sp,s8\n 110:   8fbe001c    lw  s8,28(sp)\n 114:   27bd0020    addiu   sp,sp,32\n 118:   03e00008    jr  ra\n 11c:   00000000    nop\n</code></pre>\n",
            "votes": "2",
            "user": "w s",
            "time": "Jul 7, 2014 at 9:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">You shouldn't encourage this kind of questions by answering them. Now, if you'd posted an ARM assembly listing in the hope he'd give it to his professor without recognizing the difference, <i>that</i> would have been cool :D</span>",
                    "time": null
                },
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Actually I suspected that somebody will joke like this and that's why I answered this question 100% correctly.In addition please note that professor that will accept this answer without serious rework really deserves such kind of students.</span>",
                    "time": null
                }
            ]
        }
    ]
}