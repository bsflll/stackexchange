{
    "title": "How to tell if a particular .NET assembly was written in C# or F#?",
    "link": "https://reverseengineering.stackexchange.com/questions/17911/how-to-tell-if-a-particular-net-assembly-was-written-in-c-or-f",
    "content": "The motivation for this question is that I used JetBrains dotPeek to decompile an .exe written in F#, but the output project directory produced C# code.\nWhy does decompiling an F# assembly produce C# code?\nI know that both languages get JIT-compiled from MSIL to native code, which may make it difficult to definitively say what the original language was.\nDespite this, are there reliable methods for distinguishing C# binaries from F# ones via static analysis? Dynamic analysis?\n",
    "votes": "6",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decompilation",
        ".net",
        "c#"
    ],
    "user": "Samantha",
    "time": "Apr 6, 2018 at 9:20",
    "comments": [],
    "answers_data": [
        {
            "content": "Why does decompiling an F# assembly produce C# code?\n\nIt doesn't. It produces IL code which then can be interpreted as C#, F# or VB.NET. dotPeek doesn't allow you to use any other language for previewing but for example dnSpy, ILSpy allow you to pick your favourite one. Just wondering if there's any tools that allows F#. Not sure/haven't seen one.\n\nDespite this, are there reliable methods for distinguishing C# binaries from F# ones via static analysis? Dynamic analysis?\n\nThere are some hints that can guide you. Check the references. If something is referencing the <pre><code>FSharp.Core</code></pre> then probably was written in F#. On the other hand if it doesn't probably it was not :)\nF#'s dlls usually have a lot of attributes put on classes like <pre><code>[FSharpInterfaceDataVersion]</code></pre> or <pre><code>[CompilationMappingAttribute]</code></pre> being used. Check them.\nThere's one more thing. F# compiler is capable of using a tail-recursion by generating tailcall opcode which is not the case with C# (at least for now). That could be an indicator. But it could be also manually crafted to use it after being written completely in C#.\n",
            "votes": "10",
            "user": "Paweł Łukasik",
            "time": "Apr 6, 2018 at 10:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}