{
    "title": "Trying to rip the sprites of this game",
    "link": "https://reverseengineering.stackexchange.com/questions/24742/trying-to-rip-the-sprites-of-this-game",
    "content": "I am currently trying to rip the sprites from an Nintendo DS game called Cookie Shop - Create Your Dream Shop but they are all in _LZ.bin files.\nWhen I've unpacked its compression, I could see lots of files titles spr.bin and pal.bin\n\nI know that these files are the sprites as well as their corresponding palettes but I had zero idea to open them.\nI tried using CrystalTile2, but all it came out was garbled mess, both the palette and sprite.\nHere are the hexadecimals for the palettes and sprites respectively.\n\n\n\nNow this is what the sprite and pallete looked like in NO$GBA.\n\n\nPallette table OBP C (from left to right, RGB Format)\n001010\n0F0604\n130B09\n191311\n1D1816\n1A0C10\n1C1013\n1F1518\n1F1C1D\n1F1F1F\n0F1808\n151E0D\n130508\n1A0A0F\n1D0F12\n000000 (not used)\nAlso, the max color hex is 1F, not FF.\n001010 is used as a transparency filter if I assume.\nI also found sprites that were never used in the game, and I went to change the names of the characters, but it ended up freezing the game after I pressed continue.\nIs it possible to extract the sprites? Because I want to use it to create a sprite sheet, as well as creating a story using these characters.\n",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "binary",
        "binary-format",
        "binary-editing"
    ],
    "user": "COR3Z",
    "time": "Apr 18, 2020 at 8:13",
    "comments": [
        {
            "user": "Jongware",
            "text": "Provide a download link for a small sample of these files.\n",
            "time": null
        },
        {
            "user": "COR3Z",
            "text": "mega.nz/file/…\n",
            "time": null
        },
        {
            "user": "Super451",
            "text": "Can you upload the cookie shop sprites in PNG file\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Both files are prepended with a 4 bytes large number; apparently the total size of the data that follows. I am ignoring it because the file sizes seem fixed. (Also, for the images the other important data, its width and height, are not stored in the file.)\nPalette\nThe palette is a 5 bits per channel BGR, with the highest bit unused. The two bytes are stored in little-endian order. Converting to True Color RGB is therefore a matter of bit shifting; you end up with 16 RGB color triplets.\nImage\nThe image is stored in 16 x 16 blocks, each 8 x 8 pixels, and every two consecutive pixels are packed into a single byte, right pixel first. Every pixel value ranges from 0..15 and maps immediately to the palette.\nTo unpack a single 8x8 block, all it takes is\n<pre><code>for y in range(8):\n    for x in range(4):\n        print (img[4*y+x]])\n</code></pre>\nwhich yields a series of 2-pixel data. I found it more convenient, below, to unpack each two nibbles immediately into 2 separate pixels; then it's a matter of looping over the right x and y axis to reassemble the entire image in a coherent, linear, 128x128 pixel bitmap.\nThe code below then stores the RGB values for each pixel in a True-color PNG image; alternatively, you could save it as a palettized PNG image as well (or really any other image format you'd like).\nPython 3.x code\nThis code needs <pre><code>pypng</code></pre>. Adjust the fixed part of the path to your folder structure -- it should end with a slash. Save as <pre><code>cookie2png.py</code></pre> and call from a command line with\n<pre><code>python cookie2png.py Rose/bu_strawberry_LZ.bin\\bu_strawberry_anger\n</code></pre>\ni.e., leave off the parts <pre><code>_pal.bin</code></pre> and <pre><code>_spr.bin</code></pre> so the script can find them on its own.\n<pre><code>import sys,png\nfrom struct import unpack\n\npath = \"/Sprites/Character files/\"\n# base = 'bu_strawberry2'\nbase = sys.argv[1]\n\nwith open (path+base+'_pal.bin', 'rb') as p:\n    pal = p.read()\n\npal = unpack('<I16H', pal)[1:]\npal = [bin(p)[2:].zfill(15) for p in pal]\nrgb = [(int(p[10:15]+p[10:13],2),int(p[5:10]+p[5:8],2),int(p[0:5]+p[0:3],2)) for p in pal]\nprint ('rgb palette', *['%02x%02x%02x' % (r,g,b) for r,g,b in rgb])\n\nwith open (path+base+'_spr.bin', 'rb') as i:\n    img = i.read()\n\n# Strip header\nimg = img[4:]\n# Convert nibbles to bytes\nimg = [[b & 0x0f,b >> 4] for b in img]\n# Unpack list\nimg = [b for a in img for b in a]\n\n# Linearize image\ntarget = []\nfor y in range(16):\n    for yy in range(8):\n        for x in range(16):\n            for xx in range(8):\n                target.append(rgb[img[16*64*y+64*x+8*yy+xx]])\n\n# Convert from palettized into True color\ntarget = [color for rgb in target for color in rgb]\n\n# Split into rows, required by pypng\ntarget = [target[i:i + 3*128] for i in range(0, len(target), 3*128)]\n\nw = png.Writer(128, 128, greyscale=False, bitdepth=8)\nwith open(path+base+'.png', 'wb') as f:\n    w.write(f, target)\n</code></pre>\nand the results are as expected. Here is your <pre><code>bu_strawberry</code></pre>, and a smattering of interesting others:\n",
            "votes": "3",
            "user": "Jongware",
            "time": "Apr 18, 2020 at 22:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "COR3Z",
                    "text": "<span class=\"comment-copy\">Well, I am amazed! Thank you so much! P.S. 2 of those images aren’t even used in the game!</span>",
                    "time": null
                },
                {
                    "user": "COR3Z",
                    "text": "<span class=\"comment-copy\">I have found some sprites that require 8bpp formatting, and have a 256x192 resolution. how is it possible to extract it by changing this code?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The <pre><code>.bin</code></pre> files hold the data for the sprite in bytes. You can easily dump each <pre><code>.bin</code></pre> file and interpret it as sprite data. \nBack when I was writing my NES emulator, it had an extremely outdated way of handling sprites. It had a \"left side\" of the full list of sprites in the cartridge, which lies in <pre><code>0x0000-0x1000</code></pre> and then a \"right side\", which respectively lies in <pre><code>0x1000-0x1FFF</code></pre>\nExample being in range <pre><code>0x0000-0x0010</code></pre> there would respectively lie the left side of some sprite (each side was 16-bytes long). You would combine those bytes in that portion with <pre><code>0x1000-0x1010</code></pre> which would be the right side of the sprite.\nAnyways, enough off-topic chatter. I just figured that would be interesting to you due to the similarities in structure. \nYou'll want to extract each byte inside of each <pre><code>.bin</code></pre> file and store each one in a separate <pre><code>std::uint8_t</code></pre> array. Then you can use something like SFML to render the pixels as raw data. I used <pre><code>sf::Texture::loadFromMemory</code></pre> to go about doing this.\nIf you want to raw rip the textures to image files. You'll have to convert the bytes in each <pre><code>.bin</code></pre> to a texture then output that texture as a <pre><code>.bmp</code></pre> file.\n",
            "votes": "0",
            "user": "Graham",
            "time": "Apr 18, 2020 at 15:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}