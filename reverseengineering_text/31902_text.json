{
    "title": "How to unpack emotet with x64dbg and do dynamic analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/31902/how-to-unpack-emotet-with-x64dbg-and-do-dynamic-analysis",
    "content": "I am a beginner at malware analysis. I have been trying to analyze Emotet using X64DBG. I followed the steps below and succeeded once, but when I repeated the same steps, I failed. Can you tell me if my approach is appropriate?\n\nI run Emotet with arguments given to <pre><code>rundll32.exe</code></pre> using X64DBG. The argument is <pre><code>DllRegisterServer</code></pre>.\n\nI set a breakpoint at <pre><code>NtResumeThread</code></pre> to prevent the child process created by Emotet from executing.\n\nI start a new instance of x64dbg and attach it to the child process. I set a <pre><code>Load DLL</code></pre> breakpoint to prevent execution from proceeding when it detaches from the parent process.\n\nIn the child process's x64dbg, I set a breakpoint at <pre><code>VirtualAlloc</code></pre> to identify where the unpacked executable is expanded.\n\nI set a breakpoint at the location identified in step 4 to stop just before execution after unpacking is complete.\n",
    "votes": "3",
    "answers": 0,
    "views": "82",
    "tags": [
        "debugging",
        "dll",
        "unpacking"
    ],
    "user": "KOT",
    "time": "Jun 4, 2023 at 2:34",
    "comments": [],
    "answers_data": []
}