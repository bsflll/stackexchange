{
    "title": "Find vtable without complete object locator",
    "link": "https://reverseengineering.stackexchange.com/questions/19825/find-vtable-without-complete-object-locator",
    "content": "I am learning to reverse Visual C++ objects.\nI usually find the vtable (or VMT of VFT, however you call it) of the object using a cross reference to its <pre><code>CompleteObjectLocator</code></pre> that I found in the disassembled binary before (using a cross reference to the object's <pre><code>TypeDescriptor</code></pre> or <pre><code>ClassHierarchyDescriptor</code></pre>). The pointer to <pre><code>CompleteObjectLocator</code></pre> is the -1st field of the vtable.\nHowever, as some classes are probably abstract in my program, they do not have <pre><code>CompleteObjectLocator</code></pre>s. How do I find their vtables?\nI know that the program writes the pointer to the vtable down to <pre><code>this</code></pre> in the object's constructor, however in my program the constructors are inlined in the child class constructors and there I do not see work with memory that could be the vtable of the parent.\nFor example:\n\n<pre><code>ClassA</code></pre> inherits from <pre><code>ClassB</code></pre> (probably abstract) that inherits from <pre><code>ClassC</code></pre> that inherits from <pre><code>ClassD</code></pre> (probably abstract). I found this information in the <pre><code>BaseClassArray</code></pre> of each of the classes.\nI am able to find vtable of <pre><code>ClassA</code></pre> and using a cross reference on it, I find its constructor\nIn the constructor of <pre><code>ClassA</code></pre> I see the program work with vtable of <pre><code>ClassC</code></pre> and vtable of <pre><code>ClassA</code></pre> (constructors are inlined, pointer to vtable of <pre><code>ClassC</code></pre> is written to a location and three instructions later it is rewritten by the pointer to vtable of <pre><code>ClassA</code></pre>)\nI would expect to see some work with vtables of <pre><code>ClassB</code></pre> and <pre><code>ClassD</code></pre> in the constructor of <pre><code>ClassA</code></pre> as well. I would expect the pointer to vtable of <pre><code>ClassB</code></pre> to be written do the memory somewhere between the work with vtables of <pre><code>ClassA</code></pre> and <pre><code>ClassC</code></pre>, but there are only instructions that basically do nothing, only move some content from register to register.\nOr, if the constructor of <pre><code>ClassA</code></pre> wouldn't work with vtables of <pre><code>ClassB</code></pre> and <pre><code>ClassD</code></pre>, I would expect at least calling their constructors from there, which does not happen as well.\n\nI know I could find a vtable dynamically, because it would be the first element of <pre><code>this</code></pre>, but I do not know where (if anywhere) <pre><code>this</code></pre> of <pre><code>ClassB</code></pre> and <pre><code>ClassD</code></pre> is used. Can I find their vtables and constructors statically?\n",
    "votes": "3",
    "answers": 0,
    "views": "578",
    "tags": [
        "c++",
        "vtables",
        "virtual-functions"
    ],
    "user": "Topper Harley",
    "time": "Nov 5, 2018 at 14:51",
    "comments": [
        {
            "user": "Ian Cook",
            "text": "Don't forget that vtables might not exist for all classes as MSVC can be told not to produce a vtable by declaring a class with __declspec(notable)\n",
            "time": null
        },
        {
            "user": "Ian Cook",
            "text": "__declspec(novtable) that is\n",
            "time": null
        },
        {
            "user": "Topper Harley",
            "text": "@IanCook I see, thank you very much for the comment. Is it possible that this is not the case and the vtables exist somewhere even though I do not see them used in the constructors of the derived classes?\n",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "Add some C++ code for example to understand clearly.\n",
            "time": null
        }
    ],
    "answers_data": []
}