{
    "title": "Anti-patching checksum [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/31295/anti-patching-checksum",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 2 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm busy with debugging a program in x64dbg and it has some kind of anti-patching mechanism so can someone please advise me on how I would go about finding the functions which are calculating the programs hash value or where it is stored. Any tips would be greatly appreciated.\n",
    "votes": "-1",
    "answers": 1,
    "views": "179",
    "tags": [
        "debugging",
        "x64dbg",
        "anti-debugging",
        "hash-functions"
    ],
    "user": "jjprince",
    "time": "2 years ago",
    "comments": [
        {
            "user": "josh",
            "text": "Why has this question been downvoted? IMO such scenarios are not uncommon in practice.\n",
            "time": null
        },
        {
            "user": "Rohit Gupta",
            "text": "Not mine, but maybe because of lack of details on any effort expended so far .\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "As it stands the question is really too broad aside from being opinion-based. I agree that the issue comes up in practice, but answers have a size limit (trust me, I know!) and no one wants to read a book when coming to a Q&A site such as this one. Please vote to reopen after you provide more details.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For finding the software part calculating the hash value, just some possibilities:\n\nLook for \"magic numbers\" in the code. Many CRC, SHA etc standard\nchecksum calculators could be recognized.\n\nOften the hashes are\ncalculated across the whole image of e.g. a critical DLL.\nIn that case, you could look for\n\nLoadLibrary calls (in Windows)\nMagic numbers of the DLL itself, like (again Windows) the MS header \"MZ\", present in all DLLs and exe's produced with MS tools.\n\nIf you could find an algorithm, have a look where it stores values. This gives a hint about the location of the checksum.\nAnd if you found the address where the hash is residing, set a \"read\" breakpoint (hardware breakpoint) on it and wait until it triggers. This could be the hash-checking routine.\n\"Windows\" here of course as an example only. Similar strategies exist for other platforms.\n",
            "votes": "2",
            "user": "josh",
            "time": "Dec 24, 2022 at 13:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}