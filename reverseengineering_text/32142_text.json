{
    "title": "Inject a MessageBox to the PE file",
    "link": "https://reverseengineering.stackexchange.com/questions/32142/inject-a-messagebox-to-the-pe-file",
    "content": "I'd like to patch some <pre><code>Windows PE</code></pre> file to show just simple <pre><code>MessageBox</code></pre>. Taking into account that the <pre><code>PE</code></pre> in question doesn't import the <pre><code>MessageBoxA</code></pre> function if I'm right that all i need to do is to add the <pre><code>user32.dll</code></pre> to the <pre><code>Imports Section</code></pre> with <pre><code>MessageBoxA</code></pre> function. And then just patch the code (using <pre><code>IDA</code></pre> or <pre><code>OllyDbg</code></pre> or sth. similar) adding a <pre><code>call</code></pre> instruction to the address of the newly added <pre><code>MessageBoxA</code></pre> function from <pre><code>Imports</code></pre>? If I'm right that after adding a new entry to the <pre><code>Imports</code></pre> the <pre><code>Windows Loader</code></pre> automatically map the <pre><code>MessageBoxA</code></pre> function physical address to the virtual PE address space making the PE possible to call the needed function?\n",
    "votes": "1",
    "answers": 0,
    "views": "161",
    "tags": [
        "windows",
        "pe",
        "patching"
    ],
    "user": "Daros911",
    "time": "Aug 7, 2023 at 11:49",
    "comments": [
        {
            "user": "y_v",
            "text": "I believe LIEF will help you with patching. Check this documentation: lief-project.github.io/doc/latest/tutorials/â€¦\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Well you're right about your import manipulation, yes. But a mere <pre><code>call</code></pre> won't help you. Depending on what the target is -- OllyDbg makes me assume x86 or x64, though -- you need to be aware of the calling convention(s) and pass the arguments in registers or on the stack accordingly. So it'd be some <pre><code>mov</code></pre> or <pre><code>push</code></pre> before the <pre><code>call</code></pre>, too.\n",
            "time": null
        }
    ],
    "answers_data": []
}