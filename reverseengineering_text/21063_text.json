{
    "title": "In IDA, i want to get symbol by using IDAPython",
    "link": "https://reverseengineering.stackexchange.com/questions/21063/in-ida-i-want-to-get-symbol-by-using-idapython",
    "content": "I'm currently reversing some C++ Binary (macOS Kernel Extension).\nBut, there are a lot of vtable functions, so i want to make some vtable structures by using IDAPython.  \nI know how to make structure itself, but i don't know how to get symbol in following case.  \n<pre><code>UNDEF:0000000000003E60 ; IORegistryEntry::compareName(OSString *, OSString **)const\nUNDEF:0000000000003E60                 extrn __ZNK15IORegistryEntry11compareNameEP8OSStringPS1_:qword\nUNDEF:0000000000003E60                                         ; DATA XREF: __const:0000000000002410↑o\nUNDEF:0000000000003E60                                         ; __const:0000000000002F40↑o\nUNDEF:0000000000003E68 ; IORegistryEntry::getLocation(IORegistryPlane const*)const\nUNDEF:0000000000003E68                 extrn __ZNK15IORegistryEntry11getLocationEPK15IORegistryPlane:qword\nUNDEF:0000000000003E68                                         ; DATA XREF: __const:0000000000002428↑o\nUNDEF:0000000000003E68                                         ; __const:0000000000002F58↑o\nUNDEF:0000000000003E70 ; IORegistryEntry::getProperty(OSString const*)const\nUNDEF:0000000000003E70                 extrn __ZNK15IORegistryEntry11getPropertyEPK8OSString:qword\nUNDEF:0000000000003E70                                         ; DATA XREF: __const:0000000000002320↑o\nUNDEF:0000000000003E70                                         ; __const:0000000000002E50↑o\nUNDEF:0000000000003E78 ; IORegistryEntry::getProperty(OSString const*, IORegistryPlane const*, unsigned int)const\nUNDEF:0000000000003E78                 extrn __ZNK15IORegistryEntry11getPropertyEPK8OSStringPK15IORegistryPlanej:qword\nUNDEF:0000000000003E78                                         ; DATA XREF: __const:0000000000002338↑o\nUNDEF:0000000000003E78                                         ; __const:0000000000002E68↑o\nUNDEF:0000000000003E80 ; IORegistryEntry::getProperty(OSSymbol const*)const\nUNDEF:0000000000003E80                 extrn __ZNK15IORegistryEntry11getPropertyEPK8OSSymbol:qword\nUNDEF:0000000000003E80                                         ; DATA XREF: __const:0000000000002318↑o\nUNDEF:0000000000003E80                                         ; __const:0000000000002E48↑o\nUNDEF:0000000000003E88 ; IORegistryEntry::getProperty(OSSymbol const*, IORegistryPlane const*, unsigned int)const\nUNDEF:0000000000003E88                 extrn __ZNK15IORegistryEntry11getPropertyEPK8OSSymbolPK15IORegistryPlanej:qword\nUNDEF:0000000000003E88                                         ; DATA XREF: __const:0000000000002330↑o\nUNDEF:0000000000003E88                                         ; __const:0000000000002E60↑o\nUNDEF:0000000000003E90 ; IORegistryEntry::getProperty(char const*)const\nUNDEF:0000000000003E90                 extrn __ZNK15IORegistryEntry11getPropertyEPKc:qword\nUNDEF:0000000000003E90                                         ; DATA XREF: __const:0000000000002328↑o\nUNDEF:0000000000003E90                                         ; __const:0000000000002E58↑o\n\n...\n</code></pre>\nI want to get above symbol name.\nI tried to use idc.GetFunctionName and idautils.Functions(), i can't get symbol name fully. Result is below.  \n<pre><code>Python>import idautils\nPython>for func in idautils.Functions():\nPython>  print(hex(func), idc.GetFunctionName(func))\n\n...\n\n('0x3950L', '__ZN15OSMetaClassBase12safeMetaCastEPKS_PK11OSMetaClass')\n('0x3a08L', '__ZN8OSObjectdlEPvm')\n('0x3a10L', '__ZN8OSObjectnwEm')\n('0x3e00L', '__ZN9IOServiceC2EPK11OSMetaClass')\n('0x3e08L', '__ZN9IOServiceD2Ev')\n('0x3e38L', '__ZNK11OSMetaClass19instanceConstructedEv')\n('0x3fb0L', '__ZNK9IOService10isInactiveEv')\n</code></pre>\nIs there some good way to get symbols?\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "c++",
        "idapython"
    ],
    "user": "jusun Lee",
    "time": "Apr 6, 2019 at 16:45",
    "comments": [],
    "answers_data": [
        {
            "content": "These names are mangled. You need to demangle it back.\n1 - Read something about name mangling in order to understand why clear <pre><code>IORegistryEntry::getProperty(OSString const*)const</code></pre> is converted to <pre><code>__ZNK15IORegistryEntry11getPropertyEPK8OSString</code></pre> .\n2 - Use demangling in IDA python (idc.demangle_name or ida_name.demangle_name).\n3 - If something goes wrong, you can go to online demangler.\nIt converts your \n\n('0x3950L', '__ZN15OSMetaClassBase12safeMetaCastEPKS_PK11OSMetaClass')\n  ('0x3a08L', '__ZN8OSObjectdlEPvm') ('0x3a10L', '__ZN8OSObjectnwEm')\n  ('0x3e00L', '__ZN9IOServiceC2EPK11OSMetaClass') ('0x3e08L',\n  '__ZN9IOServiceD2Ev') ('0x3e38L',\n  '__ZNK11OSMetaClass19instanceConstructedEv') ('0x3fb0L',\n  '__ZNK9IOService10isInactiveEv')\n\nto \n<pre><code>('0x3950L', '_OSMetaClassBase::safeMetaCast(OSMetaClassBase const*, OSMetaClass const*)')\n('0x3a08L', '_OSObject::operator delete(void*, unsigned long)')\n('0x3a10L', '_OSObject::operator new(unsigned long)')\n('0x3e00L', '_IOService::IOService(OSMetaClass const*)')\n('0x3e08L', '_IOService::~IOService()')\n('0x3e38L', '_OSMetaClass::instanceConstructed() const')\n('0x3fb0L', '_IOService::isInactive() const')\n</code></pre>\n",
            "votes": "4",
            "user": "w s",
            "time": "Apr 6, 2019 at 17:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}