{
    "title": "Injecting C++ code, while also maximizing compatibility with other injections",
    "link": "https://reverseengineering.stackexchange.com/questions/22155/injecting-c-code-while-also-maximizing-compatibility-with-other-injections",
    "content": "Using the New Vegas Script Extender C++ API for Fallout New Vegas, I am able to write to the process' memory directly at runtime through a .dll plugin that's loaded by the NVSE injector. But it is not a debugger, like CheatEngine, so there's no automatic handling of inserting new code to an existing assembly function.\nBeginning of the assembly function, <pre><code>TryOpenPipboy</code></pre>, I want to inject code into: https://i.sstatic.net/xIqmA.png\n<pre><code>EquipPlayerPipboy()</code></pre> function I want to inject: https://i.sstatic.net/Gaujf.png\nThe game has a loop called <pre><code>MainUILoop</code></pre> which runs every frame, and when the player presses tab without holding it down, <pre><code>TryOpenPipboy</code></pre> is called.\nMy guess is that I need to somehow create a new empty block of memory, edit a copy of the original <pre><code>TryOpenPipboy</code></pre> function, then replace all <pre><code>TryOpenPipboy</code></pre> calls with my modified variant. But that would make a hard incompatibility with any other NVSE plugins that also modify the MainUILoop in any way, as well as any that edit <pre><code>TryOpenPipboy</code></pre>.\nEdit: Another possible way would be to change the jmp assembly to my C++ function, then call <pre><code>TryOpenPipboy</code></pre> from my function. That would mean <pre><code>TryOpenPipboy</code></pre> is still called, but is unmodified, increasing potential compatibility.\nSo how should I go about doing this?\n",
    "votes": "3",
    "answers": 2,
    "views": "459",
    "tags": [
        "windows",
        "x86",
        "c++",
        "patching",
        "game-hacking"
    ],
    "user": "FiftyTifty",
    "time": "Sep 19, 2019 at 20:04",
    "comments": [
        {
            "user": "Avery3R",
            "text": "Can you copy paste the assembly/code instead of using a screenshot?\n",
            "time": null
        },
        {
            "user": "FiftyTifty",
            "text": "Sorry about that. Here is the assembly code for <pre><code>TryOpenPipboy</code></pre>: pastebin.com/feMycWYW\n",
            "time": null
        },
        {
            "user": "FiftyTifty",
            "text": "And here is the assembly code for where <pre><code>TryOpenPipboy</code></pre> is called: pastebin.com/mT0szzek\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "@FiftyTifty you can edit the question to add the code inline instead of images or external links (use code formatting)\n",
            "time": null
        },
        {
            "user": "Pickle Rick",
            "text": "So basically you just want a hook? There are a huge number of ways to achieve this but the simplest is probably a JMP hook. I'm happy to explain the details of how it works if you want, but I suggest just using an existing library like MinHook either way. Note that if this game is online then it's very likely you'll be kicked or banned, CRC hashes on code sections is about the simplest detection of unwanted modifications you can have.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you just want to run code before or after <pre><code>TryOpenPipboy</code></pre> is called, you can overwrite the prologue of the function with a <pre><code>jmp</code></pre> to your function. Before you overwrite it, copy the instructions in the prologue to a new memory buffer, and add a jump to the rest of the function on the end, this is called a trampoline. You can use the trampoline to call the original function.\nBefore:\n<pre><code>:originalFunction\npush ebp ;55\nmov ebp, esp ;89 E5\nsub esp, 0x40 ;83 EC 40\n;...\nret\n</code></pre>\nAfter patching:\n<pre><code>:originalFunction\njmp yourFunction ;?? ?? ?? ?? ??\nnop ;this used to be the 0x40 byte at the end\n:trampolinetarget\n;...\nret\n\nyourFunction:\n;do stuff\ncall trampoline ;calls the original function\n;do stuff\nret\n\ntrampoline:\npush ebp\nmov ebp, esp\nsub esp, 0x40\njmp trampolinetarget\n</code></pre>\nIf something else tries to hook the original function, they'll just overwrite that jmp instruction, and their trampoline will call your function. Microsoft's Detours library can handle all of this for you.\n",
            "votes": "1",
            "user": "Avery3R",
            "time": "Sep 19, 2019 at 20:04",
            "is_accepted": false,
            "comments": [
                {
                    "user": "FiftyTifty",
                    "text": "<span class=\"comment-copy\">The examples provided in the Detours library are not that intuitive, especially with the lack of fully fledged documentation, so I tried to make use of NVSE's WriteRelCal() function, and C++'s ThisStdCall(), but I'm hopelessly lost as there's no documentation for them either. I did however find a more simple example of Detours: <a href=\"https://github.com/Alenett/TES-Reloaded-Source/blob/master/TESReloaded/FlyCam.cpp\" rel=\"nofollow noreferrer\">github.com/Alenett/TES-Reloaded-Source/blob/master/TESReloaded/…</a>  So how would I use this? I've got the address where the ASM function is called, and I want to insert my own C++ function in the call's place, and then call the ASM function from it.</span>",
                    "time": null
                },
                {
                    "user": "FiftyTifty",
                    "text": "<span class=\"comment-copy\">Here is the project as it is now: <a href=\"https://mega.nz/#!HgMm2YJK!b75ABK-s4wuu63cm8FIxkNmMinmWrVW7xiLBibQv42E\" rel=\"nofollow noreferrer\">mega.nz/#!HgMm2YJK!b75ABK-s4wuu63cm8FIxkNmMinmWrVW7xiLBibQv42E</a></span>",
                    "time": null
                },
                {
                    "user": "Avery3R",
                    "text": "<span class=\"comment-copy\">Take a look at this example, <a href=\"https://github.com/microsoft/Detours/blob/master/samples/opengl/ogldet.cpp\" rel=\"nofollow noreferrer\">github.com/microsoft/Detours/blob/master/samples/opengl/…</a> they start a transaction, tell the library which thread is the current thread, give it a pointer to the original function that will be replaced with a pointer to the trampoline, then commit it. When they commit it, the first thing it does is suspends all other threads, this is to prevent race conditions and is why you need to tell it what thread you're running on. After that, it does similar patches to what I showed in my answer. Just give it the addrof the func you want to hook, and ur func</span>",
                    "time": null
                },
                {
                    "user": "FiftyTifty",
                    "text": "<span class=\"comment-copy\">Thanks for that, the explanation cleared it up for me. However, Detours now throws four errors when compiling, all of them being <b>unresolved external symbol</b>. That error should just apply when calling a function from an <b>#include</b> that isn't exposed, but that's not the case here. They're too long to post in a comment, so I put them on pastebin: <a href=\"https://pastebin.com/fT7jk1Um\" rel=\"nofollow noreferrer\">pastebin.com/fT7jk1Um</a></span>",
                    "time": null
                },
                {
                    "user": "Anonymous Anonymous",
                    "text": "<span class=\"comment-copy\">@FiftyTifty Some of the errors seem to originate from not linking with <code>detours.lib</code> (or a similar name). But especially the first and the last seem to be different. Could you post the exact code, including compiler-options here?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Intel PIN in Probe Mode can do just. You can inject C code and PIN will even handle the context switching for you.\n",
            "votes": "0",
            "user": "MkInitCpIO",
            "time": "Sep 21, 2019 at 6:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}