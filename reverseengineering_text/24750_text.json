{
    "title": "What does objdump -b binary means?",
    "link": "https://reverseengineering.stackexchange.com/questions/24750/what-does-objdump-b-binary-means",
    "content": "So I have started to digging in malware analysis and I came across with some malware samples that I couldn't disassembly with objdump. More specifically I use\n<pre><code>objdump -dS /path/to/malware\n</code></pre>\nand I got the output\n<pre><code>malwareFile: file format pei-i386\nobjdump: Reading section .text failed because: File truncated \n</code></pre>\nWith a little search I found\nUnable to dump malware assembly using objdump\nSo I use\n<pre><code>objdump -b binary -D -m i386 /path/to/malware\n</code></pre>\nand I got its mnemonic codes but I cannot understand what happen even after reading from the Linux man page. Does with this way, the data, bss and code segment be treated as a whole? Can I really depend on this solution for my research?\n",
    "votes": "1",
    "answers": 2,
    "views": "4k",
    "tags": [
        "disassembly",
        "malware",
        "objdump"
    ],
    "user": "0sunday",
    "time": "Apr 19, 2020 at 18:00",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "What exactly do you mean by \"truncated\"? can you add the actual message you've got?\n",
            "time": null
        },
        {
            "user": "0sunday",
            "text": "@IgorSkochinsky malwareFile:     file format pei-i386  objdump: Reading section .text failed because: File truncated\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "thanks, please add it to the question body\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "So, <pre><code>objdump</code></pre>'s <pre><code>-d</code></pre> will only disassemble known code sections, usually <pre><code>.text</code></pre> and possibly other sections marked executable. If the section table is corrupted or missing, this will fail. \nHowever, the section table is not actually required for a file to be executable by the OS, so it can be removed or modified without affecting the file's behavior. In such cases, you can use <pre><code>-b binary -D</code></pre> to tell <pre><code>objdump</code></pre> to disassemble all bytes in the file, ignoring any file structure. This will try to disassemble everything, including file headers, data sections, string tables etc. You will need to make sense out of the resulting disassembly by distinguishing actual code from nonsense produced by disassembling unrelated data. Alternatively, you can figure out the actual executable parts of the file and disassemble just that.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 19, 2020 at 17:45",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "The <pre><code>-b</code></pre> switch specifies the format as binary, telling objdump to ignore the header and treat everything as instructions. The <pre><code>-D</code></pre> switch is also present in your question and this one means that objdump will treat the content of all sections as instructions even if it did take the header/file type into account.\nIf you onlt specify <pre><code>-D</code></pre> then it will treat all sections as instructions but it will print the section name before its data, so you can tell where it comes from.\nThat being said, if it is a malware file and normal use of objdump does not handle it properly then it suggests that the file is packed and in this case the disassembly is not less useful before it is unpacked. Unless of course the packing technique itself is of interest.\n",
            "votes": "2",
            "user": "Yotamz",
            "time": "Apr 19, 2020 at 8:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0sunday",
                    "text": "<span class=\"comment-copy\">I examined a windows executable with these two different commands. The difference of the size was huge. The objdump -b binary gives a 2.6 GB output and the other 4.7 MB. Why is that?</span>",
                    "time": null
                }
            ]
        }
    ]
}