{
    "title": "How to search a sequence of instructions in Ghidra?",
    "link": "https://reverseengineering.stackexchange.com/questions/32572/how-to-search-a-sequence-of-instructions-in-ghidra",
    "content": "I'd like to identify in Ghidra a specific sequence of instructions, which I get from MSVC Debug in Visual Studio compiling my own function:\n\nWhat I'm looking for so is (for the same DLL, decompiled in Ghidra) to intercept the sequence <pre><code>movss/movss/movss/movss/lea/lea/lea</code></pre>, in the hoping to intercept the C++ Clamp function I've defined:\n<pre><code>template <typename T>\nT Clamp(const T& min, const T& max, const T& value)\n{\n    if (value < min)\n    {\n        return min;\n    }\n    else if (value > max)\n    {\n        return max;\n    }\n    return value;\n}\n</code></pre>\nWhat's the correct way to do this in Ghidra?\nIf I try Instruction Pattern Search feature in Ghidra, inserting the first 4 movss of the sequence (selecting the instructions show in the VS Debugger, after enabling Show Code Bytes; i.e. in order <pre><code>f3 0f 10/f3 0f 11/f3 0f 10/f3 0f 11</code></pre>):\n\nit doesn't return any hit.\nSo, is this a mismatch from VS Code disassembly and the Listing elaborated by Ghidra, or am I searching in a wrong way?\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c++",
        "ghidra",
        "msvc"
    ],
    "user": "markzzz",
    "time": "Dec 16, 2023 at 14:55",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Comments have been moved to chat; please do not continue the discussion here. Before posting a comment below this one, please review the purposes of comments. Comments that do not request clarification or suggest improvements usually belong as an answer, on Reverse Engineering Meta, or in Reverse Engineering Chat. Comments continuing discussion may be removed.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I'll post an answer here with the conclusions we came to in the chat, in case anyone finds it useful in the future.\nThere seems to be a limitation of the Instruction Pattern Search tool in that the patterns must contain a fixed amount of bytes. In the screenshot posted in the original post, the second and fourth pattern are looking for <pre><code>movss [addr], xmm</code></pre> instructions (operands encoded in 5 bytes, first operand is <pre><code>00...101</code></pre>), while the instructions that need to be found are <pre><code>movss [reg+offs], xmm</code></pre> (operands encoded in 3 bytes, first operand is <pre><code>01...100</code></pre>). To correct the patterns, one needs to find an appropriate instruction in code or insert the bytes manually into the tool and then unmask the operands (as far as Ghidra allows).\nAlternatively, one can also use the memory search ('S' hotkey or Search -> Memory) and insert a pattern matching the instruction bytes. For this specific question, the pattern would be:\n\nf3 0f 10 ?? ?? ?? ?? ?? f3 0f 11 ?? ?? ?? f3 0f 10 ?? ?? ?? ?? ?? f3 0f 11 ?? ?? ??\n\nGhidra also allows searching in a more dynamic manner via regular expressions. This would allow one to craft a regex pattern that matches against four consecutive movss instructions, regardless of their operands, but may make it more difficult to guard against false positives.\n",
            "votes": "4",
            "user": "ynwarcs",
            "time": "Dec 22, 2023 at 11:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "markzzz",
                    "text": "<span class=\"comment-copy\">Nice, thanks. For this specific case, can you give an example of regex? Or do you need a new question maybe?</span>",
                    "time": null
                },
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">@markzzz, there's two regexes for both instruction types in the chat. Use <code>[DLT\\\\dlt]..</code>  to match the 3-byte operands exactly (the <code>?? ?? ??</code>), or <code>[\\x05\\x0D\\x15\\x1D\\x25\\x2D\\x35]....</code> for the longer ones (the <code>?? ?? ?? ?? ??</code>), or if you don't care about the variations for the SIB byte at all, the pattern given by @ynwarcs could just be <code>\\xF3\\x0F\\x10.....\\xF3\\x0F\\x11...\\xF3\\x0F\\x10.....\\xF3\\x0F\\x11...</code>. (The '<code>.</code>' character in a regular expression matches any byte).</span>",
                    "time": null
                }
            ]
        }
    ]
}