{
    "title": "View Array Type in dnSpy",
    "link": "https://reverseengineering.stackexchange.com/questions/21099/view-array-type-in-dnspy",
    "content": "I'm debugging a .NET application and see a declaration of a local array:\n<pre><code>$ArrayType$$$BY05PAD $ArrayType$$$BY05PAD;\n</code></pre>\nI break on an instruction that uses data inside that (char*) array:\n<pre><code>num9 = <Module>.strtoul(*(ref $ArrayType$$$BY05PAD + 4), null, 10);\n</code></pre>\nBefore the call to strtoul, I want to show in a hex editor the contents of *(ref $ArrayType$$$BY05PAD + 4), but this is not a valid expression in the watch window and it doesn't appear as a local variable. How can I inspect raw field memory?\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "binary-analysis",
        ".net"
    ],
    "user": "Jonas Mechtheim",
    "time": "Apr 9, 2019 at 16:36",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "what happens if you, in <pre><code>Locals</code></pre> window, right click on this array and select <pre><code>Show in Memory window</code></pre> -> <pre><code>Memory 1</code></pre>?\n",
            "time": null
        },
        {
            "user": "Jonas Mechtheim",
            "text": "Hi Paweł, unfortunately the array does not appear at all in the Locals window.\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "is it possible that you put this binary somewhere for me to check?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Those are identified as <pre><code>raw locals</code></pre>. You can enable their visibility by going to <pre><code>Options</code></pre> in <pre><code>Debug</code></pre> menu.\n\nAfter that you will be able to see those elements in the locals window.\n\nAnd from there you can right click on it and select <pre><code>Show in Memory Window</code></pre> -> <pre><code>Memory 1</code></pre>\n\nand analyze the data:\n\nBut that's not the end of our work. Those are just the pointers so our array contains such addresses (little-endian):\n<pre><code>[0x610245D4,0x610245D7,0x610245DA,0x610245DD,0x610245E0]\n</code></pre>\nSo if your example tries to access offset <pre><code>+4</code></pre> it will get the second address and if we navigate there in the <pre><code>Memory window</code></pre> we will see the strings there that will be passed to <pre><code>strtoul</code></pre> method\n",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Apr 11, 2019 at 18:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jonas Mechtheim",
                    "text": "<span class=\"comment-copy\">Thank you SO MUCH, this is exactly what I was looking for!</span>",
                    "time": null
                }
            ]
        }
    ]
}