{
    "title": "How can I quickly tell which ARM Thumb version a particular piece of code is using?",
    "link": "https://reverseengineering.stackexchange.com/questions/31275/how-can-i-quickly-tell-which-arm-thumb-version-a-particular-piece-of-code-is-usi",
    "content": "I'm working with an ARM processor: an STM32F407VGT6 board, which IIUC powers a 32-bit Arm® Cortex®-M4. I need to inspect the binary weight of some instruction, so I used <pre><code>objdump</code></pre> like this:\n<pre><code>arm-none-eabi-objdump -b binary --adjust-vma=0x08000000 --start-address=0x08000002 \\\n  -marm --disassembler-options=force-thumb -D binary_program.bin > /tmp/binary_program-bin.s\n</code></pre>\nFirst, I tested a loop of instructions like this:\n<pre><code>adds    r0, r0, #255\n</code></pre>\nand I got in the <pre><code>.s</code></pre> file\n<pre><code> 80002e4:   30ff        adds    r0, #255    ; 0xff\n</code></pre>\nAfter a long search in the ARM manual (and I hope I found the correct one), I could map that binary as:\n<pre><code>instruction: 001_10_000_11111111\nbit mask:    111_11_198_76543210\n             543_21_0\n</code></pre>\nwhere\n\n<pre><code>111</code></pre> = \"Add, subtract, compare, move (one low register and immediate)\", page F3-7301\n<pre><code>10</code></pre> = \"ADD, ADDS (immediate)\", version T2 is at page F5-7453\n<pre><code>000</code></pre> = <pre><code>r0</code></pre>, source and destination register\n<pre><code>11111111</code></pre> = 255, the immediate operand\n\nThis, IIUC, is Thumb-2. So far so good, but the problem is that other instructions, which are not representable with Thumb-2, get mapped to Thumb-3, like\n<pre><code>adds    r0, r0, #256\n</code></pre>\nwhich becomes\n<pre><code> 80002e4:   f510 7080   adds.w  r0, r0, #256    ; 0x100\n</code></pre>\nObviously this is no more T2, and the bit encoding should be something like\n<pre><code>      i 0 op1  S Rn   0 imm3 Rd   imm8\n11110_1_0_1000_1_0000_0_111__0000_10000000\n33222_2_2_2222_2_1111_1_111__1198_76543210\n10987_6_5_4321_0_9876_5_432__10\n</code></pre>\nas reported at \"Data-processing (modified immediate)\", pages F3-7310 and F3-7311. This lead me to pages F5-7452 to 55, \"ADD, ADDS (immediate)\".\nSearching a lot, I found it should be T3: the mnemonic matches (<pre><code>adds.w</code></pre>). This would mean the processor expands the bits <pre><code>11:0</code></pre> like this:\n\nit concatenates a <pre><code>1</code></pre> with the bits <pre><code>6:0</code></pre>, <pre><code>1 0000000</code></pre>\nextends with <pre><code>0</code></pre>s to get a 32 bit word: <pre><code>00000000000000000000000010000000</code></pre>\nit rotates right the integer of the amount specified in bits <pre><code>11:7</code></pre>, which is <pre><code>11111</code></pre>, or 31, getting <pre><code>00000000000000000000000100000000 = 256</code></pre>.\n\nThe point is, since I'm using the same compiler for both the codes, and they end up to use different ISAs to translate the instructions, how can I tell which one is which, without dwelling the depths of the ARM manual every time?\nThanks!\n",
    "votes": "3",
    "answers": 0,
    "views": "81",
    "tags": [
        "disassembly",
        "binary-analysis",
        "arm",
        "binary-format",
        "thumb2"
    ],
    "user": "Alessandro Bertulli",
    "time": "Dec 14, 2022 at 16:19",
    "comments": [],
    "answers_data": []
}