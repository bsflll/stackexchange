{
    "title": "Ghidra 11.0 - What does Function > Analyze Stack option do?",
    "link": "https://reverseengineering.stackexchange.com/questions/32727/ghidra-11-0-what-does-function-analyze-stack-option-do",
    "content": "Greetings ladies & gentlemen,\nI am but a novice at both Ghidra and Reverse Engineering in general. Forgive me if you think this question is dumb or obvious to answer :)\nWhile attempting to solve a CTF RE challenge using Ghidra, the disassembler gave me the following output for one of the function's stack frame:\n\nCorrespondingly, the decompiler displays the following:\n\nFrom both the assembly and pseudo-C output I assumed that the function takes in 2 parameters <pre><code>param_1</code></pre> <pre><code>param_2</code></pre> and has 6 local variables, one of which is rather peculiar - <pre><code>in_stack_0000000c</code></pre>. This variable is indeed used by the binary and it looks a local variable, but I didn't really understand why Ghidra labeled it in such format (comparing to the common format <pre><code>local_<num_of_bytes></code></pre>) and why it wasn't displayed in the disassembler, so I tried googling for information on the format in_stack_ but to no avail.\nAnother weird thing is in the Listing View, I could see some operations using <pre><code>Stack[0xc]</code></pre> which somewhat resemble the mentioned variable. However, I also do not know which variable <pre><code>Stack[0xc]</code></pre> was referring to, since it looks like a function parameter reference yet this function's parameter stops at <pre><code>Stack[0x8]</code></pre>.\nAfter some time, while reading The Ghidra Book, I discovered that one could right-click the label <pre><code>Stack[0xc]</code></pre>, and scroll down to Function for stack-related options. I then select Analyze Stack, and wha-lah, the Listing View now displays an additional function parameter <pre><code>param_3</code></pre>, and it was at the address <pre><code>Stack[0xc]</code></pre> points to. <pre><code>in_stack_0000000c</code></pre> is also labeled as <pre><code>param_3</code></pre>. The snippet of the option is shown below:\n\nI've also tried searching for answers both within the book and on the Internet but have yet to succeed. So my question is, what does this option Analyze Stack actually do? And how did it dramatically change the analysis output as so?\n",
    "votes": "1",
    "answers": 1,
    "views": "178",
    "tags": [
        "ghidra",
        "stack"
    ],
    "user": "dvmbCateDoinAStroll",
    "time": "Feb 12, 2024 at 10:48",
    "comments": [],
    "answers_data": [
        {
            "content": "How well Analyze Stack works on any particular function in a program is based on:\n\nThe calling convention selected for the given function, and,\nHow well that calling convention actually models the way that function uses the stack, passes and returns parameters, stores local variables, etc.\n\nGhidra's definitions for the above are defined in the <pre><code>.cspec</code></pre> (compiler specification) files that can be found  in the directories below <pre><code>ghidra/processors/</code></pre>. These can be modified to suit, but that's a topic too complex to discuss here in brief.\nUnless you're working with code that was built for Windows, Linux, or MacOS, using a well-known compiler like <pre><code>gcc</code></pre> or the Apple or Microsoft compilers and associated libraries, the corresponding <pre><code>.cspec</code></pre> may or may not allow for <pre><code>Analyze Stack</code></pre> to be of much use.\n",
            "votes": "1",
            "user": "g1l1t1",
            "time": "Feb 28, 2024 at 17:39",
            "is_accepted": false,
            "comments": []
        }
    ]
}