{
    "title": "Hooking flash player dll",
    "link": "https://reverseengineering.stackexchange.com/questions/18646/hooking-flash-player-dll",
    "content": "Lately I came to game-bot for browser flash-game which gets data from  flashplayer dll. The main point of doing this was to get decrypted data(JSON) sent from game server to client through TCP. \nDo you have an idea I can do something like this ? For example debugging the flashplayer DLL and find which function is responsible for decryption of these data?\n",
    "votes": "0",
    "answers": 1,
    "views": "295",
    "tags": [
        "memory",
        "function-hooking"
    ],
    "user": "user175989",
    "time": "Aug 2, 2018 at 18:19",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Your question is both unclear and seemingly aimed at a very specific system to which none of us has access. Feel free to edit it and include more details or even a link to said file. Information that I personally found missing includes as to what (transport?) encryption you found was being used. The wording also makes your question harder to understand than it would have to be.\n",
            "time": null
        },
        {
            "user": "user175989",
            "text": "I agree I use to complicate things. I have edited my post and added more details. I dont know what type of encryption has being used.\n",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "Did you try to capture that JSON data with Wireshark?\n",
            "time": null
        },
        {
            "user": "user175989",
            "text": "that JSON is encrypted, so in Wireshark I see just meaningless strings\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a very general and shallow question so I'm giving a very general and shallow answer\nGetting that information is done by reverse engineering the binary in question (the flash player dll in your case). You can either dynamically reverse engineer it (usually using a debugger) or statically (usually using a disassembler).\nHow to specifically do it in the case of the flash player dll is a too broad of a question to properly answer, you'll need to start reverse engineering and perhaps consult back with specific issues you're having trouble with.\n",
            "votes": "0",
            "user": "NirIzr",
            "time": "Jul 28, 2018 at 2:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}