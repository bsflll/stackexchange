{
    "title": "Dynamic java instrumentation?",
    "link": "https://reverseengineering.stackexchange.com/questions/1714/dynamic-java-instrumentation",
    "content": "This is not strictly 'reverse engineering', it's mostly related to dynamic instrumentation.\nSo, in the same fashion as <pre><code>strace</code></pre> which allows you to see syscalls made by a process, or <pre><code>ftrace</code></pre> to see function calls, is there anything similar for Java?\nWhat I am interested in is having a <pre><code>.jar</code></pre> file that is run in a javaVM. \nIs there any way to instrument or trace all the Java API calls the application code makes ?\nThat is, without any static analysis of the contents of the <pre><code>.jar</code></pre> or without any editing of the contents of <pre><code>.jar</code></pre> (e.g. to add hooks). Ideally, a solution equivalent to <pre><code>strace</code></pre> or e.g. a manipulated javaVM\nThe same applies on Android - Is there a way to trace all Android framework API calls (or other essentially DalvikVM functions) an application makes without any editing at all of the APK file? All other editing of the environment/system is fine.\nIn my ideal world, the analyst would get the following output, while running an UNEDITED application (<pre><code>.jar</code></pre> or <pre><code>.apk</code></pre>):\n<pre><code>timestamp1: java.security.SecureRandom.getSeed() called. Arguments: (Number) \ntimestamp2: javax.security.cert.X509Certificate.checkValidity() called. Arguments: (null)\n...\ntimestamp3: java.sql.Connection.prepareStatement() called. Arguments: (\"SELECT * FROM X WHERE Y = W\")\n</code></pre>\n",
    "votes": "16",
    "answers": 3,
    "views": "9k",
    "tags": [
        "dynamic-analysis",
        "java",
        "android"
    ],
    "user": "JavaSec",
    "time": "Jul 6, 2014 at 6:58",
    "comments": [
        {
            "user": "Denis Laskov",
            "text": "In this case - wouldn't it be easier to analyze behaviour of java.exe executable, when .jar file passed to it as a parameter?\n",
            "time": null
        },
        {
            "user": "JavaSec",
            "text": "I am not sure how can this be done and what kind of output it would have. Analysing the java executable would show syscalls it makes to the kernel - this is not what I'm looking for. I'm looking to trace the invocation of Java APIs. Also, it wouldn't work on Android which is the second target.\n",
            "time": null
        },
        {
            "user": "Mathew Hall",
            "text": "Regarding Android, you could use DDMS to trace the target for inspection with the profiler, but that doesn't get arguments. If you want API calls and data, you could instrument the <pre><code>binder_transaction</code></pre> function in the kernel via <pre><code>kprobes</code></pre>, although parsing the transaction buffers is problematic.\n",
            "time": null
        },
        {
            "user": "JavaSec",
            "text": "@MathewHall this is very interesting and may be the solution for Android. Will look into it! I imagine you'd instrument binder_transaction via kprobes using systemtap ?\n",
            "time": null
        },
        {
            "user": "Mathew Hall",
            "text": "SystemTap is probably easier yes, although you need to be able to \"parse\" the packets (args to <pre><code>binder_transaction</code></pre>). The <pre><code>code</code></pre> in the transaction data is the index in the service's <pre><code>aidl</code></pre> file and the service itself appears as a UTF-16 string in the buffer. Object arguments are trickier though; this 0xlab slide deck summarises Binder quite well.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Oracle Java Virtual Machine\nTracing the execution of a Java program can be done through the Java Platform Debugger Architecture (JPDA). This framework allow you to get a full control of an execution within the JVM (without having to modify the original code). See this tutorial for a more in depth view of this framework. \nIf you want to implement it by yourself, you should use the MethodEntryRequest interface and intercept any method call.\nBut, if you are lazy (just like me), you'd better use already existing projects such as InTrace (see also the Related Projects' page of the InTrace project).\nAndroid Java Dalvik Virtual Machine\nTracing an Android Java program can be done through the Dalvik Debug Monitor Server (DDMS) and the full Android debug framework.\nThere exist already some tools to trace the execution of programs such as Traceview and dmtracedump tools. And, finally, a few tips about the Dalvik JVM.\n",
            "votes": "14",
            "user": "perror",
            "time": "Apr 11, 2013 at 18:33",
            "is_accepted": true,
            "comments": [
                {
                    "user": "JavaSec",
                    "text": "<span class=\"comment-copy\">wow, this is exactly what I was looking for, and I did not even know such things existed. Thanks for opening my eyes to this, this should be perfect for java code.</span>",
                    "time": null
                },
                {
                    "user": "JavaSec",
                    "text": "<span class=\"comment-copy\">However, all these tools depend on the javaagents functionality, which is not supported on Dalvik, so this wouldn't work on Android. I guess I should had another question more specific to Android.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">My fault, I didn't noticed you asked specifically for Dalvik JVM (thought the 'android' tag should have ringed a bell...). And, I don't know much about Android JVM. Sorry. :-/</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">The closest I could come with for Dalvik JVM seems to be the <a href=\"http://developer.android.com/tools/debugging/ddms.html\" rel=\"nofollow noreferrer\">Dalvik Debug Monitor Server</a> (DDMS) and the full <a href=\"http://developer.android.com/tools/debugging/\" rel=\"nofollow noreferrer\">Android debug framework</a>. You seems to be able to extract a trace with the <a href=\"http://developer.android.com/tools/debugging/debugging-tracing.html\" rel=\"nofollow noreferrer\">Traceview and dmtracedump tools</a>. But, I never tried it.</span>",
                    "time": null
                },
                {
                    "user": "JavaSec",
                    "text": "<span class=\"comment-copy\">I have tried that, but it doesn't seem to be able to give arguments for the methods, will research further. I also just found that the dalvikVM can be launched independently, using 'dalvikvm' on an adb shell, and it supports some kind of -agentlib option to launch jdwp. I wonder if that's useful somehow. [ <a href=\"http://www.netmite.com/android/mydroid/2.0/dalvik/docs/debugger.html\" rel=\"nofollow noreferrer\">netmite.com/android/mydroid/2.0/dalvik/docs/debugger.html</a> ]</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can instrument Java by using an agent, that will manipulate the bytecode of the loaded file (using Asm is recommented for bytecode manipulation).\nYou might want to use Eclipse's Bytecode Outline plugin to debug execution.\nThis is a good tutorial on the topic.\n",
            "votes": "6",
            "user": "Ange",
            "time": "Apr 11, 2013 at 9:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "JavaSec",
                    "text": "<span class=\"comment-copy\">Thank you for this, this is good. However it involves manipulating the jar file, basically inserting hooks. I am looking mostly on doing everything without ever touching the .jar file, to examine it passively. That would allow analysis of 'protected' code (e.g. code that uses integrity protection through another library, is heavily obfuscated etc). Maybe a manipulated java or dalvik VM could work, so that API calls log themselves somewhere (?).</span>",
                    "time": null
                },
                {
                    "user": "JavaSec",
                    "text": "<span class=\"comment-copy\">Hmm I just read the article you sent again, it seems that it doesn't involve manipulation of the application.. hm, still researching!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "AspectJ can be used to do this on the JVM, via load-time weaving. It's built on Asm but there's more abstraction (no bytecode). Tracing method calls is fairly straight-forward: first define a filter to match \"pointcuts\" you're interested in, then specify the actions you want to perform (\"advice\").\nThe syntax is a bit awkward though:\n<pre><code>package aspects;\n\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.aspectj.lang.Signature;\n\naspect Trace{\n    pointcut traceMethods() : (execution(* *(..))&& !cflow(within(Trace)));\n\n    before(): traceMethods(){\n        Signature sig = thisJoinPointStaticPart.getSignature();\n        String line =\"\"+ thisJoinPointStaticPart.getSourceLocation().getLine();\n        String sourceName = thisJoinPointStaticPart.getSourceLocation().getWithinType().getCanonicalName();\n        Logger.getLogger(\"Tracing\").log(\n                Level.INFO, \n                \"Call from \"\n                    +  sourceName\n                    +\" line \" +\n                    line\n                    +\" to \" +sig.getDeclaringTypeName() + \".\" + sig.getName()\n        );\n    }\n\n}\n</code></pre>\nCompile with: <pre><code>ajc -outxml -outjar aspects.jar Trace.java</code></pre>.\nTo run FooClass with the weaver, run:\n<pre><code>java -javaagent:aspectjweaver.jar -cp aspects.jar:${target_jar_name} FooClass\n</code></pre>\n",
            "votes": "4",
            "user": "Mathew Hall",
            "time": "Apr 11, 2013 at 16:20",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Note that this won't work for obfuscated applications (or just ones compiled without debug info).</span>",
                    "time": null
                }
            ]
        }
    ]
}