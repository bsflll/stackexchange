{
    "title": "WinDbg Debugging without symbols",
    "link": "https://reverseengineering.stackexchange.com/questions/6266/windbg-debugging-without-symbols",
    "content": "So I am trying to learn how to debug files that I don't have the symbol files for.  The most common advice is to issue <pre><code>bp $exentry</code></pre> or <pre><code>bu @$exentry</code></pre>.  However, neither of these work.  Once I <pre><code>g</code></pre> the executable it breaks on <pre><code>ntdll32!LdrpDoDebuggerBreak+0x2c</code></pre>.  Nothing in the call stack gives any useful information.  If I issue <pre><code>g</code></pre> again, the executable runs to termination.\nAny advice on how to get to <pre><code>main()</code></pre> without manually stepping through all the startup code?\n",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "debugging",
        "windbg",
        "symbols"
    ],
    "user": "Robert Mason",
    "time": "Sep 19, 2014 at 21:34",
    "comments": [],
    "answers_data": [
        {
            "content": "Make sure if you have the correct breakpoint address \nissue <pre><code>lm</code></pre> an exe without symbol will be shown as \n<pre><code>0:000> lm\nstart    end        module name\n00400000 0040f000   image00400000   (no symbols)    \n</code></pre>\ncompare the <pre><code>NtHeader->AddresssOfEntrypoint</code></pre> with <pre><code>@$exentry</code></pre>\n<pre><code>0:000> r $t0 = image00400000\n0:000> ?? ((ntdll!_IMAGE_NT_HEADERS *) @@( poi( @$t0 + 0x3c ) + @$t0 ))->OptionalHeader.AddressOfEntryPoint + @$t0\nunsigned int64 0x401280\n0:000> ? @$exentry\nEvaluate expression: 4199040 = 00401280\n</code></pre>\nif they are same setting a breakpoint with <pre><code>bp @$exentry</code></pre> or <pre><code>bp 401280</code></pre>  should both break properly at that address only if there is no Debugger Detection in you Binary\nif your binary has Debugger Detection then you may need to examine the DllInitRoutines Tls Callbacks and other cute tricks \noutput sample exe without any Anti Debugging Tricks breaking properly at @$exentry below\n<pre><code>0:000> .lastevent\nLast event: bc.a70: Break instruction exception - code 80000003 (first chance)\n  debugger time: Sun Sep 21 01:10:42.015 2014 (UTC + 5:30)\n0:000> lm M *im*\nstart    end        module name\n00400000 0040f000   image00400000   (no symbols)\n0:000> $ binary without symbols whose module name is normally shown as imageXXXXXX\n\n0:000> r $t0 = image00400000 ; $ set Pseudo Register to start\n\n0:000> r $t1 = poi(@$t0+3c)  ; $ find pointer to Ntheader\n\n0:000> r? $t2 = (ntdll!_IMAGE_NT_HEADERS *) (@$t0 + @$t1)  ; set c++ pseudo Register\n\n0:000> ?? @$t2->OptionalHeader.AddressOfEntryPoint + @$t0  ; Find AddressofEntryPoint\nunsigned int64 0x401280\n\n0:000> ? @$exentry\nEvaluate expression: 4199040 = 00401280\n\n0:000> bp @$exentry\n\n0:000> bl\n 0 e 00401280     0001 (0001)  0:**** image00400000+0x1280\n\n0:000> g\nBreakpoint 0 hit    \nimage00400000+0x1280:\n00401280 55              push    ebp\n0:000>\n</code></pre>\nthis is <pre><code>not main()</code></pre> it will be the start of <pre><code>c runtime init code</code></pre> usually termed as <pre><code>XYZ_MainCrtStartUp()</code></pre> you may need to inspect the binary to find the Main() if you know the compiler you can usually spot the initialisation code it would be common code\n",
            "votes": "8",
            "user": "blabb",
            "time": "Sep 20, 2014 at 22:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}