{
    "title": "how Can I use a linux so file from a program other than the program it was developed for?",
    "link": "https://reverseengineering.stackexchange.com/questions/13816/how-can-i-use-a-linux-so-file-from-a-program-other-than-the-program-it-was-devel",
    "content": "I wish to use the codecs that come with realplayer but without needing realplayer. The codecs I want to use are all in <pre><code>.so</code></pre> format, but I don't know how to separate the codecs from the rest of realplayer and use the <pre><code>.so</code></pre> files directly.\nIs there a way to do this so that I can just plug the codecs into a new mediaplayer, without having to decompile and recompile the binaries?\n",
    "votes": "0",
    "answers": 1,
    "views": "143",
    "tags": [
        "binary-analysis",
        "elf",
        "binary",
        "shared-object",
        "got"
    ],
    "user": "user17881",
    "time": "Apr 26, 2017 at 15:29",
    "comments": [],
    "answers_data": [
        {
            "content": "an <pre><code>so</code></pre> file is self contained, to use it, you simply need to load it and use functions it implements. However, in order to use those functions a header file describing the functions and their input parameters is required. \nGetting the available functions from within an <pre><code>so</code></pre> file is easy, you just need to parse the GOT. Understanding the input (and output) parameters is a bit more difficult, you'll need to disassemble the functions you're interested in and understand the parameters from the code.\nThat is of course, if you don't have access to that library's SDK, which usually contain header files for all shared objects.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Oct 26, 2016 at 17:14",
            "is_accepted": true,
            "comments": []
        }
    ]
}