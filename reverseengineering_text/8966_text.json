{
    "title": "DLL entry point in memory",
    "link": "https://reverseengineering.stackexchange.com/questions/8966/dll-entry-point-in-memory",
    "content": "I've been looking into the PE format using a random DLL as a test case. When I look manually at the entry point specified in the optional header (and add the image base, because RVA) it doesn't match the entry point address IDA gives in the exports list.\nI know reading the entry point from the DLL isn't the problem, since if I calculate:\n<pre><code>(AddressOfEntryPoint - [.text section virtual]) + [.text section offset]\n</code></pre>\n(which should give the file offset to the entry point) you can find at the offset the same bytes that IDA says should be in the entry function.\nAlso I know that IDA must be calculating the entry point from this field since <pre><code>DLLEntryPoint</code></pre> isn't in the exports list.\nAm I missing something? If I do the same analysis on a normal executable everything works.\n",
    "votes": "0",
    "answers": 1,
    "views": "4k",
    "tags": [
        "dll",
        "entry-point"
    ],
    "user": null,
    "time": "May 23, 2015 at 15:57",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "\"it doesn't match the entry point IDA gives\" -- Are you referring to the entry point IDA shows you when you're statically disassembling the DLL, or the entry point you see at runtime when debugging the DLL with IDA?\n",
            "time": null
        },
        {
            "user": "user12522",
            "text": "@JasonGeffner the static DLL entry point, which should, AFAIK, be the same at runtime if it wasn't relocated.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "What is the Image Base according to the PE headers? And when you scroll up to the very top of IDA's disassembly, what does IDA report as the \"<pre><code>Imagebase</code></pre>\"? (should be right after the line \"<pre><code>Format      : Portable executable for 80386 (PE)</code></pre>\")\n",
            "time": null
        },
        {
            "user": "user12522",
            "text": "@JasonGeffner The image base is the same in the headers as in IDA, <pre><code>0x10000000</code></pre>, which is a bit off from the default <pre><code>0x400000</code></pre> but I guess that's to save relocating.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "Please post screenshots of the mismatch and/or share a link to the binary.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When you open a DLL file with IDA, if IDA is able to find the <pre><code>DllMain()</code></pre> function then it will automatically navigate to that function when you first disassemble the DLL. Note that the DLL's entry point (which IDA names \"<pre><code>DllEntryPoint</code></pre>\") does not always (and in fact often does not) point to the <pre><code>DllMain()</code></pre> function.\nYou can see in the image below (full-size at https://i.sstatic.net/CMUou.png) that the DLL's entry point is <pre><code>10807A1C</code></pre>. I've pointed from the entry point's artificial entry in the Exports table (since IDA gets the address from the PE's Entry Point field, not the actual PE Export Table) to the disassembly for the entry point code via arrow #1.\nThe code at the entry point (named <pre><code>DllEntryPoint()</code></pre> by IDA) calls <pre><code>___DllMainCRTStartup()</code></pre> via arrow #2. Then <pre><code>__DllMainCRTStartup()</code></pre> calls <pre><code>DllMain()</code></pre> via arrow #3.\nThe two function executed before <pre><code>DllMain()</code></pre> are from VC++ 6's runtime library.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "May 26, 2015 at 22:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user12522",
                    "text": "<span class=\"comment-copy\">Thanks for all your help man, I appreciate it. I've just realized the mismatch was down to the IDA db being out of sync, as always just a very stupid mistake. Nothing wrong with your answer though.</span>",
                    "time": null
                }
            ]
        }
    ]
}