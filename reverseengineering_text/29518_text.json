{
    "title": "Hex-rays decompiler incorrect logic",
    "link": "https://reverseengineering.stackexchange.com/questions/29518/hex-rays-decompiler-incorrect-logic",
    "content": "I'm practicing reverse engineering in IDA and I created an example application in Visual C++ to practice working with classes/structs and the decompiler output seems to be incorrect - I would like to know if it's possible to fix this to get a closer to correct decompiled result or whether this is simply a limitation of the decompiler.\n<pre><code>#include <iostream>\n#include \"exstruct.cpp\"\n\nint main()\n{\n    int x, y;\n    std::cin >> x;\n    std::cin >> y;\n    calculator c(x, y);\n    std::cout << c.multiply() << \"\\r\n\";\n}\n</code></pre>\nI compiled with the Visual C++ compiler with optimizations turned off and after defining the functions and data structures, the hex-rays decompiler spits out this:\n<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  char *newline; // ST04_4\n  int cout; // eax\n  Calculator calculator; // [esp+4h] [ebp-18h]\n  int x; // [esp+10h] [ebp-Ch]\n  int y; // [esp+14h] [ebp-8h]\n\n  std::basic_istream<char,std::char_traits<char>>::operator>>(std::cin, &x, calculator.x);\n  std::basic_istream<char,std::char_traits<char>>::operator>>(std::cin, &y, calculator.y);\n  Calculator_constructor(&calculator, x, y);\n  calculator.x = (int)new_line_string;\n  newline = (char *)Calculator_multiply(&calculator);\n  cout = std::basic_ostream<char,std::char_traits<char>>::operator<<(std::cout);\n  printf(cout, (int)newline);\n  return 0;\n}\n</code></pre>\nIt all looks pretty good up until it assigns the new line string <pre><code>\\r\n</code></pre> to <pre><code>calculator.x</code></pre> and then the result of the multiplication to the <pre><code>newline</code></pre> variable, which is wrong for obvious reasons.\nI've reviewed the assembly and this is simply not what happens. A snippet of the assembly below:\n<pre><code>.text:00701088                 lea     ecx, [ebp+calculator] ; this\n.text:0070108B                 call    Calculator_constructor\n.text:00701090                 push    offset new_line_string ; this\n.text:00701095                 lea     ecx, [ebp+calculator] ; this\n.text:00701098                 call    Calculator_multiply\n.text:0070109D                 push    eax\n.text:0070109E                 mov     ecx, ds:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::basic_ostream<char,std::char_traits<char>> std::cout\n.text:007010A4                 call    ds:??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char>>::operator<<(int)\n.text:007010AA                 push    eax\n.text:007010AB                 call    printf\n</code></pre>\nIt looks to me like the decompiler is getting confused because the pointer to <pre><code>\\r\n</code></pre> literal <pre><code>push</code></pre> happens before the <pre><code>multiply</code></pre> call, making it look like an argument where it actually is not.\nIs there anyway I can fix this?\nFull assembly is here.\n<pre><code>exstruct.cpp</code></pre> as text:\n<pre><code>class calculator\n{\npublic:\n    int x;\n    int y;\n    int z;\n\n    calculator(int x, int y)\n    {\n        this->x = x;\n        this->y = y;\n        this->z = x + y;\n    }\n\n    int multiply()\n    {\n        return this->x * this->y;\n    }\n};\n</code></pre>\nConstructor & Multiply Source & Decompiled Source:\n.\nNotes:\n\nHex-Rays Decompiler v7.0.0.170914\nI manually increased the size of the function to <pre><code>1C</code></pre> as it wasn't originally detecting <pre><code>newline</code></pre> as a field\nI manually defined the location of <pre><code>\\r\n</code></pre> in memory as a string\n",
    "votes": "1",
    "answers": 1,
    "views": "487",
    "tags": [
        "ida",
        "decompilation",
        "c++",
        "hexrays"
    ],
    "user": "Naxin",
    "time": "Nov 9, 2021 at 23:50",
    "comments": [
        {
            "user": "NirIzr",
            "text": "This is hard to explain without seeing the code for the constructor and multiply functions. Can you include those as well?\n",
            "time": null
        },
        {
            "user": "Naxin",
            "text": "I've added the source and decompiled source for those\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "compiling the source as x64 and decompiling with idafree76 seems to decompile this correctly decomp\n",
            "time": null
        },
        {
            "user": "Naxin",
            "text": "@blabb I tested with an x64 build also (with my version of hex-rays) and got the same/similar result as you blabb. So it seems to just be an issue with the x86 decompiler?\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "I don't know idafree76 does not decompile 32bit fwiw ghidra decompiles 32 bit correctly\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I was able to work this one out.\nThe decompiler was not detecting the correct call parameter counts for the <pre><code>>></code></pre> and <pre><code><<</code></pre> operators of <pre><code>cin</code></pre> and <pre><code>cout</code></pre>.\nFor example:\n<pre><code>int __thiscall std__basic_istream_char_std__char_traits_char____operator__(_DWORD, _DWORD, _DWORD)\n</code></pre>\nIs the detected signature of the <pre><code>>></code></pre> operator.\nHowever, reviewing the  C++ reference, it should be something more like this:\n<pre><code>int __thiscall std__basic_istream_char_std__char_traits_char____operator__(void *, int *)\n</code></pre>\nWhere the first parameter is the <pre><code>cin</code></pre> object and the second is a pointer to the integer output. Because these functions use the <pre><code>__thiscall</code></pre> convention if the parameter count is wrong then the decompiler assumes that the function has modified the stack pointer by the incorrect amount and this leads to all sorts of issues.\n",
            "votes": "3",
            "user": "NirIzr",
            "time": "Nov 11, 2021 at 12:50",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Naxin",
                    "text": "<span class=\"comment-copy\">Strangely the parameter counts seem to be correct in the disassembly but wrong in the decompilation. For example <code>&lt;&lt;</code> is <code>std::basic_ostream&lt;char,std::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(int)</code> in the disassembly. However this signature also isn't considered valid (even though IDA generated it).</span>",
                    "time": null
                }
            ]
        }
    ]
}