{
    "title": "Tutorial or resource for understanding obscure Assembly idioms?",
    "link": "https://reverseengineering.stackexchange.com/questions/17540/tutorial-or-resource-for-understanding-obscure-assembly-idioms",
    "content": "Assembly seems to have lots of tricks.\n\nSet a register to zero (<pre><code>xor reg, reg</code></pre>)\nExtend the stack by only four bytes (<pre><code>push/pop ecx</code></pre>)\nSetting a regiseter to -1 (<pre><code>OR reg -1</code></pre>)\nMulitiplying by powers of two with bit shifting, or n**2+1 with LEA\n\nIs there a list/book/resource anywhere of these kinds of Assembly idiosyncrasies?\n",
    "votes": "4",
    "answers": 2,
    "views": "384",
    "tags": [
        "assembly"
    ],
    "user": "Evan Carroll",
    "time": "Feb 27, 2018 at 20:30",
    "comments": [
        {
            "user": "julian",
            "text": "For which instruction set architecture?\n",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "@SYS_V wondering for x86_64\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "what trick is in <pre><code>xor-ing</code></pre> register to get a zero? It's just math/logic.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is no manual for what you call 'tricks' (personally, I prefer the term 'idioms'). Most of the idioms you are citing are used by compilers to perform a precise task in a more efficient manner than what you can see in the manuals.\nThe best way to learn about it is to read compiler generated assembly code and/or shellcodes. They are a great source of assembly idioms.\nHere is a list of good readings or links to investigate all these idioms:\n\nxchg rax,rax by xorpd;\nHacker's Delight (2nd Edition) by Henry S. Warren;\nHacking: The Art of Exploitation (2nd Edition) by Jon Erickson;\nThe Art of Assembly Language (2nd Edition) by Randall Hyde;\nShellcodes database for study cases by Shell-storm;\n",
            "votes": "4",
            "user": "perror",
            "time": "Mar 1, 2018 at 17:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">There is also this lovely book <a href=\"https://rads.stackoverflow.com/amzn/click/com/1502958082\" rel=\"nofollow noreferrer\">amazon.com/xchg-rax-xorpd/dp/1502958082</a></span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Right, I add it to the list!</span>",
                    "time": null
                },
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">For what it's worth The Art of Assembly Language (2nd Edition) by Randall Hyde is total trash. I read it though too. It has <i>very</i> little Assembly. it's a total rewrite of the Art of Assembly for DOS which is actually a good book. 2nd edition teaches something called High Level Assembly which is basically a separate language.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The microarchitecture of Intel, AMD and VIA CPUs An optimization guide for assembly programmers and compiler makers by Agner Fog, Technical University of Denmark\nNot for the fainthearted but probably the most detailed document on the subject.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Feb 26, 2018 at 18:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Beware, the optimization based on 'branch prediction' may become obsolete for the next generation of processors depending on what tampering mechanisms will be used to remove the Spectre and Meltdown flaws. Anyway, the rest of the document is quite impressive. Thanks for posting it!</span>",
                    "time": null
                }
            ]
        }
    ]
}