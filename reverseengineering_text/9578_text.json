{
    "title": "Determining checksum algorithm from known values",
    "link": "https://reverseengineering.stackexchange.com/questions/9578/determining-checksum-algorithm-from-known-values",
    "content": "I've been analyzing some SPI EEPROM memory, and tried to find out which Checksum algorithm has been used;\nFor example I've got data: 14567D9h and checksum 187h. Assuming it's normal 16 bit check sum I've got 86h - no match, but after adding 101h it magically changes to 391h\nAnother Example: 8ADh and check sum B5h with this one is normal - 16 bit checksum results with exact number: B5h (perfect match)\nI've checked it with 28 samples i was able to intercept. For some values i have to add 101h to checksum and for some it is only needed to sum it up.\nParity check doesn't fit - if you want I can share some more data - all gathered in one excel file, and calculated. After few days of brainstorm with my friend we haven't come up with anything :/\nMaybe there is some additional part in the Algorithm, which i haven't found out yet? CRC and tonnes of other algorithms were checked - only 16 bit checksum was giving any promising results Thanks for help in advance!\ncopy of my spreadsheet: Spreadsheet\nsome data I've grabbed (more in spreadsheet):\n<pre><code>F401 84290145h\nB500 08AD0000h\nD400 5D310145h\n4000 79810145h\nB500 08AD0000h\nC100 0AB70000h\nC100 0AB70000h\n3401 F08500BEh\nE901 FE2C00BEh\nA400 01E400BFh\n2A01 0D5D00BFh\n7E00 208304D7h\nC100 0AB70000h\n</code></pre>\nYou can read it this way:\nchecksum: 01F4  (lways 2 bytes)\nvalue: 01458429 (always 4 bytes) \nas you can see you have to switch positions of the bytes to read data properly\n",
    "votes": "1",
    "answers": 1,
    "views": "364",
    "tags": [
        "memory"
    ],
    "user": "Wasilij Grigoriewicz Zaitsev",
    "time": "Aug 8, 2015 at 10:46",
    "comments": [],
    "answers_data": [
        {
            "content": "I came across this via manual inspection.\nInstead of treating the data like this:\n<pre><code>struct record {\n  uint16_t csum;  // 01f4\n  uint32_t data; // 84290145h\n};\n</code></pre>\ntreat it like this:\n<pre><code>struct record {\n  uint8_t csum;    // 0xf4\n  uint8_t data[5]; // { 0x01, 0x84, 0x29, 0x01, 0x45 }\n};\n</code></pre>\nTo calculate the checksum, just do a simple modulo-256 summation of the data bytes. This works out fine for the values you've included in your question.\n",
            "votes": "0",
            "user": "booto",
            "time": "Aug 13, 2015 at 6:03",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Wasilij Grigoriewicz Zaitsev",
                    "text": "<span class=\"comment-copy\">Thanks! You have given me new hope :D But the next question is where is this \"one\" comming from...</span>",
                    "time": null
                },
                {
                    "user": "booto",
                    "text": "<span class=\"comment-copy\">It's in the data you captured and embedded in original post. If you mean something along the lines of \"what does it signify?\", that's pretty difficult to approach without knowing more detailed information about the context in which the data is used.</span>",
                    "time": null
                },
                {
                    "user": "Wasilij Grigoriewicz Zaitsev",
                    "text": "<span class=\"comment-copy\">I thing I will be able to find out - in next two weeks i will do some bigger research. I will let you know what i found out , if you want</span>",
                    "time": null
                }
            ]
        }
    ]
}