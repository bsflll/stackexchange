{
    "title": "How .reloc Section is used in PE file?",
    "link": "https://reverseengineering.stackexchange.com/questions/15080/how-reloc-section-is-used-in-pe-file",
    "content": "I have read document <pre><code>pecoff_v83</code></pre> of Microsoft. In The <pre><code>.reloc</code></pre> section part, I have read: \n\nThe Fix-Up Table contains entries for all fixups in the image. The Total Fix-Up Data Size in the Optional Header is the number of bytes in the fixup table. The fixup table is broken into blocks of fixups. Each block represents the fixups for a 4K page. Each block must start on a 32-bit boundary.\n\nAnd, I knew that each block contain: Page RVA and Block Size. Each Block size contain: Type and offset.\nI used <pre><code>peview</code></pre>:\n\nI have a few questions:\n\n\"Each block must start on a 32-bit boundary\" - I don't understand that, can you explain it?\nDo PE files use <pre><code>IMAGE_BASE_RELOCATION</code></pre> to work?\nFrom this SO question ('So most of the binary is composed of reloc table?') :\n\nIf your program makes a frequent access to global variables and constants, it will have a huge relocation table because theres so much places that the loader has to update\n\nHow does the loader use relocation table and update it?\n",
    "votes": "10",
    "answers": 1,
    "views": "16k",
    "tags": [
        "pe",
        "dynamic-linking"
    ],
    "user": "QChí Nguyễn",
    "time": "Aug 2, 2017 at 8:19",
    "comments": [],
    "answers_data": [
        {
            "content": "\"Each block must start on a 32-bit boundary\" - I don't understand that, can you explain it?\n\nIt means even if you have space after your block finished, you must use next 32-bit aligned address for your RVA. In my opinion, it is mostly because of page optimization. You can read this document for further understanding.\n\nDo PE files use IMAGE_BASE_RELOCATION to work?\n\nIMAGE_BASE_RELOCATION is a data structure which can be expressed as:\n<pre><code>typedef struct _IMAGE_BASE_RELOCATION {\n    DWORD   VirtualAddress;\n    DWORD   SizeOfBlock;\n} IMAGE_BASE_RELOCATION, *PIMAGE_BASE_RELOCATION;\n</code></pre>\nPE files don't use IMAGE_BASE_RELOCATION structure to work, PE loader (dynamic linker) use it for constructing relocation table. You can read this topic if you want to learn more about relocation table.\n\nJosephH says:\n\"If your program makes a frequent access to global variables and constants, it will have a huge relocation table because theres so much places that the loader has to update\"\nHow does the loader use relocation table and update it?\n\nSince you use .reloc in your title question, I will explain you relocation information in the .reloc section. This section holds information for base relocations which mean if required files cannot be loaded their preferred addresses (because already something mapped to it) instructions or variables relocated with that information.\nLoader uses virtual addresses, offset and loaded address to resolve and relocate which is another way to say adjusting addresses.\n",
            "votes": "7",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}