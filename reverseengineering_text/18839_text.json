{
    "title": "How to Modify this Branch in ARM64?",
    "link": "https://reverseengineering.stackexchange.com/questions/18839/how-to-modify-this-branch-in-arm64",
    "content": "I try to modify the branch of this disassembly in a binary:\n<pre><code>SUB             SP, SP, #0x60\nSTP             X26, X25, [SP,#0x50+var_40]\nSTP             X24, X23, [SP,#0x50+var_30]\nSTP             X22, X21, [SP,#0x50+var_20]\nSTP             X20, X19, [SP,#0x50+var_10]\nSTP             X29, X30, [SP,#0x50+var_s0]\nADD             X29, SP, #0x50\nMOV             X20, X0\nMOV             X0, X2\nBL              _objc_retain\nMOV             X19, X0\nADRP            X8, #selRef_shouldCheckForUpdate@PAGE\nLDR             X1, [X8,#selRef_shouldCheckForUpdate@PAGEOFF] ; char *\nMOV             X0, X20 ; void *\nBL              _objc_msgSend\nCBZ             W0, loc_ADCC\n</code></pre>\nBasically, the binary are checking for update and will prompt if it should, and for the sake of learning, I wanted to achieve on how to:\n\nAlways go to loc_ADCC and;\nAlways ignore loc_ADCC (Skip from going to loc_ADCC)\n\nThis ARM64 really got me confused, I could however understand it in 32bit, but not in 64bit. It's like a new world. You could see the screenshot here for a better visualization.\nThanks in advance!\n",
    "votes": "2",
    "answers": 1,
    "views": "4k",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "Gregor Isack",
    "time": "Jul 20, 2018 at 4:29",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "what does \"Always ignore loc_ADCC\" mean?\n",
            "time": null
        },
        {
            "user": "Elian Kamal",
            "text": "@IgorSkochinsky I suppose it implies \"always skip branching to loc_ADCC\" (and the compare before it I think)\n",
            "time": null
        },
        {
            "user": "Gregor Isack",
            "text": "You're right @ElianKamal\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "Just for reference: infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0489c/â€¦ - CBZ and CBNZ definition. Just NOP it out (put NOP(s) of the same size instead of it) to avoid jump.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "by the way, thank you for putting disassembly as text and not just a screenshot! I hope those who downvoted the question leave a comment why they did it so it can be improved.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "So, there are these  options:\n\nto always take the branch, you need to convert <pre><code>CBZ</code></pre> (compare and branch if zero) to simple <pre><code>B</code></pre> (branch always). Let's have a look at the encodings of both:\n\nB:\n<pre><code>\n    31 30  29  28  27  26   25 .. 0\n     0  0  0   1   0   1    imm26\n</code></pre>\nCBZ:\n<pre><code>\n31  30  29  28  27  26  25  24  23..5 4..0\nsf  0   1   1   0   1   0   0   imm19 Rt\n</code></pre>\nTo convert <pre><code>CBZ</code></pre> to <pre><code>B</code></pre>, you need to patch the opcode part (bits 31..26) and move the <pre><code>imm19</code></pre> field (branch offset) to the <pre><code>imm26</code></pre> field of the <pre><code>B</code></pre> opcode (bits 25..0). Since both opcodes interpret the offset in the same way (multiply by 4 and add to PC), you don't need to do any conversion besides sign extension. \nFor example, let's take this instruction from a random sample I had:\n<pre><code>05088 E0 01 00 34  CBZ W0, loc_50C4\n</code></pre>\nOpcode as a 32-bit value: <pre><code>0x340001E0</code></pre> (AArch64 always uses little-endian instructions)\nIn binary: <pre><code>00110100000000000000000111100000</code></pre>.\nSplit by fields:\n<pre><code>\n0  0110100 0000000000000001111 00000\nsf op     imm19               Rt\n</code></pre>\nLet's assemble the <pre><code>B</code></pre> opcode (sign-extending imm19 to 26 bits):\n<pre><code>\n000101  00000000000000000000001111\nop      imm26\n</code></pre>\nOr, as hex: 0x1400000F\nAfter patching:\n<pre><code>5088 0F 00 00 14                 B               loc_50C4\n</code></pre>\n\nTo skip the branch, you can patch <pre><code>CBZ</code></pre> to a <pre><code>NOP</code></pre> (no operation). The <pre><code>NOP</code></pre> encoding for ARM64 is 0xD503201F or <pre><code>1F 20 03 D5</code></pre>\n",
            "votes": "7",
            "user": "Igor Skochinsky",
            "time": "Jul 19, 2018 at 8:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Gregor Isack",
                    "text": "<span class=\"comment-copy\">Thank you for the very detailed answer! It helps a lot! If you don't mind, I would like to read more about the explanation you did in 'Split by fields and assemble' section, could you point me a good learning head-start (basically how you split it and sign-extending)? :)</span>",
                    "time": null
                }
            ]
        }
    ]
}