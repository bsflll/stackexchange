{
    "title": "Arrays of ascending/descending/repeating integers in proprietary file formats",
    "link": "https://reverseengineering.stackexchange.com/questions/32563/arrays-of-ascending-descending-repeating-integers-in-proprietary-file-formats",
    "content": "When looking at a file in a hex editor/viewer in an attempt to \"figure it out\", I often come across these blocks that are extremely repetitive. They tend to be int8, int16, or int32 (signed or unsigned) and they either repeat the same pattern, or have a pattern where the next entry is either incremented or decremented from the last value.\nHonestly, it's easier to show then to explain.\nAn example taken from an IRL project of mine. (VTECH Talking Whiz Kid Plus Data ROM)\n<pre><code>00001b00: 2e23 3023 3223 3423 3623 3823 3a23 3c23  .#0#2#4#6#8#:#<#\n00001b10: 3e23 4023 4223 4423 4623 4823 4a23 4c23  >#@#B#D#F#H#J#L#\n00001b20: 4e23 5023 5223 5423 5623 5823 5b23 5e23  N#P#R#T#V#X#[#^#\n00001b30: 6123 6423 6723 6a23 6d23 7023 7323 7523  a#d#g#j#m#p#s#u#\n00001b40: 7823 7b23 7e23 8123 8423 8723 8a23 8d23  x#{#~#.#.#.#.#.#\n00001b50: 9023 9223 9523 9823 9b23 9e23 a123 a423  .#.#.#.#.#.#.#.#\n00001b60: a723 aa23 ad23 af23 b223 b523 b823 bb23  .#.#.#.#.#.#.#.#\n</code></pre>\n\"Ace.dat\" from an SPH-M330.\n<pre><code>00001060: 0000 0000 1f00 0000 2c00 0000 2600 0000  ........,...&...\n00001070: 1b00 0000 1c00 0000 1d00 0000 1a00 0000  ................\n00001080: 2700 0000 2800 0000 2900 0000 2a00 0000  '...(...)...*...\n00001090: 2b00 0000 1e00 0000 2d00 0000 2e00 0000  +.......-.......\n000010a0: 2f00 0000 3000 0000 3100 0000 3200 0000  /...0...1...2...\n000010b0: 3300 0000 3400 0000 3500 0000 0000 0000  3...4...5.......\n</code></pre>\nAnyone know what this general data structure is? I come across them a lot when digging into proprietary file formats or memory dumps.\nAre they address/offset tables?\n",
    "votes": "0",
    "answers": 0,
    "views": "42",
    "tags": [
        "file-format"
    ],
    "user": "qwerty keyboard",
    "time": "Dec 12, 2023 at 18:43",
    "comments": [
        {
            "user": "Ali Rizvi-Santiago",
            "text": "It really depends on the data's purpose, so there isn't really a general answer for all seemingly ordered arrays of integers. In some cases, if they're not consistently ordered (as in your second example), they can be a file allocation table, where each index references the next index within a chain making a number of linked-lists. In other cases (like your first example), depending on the interval, it could be a translation table between a specific codepage and unicode, or a precalculated table of some sort. Really, the code is the truth and I suggest you find it instead of staring at hex.\n",
            "time": null
        },
        {
            "user": "qwerty keyboard",
            "text": "Thats a pretty good answer. Unfortunately sometimes you CAN'T look at the code.\n",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "The code is still the truth regardless of whether you can read it or not. There is a lot you can infer from the intent of the implementation. If you consider what problems the author needed to solve, why they needed to store a value to begin with, etc., you'll have a better idea why said data is formatted a certain way.\n",
            "time": null
        },
        {
            "user": "qwerty keyboard",
            "text": "I agree 100%, but stuff like the VTECH example have their program rom buried inside a COB micro controller with the bulk data on an external chip. Thank you though.\n",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "Just briefed a YT video on it, it seems that its capabilities include voice, some bitmaps, and some text and is distributed in a few different countries. I'm willing to bet that the table you're looking at supports one of those capabilities, but you would definitely know better. Cheers.\n",
            "time": null
        }
    ],
    "answers_data": []
}