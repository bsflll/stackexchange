{
    "title": "Why hook a function rather than set a breakpoint",
    "link": "https://reverseengineering.stackexchange.com/questions/10901/why-hook-a-function-rather-than-set-a-breakpoint",
    "content": "I know hooking is usually used as a technique when one would rather use external (or injected) code to manipulate an executable, vs breakpoints which are usually set by a debugging framework in an attached executable.\nWhy would one prefer hooking function calls rather than setting a breakpoint? \nThe only examples I can think of are:\n\nif somehow the control port used for debugging is sabotaged and you just need quick info (e.g. malware: the program is debugging itself as an anti-RE trick)\ntool preference/preferring a program/tool/automated tool that collects information rather than the tedious task of debugging an application\n\nCan anyone think of reasons other than these?\n",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "debugging",
        "malware",
        "function-hooking",
        "breakpoint"
    ],
    "user": "grepNstepN",
    "time": "Sep 18, 2015 at 19:00",
    "comments": [
        {
            "user": "perror",
            "text": "Hooking and breakpoints are used for very different usage, I am afraid you cannot really compare them. It is a bit like trying to compare a fish and a bike. To be more precise, breakpoint is used to stop a program in order to analyze the memory at this point. And, hooking won't stop the program but run a given function at start and at exit of a given program block.\n",
            "time": null
        },
        {
            "user": "grepNstepN",
            "text": "Thanks for the reminder! Ive only read about hooking & never used it. Ive read zines, CTF & crackmes writeups that use hooks due to time checks or something implemented in the target.  However, in all the situations encountered I never thought \"cant use a debugger in this situation! Lets go hooking!\" The only time I have is anti-malware or AV, which led to this question. When would you need to utilize hook rather than debug (outside of the aforementioned reasons) outside of AV/malware usage? I know its preferred when REing packers because it would be faster than dbg or writing a dbg script.\n",
            "time": null
        },
        {
            "user": "0xec",
            "text": "1) Hooks exists in the same address space as that of the target. So you have full access to all memory. In case of breakpoints, the debugger and debugee exists in different address space. In order to read memory, special API needs to be used, like <pre><code>ReadProcessMemory</code></pre> on Windows. 2) Hooks properly implemented, are usually difficult to detect. Debuggers are noisy.\n",
            "time": null
        },
        {
            "user": "grepNstepN",
            "text": "thanks ya'll. I'd like to mark @ExtremeCoders comment as an answer but it won't let me, so I'll add it in an answer.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Both hooks and debuggers are easy enough to detect if you're looking for them. Using API in order to read the debugee's memory by the debugger is no real disadvantage, in my opinion.\nI find debugging to be more documented, resilient and OS supported than any manual hooking.\nAlthough Microsoft for example provides the Detours hooking library, this is still not a functionality supported by the OS and Microsoft highlights that usage of hooking is discouraged.\nThe major reason I often see hooking being used instead of debugging is for the following reasons:\n\nMonitoring the entire system is required instead of specific processes.\nThere's no need to trace the full flow of execution, but instead only record specific events (such as network communication, for example).\n\nAlthough hooking could potentially be used for debugging, these two techniques are usually used for completely different things.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 10, 2018 at 2:25",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "@ExtremeCoders comment was a sufficient answer:\n\n1) Hooks exists in the same address space as that of the target. So you have full access to all memory. In case of breakpoints, the debugger and debugee exists in different address space. In order to read memory, special API needs to be used, like <pre><code>ReadProcessMemory</code></pre> on Windows. \n2) Hooks properly implemented, are usually difficult to detect. Debuggers are noisy.\n\nForgot to look at my question in that regard.\n",
            "votes": "0",
            "user": "julian",
            "time": "Jun 10, 2018 at 18:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Maybe add this comment w/ quotes as part of the accepted answer?</span>",
                    "time": null
                }
            ]
        }
    ]
}