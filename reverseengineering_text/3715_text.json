{
    "title": "I want to know more about how a particular exploit works. How do I do that? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/3715/i-want-to-know-more-about-how-a-particular-exploit-works-how-do-i-do-that",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about reverse engineering within the scope defined in the help center.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI am given a VM of a server running a vulnerable version of ProFTP and a attacker VM which exploits the server using an exploit provided with MetaSploit. I need to write a Snort rule to detect potential malicious attacks on the server as a part of my class assignment. Looking at the exploit code I can easily write a rule to look for the keyword <pre><code>SITE</code></pre> or <pre><code>\\x8d\\xa0\\xfc\\xdf\\xff\\xff</code></pre> (as my vulnerable Vm is an Ubuntu machine). However, that would be pretty lame and also writing patches specific to the code of the exploit is not a good practice. I would like the rule to apply even if the exploit code is changed. \nI have read about the bug and I know that the presence of special IAC character (255 or <pre><code>\\xFF</code></pre>) would potentially lead to buffer overflow. However, any normal packet could contain  <pre><code>\\xFF</code></pre> and writing a rule for detecting <pre><code>\\xFF</code></pre> would to false positives. I want to know some specific details of the exploit which would either help me figure out where I need to look for the IAC character or help me find some details about the exploit which would allow me to find malicious packets without having to resort to look for IAC character <pre><code>\\xFF</code></pre>. How do I go about doing that? Any help or pointers would be appreciated.\nThanks.\nEDIT:\nCurrently, I have installed udcli to try to understand the commands in the <pre><code>ROPStack</code></pre> portion of the code. For ex: I am trying to evaluate line 100 (<pre><code>0x805a544,  # mov eax,esi / pop ebx / pop esi / pop ebp / ret</code></pre>) in the code. I have tried:\n<pre><code>echo \"08 05 a5 44\" | udcli -32 -x\necho \"805a544\" | udcli -32 -x\necho \"44 a5 05 08\" | udcli -32 -x\necho \"44 a5 05 80\" | udcli -32 -x\n</code></pre>\nBut none of them evaluates to the following sequence\n<pre><code>mov eax,esi\npop ebx\npop esi\npop ebp\nret\n</code></pre>\n",
    "votes": "3",
    "answers": 0,
    "views": "332",
    "tags": [
        "disassembly",
        "linux",
        "exploit",
        "buffer-overflow"
    ],
    "user": "TheRookierLearner",
    "time": "11 years ago",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "ProFTPD is open-source and the vulnerability is very well-documented, meaning there's no need to analyze a specific exploit. Your question would be better asked on security.stackexchange.com as writing a Snort rule does not require any reverse engineering in this context.\n",
            "time": null
        },
        {
            "user": "jbh",
            "text": "He clearly stated that he is studying this vulnerability as part of a class, with the intent to learn. Although his question is a bit vague, completely disregarding it because others have analyzed the exploit, is contrary to the point of stack exchange.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "@jbh: Asking a question unrelated to reverse engineering is contrary to the point of the Reverse Engineering Stack Exchange :)\n",
            "time": null
        },
        {
            "user": "qwm",
            "text": "@TheRookierLearner: from what I see in the bug link you provided, integer underflow is triggered by <pre><code>buf[4102] == TELNET_IAC</code></pre>\n",
            "time": null
        },
        {
            "user": "qwm",
            "text": "<pre><code>'\n'</code></pre> means the end of src-buffer for the <pre><code>pr_netio_telnet_gets</code></pre> function. If your snort rule somehow a-priori knows the length of buffer you can skip this test by efficiency consideration, ofc\n",
            "time": null
        }
    ],
    "answers_data": []
}