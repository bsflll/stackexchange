{
    "title": "How to set breakpoint on C++ symbols?",
    "link": "https://reverseengineering.stackexchange.com/questions/13357/how-to-set-breakpoint-on-c-symbols",
    "content": "How to set breakpoint on this C++ symbol?\n\nbp qmgr!TokenHandle::operator-: \n  Could not resolve error at 'qmgr!TokenHandle::operator-:'\n\nin windbg?\n",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "debugging",
        "c++",
        "windbg"
    ],
    "user": "forbiddenhi",
    "time": "Sep 6, 2017 at 14:24",
    "comments": [],
    "answers_data": [
        {
            "content": "Make sure your symbol is correct\nCouldn't resolve means the symbol  doesn't exist\nfirst confirm with x /f /v (f shows only functions and v shows verbose information )\nnext set breakpoint on the symbol using the advice spit out by the debugger\nmost inline functions would require bm breakpoints\nor bu breakpoints   \nbp breakpoints can fail on inlined or overloaded functions (Ambigous functions)   \n<pre><code>0:000> x /f /v calc!*CSc*::*=*\npub func   00ad4248             0 calc!CScientificKeypad::operator= (<no parameter info>)\n\n0:000> x /1 calc!*CSc*::*=*\ncalc!CScientificKeypad::operator=\n\n0:000> bp calc!CScientificKeypad::operator=\n\nCouldn't resolve error at 'calc!CScientificKeypad::operator='\nThe breakpoint expression \"calc!CScientificKeypad::operator=\" evaluates to the inline function.\n\nPlease use bm command to set breakpoints instead of bp.\n\n0:000> bu calc!CScientificKeypad::operator=\nCouldn't resolve error at 'calc!CScientificKeypad::operator='\nThe breakpoint expression \"calc!CScientificKeypad::operator=\" evaluates to the inline function.\nPlease use bm command to set breakpoints instead of bu.\n\n0:000> bm calc!CScientificKeypad::operator=\n  1: 00ad4248          @!\"calc!CScientificKeypad::operator=\"\n\n0:000> bl\n 1 e 00ad4248     0001 (0001)  0:**** calc!CScientificKeypad::operator=\n0:000> g\n\nBreakpoint 1 hit\n\ncalc!CScientificKeypad::operator=:\n00ad4248 8bff            mov     edi,edi\n\n0:000> kb\n # ChildEBP RetAddr  Args to Child              \n00 0015e7fc 00ad41eb 00b043c8 2b3b2a3d 761ef2a9 calc!CScientificKeypad::operator=\n01 0015e828 00ad3fe7 00b0433c 00b043c8 000000aa calc!CScientificMode::CScientificMode+0x49\n02 0015e878 00ad3e69 00000000 762025df 00b04210 calc!CContainer::LayoutScientificMode+0x93\n03 0015f0fc 00ab1b0e 00000000 00b04a68 0025264c calc!CContainer::AssembleDialogsWithoutToolset+0x18e\n04 0015fe6c 00ac219a 00ab0000 00000000 0025264c calc!WinMain+0x581\n05 0015fefc 77883c45 7ffdf000 0015ff48 77d537f5 calc!_initterm_e+0x1a1\n06 0015ff08 77d537f5 7ffdf000 77c5ad65 00000000 kernel32!BaseThreadInitThunk+0xe\n07 0015ff48 77d537c8 00ac2d6c 7ffdf000 00000000 ntdll!__RtlUserThreadStart+0x70\n08 0015ff60 00000000 00ac2d6c 7ffdf000 00000000 ntdll!_RtlUserThreadStart+0x1b\n</code></pre>\n",
            "votes": "4",
            "user": "blabb",
            "time": "Aug 25, 2016 at 15:13",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "It looks like you have an extra colon at the end of your string (<pre><code>operator-:</code></pre>) and you may need to use <pre><code>bm</code></pre> instead of <pre><code>bp</code></pre>.\n<pre><code>class TokenHandle\n{\npublic:\n    int data;\n    TokenHandle(int i) \n    {\n        data = i;\n    }\n    TokenHandle operator-(TokenHandle& in)\n    {\n        return TokenHandle(data - in.data);\n    }\n};\n</code></pre>\nWinDbg:\n<pre><code>0:000> bm test!TokenHandle::operator-\n  1: 00000001`3fd62da0 @!\"test!TokenHandle::operator-\"\n</code></pre>\nAlternately verify that the debugger is able to find the right symbols (and you can always set a breakpoint on the address found):\n<pre><code>0:000> x test!TokenHandle*\n00000001`3fd62da0 test!TokenHandle::operator- (class TokenHandle *)\n00000001`3fd626c0 test!TokenHandle::TokenHandle (int)\n0:000> bp 00000001`3fd62da0 \n</code></pre>\n",
            "votes": "3",
            "user": "josh poley",
            "time": "Aug 25, 2016 at 15:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}