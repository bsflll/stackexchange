{
    "title": "What is the correct disassembly for ARM opcode E1F322D1?",
    "link": "https://reverseengineering.stackexchange.com/questions/10609/what-is-the-correct-disassembly-for-arm-opcode-e1f322d1",
    "content": "I'm adapting the reko decompiler to use Capstone for its disassembler, instead of rolling my own. I'm using the .NET bindings provided by Capstone.NET.\nThe strategy is to replace the old ARM disassembler with the Capstone disassembler and then run the old unit tests to make sure nothing broke. I'm at a point where most test are passing, but the opcode <pre><code>E1F322D1</code></pre>, which both the old reko disassembler and ODA disassemble to:\n<pre><code> ldrsb r2, [r3, #33]!\n</code></pre>\nBut, Capstone responds with:\n<pre><code>ldrsb r2,[r3,#&221]!\n</code></pre>\nI don't have other disassemblers handy, so I'm uncertain who to trust! \nWhat's the correct disassembly?\n",
    "votes": "3",
    "answers": 2,
    "views": "823",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "John Källén",
    "time": "Aug 11, 2015 at 18:27",
    "comments": [],
    "answers_data": [
        {
            "content": "IDA agrees with the first one:\n<pre><code>LDRSB           R2, [R3,#33]!</code></pre>\nCapstone might be trying to display something like #0x21, which would be equivalent, but it seems that something went wrong.\n",
            "votes": "3",
            "user": "peter ferrie",
            "time": "Aug 11, 2015 at 18:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "John Källén",
                    "text": "<span class=\"comment-copy\">Indeed, after some further troubleshooting I narrowed down the problem to Capstone.NET and reported it. Hopefully a fix will be forthcoming soon.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "From http://bear.ces.cwru.edu/eecs_382/ARM7-TDMI-manual-pt2.pdf:\n\n<pre><code>E1F322D1</code></pre> equals <pre><code>11100001111100110010001011010001</code></pre> in binary.\nYour question is specific to the offset, so we can examine the last dozen bits of that binary string with regard to the decomposition rules in the screenshot above:\n<pre><code>... Offset 1 SH 1 Offset\n...  0010  1 10 1  0001\n</code></pre>\nThus, the high nibble is <pre><code>0010</code></pre> and the low nibble is <pre><code>0001</code></pre>. If we combine them, we get <pre><code>00100001</code></pre> in binary, or <pre><code>33</code></pre> in decimal.\nSo the correct disassembly is <pre><code>ldrsb r2, [r3, #33]!</code></pre>.\n",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Aug 11, 2015 at 18:26",
            "is_accepted": false,
            "comments": []
        }
    ]
}