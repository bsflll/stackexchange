{
    "title": "Debug shared library in Android application",
    "link": "https://reverseengineering.stackexchange.com/questions/29606/debug-shared-library-in-android-application",
    "content": "There is an Android application that has a shared library (.so) file in <pre><code>split_config.arm64_v8a.apk</code></pre> that I want to debug .\nWhen I look at <pre><code>/proc/PID/maps</code></pre> I don't see that library (I do see the <pre><code>split_config.arm64_v8a.apk</code></pre> file), but I'm sure the library is loaded because I see logs that only that library prints. Additionally, the application calls <pre><code>System.loadLibrary(\"libMyLib.so\");</code></pre> to load that library.\nHow can I debug this shared library?\n",
    "votes": "2",
    "answers": 1,
    "views": "3k",
    "tags": [
        "debugging",
        "android",
        "gdb",
        "frida"
    ],
    "user": "Polo123",
    "time": "Nov 30, 2021 at 8:18",
    "comments": [
        {
            "user": "Robert",
            "text": "From what I remember .so files are (unless explicitly stated in AndroidManifest.xml)  extracted upon installation. I would assume that this is still valid even for apps that comprise of multiple APK files (split APK). So you should better search for <pre><code>libMyLib.so</code></pre> in file-system and when loaded in list of loaded modules. On a rooted device my recommendation would be to use frida.re\n",
            "time": null
        },
        {
            "user": "Polo123",
            "text": "@Robert 1) There are 2 <pre><code>AndroidManifest.xml</code></pre> in <pre><code>base</code></pre> in in <pre><code>split_config.arm64_v8a</code></pre> , what should I search there ? 2) The app is installed on a rooted device 3) I use <pre><code>Frida</code></pre> and hook <pre><code>dlopen</code></pre>  from <pre><code>libc</code></pre> to print the library that load with <pre><code>dlopen</code></pre> to application , and I didn't see this lib that lodded\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "If you see an attribute like <pre><code>extractNativeLibs=\"false\"</code></pre> in the <pre><code><application</code></pre> tag, the native libraries are directly loaded from within the APK (need to be stored without compression in the APK).\n",
            "time": null
        },
        {
            "user": "Polo123",
            "text": "@Robert Yes , I see <pre><code>android:extractNativeLibs=\"false\"</code></pre>\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Then you got your answer. You see <pre><code>split_config.arm64_v8a.apk</code></pre> which is the library loaded without unpacking.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "What you see is possible if the APK files uses the mode <pre><code>extractNativeLibs=\"false\"</code></pre>. If that attribute is set in the <pre><code><application</code></pre> tag in <pre><code>AndroidManifest.xml</code></pre> then Android loads the .so files directly from within the APK file without extracting them first.\nThis works because the .so files are stored without compression and aligned to 4KiB page boundary so that they can be directly mapped into memory via mmap (see also zipalign comments on that topic https://developer.android.com/studio/command-line/zipalign).\n",
            "votes": "1",
            "user": "Robert",
            "time": "Nov 24, 2021 at 17:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Polo123",
                    "text": "<span class=\"comment-copy\">So how can I debug this so please?</span>",
                    "time": null
                },
                {
                    "user": "Robert",
                    "text": "<span class=\"comment-copy\">@Polo123 As evrey Andorid app that uses native libraries you can not debug it using Android Studio if you don't have the source code. You can attach gdb to it or much easier use <a href=\"https://frida.re\" rel=\"nofollow noreferrer\">frida.re</a> to hook Java and/or native methods or trace executions (<code>frida-trace</code>).</span>",
                    "time": null
                },
                {
                    "user": "Polo123",
                    "text": "<span class=\"comment-copy\">I have tried <code>frida-trace -D XXXXXXX -f com.MyApp -a \"libMyLib.so\"</code> and I got an error  <code>unable to find module 'libMyLib.so'</code></span>",
                    "time": null
                },
                {
                    "user": "Robert",
                    "text": "<span class=\"comment-copy\">@Polo123 Use Frida to list all loaded modules, e.g. as shown here: <a href=\"https://github.com/poxyran/misc/blob/master/frida-enumerate-modules.py#L10-L14\" rel=\"nofollow noreferrer\">github.com/poxyran/misc/blob/master/â€¦</a> For the rest check the extensive Frida API: <a href=\"https://frida.re/docs/javascript-api/\" rel=\"nofollow noreferrer\">frida.re/docs/javascript-api</a> There are also a lot tutorials online about Android and native libraries.</span>",
                    "time": null
                },
                {
                    "user": "Polo123",
                    "text": "<span class=\"comment-copy\">Thank you about your help , I run <code>Process.enumerateModules({onMatch: function(module){\tif(module.name==\"libMyLib.so\")\t\t\t\t{console.log('Module name: ' + module.name + \" - \" + \"Base Address: \" + module.base.toString());}\t\t\t}, \t\t\tonComplete: function(){}\t\t});</code>  and find out that this lib was loaded after I press some click into the application , and it load to <code>split_config.arm64_v8a.apk</code> memory (in /<code>proc/PID/maps</code>)</span>",
                    "time": null
                }
            ]
        }
    ]
}