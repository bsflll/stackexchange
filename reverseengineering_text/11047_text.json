{
    "title": "Reversing checksum calculation of embedded communication",
    "link": "https://reverseengineering.stackexchange.com/questions/11047/reversing-checksum-calculation-of-embedded-communication",
    "content": "I need to find relations last byte with others. Tried these solutions, but it didn't work.\nMy tries:\n* When I write all datas as binary, 1's count not equal but last byte same for some datas.\n* When I sum all datas and divide by 3 or 4, it equals to last byte, but for future, maybe it's not stable.\nBunch of data:\n<pre><code>FC 41 01 30 10 01 21 00 01 00 00 00 00 00 00 00 00 00 00 00 00 5B\nFC 41 01 30 10 01 21 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5C\n\nFC 41 01 30 10 01 24 00 00 00 0F 00 00 00 00 00 00 00 00 00 00 4A\nFC 41 01 30 10 01 24 00 00 00 0E 00 00 00 00 00 00 00 00 00 00 4B\nFC 41 01 30 10 01 24 00 00 00 0B 00 00 00 00 00 00 00 00 00 00 4E\nFC 41 01 30 10 01 24 00 00 00 07 00 00 00 00 00 00 00 00 00 00 52\nFC 41 01 30 10 01 24 00 00 00 06 00 00 00 00 00 00 00 00 00 00 53\nFC 41 01 30 10 01 24 00 00 00 01 00 00 00 00 00 00 00 00 00 00 58\nFC 41 01 30 10 01 24 00 00 00 00 00 00 00 00 00 00 00 00 00 00 59\n\nFC 41 01 30 10 01 22 00 00 01 00 00 00 00 00 00 00 00 00 00 00 5A\nFC 41 01 30 10 01 22 00 00 03 00 00 00 00 00 00 00 00 00 00 00 58\nFC 41 01 30 10 01 22 00 00 07 00 00 00 00 00 00 00 00 00 00 00 54\nFC 41 01 30 10 01 22 00 00 02 00 00 00 00 00 00 00 00 00 00 00 59\n\nFC 62 01 30 10 03 00 00 0D 00 00 AF 00 00 00 00 00 00 00 00 00 9E\nFC 62 01 30 10 03 00 00 0F 00 00 B2 00 00 00 00 00 00 00 00 00 99\nFC 62 01 30 10 03 00 00 10 00 00 B4 00 00 00 00 00 00 00 00 00 96\nFC 62 01 30 10 03 00 00 11 00 00 B6 00 00 00 00 00 00 00 00 00 93\nFC 62 01 30 10 03 00 00 11 00 00 B7 00 00 00 00 00 00 00 00 00 92\nFC 62 01 30 10 03 00 00 12 00 00 B9 00 00 00 00 00 00 00 00 00 8F\nFC 62 01 30 10 03 00 00 12 00 00 B8 00 00 00 00 00 00 00 00 00 90\nFC 62 01 30 10 03 00 00 13 00 00 BA 00 00 00 00 00 00 00 00 00 8D\nFC 62 01 30 10 03 00 00 14 00 00 BD 00 00 00 00 00 00 00 00 00 89\nFC 62 01 30 10 03 00 00 15 00 00 BE 00 00 00 00 00 00 00 00 00 87\nFC 62 01 30 10 03 00 00 16 00 00 C0 00 00 00 00 00 00 00 00 00 84\nFC 62 01 30 10 03 00 00 1C 00 00 D0 00 00 00 00 00 00 00 00 00 6E \n</code></pre>\nThank you,\nM.\n",
    "votes": "1",
    "answers": 1,
    "views": "390",
    "tags": [
        "decryption",
        "serial-communication",
        "packet",
        "crc"
    ],
    "user": "mcan",
    "time": "May 6, 2016 at 17:26",
    "comments": [],
    "answers_data": [
        {
            "content": "If you ignore the first constant byte (<pre><code>FC</code></pre>), all the other bytes add up to <pre><code>00</code></pre>, ignoring overflow.\nIn other words, to calculate the last byte, start with <pre><code>00</code></pre>, subtract all bytes except the first <pre><code>FC</code></pre> (and the last one, obviously). Ignore underflow. The result is the last byte. Or, if that's easier in your programming language, start with <pre><code>2000</code></pre> (8192 decimal), subtract all bytes, and <pre><code>AND</code></pre> the result with <pre><code>FF</code></pre>.\n",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Oct 7, 2015 at 8:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">if your choice of language is powershell you can use this&gt;cat checksum.ps1 $c=(gc .\\checksumthis.txt);$s=\"\";0..($c.length-1)|%{$t=0;$l=-split $c[$_]; $l[1..($l.Length-2)]|%{$t+=[convert]::ToSByte($_,16)};$s+=\"{0:X} \"-f(256-$t)} $s  &gt;powershell -nologo -f .\\checksum.ps1 5B 5C 4A 4B 4E 52 53 58 59 5A 58 54 59 9E 99 96 93 92 8F 90 8D 89 87 84 6E</span>",
                    "time": null
                },
                {
                    "user": "mcan",
                    "text": "<span class=\"comment-copy\">how did you find this solution? Could you please explain?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">@mcan: Looking at the sequences where only one byte changes, i noticed every payload change by some amount corresponds with a checksum change by the negative amount. (<code>01-5B</code>, <code>00-5C</code> and <code>0F-4A</code>, <code>0E-4B</code>, <code>0B-4E</code>...) This made me think \"constant sum\". Then i summed up some of the rows using my trusty hex calculator, and got <code>FC</code> (plus some overflow) in every case. That was it.</span>",
                    "time": null
                }
            ]
        }
    ]
}