{
    "title": "Ripping/pasting code into an executable using Olly",
    "link": "https://reverseengineering.stackexchange.com/questions/1869/ripping-pasting-code-into-an-executable-using-olly",
    "content": "I'm working with some x86 assembly code and I need to rip from one executable and paste that code into another.\nOriginally, I had an executable that was meant to accept two command line parameters and run a handwritten function on them. However, I ran into annoyances with using <pre><code>GetCommandLine</code></pre> et al. to return the parameters in my ASM. Namely, it returned Unicode and I needed the parameters in ANSI. Rather than dealing with setting up the library calls and converting that way, I compiled a small program that uses command line arguments with the intent of reusing code.\nSo now I have two executables:\n\none with the command line parameters parsed and in their proper places\ntwo with the actual assembled function code inside of it.\n\nThe first executable has the space for the function <pre><code>NOP</code></pre>'d out, but I need a good way to paste the logic in. I've looked at Asm2clipboard, Code Ripper and data ripper, but they only have the functionality to rip the assembly out, but not paste it back in.\nI'm aware I'll have to fix addresses and things like that, but I can't find a way in Olly or other tools to move the code between the executables. I can go into HexEdit or something like that I supposed, but I was hoping there's an easier way.\n",
    "votes": "8",
    "answers": 3,
    "views": "2k",
    "tags": [
        "disassembly",
        "pe",
        "ollydbg",
        "patching"
    ],
    "user": "Fewmitz",
    "time": "Jun 17, 2021 at 15:31",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "uhm, <pre><code>GetCommandLineA</code></pre> or <pre><code>GetCommandLineW</code></pre>? Why not simply use the correct one for your context?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For OllyDbg, it is \n\nSelect code from the CPU window \nRight-click and choose <pre><code>Binary</code></pre>\nChoose <pre><code>Binary Copy</code></pre>\nIn the target CPU window, do the same but select <pre><code>Binary Paste</code></pre>\n",
            "votes": "6",
            "user": "Ange",
            "time": "Apr 20, 2013 at 9:50",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "disasm\nuse IDA (why olly only? IDA free might do the trick), or OllyDbg with BeaEngine plug-in (it has some specific ASM syntax options)\nimprove in the disassembler\nrename as many labels as possible, using delta address - it's painful to do that later\nexport to ASM\nrework the ASM syntax to get it re-assemblable\npatch\neither:\n\nmake your ASM code EIP-independant and patch it as hex\n\nre-inject it with Iczelion's Code Snippet Creator (it injects your ASM code compiled as from your OBJ)\n",
            "votes": "6",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Multiline Ultimate Assembler is a multiline (and ultimate) assembler (and disassembler) plugin for OllyDbg. Itâ€™s a perfect tool for modifying and extending a compiled executable functionality, writing code caves, etc.\n",
            "votes": "5",
            "user": "MarianD",
            "time": "Jun 17, 2021 at 15:32",
            "is_accepted": false,
            "comments": []
        }
    ]
}