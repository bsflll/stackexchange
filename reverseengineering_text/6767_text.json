{
    "title": "How to open and modify these files?",
    "link": "https://reverseengineering.stackexchange.com/questions/6767/how-to-open-and-modify-these-files",
    "content": "I've been pointed here from a question I've posted on superuser:\nhttps://superuser.com/questions/848108/open-img-file-to-mod-a-software/848844#848844\nBasically I'm trying to modify the background of a window of a software, because the only ones available are too bright and hurt my eyes if I stare the monitor for more than 10min!\nI've found these files in a subfolder of the program but they are saved with an extension .img, however this is not the real extension actually.\nYou can find the files here: https://drive.google.com/folderview?id=0BxENJdqZ02Q0LUNRZVZGVEpxZXc&usp=sharing\nAnd here the answer that pointed me here: https://superuser.com/a/848844/153946\nCan you help me to open these files and modify them in order to get a black background?\n",
    "votes": "-2",
    "answers": 1,
    "views": "88",
    "tags": [
        "windows"
    ],
    "user": "KingBOB",
    "time": "Mar 20, 2017 at 10:04",
    "comments": [],
    "answers_data": [
        {
            "content": "These files are archives, as the superuser post suggested.\nEach file has a 4 byte header which has the value \"20SR\", a 4 byte value that holds the number of files in the archive, then an array of 52 byte filename/length info, and the file data. Each file consists of a 4 byte value that repeats the size, then a deflated byte stream of the original file data.\nThe following C program rips these file(s) apart:\nWARNING: Do not use as an example for good programming style. Error checking is minimal.\n<pre><code>#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <zlib.h>\n\nstruct filedesc {\n        char filename[40];\n        int origsize, compressedsize, filepos;\n};\n\nchar *emalloc(int n);\n\nint main(int argc, char **argv) {\n        FILE *fp, *out;\n        char header[4], *inbuf, *outbuf;\n        char basename[256];\n        int i, j;\n        int nfiles;\n        struct filedesc filedesc;\n        z_stream stream;\n\n        if (sizeof(nfiles)!=4) {\n                fprintf(fp, \"int size not 32 bit -> aborting\n\");\n                exit(1);\n        }\n        for (i=1; i<argc; i++) {\n                if ((fp=fopen(argv[i], \"rb\"))==NULL) {\n                        perror(argv[i]);\n                        continue;\n                }\n                fread(header, 4, 1, fp);\n                if (memcmp(header, \"20SR\", 4)) {\n                        fprintf(stderr, \"%s: Wrong File Format\n\", argv[i]);\n                        fclose(fp);\n                        continue;\n                }\n                printf(\"===== %s ======\n\", argv[i]);\n                fread(&nfiles, sizeof nfiles, 1, fp);\n                for (j=0; j<nfiles; j++) {\n                        fseek(fp, 8+(long)j*sizeof filedesc, 0);\n                        fread(&filedesc, sizeof filedesc, 1, fp);\n                        printf(\"%2d: %-40s %08x %08x %08x\n\", j,\n                                filedesc.filename, filedesc.origsize, filedesc.compressedsize, filedesc.filepos);\n                        fseek(fp, (long)filedesc.filepos+4, 0);\n                        strcpy(basename, argv[i]);\n                        if ((outbuf=strchr(basename, '.'))==NULL) {\n                                strcat(basename, \".d\");\n                                outbuf=basename+strlen(basename);\n                        } else {\n                                *outbuf='\\0';\n                        }\n                        mkdir(basename, 0777);\n                        strcat(basename, \"/\");\n                        strcat(basename, filedesc.filename);\n\n                        if ((out=fopen(basename, \"wb\"))==NULL) {\n                                perror(basename);\n                        } else {\n                                inbuf=malloc(filedesc.compressedsize-4);\n                                outbuf=malloc(filedesc.origsize);\n                                fread(inbuf, filedesc.compressedsize-4, 1, fp);\n                                stream.zalloc=Z_NULL;\n                                stream.zfree=Z_NULL;\n                                stream.opaque=Z_NULL;\n                                stream.avail_in=filedesc.compressedsize;\n                                stream.next_in=inbuf;\n                                stream.avail_out=filedesc.origsize;\n                                stream.next_out=outbuf;\n                                inflateInit(&stream);\n                                inflate(&stream, Z_FINISH);\n                                inflateEnd(&stream);\n\n                                fwrite(outbuf, filedesc.origsize, 1, out);\n                                fclose(out);\n                                free(inbuf);\n                                free(outbuf);\n                        }\n                }\n                fclose(fp);\n        }\n}\n\nchar *emalloc(int n) {\n        char *t;\n        if ((t=malloc(n))==NULL) {\n                fprintf(stderr, \"no space\n\");\n                exit(1);\n        }\n        return t;\n}\n</code></pre>\nI may or may not have the time to create a program to compress a bunch of files over the weekend. Btw, the images in the table*.img files seem to be buttons or something similar, i guess the background itself is defined in one of the css files in layout.img.\n",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Dec 5, 2014 at 12:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}