{
    "title": "How to get the EIP value right before WinDBG attach operation?",
    "link": "https://reverseengineering.stackexchange.com/questions/3987/how-to-get-the-eip-value-right-before-windbg-attach-operation",
    "content": "When WinDBG attach to a process, the EIP will point at <pre><code>ntdll!DbgBreakPoint</code></pre> in a dedicated thread different to the main process threads.\nIs it possible to get the EIP value right before the attach operation? If possible, how to get the EIP value right before the attachment happened?\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windbg"
    ],
    "user": "yegle",
    "time": "Mar 29, 2014 at 0:39",
    "comments": [],
    "answers_data": [
        {
            "content": "There can be <pre><code>arbitrary number of threads</code></pre> running in a process at any given time\nyou require the eip of which thread or rather could you explain what you are after   because as posted your query doesnt semm to be logical.\nIf you want to know where each of the thread is when you broke on attach   \nFind the number of threads running in the process with\n<pre><code> ~*\n</code></pre>\nthats a <pre><code>tilde and asterisk</code></pre> it will list all the threads that are running at the time when windbg broke\nnow use the <pre><code>number as a variable</code></pre> in a <pre><code>.for loop</code></pre> to print out the <pre><code>eip and ebp+4</code></pre> (return address on stack)\nscript\n<pre><code>0:019> .for (r $t0 = 0; @$t0 < 19; r $t0 = @$t0+1 ) { ~[@$t0]s; .printf \"%p\\t%y\\t%y\n\",@eip,@eip,poi(@ebp+4);   }\n</code></pre>\nresult (attached to a blank ieexplorer)\n<pre><code>7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    USER32!RealMsgWaitForMultipleObjectsEx+0x13e (7e4195f9)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    ADVAPI32!WmipEventPump+0x230 (77df8631)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!BaseThreadStart+0x37 (7c80b729)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!BaseThreadStart+0x37 (7c80b729)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!BaseThreadStart+0x37 (7c80b729)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    RPCRT4!RecvLotsaCallsWrapper+0xd (77e76caf)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!WaitForMultipleObjects+0x18 (7c80a115)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    USER32!RealMsgWaitForMultipleObjectsEx+0x13e (7e4195f9)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!WaitForMultipleObjects+0x18 (7c80a115)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    USER32!RealMsgWaitForMultipleObjectsEx+0x13e (7e4195f9)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    RPCRT4!RecvLotsaCallsWrapper+0xd (77e76caf)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!Sleep+0xf (7c802455)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    ole32!CRpcThread::WorkerLoop+0x5c (774fe419)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    ole32!CRpcThread::WorkerLoop+0x5c (774fe419)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!BaseThreadStart+0x37 (7c80b729)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!BaseThreadStart+0x37 (7c80b729)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    RPCRT4!RecvLotsaCallsWrapper+0xd (77e76caf)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    RPCRT4!RecvLotsaCallsWrapper+0xd (77e76caf)\n7c90e514    ntdll!KiFastSystemCallRet (7c90e514)    KERNEL32!BaseThreadStart+0x37 (7c80b729)\n7c90120e    ntdll!DbgBreakPoint (7c90120e)  00000000\n</code></pre>\n",
            "votes": "4",
            "user": "blabb",
            "time": "Mar 29, 2014 at 7:09",
            "is_accepted": false,
            "comments": []
        }
    ]
}