{
    "title": "Track execution of bytes in a Linux executable",
    "link": "https://reverseengineering.stackexchange.com/questions/16573/track-execution-of-bytes-in-a-linux-executable",
    "content": "Given a binary executable file (in this case, a compiled C file which finds the gcd of 2 numbers), is there a tool which profiles the execution of this file and could generate some sort of call graph of that execution, specifically the order of instructions/bytes being called/accessed (i.e. a list of positions of instructions/bytes within that file)?\nI know that ltrace and strace tools trace the library and system calls, respectively, but what I'm asking for is specifically the bytes located in the file itself.\nI tried using perf to sample the PC, but I didn't find a way to limit its sampling to the file itself or to have it track the exact bytes themselves. I also found that it couldn't sample it fast enough for such a short program. oprofile seemed to have a similar issue.\nI used \nradare2 to generate a call-graph of the executable, but that created the full call-graph and was independent of any arguments/execution, nor does it give exact positions of the instructions.\nI'd like to use this tool to compare the execution of two binaries i.e. show the difference in execution between ./gcd 5 10 and ./gcd 128 24\nDoes a tool like this exist?\n",
    "votes": "3",
    "answers": 2,
    "views": "659",
    "tags": [
        "binary-analysis",
        "executable",
        "binary",
        "call-graph"
    ],
    "user": "Revenant013",
    "time": "Oct 17, 2017 at 15:06",
    "comments": [
        {
            "user": "julian",
            "text": "software.intel.com/sites/landingpage/pintool/docs/71313/Pin/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It seems what you need is an instruction tracer. PIN from Intel is one example of a framework which allows you to make tracing tools. It uses dynamic binary instrumentation to achieve reasonable speeds and you can likely use one of the examples shipped with the library with little or no modification. Many debuggers also support instruction trace recording (usually by software stepping every instruction which is rather slow but generally reliable). Some may even have support for differential debugging which records several executions and shows differences between them.\nIf you have a recent Intel CPU, you may be able to take advantage of Intel Processor Trace (PT) with <pre><code>perf</code></pre>.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 18, 2017 at 9:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "As @IgorSkochinsky suggests, you can use dynamic binary instrumentation (DBI).\nOne alternative to PIN is DynamoRIO.\n<pre><code>$ ./drbuild.sh  # build script (below)\n$ gcc gcd.c -o gcd\n\n# run one\n$ $ ./dynamorio/build/bin32/drrun -t drcov -dump_text -- ./gcd 5 10\n5\n\n$ ls  # so we know which log is from our first run\ndrbuild.sh  drcov.gcd.18958.0000.proc.log  dynamorio  gcd  gcd.c\n\n# run two\n$ $ ./dynamorio/build/bin32/drrun -t drcov -dump_text -- ./gcd 128 24\n8\n</code></pre>\nNow that we have built DynamoRIO with <pre><code>drbuild.sh</code></pre>, compiled <pre><code>gcd.c</code></pre>, run <pre><code>gcd</code></pre>, and generated <pre><code>drcov.gcd.18958.0000.proc.log</code></pre> and <pre><code>drcov.gcd.18960.0000.proc.log</code></pre>, we can compare the \"BB Table\" field between the logs for runs one (2177) and two (2183) to immediately see that more basic blocks (counting duplicity) were executed on the second run, as we should expect due to the <pre><code>while()</code></pre> in <pre><code>gcd_iter()</code></pre>.\nBasic blocks are grouped by module and identified by their offsets into that module. For example, <pre><code>module 0</code></pre> contains all basic blocks in the <pre><code>gcd</code></pre> binary. The line containing <pre><code>module[  0]: 0x0000043b</code></pre> means that the basic block at <pre><code>module 0 start (0x08048000) + 0x0000043b</code></pre> was encountered. From this cfg, we can see that <pre><code>0x0804843b</code></pre> is the first basic block in the <pre><code>gcd_iter()</code></pre> function.\nIf the first argument to <pre><code>gcd_iter()</code></pre> is negative, execution falls through to <pre><code>0x08048444</code></pre>, which negates that argument; otherwise, we jump to <pre><code>0x8048447</code></pre>. The logs for the first two runs, in which all arguments are positive, align with this expectation.\n<pre><code>$ grep -F 'module[  0]:' drcov.gcd.18958.0000.proc.log\n...\nmodule[  0]: 0x0000043b,   9\nmodule[  0]: 0x00000447,   6\n...\n</code></pre>\nRunning <pre><code>gcd</code></pre> with a negative first argument shows how DynamoRIO's output is dynamic.\n<pre><code>$ ./dynamorio/build/bin32/drrun -t drcov -dump_text -- ./gcd -5 10\n$ grep -F 'module[  0]:' drcov.gcd.18970.0000.proc.log\n...\nmodule[  0]: 0x0000043b,   9\nmodule[  0]: 0x00000444,   9\n...\n</code></pre>\n",
            "votes": "1",
            "user": "devtty1er",
            "time": "Feb 15, 2018 at 15:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}