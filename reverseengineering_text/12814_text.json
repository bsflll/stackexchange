{
    "title": "Modification of existing binary firmware update",
    "link": "https://reverseengineering.stackexchange.com/questions/12814/modification-of-existing-binary-firmware-update",
    "content": "I have several IP cameras from china, and I need to add some software to it. I have to ways how to burn my software into camera ROM using hardware programmer and using special binary what I upload into camera using camera's Web interface. I decide to use special binary.\nOk, I'd download this binary from here. The binary successfully uploaded into camera and I decide to watch inside it. I use <pre><code>binwalk</code></pre> program. <pre><code>binwalk</code></pre> tell me next: \n<pre><code>[arhichief@arhichief-pc updates]$ binwalk di20_fl_03.upw \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n152           0x98            uImage header, header size: 64 bytes, header CRC: 0x863E2566, created: 2014-08-01 04:16:33, image size: 3091196 bytes, Data Address: 0x80008000, Entry Point: 0x80008000, data CRC: 0x3B8FC9B, OS: Linux, CPU: ARM, image type: OS Kernel Image, compression type: none, image name: \"Linux-3.0.8\"\n16243         0x3F73          gzip compressed data, maximum compression, from Unix, NULL date (1970-01-01 00:00:00)\n3091412       0x2F2BD4        Squashfs filesystem, little endian, version 4.0, compression:xz, size: 7403482 bytes, 24 inodes, blocksize: 262144 bytes, created: 2015-05-10 02:32:07\n</code></pre>\nThe <pre><code>file</code></pre> command told me, what it is a binary image of ROM:\n<pre><code>[arhichief@arhichief-pc updates]$ file di20_fl_03.upw \ndi20_fl_03.upw: UNIF v-740431636 format NES ROM image\n</code></pre>\nAfter extracting the parts of binary, I found that data after 0x2F2BD4 is an image of the storage with additional software and bash script to run it. Looks like, I found the way how to insert my software into camera.\nUsing <pre><code>dd</code></pre>, I get this part of binary, extract it, add my programs, pack it back and write back into binary file.\n<pre><code>[arhichief@arhichief-pc updates]$ dd conv=notrunc bs=1 if=di20_fl_03.upw skip=3091412 count=7403482 of=fs.sqhsfs\n7403482+0 records in\n7403482+0 records out\n7403482 bytes (7.4 MB, 7.1 MiB) copied, 8.7586 s, 845 kB/s\n\n[arhichief@arhichief-pc updates]$ unsquashfs fs.sqhsfs \nParallel unsquashfs: Using 4 processors\n23 inodes (72 blocks) to write\n\n[=================================================================================================================================================================================================================================================================|] 72/72 100%\n\ncreated 23 files\ncreated 1 directories\ncreated 0 symlinks\ncreated 0 devices\ncreated 0 fifos\n[arhichief@arhichief-pc updates]$ cd squashfs-root/\n[arhichief@arhichief-pc squashfs-root]$ dd if=/dev/random bs=1 of=TEST.FILE count=1258291\n^C234+0 records in\n234+0 records out\n234 bytes copied, 28.535 s, 0.0 kB/s\n\n[arhichief@arhichief-pc updates]$ mksquashfs squashfs-root/ fs.sqhsfs -comp xz -Xdict-size 100% -b 262144\nParallel mksquashfs: Using 4 processors\nCreating 4.0 filesystem on fs.sqhsfs, block size 262144.\n[=================================================================================================================================================================================================================================================================|] 78/78 100%\n\nExportable Squashfs 4.0 filesystem, xz compressed, data block size 262144\n    compressed data, compressed metadata, compressed fragments, compressed xattrs\n    duplicates are removed\nFilesystem size 8529.98 Kbytes (8.33 Mbytes)\n    56.79% of uncompressed filesystem size (15020.30 Kbytes)\nInode table size 494 bytes (0.48 Kbytes)\n    47.23% of uncompressed inode table size (1046 bytes)\nDirectory table size 374 bytes (0.37 Kbytes)\n    87.59% of uncompressed directory table size (427 bytes)\nNumber of duplicate files found 0\nNumber of inodes 25\nNumber of files 24\nNumber of fragments 3\nNumber of symbolic links  0\nNumber of device nodes 0\nNumber of fifo nodes 0\nNumber of socket nodes 0\nNumber of directories 1\nNumber of ids (unique uids + gids) 2\nNumber of uids 1\n    arhichief (1000)\nNumber of gids 1\n    users (100)\n\n[arhichief@arhichief-pc updates]$ dd if=fs.sqhsfs of=di20_fl_03_new.upw conv=notrunc bs=1 seek=3091412\n8736768+0 records in\n8736768+0 records out\n8736768 bytes (8.7 MB, 8.3 MiB) copied, 8.81158 s, 992 kB/s\n</code></pre>\nAfter what I match new firmware update binary with <pre><code>binwalk</code></pre> to make sure, everything is ok.\n<pre><code>[arhichief@arhichief-pc updates]$ binwalk di20_fl_03_new.upw \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n152           0x98            uImage header, header size: 64 bytes, header CRC: 0x863E2566, created: 2014-08-01 04:16:33, image size: 3091196 bytes, Data Address: 0x80008000, Entry Point: 0x80008000, data CRC: 0x3B8FC9B, OS: Linux, CPU: ARM, image type: OS Kernel Image, compression type: none, image name: \"Linux-3.0.8\"\n16243         0x3F73          gzip compressed data, maximum compression, from Unix, NULL date (1970-01-01 00:00:00)\n3091412       0x2F2BD4        Squashfs filesystem, little endian, version 4.0, compression:xz, size: 8734702 bytes, 25 inodes, blocksize: 262144 bytes, created: 2016-06-06 07:46:09\n</code></pre>\nI try to upload new firmware update binary into the camera, but camera return me an error.\nOk. I'd try to search for some solutions and found this. From answers in that thread I get a python script what extract firmware and shows the checksums of firmware parts. Good. This script show me next:\n<pre><code>[arhichief@arhichief-pc updates]$ python2 extract_hikvision_dav_file.py di20_fl_03.upw \nMagic number:    5a4b5356\nHeader checksum: 0000223a\nHeader length:   00000098\nFile number:     00000002\nLanguage:        00000001\nDevice class:    00000002\nCalced checksum: 0000223a\n75496d6167650000000000000000000000000000000000000000000000000000980000003c2b2f001d4e7b18\nFile name:          uImage\nStart:              00000098\nLength:             002f2b3c\nChecksum:           187b4e1d\nCalced checksum:    187b4e1d\n6170702e696d6700000000000000000000000000000000000000000000000000d42b2f00000071003d7de138\nFile name:          app.img\nStart:              002f2bd4\nLength:             00710000\nChecksum:           38e17d3d\nCalced checksum:    38e17d3d\n\n[arhichief@arhichief-pc updates]$ python2 extract_hikvision_dav_file.py di20_fl_03_new.upw \nMagic number:    5a4b5356\nHeader checksum: 0000223a\nHeader length:   00000098\nFile number:     00000002\nLanguage:        00000001\nDevice class:    00000002\nCalced checksum: 0000223a\n75496d6167650000000000000000000000000000000000000000000000000000980000003c2b2f001d4e7b18\nFile name:          uImage\nStart:              00000098\nLength:             002f2b3c\nChecksum:           187b4e1d\nCalced checksum:    187b4e1d\n6170702e696d6700000000000000000000000000000000000000000000000000d42b2f00000071003d7de138\nFile name:          app.img\nStart:              002f2bd4\nLength:             00710000\nChecksum:           38e17d3d\nCalced checksum:    38754ea4\n</code></pre>\nI found that checksums in default and updated firmwares are mismatch. I have some experience in C, so, I decide to rewrite python script in C and modify it so it will correct checksums. Here is my code. So, It works well, I think. The results of python script and my code are same after my code patch checksums. But when I try to upload firmware with corrected checksums into camera, it still return error.\nI don't know what I shall do next, and I think you will give me some advices.\nThanks in advance.\nP.S. Please, sorry for long question. I think you will need to know all my steps to give me correct answer. I think I've made an error some there in it.\n",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "binary-analysis",
        "firmware",
        "binary"
    ],
    "user": "ArhiChief",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [
        {
            "user": "Dmitry Janushkevich",
            "text": "Reverse engineer the updater program which consumes firmware update binaries on the camera; find out which check doesn't pass. Post your findings as the answer here.\n",
            "time": null
        },
        {
            "user": "ArhiChief",
            "text": "Thanks for response. Maybe there is a an information about how to get this binary file structure?\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "download link is dead\n",
            "time": null
        }
    ],
    "answers_data": []
}