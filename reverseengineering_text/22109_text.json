{
    "title": "x86 main preamble makes stack aligned on 32-bytes boundaries",
    "link": "https://reverseengineering.stackexchange.com/questions/22109/x86-main-preamble-makes-stack-aligned-on-32-bytes-boundaries",
    "content": "For the record, I've read all stackexchange relevant answers on the topic (here and here) plus other articles to fully grasp the concepts of memory alignment and CPU natural boundaries.\nBut for some reason, I just can't understand the meaning of the following main preamble (given out by <pre><code>radare2</code></pre>)\n<pre><code>(fcn) sym.main 99\n|   sym.main (int argc, char **argv, char **envp);\n|           ; var int local_78h @ ebp-0x78\n|           ; arg int arg_10h @ ebp+0x10\n|           ; var int local_4h @ esp+0x4\n|           ; DATA XREF from entry0 (0x8048417)\n|           0x0804867d      55             push ebp\n|           0x0804867e      89e5           mov ebp, esp\n|           0x08048680      81ec88000000   sub esp, 0x88\n|           0x08048686      83e4f0         and esp, 0xfffffff0\n|           0x08048689      b800000000     mov eax, 0\n|           0x0804868e      83c00f         add eax, 0xf\n|           0x08048691      83c00f         add eax, 0xf\n|           0x08048694      c1e804         shr eax, 4\n|           0x08048697      c1e004         shl eax, 4\n|           0x0804869a      29c4           sub esp, eax\n</code></pre>\n\nBreakdown\nThere seems to be a local array on the stack frame that takes up  78h = 120d bytes on the stack, indicated by this line :\n<pre><code>|           ; var int local_78h @ ebp-0x78\n</code></pre>\nSo far so good.\nNow the stack pointer is moved to make space for such an array on the stack, manipulating <pre><code>esp</code></pre> to make sure the stack is aligned on 16-bytes boundaries :\n<pre><code>|           0x08048680      81ec88000000   sub esp, 0x88\n|           0x08048686      83e4f0         and esp, 0xfffffff0\n</code></pre>\nWhich effectively makes <pre><code>esp</code></pre> a multiple of at least 16 (least significant nibble zeroed out), but let's for the sake of mathematical rigor say that <pre><code>esp</code></pre> is now a multiple of 16k, with k an arbitrary integer.\nAll this makes perfect sense (see here and here to fully understand the need for 16-bytes stack alignment, having to do with SSE and whatnot).\nNow what I really can't seem to wrap my head around is the relevance of the subsequent instructions :\n<pre><code>|           0x08048689      b800000000     mov eax, 0\n|           0x0804868e      83c00f         add eax, 0xf\n|           0x08048691      83c00f         add eax, 0xf\n|           0x08048694      c1e804         shr eax, 4\n|           0x08048697      c1e004         shl eax, 4\n|           0x0804869a      29c4           sub esp, eax\n</code></pre>\nWhich as far as I could understand :\n1 - Made <pre><code>eax</code></pre> equal to 10h (by the way why all these instructions to get to such a simple result for <pre><code>eax</code></pre> ? Why not just make a <pre><code>mov eax, 0x10</code></pre> ?)\n2 - Subtract that quantity from <pre><code>esp</code></pre>, which is just gonna zero out the least significant 1 bit in <pre><code>esp</code></pre> (given that the first nibble is null anyway) which is just gonna make <pre><code>esp</code></pre> a multiple of 16(k+1), thus making the stack aligned on 32-bytes boundaries if it was aligned on 16-bytes boundaries, or make it aligned on 64-bytes boundaries if it was aligned on 32-bytes boundaries, and so on and so forth. \nWhat do we need that for ?\nIs there something I got wrong in this whole analysis ?\n",
    "votes": "0",
    "answers": 1,
    "views": "254",
    "tags": [
        "disassembly",
        "x86",
        "memory",
        "stack"
    ],
    "user": "programmersn",
    "time": "Sep 12, 2019 at 19:48",
    "comments": [],
    "answers_data": [
        {
            "content": "There seems to be a local array on the stack frame that takes up 78h =\n  120d bytes on the stack, indicated by this line :\n\nno the local var is of type int and it takes 4 bytes on 32 bit machine\nit is located at the address ebp - 0x78\nthe other one is again a int and is located at esp+4\nthe circus is probably some home grown obfuscation may be \nall it does is subtract another 0x10 from esp \nso basically it is sub esp 0x98\nyou can check whats going on by emulating it or single stepping through it\nsimple check using python\n<pre><code>>>> eax = 0\n>>> eax\n0\n>>> eax = eax+0xf\n>>> eax\n15\n>>> eax = eax + 0xf\n>>> eax\n30\n>>> eax = eax >> 4\n>>> eax\n1\n>>> eax = eax << 4\n>>> eax\n16\n>>> hex(eax)\n'0x10'\n>>>\n</code></pre>\nsubtracting is not for alignment as you seem to be confusing it\nsubtracting is making space in stack \nthe alignment is done with and esp,0x.....\n",
            "votes": "2",
            "user": "blabb",
            "time": "Sep 12, 2019 at 19:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "programmersn",
                    "text": "<span class=\"comment-copy\">Fair enough. But then why bother to allocate 98h = 152d  bytes on the stack for two miserable 4-byte integers ?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">cannot infer the reason from the posted snippet may be it is doing some stuff and radare2 didn't find enough evidence to name them as local to the function</span>",
                    "time": null
                }
            ]
        }
    ]
}