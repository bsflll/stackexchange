{
    "title": "Need help with binary file analysis",
    "link": "https://reverseengineering.stackexchange.com/questions/16010/need-help-with-binary-file-analysis",
    "content": "So I'm currently trying to analyze a resource archive file of an old game.\nWhat I got so far\n\nThe file is supposed to represent a \"virtual drive\", the format is called VDRV. This means there are paths listed with offsets and sizes.\nHeader structure is 64 bytes for the game identification (magic number + a whole lot of 0x00), then a uint32 for total file size, then a uint32 for the offset where the first block of data ends\nData follows, the first block takes up more than 90% of archive size. This is where the resources have to be located. This seems to be ciphered/encrypted.\nWhat is left is what I call the \"Resource Table\" - a chain of either 64 or 120 bytes long blocks until the end of file. I believe this is where the paths are registered\n\nSo far, so good. However, this is where it get's tricky. The first twelve bytes of each of those blocks are readable, they are always three uint32.\n\nLength of the block including this int (either 64 or 120)\nSome offset, this seems to link the blocks in a LinkedList style (actually proved that using a small program I wrote).\nOffset of the last 4 bytes of this block.\n\nAnd this is where I'm currently stuck, since the rest seems to be encrypted/ciphered data. I dumped the data from the 64 and 120 long blocks seperately, without those twelve \"header\" bytes. Each block is seperated by line break.\n\nLong Blocks\nSmall Blocks\n\nNow there are obviously some repeated patterns here, so I'm thinking that it might be some XOR-ish cipher, though I haven't been able to figure out a key or even a structure.\nWhat I expect to find in this data\n\nTwo uint32, offset and size\nA string path\nUnused space filled with 0x00\n\nAlso, I know that these (partial) strings should be in there somewhere in some way or another (got those from the executable):\n<pre><code>data\n../../../data/g\ng/img/inv_Lf._img\ng/img/inv_Rt._img\ng/img/inv_All._img\ng/img/mcUse._img\ng/img/mcTalk._img\ng/img/mcTake._img\ng/img/mcLook._img\ng/img/mcArrow._img\ng/img/fntOtherSpeakers._img\ng/img/fntBig._img\ng/img/fntWhite._img\ng/img/fntYellow._img\ng/img/fntGray._img\n</code></pre>\nThat is all I have been able to figure out up to now. Any help in figuring this out would be much appreciated!\nThank you for your time!\nEDIT: Posted the binary in the comments\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "binary-analysis"
    ],
    "user": null,
    "time": "Aug 5, 2017 at 15:05",
    "comments": [
        {
            "user": "julian",
            "text": "Encrypted data will have high entropy (close to 1 when normalized). In other words, encrypted data should look random. Since you did not make the binary available, the only option is making guesses based on eyeballing the ASCII hex dumps of the long and small blocks. My guess is they are not encrypted.\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "did you check xentax for any info on this game?\n",
            "time": null
        },
        {
            "user": "TkTech",
            "text": "What game? Your download is also invalid.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The binary seems to be composed of blocks of <pre><code>zlib</code></pre> compressed data.\n<pre><code>$ binwalk -B vdrv.dat \n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n76            0x4C            Zlib compressed data, best compression\n410855        0x644E7         Zlib compressed data, best compression\n411415        0x64717         Zlib compressed data, best compression\n411833        0x648B9         Zlib compressed data, best compression\n739843        0xB4A03         Zlib compressed data, best compression\n740261        0xB4BA5         Zlib compressed data, best compression\n943653        0xE6625         Zlib compressed data, best compression\n944071        0xE67C7         Zlib compressed data, best compression\n1342964       0x147DF4        Zlib compressed data, best compression\n1343382       0x147F96        Zlib compressed data, best compression\n1715439       0x1A2CEF        Zlib compressed data, best compression\n1715857       0x1A2E91        Zlib compressed data, best compression\n<-snip->\n</code></pre>\n<pre><code>binwalk</code></pre> treats the following bytes as <pre><code>zlib</code></pre> signatures:\n<pre><code>#0    beshort        0x7801        Zlib header, no compression\n0    beshort        0x789c        Zlib compressed data, default compression\n0    beshort        0x78da        Zlib compressed data, best compression\n0    beshort        0x785e        Zlib compressed data, compressed\n</code></pre>\nEntropy plot:\n\nWhen the compressed data at offset <pre><code>4C</code></pre> is decompressed, the result is a binary blob with some image signatures and string data:\n<pre><code> $ binwalk 4C\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n89            0x59            JPEG image data, JFIF standard 1.02\n119           0x77            TIFF image data, big-endian, offset of first image directory: 8\n413           0x19D           JPEG image data, JFIF standard 1.02\n6169          0x1819          Copyright string: \"Copyright Flag\"\n6800          0x1A90          JPEG image data, JFIF standard 1.02\n</code></pre>\n\n<pre><code>Adobe Photoshop 7.0\n2004:10:25 15:02:26\nAdobe_CM\n4Photoshop 3.0\nResolution\nFX Global Lighting Angle\nFX Global Altitude\nPrint Flags\nCopyright Flag\nJapanese Print Flags\nColor Halftone Settings\nColor Transfer Settings\nURL overrides\nICC Untagged Flag\nLayer ID Generator Base\nNew Windows Thumbnail\nVersion compatibility info\nJPEG Quality\n@3$%&C49\n#L#|AJ74N\nM>5..=l5\n/;t>q~{z\n6.r%G60L\n<-snip->\n</code></pre>\nThe presence of readable ASCII strings seems to confirm that the data is compressed and was successfully decompressed. With that being said, <pre><code>binwalk</code></pre> detects roughly 1900 <pre><code>zlib</code></pre> compressed data blocks, with some false positives detected throughout the file. In addition, not all of the compressed blocks may be detected; when I used wxHexEditor to search for byte <pre><code>0x78DA</code></pre>, more than 3000 matches were found. Either that or <pre><code>binwalk</code></pre> augments its signature scan with additional information or heuristics that I am not aware of to reduce false positives.\n\nThe search results differ from the output of the signature scan.\n",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user21123",
                    "text": "<span class=\"comment-copy\">Thank you so much! That's all I need. Still can't figure out the small, second part of the file (\"ResourceTable\"), but that won't be necessary if I can just extract all files</span>",
                    "time": null
                }
            ]
        }
    ]
}