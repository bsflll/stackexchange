{
    "title": "Obtain .exe/.dll/.sys for a given .pdb file",
    "link": "https://reverseengineering.stackexchange.com/questions/15627/obtain-exe-dll-sys-for-a-given-pdb-file",
    "content": "If I have an executable file (let's say ntoskrnl.exe) I can obtain it's .pdb file from Microsoft. Is it possible to do the reverse? If I have a .pdb can I obtain the .exe? Or the only method is to hope it is somewhere on my symbols server and look it up by pdb signature and/or timedate stamp?\n",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "windows",
        "debugging",
        "debugging-symbols"
    ],
    "user": "icebp",
    "time": "Jun 23, 2017 at 8:31",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "You mean like do it automatically?\n",
            "time": null
        },
        {
            "user": "icebp",
            "text": "@PawełŁukasik is there a manual way of doing it?\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "Well, in PDB you have some functiona names and other things that could potentially identify the exe/dll/sys but probably you would have to search for those and hope that you will get some hits as for the dll name.\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "binaries are fetched from symsrv using thier timestamp and size which afaik is not present in pdb   so you may have to grep the dumpbin output of  similar named  binaries  in your local drives and hope for a match  dumpbin /headers c:\\Windows\\System32\\calc.exe | grep -i rsds      4CE7979D cv            21 00053C80    53080    Format: RSDS, {971D2945-E998- 438C-8476-43A9DB39C88E}, 2, calc.pdb  dbh srvind .\\calc.pdb  .\\calc.pdb : 971D2945E998438C847643A9DB39C88E2\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "@blabb you should write a proper answer, this is good info but a little cramped and difficult to interpret like that.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "the binaries (exe , sys , dll ) are fetched from ms symbol servers by their time_date_stamp and size\nthe windbg command !chkimg normally fetches the binaries for minidumps and it uses SymFindFileInPath Function  \nwhich takes three ids which are different for pdbs and binaries you may take a look at the Remarks Section Of the function for the id definition\nthere is no reverse match afaik ie given a pdb you cant retrieve the timestamp and size of the binary which you would require for a successfull retrieval\nonly recourse left is to grep the local drives for similar named binary \nusing dumpbin  and the windbg package tool dbh.exe \nnote there are two pdb in the cache while i have only one binary matching the second pdb in my system note carefully the age is appended to the guid in the srvind output while the age is printed in a seperate line in dump bin out put \nnow that you know the file you can fetch a pristine copy if needed from ms symbols server by dumping the time stamp / size and appending them in to a string and calling httpget with useragent as microsoft-symbol-server (or whatever it is now (my memory of the useragent is several years old grab a network packet for a latest user agent string)\n<pre><code>C:\\>dbh srvind e:\\SYMBOLS\\cdfs.pdb\\6FA7C1B9FB96447B8608B2F31CEADB312\\cdfs.pdb\n\ne:\\SYMBOLS\\cdfs.pdb\\6FA7C1B9FB96447B8608B2F31CEADB312\\cdfs.pdb : 6FA7C1B9FB96447\nB8608B2F31CEADB312\n\nC:\\>dbh srvind e:\\SYMBOLS\\cdfs.pdb\\D457507255544405BD9A5C4D3EBCCBAE2\\cdfs.pdb\n\ne:\\SYMBOLS\\cdfs.pdb\\D457507255544405BD9A5C4D3EBCCBAE2\\cdfs.pdb : D45750725554440\n5BD9A5C4D3EBCCBAE2\n\nC:\\>dumpbin /headers \"c:\\Windows\\System32\\drivers\\cdfs.sys\" | grep -i rsds\n    4A5BBF12 cv            21 000028C0     1CC0    Format: RSDS, {D4575072-5554-\n4405-BD9A-5C4D3EBCCBAE}, 2, cdfs.pdb\n</code></pre>\nhere is a dumpbin versus actual dump and !itoldyouso output \n<pre><code>C:\\>dumpbin /headers \"c:\\Windows\\System32\\drivers\\cdfs.sys\" | grep -i \"size of i\nmage\"\n           16000 size of image\n\nC:\\>dumpbin /headers \"c:\\Windows\\System32\\drivers\\cdfs.sys\" | grep -i date\n        4A5BBF12 time date stamp Tue Jul 14 04:41:14 2009\n\nC:\\>cdb -z c:\\Windows\\System32\\drivers\\cdfs.sys\n\n\n0:000> !itoldyouso cdfs\n\ncdfs.sys\n    Timestamp: 4A5BBF12\n  SizeOfImage: 16000\n          pdb: cdfs.pdb\n      pdb sig: D4575072-5554-4405-BD9A-5C4D3EBCCBAE\n          age: 2\n\nLoaded pdb is e:\\symbols\\cdfs.pdb\\D457507255544405BD9A5C4D3EBCCBAE2\\cdfs.pdb\n\ncdfs.pdb\n      pdb sig: D4575072-5554-4405-BD9A-5C4D3EBCCBAE\n          age: 2\n\nMATCH: cdfs.pdb and cdfs.sys\n</code></pre>\nhere is a network packet header with the latest user agent string for a binary fetch\n<pre><code>{\n\"Host Name\":\"msdl.microsoft.com\",\n\"Method\":\"GET\",\n\"Path\":\"/download/symbols/calc.exe/4CE7979Dc0000/calc.ex_\",\n\"User Agent\":\"Microsoft-Symbol-Server/10.0.0.0\",\n\"Response Code\":\"200\",\n\"Response String\":\"OK\",\n\"Content Type\":\"application/octet-stream\",\n\"Referer\":\"\",\n\"Content Encoding\":\"\",\n\"Transfer Encoding\":\"\",\n\"Server\":\"Microsoft-IIS/8.5\",\n\"Content Length\":\"295985\",\n\"Connection\":\"\",\n\"Cache Control\":\"public\",\n\"Location\":\"\",\n\"Server Time\":\"6/24/2017 4:37:26 PM\",\n\"Expiration Time\":\"\",\n\"Last Modified Time\":\"12/16/2010 8:20:21 AM\",\n\"Cookie\":\"\",\n\"Client Address\":\"xxx.xxx.xx.xx:xxxxx\",\n\"Server Address\":\"204.79.197.219:80\",\n\"Request Time\":\"00:07:23.331\",\n\"Response Time\":\"1444 ms\",\n\"URL\":\"http://msdl.microsoft.com/download/symbols/calc.exe/4CE7979Dc0000/calc.ex_\"\n}\n</code></pre>\nand the timestamp and size details grabbed from list modules output\n<pre><code>0:000> dx -r0 @$lmvmcalc = Debugger.Utility.Control.ExecuteCommand(\"lmvm calc\")\n@$lmvmcalc = Debugger.Utility.Control.ExecuteCommand(\"lmvm calc\")                \n0:000> dx -r0 @$lmvmcalc[8] ; dx -r0 @$lmvmcalc[6]\n@$lmvmcalc[8]    :     ImageSize:        000C0000\n@$lmvmcalc[6]    :     Timestamp:        Sat Nov 20 15:10:45 2010 (4CE7979D)\n</code></pre>\nand a fetch without symsrv.dll using wget and comparing with local file \n<pre><code>C:\\>md testfetchwithwget\n\nC:\\>cd testfetchwithwget\n\nC:\\testfetchwithwget>ls -l\ntotal 0\n</code></pre>\nwgetting with useragent and debug spew on\n<pre><code>C:\\testfetchwithwget>wget -d -c -U=\"Microsoft-Symbol-Server/10.0.0.0\" \"http://msdl.microsoft.com/dow\nnload/symbols/calc.exe/4CE7979Dc0000/calc.ex_\"\nSetting --continue (continue) to 1\nSetting --user-agent (useragent) to =Microsoft-Symbol-Server/10.0.0.0\nDEBUG output created by Wget 1.12.1-dev Mar 04 2010 (mainline-013c8e2f5997) on Windows-MinGW.\n\n--2017-06-24 22:35:20--  http://msdl.microsoft.com/download/symbols/calc.exe/4CE7979Dc0000/calc.ex_\nResolving msdl.microsoft.com... seconds 0.00, 204.79.197.219\nCaching msdl.microsoft.com => 204.79.197.219\nConnecting to msdl.microsoft.com|204.79.197.219|:80... seconds 0.00, connected.\nCreated socket 204.\nReleasing 0x00893e38 (new refcount 1).\n\n---request begin---\nGET /download/symbols/calc.exe/4CE7979Dc0000/calc.ex_ HTTP/1.0\nUser-Agent: =Microsoft-Symbol-Server/10.0.0.0\nAccept: */*\nHost: msdl.microsoft.com\nConnection: Keep-Alive\n\n---request end---\nHTTP request sent, awaiting response...\n---response begin---\nHTTP/1.1 200 OK\nCache-Control: public\nContent-Length: 295985\nContent-Type: application/octet-stream\nLast-Modified: Thu, 16 Dec 2010 08:20:21 GMT\nAccept-Ranges: bytes\nETag: \"7367f914fa9ccb1:0\"\nServer: Microsoft-IIS/8.5\nX-MSEdge-Ref: Ref A: A80831FD9CD34C76B235D9794A671A8B Ref B: BOM02EDGE0109 Ref C: Sat Jun 24 10:05:3\n3 2017 PST\nX-MSEdge-Ref-OriginShield: Ref A: 5B1085618AB14BDBA7B8195D249E26E2 Ref B: BOM01EDGE0317 Ref C: Sat J\nun 24 07:42:52 2017 PST\nDate: Sat, 24 Jun 2017 17:05:33 GMT\nConnection: keep-alive\n\n---response end---\n200 OK\nRegistered socket 204 for persistent reuse.\nLength: 295985 (289K) [application/octet-stream]\nSaving to: `calc.ex_'\n\n100%[==========================================================>] 295,985     15.1K/s   in 25s\n\n2017-06-24 22:35:51 (11.3 KB/s) - `calc.ex_' saved [295985/295985]\n</code></pre>\ncomparing     \n<pre><code>C:\\testfetchwithwget>ls -l\ntotal 292\n-rw-rw-rw-  1 HP 0 295985 2010-12-16 13:50 calc.ex_\n\nC:\\testfetchwithwget>expand -R calc.ex_ calc.exe\nMicrosoft (R) File Expansion Utility  Version 6.1.7600.16385\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nAdding C:\\testfetchwithwget\\calc.exe to Extraction Queue\n\nExpanding Files ....\n\nExpanding Files Complete ...\nCannot expand a file onto itself: calc.exe.\n\n\nC:\\testfetchwithwget>ls -l\ntotal 1052\n-rw-rw-rw-  1 HP 0 295985 2010-12-16 13:50 calc.ex_\n-rwxrwxrwx  1 HP 0 776192 2010-12-15 20:21 calc.exe\n\nC:\\testfetchwithwget>ls -l c:\\Windows\\System32\\calc.exe\n-rwxrwxrwx  2 HP 0 776192 2010-11-20 04:16 c:\\Windows\\System32\\calc.exe\n\nC:\\testfetchwithwget>fc /b  c:\\Windows\\System32\\calc.exe .\\calc.exe\nComparing files C:\\WINDOWS\\SYSTEM32\\calc.exe and .\\CALC.EXE\nFC: no differences encountered\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "Jun 24, 2017 at 17:13",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Haven't tried it, but <pre><code>SymFindExecutableImage</code></pre> might work if the image is present on the symbol server. I know that WinDbg/Visual Studio are able in some cases download images referenced in the crash dumps, and they probably use this or similar function.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 22, 2017 at 16:17",
            "is_accepted": false,
            "comments": [
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">afaik there is no reverse matching from a pdb to binary  windbg !chkimg function retrieves the binary based on the crash dump module timestamp and size  which aren't available in pdb</span>",
                    "time": null
                }
            ]
        }
    ]
}