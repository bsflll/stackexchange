{
    "title": "How can I get the byte size of an operand in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/19843/how-can-i-get-the-byte-size-of-an-operand-in-ida-pro",
    "content": "I am trying to get the byte size of all operands in a given instruction from IDA Pro. At first I tried using <pre><code>GetOperandValue(ea,n)</code></pre> to see how large the value was and calculate how many bytes were necessary to store that value, but it doesn't return leading zeros, which means that it doesn't work.\nNow I am trying to use <pre><code>OpHex(ea,n)</code></pre> to get the answer,  but it's just returning <pre><code>True</code></pre> (as do <pre><code>OpDecimal</code></pre>, <pre><code>OpBinary</code></pre>, and <pre><code>OpOctal</code></pre>).\nHow can I find the number of bytes used for operands of a particular instruction and why is <pre><code>OpHex</code></pre> returning true?\nEdit: My current solution works, but I would still like one that is more technically correct and bulletproof. Right now I am just using <pre><code>GetOperandValue(ea, op)</code></pre> to get both operands for all instructions (even if they have neither or only one) and then checking to make sure the operand value is greater than <pre><code>FF</code></pre>. If It's greater than <pre><code>FF</code></pre> I just assume it is an address, which in this case is four bytes. If both operands meet this condition, I assign the size to be eight bytes.\nThis works for the moment, but will encounter difficulties in eventual moves to other architectures (right now I'm just working with x86-64).\n",
    "votes": "4",
    "answers": 3,
    "views": "2k",
    "tags": [
        "ida",
        "idapython",
        "elf"
    ],
    "user": "theTheodidact",
    "time": "Nov 16, 2018 at 18:49",
    "comments": [
        {
            "user": "pudi",
            "text": "Do you mean a value in an opcode instruction like <pre><code>mov</code></pre> or the size of a data structure to which some pointer is pointing?\n",
            "time": null
        },
        {
            "user": "theTheodidact",
            "text": "The size of the operand(s) in an opcode instruction, not the size to which it is pointing. To recreate the relocation I need to know how many bytes to overwrite with addresses.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Module <pre><code>ida_ua</code></pre> now contains a function <pre><code>get_dtype_size</code></pre>, which seems to implement @WHsT's answer.\nAssuming you have an instruction i, you can use it e.g. like this:\n<pre><code>ida_ua.get_dtype_size(i.Op1.dtype))</code></pre>\n",
            "votes": "1",
            "user": "langlauf.io",
            "time": "Jun 17, 2022 at 15:04",
            "is_accepted": true,
            "comments": [
                {
                    "user": "theTheodidact",
                    "text": "<span class=\"comment-copy\">I no longer have the ability to test this; marking as answered, unless someone tags me in the comments that this doesn't work. Thanks @langlauf.io</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There doesn't seem to be a straightforward way to achieve this. But you can take a look at this page of the IDA SDK documentation.\nAccording to the description of the previous page, we can write a little helper function:\n<pre><code>def size_of_operand(op):\n    tbyte = 8\n    dt_ldbl = 8\n    n_bytes = [ 1, 2, 4, 4, 8,\n            tbyte, -1, 8, 16, -1,\n            -1, 6, -1, 4, 4,\n            dt_ldbl, 32, 64 ]\n    return n_bytes[op.dtype]\n</code></pre>\nNow we can use command like\n<pre><code>insn = idautils.DecodeInstruction(ScreenEA())\nindex_of_operand = 0\nsize_of_operand(insn.Operand[index_of_operand])\n</code></pre>\nto get the size of an operand.\nFor example, for <pre><code>xor al, al</code></pre>, it returns 1. For <pre><code>pop ebp</code></pre>, it returns 4.\nNote: refer to Porting from IDAPython 6.x-7.3, to 7.4\n",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Jul 14, 2023 at 23:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Are You Loooking for some thing like\n<pre><code>Message(\"%s\n\" , GetCurrentLine());\nMessage(\"%x\n\" , ItemSize(ScreenEA()));\n</code></pre>\nthis will give results as below\n<pre><code>.text:010328BB 56                            push    esi\n1\n.text:010328BC BE 10 42 05 01                mov     esi, offset unk_1054210\n5\n.text:010328C1                               cmp     byte_1054309, bl\n6\n.text:010328C1 38 1D 09 43 05 01             cmp     byte_1054309, bl\n6\n</code></pre>\nNote: refer to Porting from IDAPython 6.x-7.3, to 7.4\n",
            "votes": "2",
            "user": "0xC0000022L",
            "time": "Jul 14, 2023 at 23:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Seems the inquirer is only interested in the size of the <i>operands</i>, not the instructions overall. But this is close.</span>",
                    "time": null
                },
                {
                    "user": "theTheodidact",
                    "text": "<span class=\"comment-copy\">Yes, @0xC0000022L is correct.</span>",
                    "time": null
                }
            ]
        }
    ]
}