{
    "title": "How to get opcodes for assembly using ppc processor (IDAPython)",
    "link": "https://reverseengineering.stackexchange.com/questions/8914/how-to-get-opcodes-for-assembly-using-ppc-processor-idapython",
    "content": "In IDAPython, you can obtain the corresponding opcodes for a assembly instruction using the Assemble(ea, line) function.\n\nHere is an example using a PE-file / x86 processor type:\n<pre><code>Python>Assemble(FirstSeg(), 'asdf')\nInvalid mnemonic -> OK\n(False, 'Assembler failed: asdf')\n</code></pre>\nAs we can see, the <pre><code>Assemble</code></pre> call returns <pre><code>False</code></pre> and prints a error message for a invalid mnemonic when using an incorrect assembly instruction like <pre><code>asdf</code></pre>.\nWith a valid assembly instruction, the correct opcode is returned:\n<pre><code>Python>Assemble(FirstSeg(), 'ret')\n(True, '\\xc3')\n</code></pre>\n\nHere is the same function using a PPC-ELF/ppc processor type:\n<pre><code>Python>Assemble(FirstSeg(), 'asdf')\n(True, '\\x00')\n</code></pre>\nAs we can see, no error message is printed and a <pre><code>\\x00</code></pre> is returned as resulting opcode.\nThe valid <pre><code>sc</code></pre> instruction and any other valid ppc instructions return the same (wrong) value of <pre><code>\\x00</code></pre>:\n<pre><code>Python>Assemble(FirstSeg(), 'sc')\n(True, '\\x00')\n</code></pre>\nHow can I get IDAPython's <pre><code>Assemble(ea, line)</code></pre> to return the proper opcodes when using a PPC-ELF/ppc processor type? \nThis is the trace the the function takes:\n\nAssemble(ea, line)\n_Assemble(ea, line)\nidaapi.AssembleLine(ea, cs, ip, use32, line)\n\nAnd a usage example of Assemble(), if it wasn't clear:\nhttps://code.google.com/p/idapython/source/browse/trunk/Scripts/FindInstructions.py\n",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "ida",
        "assembly",
        "idapython"
    ],
    "user": "Zulakis",
    "time": "Dec 16, 2015 at 17:43",
    "comments": [
        {
            "user": "devttys0",
            "text": "IDA doesn't support assembly for all architectures: \"Currently, only the IBM PC processors provide an assembler\" (from hex-rays.com/products/ida/support/idadoc/529.shtml, though that is admittedly old). Are you sure PPC supports this?\n",
            "time": null
        },
        {
            "user": "Zulakis",
            "text": "@devttys0 Oh, this may actually be the reason. I just assumed that assembling would just work, as does disassembling. Is there a technical reason why it wouldn't? Isn't it just the reverse of disassembling, which IDA is already doing? The docs you linked say that <pre><code>plugin writers can extend or totally replace the built-in assembler by writing their own</code></pre>. Adding support for PPC this way would probably take alot of effort, wouldn't it?\n",
            "time": null
        },
        {
            "user": "devttys0",
            "text": "It's up to the developer of the disassembler module to implement an assembler method. Most don't since that's more work and for something that's rarely used. I've written disassembler modules which are a bit of work, but I imagine just overriding the assembler method wouldn't be too much work (disclaimer: I've never done it).\n",
            "time": null
        },
        {
            "user": "tmr232",
            "text": "That said, if you only need it for IDAPython, wrapping GNU's <pre><code>as</code></pre> (or radare2's <pre><code>rasm2</code></pre>) to and creating an equivalent <pre><code>Assemble</code></pre> function should not be that hard.\n",
            "time": null
        }
    ],
    "answers_data": []
}