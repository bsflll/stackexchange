{
    "title": "Insert logging into existing binary code, ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/4404/insert-logging-into-existing-binary-code-arm",
    "content": "I want to add logging to some function(s) in the shared (<pre><code>.so</code></pre>) library. (ARM, Android, a mix of Arm and Thumb modes; C++, some functions are virtual and therefore nameless, invoked via VFT.)\nDoes anyone already have code that does this or almost this? (Adds logging to existing functions.)\n(I am thinking about patching at run-time (on-the-fly), but you may suggest something static.)\nThe procedures usually start with a <pre><code>PUSH</code></pre>/<pre><code>STM</code></pre> instruction, but it's difficult to place a branch into just one instruction, at least in the thumb mode.\nHow do I modify existing procedures?\nOne more issue is to detect code residing in PLT.\nHow do I detect code in PLT, how do I \"dereference\" the plt entry?\nRelated info:\nThe caching issues are discussed here:\nPatching ARM7 code during runtime (but no code at the moment).\nQt-specific stuff: http://www.ntcore.com/files/qtrev.htm or (the same) http://www.codeproject.com/Articles/31330/Qt-Internals-Reversing and about Qt signals&slots.\nAbout printing out RTTI (when it's available, of course).\nUPD: reDroid: reverse-engineering tools for Android NDK/C++/Qt (source at github).\n",
    "votes": "3",
    "answers": 3,
    "views": "2k",
    "tags": [
        "c++",
        "arm",
        "patching"
    ],
    "user": "18446744073709551615",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "The Android Dynamic Binary Instrumentation Toolkit (adbi) should allow you to do what you need to do.\n\nSimple binary instrumentation toolkit for Android ARM + Thumb.\nInstrumentation is based on library injection and hooking function\n  entry points (in-line hooking).\nThe toolkit consists of two main components the hijack tool and the\n  base library.\nhijack\nThe hijack tool provides the injection functionality. It supports a\n  number of modes for supporting older and newer Android devices. hijack\n  provides help on the command line.\nlibbase\nThe base library provides the hooking and unhooking functionality. The\n  base library is compiled as a static library so it can be directly\n  included in the actual instrumentation library. This is done so we can\n  keep everything in /data/local/tmp.\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "May 22, 2014 at 13:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can use Dynamic Binary Instrumentation to achieve what you want as suggested by Jason Geffner.\nYou can use PINdroid by Intel. Read this presentation on Android Binary Instrumentation.\n",
            "votes": "2",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": [
                {
                    "user": "18446744073709551615",
                    "text": "<span class=\"comment-copy\">As to Pin, is there ARM support? <i>Pin is used for the instrumentation of programs. It supports Linux*,Windows*, macOS and  Android* executables for IA-32, and Intel(R) 64.</i></span>",
                    "time": null
                },
                {
                    "user": "john4tech",
                    "text": "<span class=\"comment-copy\">If I'm not wrong then yes, you can use Pindroid for ARM too. I have not used it in Android. But according to me, yes you can. <a href=\"https://software.intel.com/sites/default/files/article/256671/pindroid-tutorial-01_1.pdf\" rel=\"nofollow noreferrer\">Pindroid Tutorial</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "What i usually do, is find a suitable BL or BLX  instruction, and replace it with a BL to my logging code,  at the end of my logginghook, then jump to the original target.\noriginal code:\n<pre><code>MOV R0, #123\nBLX  somefunction\n</code></pre>\nthen in <pre><code>C</code></pre> i write some function:\n<pre><code>int hooksomefunction(int arg)\n{\n     // insert logging code here\n\n     return somefunction(arg);\n}\n</code></pre>\nand change the original code to:\n<pre><code>MOV R0, #123\nBLX  hooksomefunction\n</code></pre>\nOther methods of inserting a call of your own:\n\ninsert your code over some error handling code, which is unlikely to be actually used.\nwrite a jump over some instructions, copy those instructions to the start of your hook, call your logging code, jump back.\n",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "May 22, 2014 at 13:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}