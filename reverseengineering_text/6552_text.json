{
    "title": "Question about interaction between some message-functions()",
    "link": "https://reverseengineering.stackexchange.com/questions/6552/question-about-interaction-between-some-message-functions",
    "content": "i have found the following code sequence in a sample which I try to analyze:\n<pre><code>....\npush offset LibFileName ;    \"KERNEL32.DLL\"\ncall LoadLibraryA\nmov esi, eax\ntest esi, esi\njz short loc_40EDF2\nlea edx, [ebp+var_108]\n...\n...\nmov eax, offset aUmehyJ ; \"UmehyJ{j\"\npush eax                ; lpProcName\npush esi                ; hModule\ncall GetProcAddress_0\n</code></pre>\nSo, I know what the combination of LoadLibrary and GetProcAddress does. But what I do not understand is the following line:\n<pre><code>mov eax, offset aUmehyJ ; \"UmehyJ{j\"\n</code></pre>\nI would say that the process name is somehow encrypted. I searched a little bit and read that XOR-encryption in combination with a loop is frequently used in malware. So, I let IDA PRO search all occurences of a XOR and try to locate of course those with a register-immediate combination, for example xor eax, 12h.\nBut I could not find something like this.\nAfter that, I have read that Base64 encoding is also used in malware. So, I type the string \"UmehyJ{j\" in a online Base64 decoder tool ( http://www.opinionatedgeek.com/dotnet/tools/base64decode/ ) but without success. \nSo, now I am at a point where I do not know how I should make the next steps.\nBecause of that, I hope somebody can help me.\nbest regards,\n",
    "votes": "0",
    "answers": 1,
    "views": "93",
    "tags": [
        "assembly",
        "encryption"
    ],
    "user": "user3097712",
    "time": "Oct 31, 2014 at 15:23",
    "comments": [],
    "answers_data": [
        {
            "content": "Yes, the function name appears to be encrypted.\nYou can double-click on <pre><code>aUmehyJ</code></pre> in IDA to see cross-references to the \"UmehyJ{j\" string: http://resources.infosecinstitute.com/ida-cross-references-xrefs/\nThis will allow you to find what code in the program decrypts the string before it is passed to <pre><code>GetProcAddress()</code></pre>.\nAlternatively, you can open your target in a debugger and place a memory-write hardware-breakpoint on the first byte of the \"UmehyJ{j\" string and wait for the breakpoint to be hit. This will allow you to find the code that decrypts the string.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Oct 31, 2014 at 19:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">yes, I have tried that, too. I marked \"offset UmehyJ{j\" and click Strg+X to get the cross-reference list of offset UmehyJ{j , but in the list the mentioned line with mov eax, offset UmehyJ{j is the only place where that string appears. There is no other reference to it.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Thanks for your comment. I've updated my answer above with an alternative approach.</span>",
                    "time": null
                },
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">hahaha...sometimes I could beat myself for my stupidity. I opened the program with ollydbg, go to mentioned place and then I see that ollydbg shows me the real name of the process. It is \"RegisterServiceProcess\". But thanks for your advice with the breakpoint. IÂ´ve perceived it.</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@user3097712 It's not process, it's address of the procedure. See on <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/ms683212(v=vs.85).aspx\" rel=\"nofollow noreferrer\">MSDN</a></span>",
                    "time": null
                }
            ]
        }
    ]
}