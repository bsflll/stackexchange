{
    "title": "XCHG RAX, RAX: 0x09, what does this code do and how does it work?",
    "link": "https://reverseengineering.stackexchange.com/questions/19735/xchg-rax-rax-0x09-what-does-this-code-do-and-how-does-it-work",
    "content": "Given the following short assembly snippet:\n<pre><code>shr   rax, 3\nadc   rax, 0\n</code></pre>\nI worked this out a bit:\n\nWe know <pre><code>SHR</code></pre> sets the CF with the last bit shifted.\nWe know <pre><code>ADC dest, 0</code></pre> is just adding the CF.\n\nSo looking at the bits,\n<pre><code>        128  64  32  16  8   4   2   1 \n        8    7   6   5   4   3   2   1\n        ------------------------------\n        1    1   1   1   1   CF  X   X\nCF=1 |  0    0   0   1   1   1   1   1  ; shr 3\n</code></pre>\nSo if we div 8 and add the CF the most correct function is something like this,\n<pre><code>def f(x):\n  return x//8  + int( (x//4) % 2 )\n</code></pre>\nWhen would that be useful. Quickly testing it, I can see that I am right. \n<pre><code>rax = 0  -> 0\nrax = 1  -> 0\nrax = 2  -> 0\nrax = 3  -> 0\n\nrax = 4  -> 1\nrax = 7  -> 1\nrax = 8  -> 1\nrax = 11 -> 1\n\nrax = 12 -> 2\nrax = 13 -> 2\nrax = 14 -> 2\nrax = 15 -> 2\nrax = 16 -> 2\nrax = 17 -> 2\nrax = 18 -> 2\nrax = 19 -> 2\n\n...\n\nrax = 20 -> 3\nrax = 28 -> 4\n</code></pre>\nDecompilation with Radare is also not useful here,\n<pre><code>int64_t entry0 (void) {\n    rax >>= 3;\n    __asm (\"adc rax, 0\");\n}\n</code></pre>\nMy questions is, therefore, although I do understand the immediate impact these instructions have on the operand register, what is the higher level meaning of this instruction sequence?\n\nThis is riddle <pre><code>0x09</code></pre> from the XCHG RAX, RAX book.\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "disassembly",
        "assembly",
        "x86",
        "decompilation",
        "x86-64"
    ],
    "user": "Evan Carroll",
    "time": "Oct 26, 2018 at 19:12",
    "comments": [
        {
            "user": "NirIzr",
            "text": "xchg rax,rax's puzzles are indeed nice. Is there a question here, though?\n",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "@NirIzr yes, quite clearly what's the answer to the riddle? \"Riddle\" means there is a something it's trying to demonstrate or do, or it has some utility and there is intent behind it. Any two instructions that the CPU can execute will do something (even if only waste time) why were these two instructions chosen?\n",
            "time": null
        },
        {
            "user": "Evan Carroll",
            "text": "I've figured out what the code does in the machine, but what's the use of that? What useful higher level thing can it be used to do?\n",
            "time": null
        },
        {
            "user": "Ben Voigt",
            "text": "Please put the thing you're asking about (<pre><code>shr</code></pre> and <pre><code>adc</code></pre> into the same register) in the title, not a book title.  Book title in the question body is plenty to make searches work.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The <pre><code>shr rax, 3</code></pre> is an unsigned divide by 8 with truncation towards zero. The inclusion of the <pre><code>adc rax, 0</code></pre> makes the division round to nearest  instead. (Though 0.5 will always be rounded up)\nSo this operation sets <pre><code>RAX</code></pre> to \n\n1 if <pre><code>RAX</code></pre> is in the range of <pre><code>[4-11]</code></pre> (<pre><code>8*1 ±4</code></pre>)\n2 if <pre><code>RAX</code></pre> is in the range of <pre><code>[12-20]</code></pre> (<pre><code>8*2 ±4</code></pre>)\n3 if <pre><code>RAX</code></pre> is in the range of <pre><code>[20-27]</code></pre> (<pre><code>8*3 ±4</code></pre>)\n\nYou can simplify this further by reducing the shift to 1.\n<pre><code>mov rax, 47  ; (remember 47/2 is 23.5)\nshr rax, 1   ; rax = 23\nadc rax, 0   ; rax = 24\n</code></pre>\nIf we do it again,\n<pre><code>mov rax, 46  ; (remember 46/2 is 23)\nshr rax, 1   ; rax = 23\nadc rax, 0   ; rax = 23\n</code></pre>\n",
            "votes": "7",
            "user": "Evan Carroll",
            "time": "Oct 26, 2018 at 20:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">That's exactly what's happening. I had considered the case of truncate-to-zero, and round-up. but I had not considered the case of nearest.</span>",
                    "time": null
                }
            ]
        }
    ]
}