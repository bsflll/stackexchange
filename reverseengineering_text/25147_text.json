{
    "title": "dereferencing structure members",
    "link": "https://reverseengineering.stackexchange.com/questions/25147/dereferencing-structure-members",
    "content": "I am reading a book on reversing and I am curious about one of the assembly snippet i have read in it.\nThere is a simple disassembly of the function RtlNumberGenericTableElements and it looks like this:\n<pre><code>push ebp\nmov ebp, esp\nmov eax, dword ptr [ebp+8]\nmov eax, dword ptr [eax+14]\npop ebp\nret 4\n</code></pre>\nAnd it occured to me, say there is a member of a structure that is a pointer to some other structure. How would I go about dereferencing that member?\n<pre><code>struct example {\n  int member1;\n  *object member2;\n};\n</code></pre>\nWould I be dereferencing member 2 like so (pointer to struct comes as first param):\n<pre><code>mov eax, [ebp+8]\nmov eax, dword ptr [eax]\nmov eax, [eax+8] ; this would get me the pointer to member2???\n</code></pre>\nany input appreciated\nEDIT:\nI see, your explanation was understandable, thank you, I appreciate it.\nI have one more question that popped up from my mind. Say in your example, member 2 is a pointer to an int, then \n<pre><code>mov eax, [ebp + 8] ; eax contains pointer to struct and its first member\nmov eax, [eax + 4] ; eax contains a pointer to member2 (this is a pointer to an int)\n</code></pre>\nSay i would like to get the value of member to into ecx i would carry on like this:\n<pre><code>mov eax, [eax]\nmov ecx, [eax]\n</code></pre>\nSo the whole thing would read like so:\n<pre><code>mov eax, [ebp + 8] ; eax contains pointer to struct and its first member\nmov eax, [eax + 4] ; eax contains a pointer to member2 (this is a pointer to an int)\nmov eax, [eax]     ; dereferenfce the pointer that is pointing to member2\nmov ecx, [eax]     ; dereference member2 itself that is a pointer to an int\n</code></pre>\nIs this correct?\n",
    "votes": "0",
    "answers": 1,
    "views": "217",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "geo10",
    "time": "May 29, 2020 at 13:30",
    "comments": [],
    "answers_data": [
        {
            "content": "After compilation, a pointer to a C struct will be pointing to its first element. In your example, <pre><code>[ebp + 8]</code></pre> is a pointer to <pre><code>member1</code></pre> and you can access a pointer to <pre><code>member2</code></pre> like this: \n<pre><code>mov eax, [ebp + 8] ; eax contains pointer to struct and its first member\nmov eax, [eax + 4] ; eax contains a pointer to member2\n</code></pre>\nWhen in any doubt, you can always write a simple program, compile it and check the resulting assembler code. In your case, you could write something like this:\n<pre><code>#include <stdio.h>\n\nstruct example\n{\n    int member1;\n    void* member2;\n};\n\n\nvoid initialiseStruct(struct example* e)\n{\n    e->member1 = 1;\n    e->member2 = NULL;\n}\n\nint main()\n{\n    struct example e;\n    initialiseStruct(&e);\n    return 0;\n}\n</code></pre>\nAnd then compile it and run <pre><code>objdump -dM intel FILENAME</code></pre> to get a snippet like the following one:\n<pre><code>0000054d <initialiseStruct>:\n 54d:   55                      push   ebp\n 54e:   89 e5                   mov    ebp,esp\n 550:   e8 6b 00 00 00          call   5c0 <__x86.get_pc_thunk.ax>\n 555:   05 83 1a 00 00          add    eax,0x1a83\n 55a:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 55d:   c7 00 01 00 00 00       mov    DWORD PTR [eax],0x1 ; e->member1 = 1\n 563:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 566:   c7 40 04 00 00 00 00    mov    DWORD PTR [eax+0x4],0x0 ; e->member2 = NULL\n 56d:   90                      nop\n 56e:   5d                      pop    ebp\n 56f:   c3                      ret  \n</code></pre>\nRegarding your second question: you should view <pre><code>[]</code></pre> in assembly like <pre><code>*</code></pre> in C in case of <pre><code>mov</code></pre>. \nIf <pre><code>member2</code></pre> points to <pre><code>int</code></pre>, you can access this integer this way (I've added C equivalents next to each assembly instruction):\n<pre><code>mov eax, [ebp + 8] ; eax = e - remember, in my example e is a pointer\nmov eax, [eax + 4] ; eax = *(e + 4) = e->member2, so now eax contains the memory address at e->member2\nmov ecx, [eax] ; ecx = *(e->member2) - ecx contains the integer value\n</code></pre>\n",
            "votes": "0",
            "user": "bart1e",
            "time": "May 29, 2020 at 13:16",
            "is_accepted": true,
            "comments": []
        }
    ]
}