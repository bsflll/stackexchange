{
    "title": "Why eax is assigned to 'variable looked' like addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/26911/why-eax-is-assigned-to-variable-looked-like-addresses",
    "content": "<pre><code>#include <stdio.h>\nint main() {\n\n    int number1, number2, sum;\n\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &number1, &number2);\n\n    \n    sum = number1 + number2;\n\n    \n    printf(\"%d + %d = %d\", number1, number2, sum);\n    return 0;\n}\n</code></pre>\nSo this is my simple C code and it has only three variables only but when I'm debugging it in disassembly the value of <pre><code>eax</code></pre> is also copying in other 'variable looked' like r/m32 addresses, I can't figure out why it is doing this. It can't be compiler generated code because I've switched off those options.\n\nHere's the starting disassembly see the value of <pre><code>eax</code></pre> is going to variables (<pre><code>sum</code></pre>, <pre><code>number2</code></pre>, <pre><code>number1</code></pre>) but why it is going to <pre><code>[ebp-18h]</code></pre> and so on. Also these <pre><code>[ebp-18h]</code></pre> is not used in any other place in disassembly. It's just shown here.\nAnd other question is why <pre><code>0CCCCCCCCC</code></pre> is moved into <pre><code>eax</code></pre>.\n",
    "votes": "1",
    "answers": 2,
    "views": "186",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "debugging",
        "x86"
    ],
    "user": "Ramesses II",
    "time": "Jan 31, 2021 at 10:43",
    "comments": [
        {
            "user": "Ramesses II",
            "text": "see the adresses like [ebp-18h] and so on... are these variables???\n",
            "time": null
        },
        {
            "user": "Ramesses II",
            "text": "Plus these r/m32 address aren't used in any other place but only here.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Hi, would be great if you could substitute the image for a textual representation of the assembly. It's better for search engines.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "From the looks of it that's an easy one. Yes, these are variables on the stack and the magic number in EAX is used to denote uninitialized values. Quote:\n\n<pre><code>CCCCCCCC</code></pre> Used by Microsoft's C++ debugging runtime library and many DOS environments to mark uninitialized stack memory. CC resembles the opcode of the INT 3 debug breakpoint interrupt on x86 processors.\n\nSo in all likelihood you built a debug configuration with MSVC.\n",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "Jan 31, 2021 at 10:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ramesses II",
                    "text": "<span class=\"comment-copy\">So you mean the value assigned to these r/m32 addresses is due to debug configuration with MSVC? I don't find the purpose why the values are being assigned to these r/m32 addresses.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@RamessesII correct. The idea behind these is in all likelihood to provide a visual help to the developer. Also in the past it likely would have caused the debugger to trip upon uninitialized data on the stack which happened to be executed in error cases (the last part is more or less a guess from me).</span>",
                    "time": null
                },
                {
                    "user": "Ramesses II",
                    "text": "<span class=\"comment-copy\">Well! Sir Thank you so much! ðŸ˜ƒ</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">since post msvc 20xx iirc this pattern filling has been replaced by Security Cookies and such for example 2017 community will not emit this pattern filling is your msvc version relatively new ? or is it clang mingw ,others</span>",
                    "time": null
                },
                {
                    "user": "Ramesses II",
                    "text": "<span class=\"comment-copy\">I'm using Visual Studio 2017 community version</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "if visual studio 2017 community is generating  the pattern fill\nthen compiler option /RTCsu is being used\nthis also switches on Incremental linking  (*.ilk files will be generated)\nearlier versions of compiler used /GZ option which if used now will generate a deprecation warning\nyour code is also not using scanf_s a secure version of vulnerable scanf();\nthat should also generate a warning\nshown below is the warning and pattern filling and alternate /RTC1 or RTCsu suggestion by compiler\nyour code\n<pre><code>:\\>type magic.cpp\n#include <stdio.h>\nint main() {\n    int number1, number2, sum;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &number1, &number2);\n    sum = number1 + number2;\n    printf(\"%d + %d = %d\", number1, number2, sum);\n    return 0;\n}\n:\\>dir /b\nmagic.cpp\n</code></pre>\ncompiled with /GZ\n<pre><code>:\\>cl /Zi /GZ magic.cpp\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.16.27035 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\ncl : Command line warning D9035 : option 'GZ' has been deprecated and will be removed in a future release\ncl : Command line warning D9036 : use 'RTC1' instead of 'GZ'\nmagic.cpp\nMicrosoft (R) Incremental Linker Version 14.16.27035.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:magic.exe\n/debug\nmagic.obj\n</code></pre>\ndisassembly showing pattern filling and other stack checking constructs like RTCCheckESP\n<pre><code>:\\>cdb -c \"uf magic!main;q\" magic.exe | awk \"/Reading/,/quit/\"\n0:000> cdb: Reading initial command 'uf magic!main;q'\n*** WARNING: Unable to verify checksum for magic.exe\nmagic!main:\n00d37a70 55              push    ebp\n00d37a71 8bec            mov     ebp,esp\n00d37a73 83ec1c          sub     esp,1Ch\n00d37a76 b8cccccccc      mov     eax,0CCCCCCCCh <<<<<<<<<<\n00d37a7b 8945e4          mov     dword ptr [ebp-1Ch],eax\n00d37a7e 8945e8          mov     dword ptr [ebp-18h],eax\n00d37a81 8945ec          mov     dword ptr [ebp-14h],eax\n00d37a84 8945f0          mov     dword ptr [ebp-10h],eax\n00d37a87 8945f4          mov     dword ptr [ebp-0Ch],eax\n00d37a8a 8945f8          mov     dword ptr [ebp-8],eax\n00d37a8d 8945fc          mov     dword ptr [ebp-4],eax\n00d37a90 6850aed900      push    offset magic!__xt_z+0x108 (00d9ae50)\n00d37a95 e8b799ffff      call    magic!ILT+1100(_printf) (00d31451)\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n00d37ae0 e834b8ffff      call    magic!ILT+8980(_RTC_CheckStackVars (00d33319) <<<<<<<\n00d37ae5 58              pop     eax\n00d37ae6 5a              pop     edx\n00d37ae7 83c41c          add     esp,1Ch\n00d37aea 3bec            cmp     ebp,esp\n00d37aec e8bbb6ffff      call    magic!ILT+8615(__RTC_CheckEsp) (00d331ac) <<<<<<<<<<<<\n00d37af1 8be5            mov     esp,ebp\n00d37af3 5d              pop     ebp\n00d37af4 c3              ret\nquit:\n</code></pre>\n",
            "votes": "2",
            "user": "blabb",
            "time": "Feb 2, 2021 at 11:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ramesses II",
                    "text": "<span class=\"comment-copy\">Helpful! You people are really generous in sharing knowledge! Thank you ðŸ˜Š, This platform is really beginner friendly also! ðŸ”¥</span>",
                    "time": null
                }
            ]
        }
    ]
}