{
    "title": "router: how to break into boot?",
    "link": "https://reverseengineering.stackexchange.com/questions/21993/router-how-to-break-into-boot",
    "content": "I have an ISP-provided router, Huawei B5318-42. I connected to it through UART and a UART-USB converter, copied the output from boot, and managed to figure out which chip is the onboard flash memory. By putting a jumper connected to onboard VCC on the flash memory, I am able stop boot at certain points w/o it being able to recover or continue, but that hasn't helped me get a shell. There is a point at boot (#Reset_MT7530) where there is a timer and four options (one of which is command prompt!) but I cannot choose anything.\nThis is what I have so far:\nFlash memory data sheet: http://static6.arrow.com/aropdfconversion/ad37e5e560057875befe533ab753d2eb5063011f/125413166402097mx25l25635f203v20256mb20v1.5.pdf\nI know it runs BusyBox and vPort Release +D2Tech+ VPORT_R_1_6_91 based on boot sequence.\nIt is MIPS architercture.\nRaw output after pressing reset on the router:\n<pre><code>    press for several seconds\nralink_gpio: sending a SIGUSR2 to process 332\n[Reboot.sh]: start reboot......\nunkown led action\n[CM]:send reboot msg to ODU.\n[CM]:send msg magic:0xaabbccdd, class:0x80, msgtype:0x40.\npress for several seconds\nralink_gpio: sending a SIGUSR2 to process 332\n[CM]:send reboot msg to ODU.\n[CM]:send reboot msg to ODU.\n[Reboot.sh]: start reboot......\nunkown led action\n[CM]:send msg magic:0xaabbccdd, class:0x80, msgtype:0x40.\n1 /sbin/miniupnpd.sh remove && at^tmode=3\n[CM]:send reboot msg to ODU.\n[CM]:send reboot msg to ODU.\n1 /sbin/miniupnpd.sh remove && at^tmode=3\n[CM]:send reboot msg to ODU.\nmodem have no response.\nusb 2-1: USB disconnect, device number 2\nusb 2-1: [DBG HUB]Lock device done, device number 2\nusb 2-1: [DBG HUB]mutex_lock hcd->bandwidth_mutex done, device number 2\nusb 2-1: [DBG MESSAGE]set all interface unregister 2\nusb 2-1: [DBG MESSAGE]remove interface 0\nusb 2-1: [DBG MESSAGE]device delete interface 0\neth_data: unregister 'huawei_ether', usb-xhc_mtk-1, Huawei Ethernet Device\nusb 2-1: [DBG MESSAGE]remove interface 1\nusb 2-1: [DBG MESSAGE]device delete interface 1\neth_voip: unregister 'huawei_ether', usb-xhc_mtk-1, Huawei Ethernet Device\nusb 2-1: [DBG MESSAGE]remove interface 2\nusb 2-1: [DBG MESSAGE]device delete interface 2\neth_tr069: unregister 'huawei_ether', usb-xhc_mtk-1, Huawei Ethernet Device\nusb 2-1: [DBG MESSAGE]remove interface 3\nusb 2-1: [DBG MESSAGE]device delete interface 3\nusbcomm0: unregister 'huawei_ether', usb-xhc_mtk-1, Huawei Ethernet Device\nfxz-hw_stop: called\nusb 2-1: [DBG MESSAGE]remove interface 4\nusb 2-1: [DBG MESSAGE]device delete interface 4\noption1 ttyUSB0: GSM modem (1-port) converter now disconnected from ttyUSB0\noption 2-1:1.4: device disconnected\n\n\nOK\n\n\nusb 2-1: [DBG MESSAGE]remove interface 5\nusb 2-1: [DBG MESSAGE]device delete interface 5\noption1 ttyUSB1: GSM modem (1-port) converter now disconnected from ttyUSB1\noption 2-1:1.5: device disconnected\nusb 2-1: [DBG MESSAGE]remove interface 6\nusb 2-1: [DBG MESSAGE]device delete interface 6\noption1 ttyUSB2: GSM modem (1-port) converter now disconnected from ttyUSB2\noption 2-1:1.6: device disconnected\nusb 2-1: [DBG MESSAGE]remove interface 7\nusb 2-1: [DBG MESSAGE]device delete interface 7\noption1 ttyUSB3: GSM modem (1-port) converter now disconnected from ttyUSB3\noption 2-1:1.7: device disconnected\nusb 2-1: [DBG MESSAGE]remove all interface_ep_devs 2\nusb 2-1: [DBG MESSAGE]set all interface NULL 2\nusb 2-1: [DBG MESSAGE]set device state ADDRESS done 2\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nxhc_mtk xhc_mtk: [MTK]Doesn't find ep_sch instance when removing endpoint\nusb 2-1: [DBG HUB]usb_disable_device done, device number 2\nusb 2-1: [DBG HUB]mutex_unlock hcd->bandwidth_mutex done, device number 2\nusb 2-1: [DBG HUB]usb_remove_ep_devs done, device number 2\nusb 2-1: [DBG HUB]usb_unlock_device done, device number 2\n[ModemReboot]: usb net disconnect.\nVAPP is shuting down\nvapp_sip_manage.c 131: Stopping SIP\n[ 3: 7:54.621340][LCM]:signal 15 exit.\n[CM]:cm process is killed:15\n[CM]:send reboot msg to ODU.\nSHUTDOWN - _VAPP_mgmtEventWriteTask\n[CM]:send reboot msg to ODU.\nSHUTDOWN - sipUaHandlerTask. infc:0\nStopped WatchDog Timer.\nRestarting system.\n\n\n===================================================================\n\n            MT7621   stage1 code Mar 12 2015 14:43:30 (ASIC)\n\n            CPU=500000000 HZ BUS=166666666 HZ\n\n==================================================================\n\nChange MPLL source from XTAL to CR...\n\ndo MEMPLL setting..\n\nMEMPLL Config : 0x11000000\n\n3PLL mode + External loopback\n\n=== XTAL-40Mhz === DDR-1200Mhz ===\n\nPLL2 FB_DL: 0x6, 1/0 = 584/440 19000000\n\nPLL3 FB_DL: 0xf, 1/0 = 577/447 3D000000\n\nPLL4 FB_DL: 0x14, 1/0 = 589/435 51000000\n\ndo DDR setting..[01F40000]\n\nApply DDR3 Setting...(use default AC)\n\n          0    8   16   24   32   40   48   56   64   72   80   88   96  104  112  120\n\n      --------------------------------------------------------------------------------\n\n0000:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0001:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0002:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0003:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0004:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0005:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0006:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0007:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0008:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0009:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n000A:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n000B:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n000C:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n000D:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    1\n\n000E:|    0    0    0    0    0    0    0    0    0    1    1    1    1    1    1    1\n\n000F:|    0    0    0    0    1    1    1    1    1    1    1    1    1    1    0    0\n\n0010:|    1    1    1    1    1    1    1    1    1    0    0    0    0    0    0    0\n\n0011:|    1    1    1    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0012:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0013:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0014:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0015:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0016:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0017:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0018:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n0019:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n001A:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n001B:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n001C:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n001D:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n001E:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\n001F:|    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n\nDRAMC_DQSCTL1[0e0]=13000000\n\nDRAMC_DQSGCTL[124]=80000033\n\nrank 0 coarse = 15\n\nrank 0 fine = 72\n\nB:|    0    0    0    0    0    0    0    0    0    0    1    1    1    0    0    0\n\nopt_dle value:11\n\nDRAMC_DDR2CTL[07c]=C287223D\n\nDRAMC_PADCTL4[0e4]=000022B3\n\nDRAMC_DQIDLY1[210]=0C0B070B\n\nDRAMC_DQIDLY2[214]=07090909\n\nDRAMC_DQIDLY3[218]=0D0A0909\n\nDRAMC_DQIDLY4[21c]=0B080C0A\n\nDRAMC_R0DELDLY[018]=0000211F\n\n==================================================================\n\n        RX  DQS perbit delay software calibration \n\n==================================================================\n\n1.0-15 bit dq delay value\n\n==================================================================\n\nbit|     0  1  2  3  4  5  6  7  8  9\n\n--------------------------------------\n\n0 |    11 7 11 11 9 9 9 7 7 7 \n\n10 |    8 9 9 11 7 11 \n\n--------------------------------------\n\n\n\n\n==================================================================\n\n2.dqs window\n\nx=pass dqs delay value (min~max)center \n\ny=0-7bit DQ of every group\n\ninput delay:DQS0 =31 DQS1 = 33\n\n==================================================================\n\nbit DQS0     bit      DQS1\n\n0  (1~62)31  8  (1~62)31\n\n1  (1~62)31  9  (1~62)31\n\n2  (1~62)31  10  (1~62)31\n\n3  (1~59)30  11  (0~58)29\n\n4  (1~62)31  12  (1~63)32\n\n5  (1~62)31  13  (1~64)32\n\n6  (1~62)31  14  (0~65)32\n\n7  (1~62)31  15  (2~64)33\n\n==================================================================\n\n3.dq delay value last\n\n==================================================================\n\nbit|    0  1  2  3  4  5  6  7  8   9\n\n--------------------------------------\n\n0 |    11 7 11 12 9 9 9 7 9 9 \n\n10 |    10 13 10 12 8 11 \n\n==================================================================\n\n==================================================================\n\n     TX  perbyte calibration \n\n==================================================================\n\nDQS loop = 15, cmp_err_1 = ffff0000 \n\ndqs_perbyte_dly.last_dqsdly_pass[0]=15,  finish count=1 \n\ndqs_perbyte_dly.last_dqsdly_pass[1]=15,  finish count=2 \n\nDQ loop=15, cmp_err_1 = ffff0000\n\ndqs_perbyte_dly.last_dqdly_pass[0]=15,  finish count=1 \n\ndqs_perbyte_dly.last_dqdly_pass[1]=15,  finish count=2 \n\nbyte:0, (DQS,DQ)=(8,8)\n\nbyte:1, (DQS,DQ)=(8,8)\n\nDRAMC_DQODLY1[200]=88888888\n\nDRAMC_DQODLY2[204]=88888888\n\n20,data:88\n\n[EMI] DRAMC calibration passed\n\n\n\n\n===================================================================\n\n            MT7621   stage1 code done \n\n            CPU=500000000 HZ BUS=166666666 HZ\n\n===================================================================\n\n\n\nU-Boot 1.1.3 (Oct 20 2016 - 14:48:59)\n\n\nBoard: Ralink APSoC DRAM:  128 MB\n\nrelocate_code Pointer at: 87fb8000\n\n\nConfig XHCI 40M PLL \n\n******************************\n\nSoftware System Reset Occurred\n\n******************************\n\nflash manufacture id: c2, device id 20 19\n\nfind flash: MX25L25635E\n\n*** Warning - bad CRC, using default environment\n\n\n============================================ \n\nRalink UBoot Version: 4.3.0.0\n\n-------------------------------------------- \n\nASIC MT7621A DualCore (MAC to MT7530 Mode)\n\nDRAM_CONF_FROM: Auto-Detection \n\nDRAM_TYPE: DDR3 \n\nDRAM bus: 16 bit\n\nXtal Mode=5 OCP Ratio=1/3\n\nFlash component: SPI Flash\n\nDate:Oct 20 2016  Time:14:48:59\n\n============================================ \n\nicache: sets:256, ways:4, linesz:32 ,total:32768\n\ndcache: sets:256, ways:4, linesz:32 ,total:32768 \n\n\n ##### The CPU freq = 880 MHZ #### \n\n estimate memory size =128 Mbytes\n\n#Reset_MT7530\n\n\nPlease choose the operation: \n\n   1: Load system code to SDRAM via TFTP. \n\n   2: Load system code then write to Flash via TFTP. \n\n   3: Boot system code via Flash (default).\n\n   4: Entr boot command line interface.\n\n   7: Load Boot Loader code then write to Flash via Serial. \n\n   9: Load Boot Loader code then write to Flash via TFTP. \n\n 4  3  2  1  0 \n\n\n\n3: System Boot system code via Flash[1st image].\n\n## Booting image at bc050000 ...\n\nSkip checking image magic number\n\n   Image Name:   \n\n   Image Type:   MIPS Linux Kernel Image (lzma compressed)\n\n   Data Size:    9748152 Bytes =  9.3 MB\n\n   Load Address: 80001000\n\n   Entry Point:  8000d210\n\n   Verifying Checksum ... OK\n\n   Uncompressing Kernel Image ... OK\n\nNo initrd\n\n## Transferring control to Linux (at address 8000d210) ...\n\n## Giving linux memsize in MB, 128\n\n\nStarting kernel ...\n\n\n\n\nLINUX started...\n\n THIS IS ASIC\nLinux version 2.6.36 (root@pesi-xian) (gcc version 4.6.3 (Buildroot 2012.11.1) ) #1 SMP PREEMPT Thu Dec 15 16:55:50 CST 2016\n\n The CPU feqenuce set to 880 MHz\nGCMP present\nCPU revision is: 0001992f (MIPS 1004Kc)\nSoftware DMA cache coherency\nDetermined physical RAM map:\n memory: 08000000 @ 00000000 (usable)\nInitrd not found or empty - disabling initrd\nZone PFN ranges:\n  Normal   0x00000000 -> 0x00008000\nMovable zone start PFN for each node\nearly_node_map[1] active PFN ranges\n    0: 0x00000000 -> 0x00008000\nDetected 3 available secondary CPU(s)\nPERCPU: Embedded 7 pages/cpu @81103000 s7424 r8192 d13056 u65536\npcpu-alloc: s7424 r8192 d13056 u65536 alloc=16*4096\npcpu-alloc: [0] 0 [0] 1 [0] 2 [0] 3 \nBuilt 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512\nKernel command line: console=ttyS1,57600n8 root=/dev/ram0 console=ttyS1,57600 root=/dev/ram0 rootfstype=squashfs,jffs2 isolcpus=1\nPID hash table entries: 512 (order: -1, 2048 bytes)\nDentry cache hash table entries: 16384 (order: 4, 65536 bytes)\nInode-cache hash table entries: 8192 (order: 3, 32768 bytes)\nPrimary instruction cache 32kB, VIPT, , 4-waylinesize 32 bytes.\nPrimary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes\nMIPS secondary cache 256kB, 8-way, linesize 32 bytes.\nWriting ErrCtl register=00008001\nReadback ErrCtl register=00008001\nMemory: 115720k/131072k available (4558k kernel code, 15352k reserved, 1583k data, 7568k init, 0k highmem)\nHierarchical RCU implementation.\n    Verbose stalled-CPUs detection is disabled.\nNR_IRQS:128\nTrying to install interrupt handler for IRQ24\nTrying to install interrupt handler for IRQ25\nTrying to install interrupt handler for IRQ22\nTrying to install interrupt handler for IRQ9\nTrying to install interrupt handler for IRQ10\nTrying to install interrupt handler for IRQ11\nTrying to install interrupt handler for IRQ12\nTrying to install interrupt handler for IRQ13\nTrying to install interrupt handler for IRQ14\nTrying to install interrupt handler for IRQ16\nTrying to install interrupt handler for IRQ17\nTrying to install interrupt handler for IRQ18\nTrying to install interrupt handler for IRQ19\nTrying to install interrupt handler for IRQ20\nTrying to install interrupt handler for IRQ21\nTrying to install interrupt handler for IRQ23\nTrying to install interrupt handler for IRQ26\nTrying to install interrupt handler for IRQ27\nTrying to install interrupt handler for IRQ28\nTrying to install interrupt handler for IRQ15\nTrying to install interrupt handler for IRQ8\nTrying to install interrupt handler for IRQ29\nTrying to install interrupt handler for IRQ30\nTrying to install interrupt handler for IRQ31\nconsole [ttyS1] enabled\nCalibrating delay loop... 577.53 BogoMIPS (lpj=1155072)\npid_max: default: 32768 minimum: 301\nMount-cache hash table entries: 512\nlaunch: starting cpu1\nlaunch: cpu1 gone!\nCPU revision is: 0001992f (MIPS 1004Kc)\nPrimary instruction cache 32kB, VIPT, , 4-waylinesize 32 bytes.\nPrimary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes\nMIPS secondary cache 256kB, 8-way, linesize 32 bytes.\nlaunch: starting cpu2\nlaunch: cpu2 gone!\nCPU revision is: 0001992f (MIPS 1004Kc)\nPrimary instruction cache 32kB, VIPT, , 4-waylinesize 32 bytes.\nPrimary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes\nMIPS secondary cache 256kB, 8-way, linesize 32 bytes.\nlaunch: starting cpu3\nlaunch: cpu3 gone!\nCPU revision is: 0001992f (MIPS 1004Kc)\nPrimary instruction cache 32kB, VIPT, , 4-waylinesize 32 bytes.\nPrimary data cache 32kB, 4-way, PIPT, no aliases, linesize 32 bytes\nMIPS secondary cache 256kB, 8-way, linesize 32 bytes.\nBrought up 4 CPUs\nSynchronize counters across 4 CPUs: done.\nNET: Registered protocol family 16\nrelease PCIe RST: RALINK_RSTCTRL = 7000000\nPCIE PHY initialize\n***** Xtal 40MHz *****\nstart MT7621 PCIe register access\nRALINK_RSTCTRL = 7000000\nRALINK_CLKCFG1 = 77ffeff8\n\n*************** MT7621 PCIe RC mode *************\nPCIE0 no card, disable it(RST&CLK)\nPCIE1 no card, disable it(RST&CLK)\nPCIE2 no card, disable it(RST&CLK)\npcie_link status = 0x0\nRALINK_RSTCTRL= 0\nbio: create slab <bio-0> at 0\nvgaarb: loaded\nSCSI subsystem initialized\nusbcore: registered new interface driver usbfs\nusbcore: registered new interface driver hub\nusbcore: registered new device driver usb\nSwitching to clocksource Ralink Systick timer\nusbcore: registered new interface driver huawei_ether\nNET: Registered protocol family 2\nIP route cache hash table entries: 1024 (order: 0, 4096 bytes)\nTCP established hash table entries: 4096 (order: 3, 32768 bytes)\nTCP bind hash table entries: 4096 (order: 3, 32768 bytes)\nTCP: Hash tables configured (established 4096 bind 4096)\nTCP reno registered\nUDP hash table entries: 128 (order: 0, 4096 bytes)\nUDP-Lite hash table entries: 128 (order: 0, 4096 bytes)\nNET: Registered protocol family 1\ncu: Got hangup signal\nConnected.\nConnected.\n\nDisconnected.\n</code></pre>\nDo I stop boot at a certain point, by pointing a voltage or ground to the pins of the flash memory? Soldering the flash memory off the board is also an option but way too extreme for me to attempt this early on. \nAny and all help is appreciated.\n",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "firmware",
        "memory",
        "hardware"
    ],
    "user": "rddead",
    "time": "Aug 28, 2019 at 21:35",
    "comments": [
        {
            "user": "Chris Stratton",
            "text": "Your best bet is probably to desolder the flash and create a copy on another chip with a cleanly built u-boot from source or at least a patched kernel command line.  You could also consider changing the root partition or squashfs that becomes it or whatever.\n",
            "time": null
        },
        {
            "user": "rddead",
            "text": "Will do as soon as I can get my hands on the bus pirate. I didn't get your last sentence though. Squashfs? @ChrisStratton\n",
            "time": null
        },
        {
            "user": "Chris Stratton",
            "text": "A bus pirate is hardly the only suitable tool. squashfs is something you'll need to be familiar with if you want to get anywhere in modifying embedded Linux systems.\n",
            "time": null
        },
        {
            "user": "rddead",
            "text": "Noted, any other tools I should familiarize myself with? @ChrisStratton\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I hope you could already solve your problem. \nJust in case that you are still struggling I want to share my ideas with you.\nI just want to point out that I am not 100% sure.\nAs Gogeta70 already said you can connect directly to your flash chip's I/O pins. The Bus Pirate is a good option to do so since it's not so expensive and it seems that you're lucky. You already found out that your flash is the MX25L25635EF from Macronix. You can check out on the flashrom webpage that this device is part of the supported devices list.\nhttps://flashrom.org/Supported_hardware\nHowever if you decide to go for that you have to keep in mind that it is possible to get a few problems if you don't desolder it. I just wanted to point this out so that you don't get frustrated if you connect it while it is still soldered to the board and you don't reveive the result that you want. On flashroms webpage there is a troubleshooting section for such a case. If nothing else works you can still try to desolder the flash from the board. \nhttps://flashrom.org/ISP\nThere is an other thing that you can try to do. I did this with a NAND flash that I worked with a month ago to get access to the busybox. You will still need access to your flash for that because you have to access the Chip Select Pin. I would only recommend doing this if you can afford to destroy the device.\nI think the interesting part is where he asks you to choose an option. Right after this the bootloader starts to boot the system via flash.\n<pre><code>    Please choose the operation: \n\n   1: Load system code to SDRAM via TFTP. \n\n   2: Load system code then write to Flash via TFTP. \n\n   3: Boot system code via Flash (default).\n\n   4: Entr boot command line interface.\n\n   7: Load Boot Loader code then write to Flash via Serial. \n\n   9: Load Boot Loader code then write to Flash via TFTP. \n\n 4  3  2  1  0 \n\n\n\n3: System Boot system code via Flash[1st image].\n\n## Booting image at bc050000 ...\n</code></pre>\nI would try to pull CS towards GND right before the counter hits zero. In my case I had a counter like yours and at the end the bootloader started to boot from the flash. When I pulled CS towards ground he couldn't access the flash anymore and I got directly into busybox console where I could explore the file system.\n",
            "votes": "3",
            "user": "Ramazuri",
            "time": "Oct 10, 2019 at 12:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "rddead",
                    "text": "<span class=\"comment-copy\">Thank you so much! I've lost my current TTL -&gt; USB converter to stupidity and I'm waiting on a new one + a bus pirate to ship, but this gives me some ideas. The device is disposable, yes. I'll edit the question once the bus pirate arrives.</span>",
                    "time": null
                },
                {
                    "user": "Ramazuri",
                    "text": "<span class=\"comment-copy\">Alright. I am curious how it goes. I hope everything works out fine for you.</span>",
                    "time": null
                },
                {
                    "user": "Himal",
                    "text": "<span class=\"comment-copy\">@rddead These shipping times are killing me!</span>",
                    "time": null
                },
                {
                    "user": "rddead",
                    "text": "<span class=\"comment-copy\">@Himal haha! I completely forgot about updating this. Ramazuri's answer is now accepted.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "So you're trying to get a boot shell. To do what? Are you trying to dump the flash memory?\nIn any case, you say that you don't have the option to boot into shell, but the text from your dump says otherwise:\n<pre><code>Please choose the operation: \n\n   1: Load system code to SDRAM via TFTP. \n\n   2: Load system code then write to Flash via TFTP. \n\n   3: Boot system code via Flash (default).\n\n   4: Entr boot command line interface.\n\n   7: Load Boot Loader code then write to Flash via Serial. \n\n   9: Load Boot Loader code then write to Flash via TFTP.\n</code></pre>\nIf you press '4', you should get a boot shell. Have you tried this?\nIf you are pressing a number (followed by enter) and it doesn't seem to respond, I'd double check that your UART bridge is actually sending your keypresses over.\nFailing that, you have a few other avenues you can take. You could try connecting directly to the flash chip's I/O pins and using something like a Bus Pirate with flashrom to read the firmware straight off the chip. From there, you can start reverse engineering the firmware a bit to understand the boot process. You may even be able to modify the firmware to give you a boot shell.\nAnother thing could try is finding a JTAG connection on the board. If you do, you can try talking to the microprocessor with OpenOCD and from there you can do pretty much whatever you want - you control the processor.\nAlso, I'm not sure how you're jumpering VCC to your flash memory chip, but I'd be careful doing anything to the flash chip that it wasn't designed for - you don't want to fry it, right?\n",
            "votes": "2",
            "user": "Gogeta70",
            "time": "Sep 1, 2019 at 19:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rddead",
                    "text": "<span class=\"comment-copy\">I have tried to press 4, using both cu and minicom (connecting from Linux terminal) but it's not being sent. I think it's related to a \"Interface doesn't accept private ioctl\" message I get on boot. I think I'll go with the bus pirate idea. There is no JTAG connection on this specific board.  It's relatively inexpensive, but you're right, I'll try to not fry it, at least not unintentionally :)</span>",
                    "time": null
                },
                {
                    "user": "Chris Stratton",
                    "text": "<span class=\"comment-copy\">If this is anything like the published MediaTek (ex-Ralink) U-Boots, the input from that menu is most likely actually disabled in the code.</span>",
                    "time": null
                },
                {
                    "user": "rddead",
                    "text": "<span class=\"comment-copy\">I guess it is, yeah. Anti-reverse engineering measure? @ChrisStratton</span>",
                    "time": null
                },
                {
                    "user": "Chris Stratton",
                    "text": "<span class=\"comment-copy\">No, just laziness in customizing the behavior by the most readily visible means, rather than the means designed into U-Boot.  Remember the license of the code in question creates a legal requirement that it be published, and it actually <i>is</i> in at least some variants.</span>",
                    "time": null
                }
            ]
        }
    ]
}