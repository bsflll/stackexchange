{
    "title": "Backtracing where a register gets initialized",
    "link": "https://reverseengineering.stackexchange.com/questions/18322/backtracing-where-a-register-gets-initialized",
    "content": "I am currently trying to bypass a CRC check, that exists inline on many places in an application to check if memory pages in the .text section have been modified.\n\nShort explanation of the <pre><code>crc32</code></pre> instruction:\n\nStarting with an initial value in the first operand (destination operand), accumulates a CRC32 (polynomial 11EDC6F41H) value for the second operand (source operand) and stores the result in the destination operand.\n\nOkay so: <pre><code>rsi</code></pre> contains the pointer of the next memory page that gets scanned and <pre><code>rax</code></pre> is the offset/counter. <pre><code>rdx</code></pre> is usually 200 (200 loops).\nMy goal: find where <pre><code>rsi</code></pre> is set. There has to be some instruction like <pre><code>mov rsi, next_memory_page_to_be_scanned</code></pre>.\nGoing further up in code:\n\nSo here are the loop vars initialized (<pre><code>rdx,rax</code></pre>).\nGoing more up:\nSo here is one of the things I am stuck: the yellow marked part seems to be the first instructions I can bp that gets executed before CRC_CHECK. I mean some other place obviously calls it, but I don't know how to find that place.\nI tried to follow the return pointer: \nbut the return pointer points to nothing basically. Breakpointing one instruction above (<pre><code>and [rcx], al</code></pre>) won't trigger the bp (seems to not have anything todo with the CRC check). How do I backtrace this further?\nThe value of <pre><code>rsi</code></pre> lays also not on the stack when I bp the CRC.\nThanks!\n",
    "votes": "4",
    "answers": 2,
    "views": "743",
    "tags": [
        "ida",
        "crc",
        "stack",
        "cheat-engine"
    ],
    "user": "Lyan",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "what about the two calls in the listing?  Or the caller of this function?\n",
            "time": null
        },
        {
            "user": "Lyan",
            "text": "the 2 calls are not called, the function itself is not called either, at least when i bp the function at the start it is not called (at least not for the CRC calculation). the first instruction that is executed here / that you can bp is movsd qword ... (the yellow marked part)\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "can you show us the bytes for the opcodes and addresses? This <pre><code>and al,[rdx+r14*8-7BFAEFF1h]</code></pre> looks strange and I suspect some obfuscation going on which IDA maybe fails to recognize and shows you the wrong disassembly.\n",
            "time": null
        },
        {
            "user": "Lyan",
            "text": "i.imgur.com/wGE8XX5.png here are the bytes of this function\n",
            "time": null
        },
        {
            "user": "josh",
            "text": "Are you sure that the code you are investigating is not a trap you have been guided to due to some Anti-Debug? Maybe you could modify the file with a hard written INT3 and see if the code arrives there without debugger. If yes, you could attach Ida at this point and see if it's the same as when debugging.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Jumping off of Igor's suggestion of a trace, have you tried a break and trace via Cheat Engine yet? If not, consider the following:\n\nWhether via byte array (requiring an AOB scan first; make sure you select read/write memory), module+offset, or symbol name (if applicable), find your way to the <pre><code>crc32 edi, qword ptr [rsi+rax*8]</code></pre> instruction in Cheat Engine's disassembler (the top half of the Memory Viewer).\nRight-click on the instruction and choose <pre><code>Break and trace instructions</code></pre>.\nIn the subsequent window, check <pre><code>Save stack snapshots</code></pre> and <pre><code>Step over instead of single step</code></pre>, then click <pre><code>OK</code></pre>.\nOnce the Tracer window populates with your trace, right-click within it and choose <pre><code>Expand all</code></pre>.\nScroll to the farthest branch of the tree, of which the top-most instruction should be your <pre><code>crc32 edi, qword ptr [rsi+rax*8]</code></pre> instruction.\nClick the <pre><code>Stack</code></pre> button and keep the window that opens (Stack View), beside the Tracer window.\n\nNow work your way down the list of recorded instructions (which will take you back up through callers with each branch). You can watch the registers on the right-hand side, as well as the stack via the Stack View window. You can double-click on any instruction in the Tracer to take you to that instruction in the disassembler, where you can then read up through sub-routines from callers.\nIf there isn't enough branching for you, then run the trace again and change the initial number of instructions traced from 1000 to whatever you'd like. Also, if you find your way into a caller's sub-routine and there are other calls from within it that you'd like to drill down into, simply run another break/trace at some point before the call, then do not select (or de-select, if it's already selected) <pre><code>Step over instead of single step</code></pre>.\nFinally as another tip, in the Memory Viewer, if you run <pre><code>Tools -> Dissect Code</code></pre>, you can then select the base module and any other dependencies to run a bunch of automated tasks on, like finding all referenced strings and functions, and finding all xrefs to all routines!\nThe xrefs one is great for being able to head to the prologue of any given function (right-click on any instruction and choose <pre><code>Select current function</code></pre>, then scroll to the top) and quickly see how many callers there are (of which you can double-click any of to go to them).\nThis allows you to quickly see if a function is shared, thus potentially acting as a pivot point to either patch with a <pre><code>ret</code></pre> (or however you'd prefer to patch), or allowing you to choose which specific call instructions to that particular function you'd like to individually patch.\n",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jul 21, 2018 at 18:42",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "It sounds like the program is using some kind of obfuscation. You probably should step through it from the beginning or record an instruction trace to see how it ends up executing these instructions.\n",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "May 22, 2018 at 7:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}