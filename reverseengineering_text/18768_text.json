{
    "title": "My Shellcode is in a non-executable part of a Windows executable. Is there still a way to execute it?",
    "link": "https://reverseengineering.stackexchange.com/questions/18768/my-shellcode-is-in-a-non-executable-part-of-a-windows-executable-is-there-still",
    "content": "I'm trying to exploit a test server executable that holds some user-controlled data in memory. I can gain control of EIP and go there, however I get an access violation in OllyDBG because it's not executable.\nIs there a way to get around this without directly editing the executable?\n",
    "votes": "1",
    "answers": 1,
    "views": "300",
    "tags": [
        "ollydbg",
        "exploit",
        "binary"
    ],
    "user": "sif",
    "time": "Jul 12, 2018 at 0:38",
    "comments": [
        {
            "user": "3pidemix",
            "text": "Probably, but the question needs more information to provide a good answer. Are there any other protections on the executable (e.g., ASLR, etc.)? How exactly are you getting control of EIP (e.g., stack buffer overflow, heap overflow, type confusion, use-after-free, etc.)?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "well, you canâ€™t execute non-executable pages, so you have the following options:\n\nuse an executable memory area for your shellcode if available. \nsomehow force the program to mark the memory with shellcode as executable \nuse ROP (return-oriented programming) instead of straight executable shellcode. The ROP payload does not need to be executable since it borrows executable gadgets from the existing code areas in the process.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jul 15, 2018 at 10:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}