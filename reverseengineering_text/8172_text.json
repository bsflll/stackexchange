{
    "title": "Reuse symbols in disassembling/reassembling a C++ program",
    "link": "https://reverseengineering.stackexchange.com/questions/8172/reuse-symbols-in-disassembling-reassembling-a-c-program",
    "content": "it's me again. I am working on a tool can that disassemble/reassemble stripped binaries and now I am sucked in a (external) symbol reuse issue.\nThe test is on 32-bit Linux x86 platform. \nSuppose I am working on a C++ program, in the <pre><code>GCC</code></pre> compiler produced assembly code, there exists some instructions like this:\n<pre><code>call    _ZNSt8ios_baseC2Ev\nmovl    _ZTTSt14basic_ifstreamIcSt11char_traitsIcEE+4, %ebx\nmovb    $0, 312(%esp)\nmovl    _ZTTSt14basic_ifstreamIcSt11char_traitsIcEE+8, %ecx\n....\n</code></pre>\nPlease pay special attention to symbol <pre><code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</code></pre>.\nAfter the compilation, suppose I get an <pre><code>unstripped</code></pre> binary, and i checked this symbol like this:\n<pre><code>readelf -s a.out | grep \"_ZTTSt14basic\"\n69: 080a7390    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)\n72: 080a7220    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ofstreamIcS@GLIBCXX_3.4 (3)\n705: 080a7220    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ofstreamIcS\n1033: 080a7390    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ifstreamIcS\n</code></pre>\nSee, this is my first question, why the name of symbol <pre><code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</code></pre> modified to <pre><code>_ZTTSt14basic_ifstreamIcS</code></pre> and <pre><code>_ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)</code></pre> ? \nWhat is <pre><code>_ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)</code></pre> though?\nThen I stripped the binary like this:\n<pre><code>strip a.out\nreadelf -s a.out | grep \"_ZTTSt14basic\"\n69: 080a7390    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)\n72: 080a7220    16 OBJECT  WEAK   DEFAULT   27 _ZTTSt14basic_ofstreamIcS@GLIBCXX_3.4 (3)\n</code></pre>\nThen after I disassemble the binary, and the corresponding disassembled assembly instructions are :\n<pre><code> 8063ee7:       e8 84 54 fe ff          call   8049370 <_ZNSt8ios_baseC2Ev@plt>\n 8063eec:       8b 1d 94 73 0a 08       mov    0x80a7394,%ebx\n 8063ef2:       c6 84 24 38 01 00 00    movb   $0x0,0x138(%esp)\n 8063ef9:       00\n 8063efa:       8b 0d 98 73 0a 08       mov    0x80a7398,%ecx\n</code></pre>\nAt this point we can figure out that 0x80a7394 equals to <pre><code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE+4</code></pre>. \nIn order to reuse these instructions, I modified the code:\n<pre><code>call _ZNSt8ios_baseC2Ev\nmov _ZTTSt14basic_ifstreamIcS+4,%ebx\nmovb $0x0,0x138(%esp)\nmov _ZTTSt14basic_ifstreamIcS+8,%ecx\n</code></pre>\nAnd did some update like these (please see this question for reference):\n<pre><code>echo \"\"_ZTTSt14basic_ifstreamIcS@GLIBCXX_3.4 (3)\" = 0x080a7390;\" > symbolfile\ng++ -Wl,--just-symbols=symbolfile  final.s\n\nreadelf -s a.out | grep \"_ZTTSt14basic\"\n\n3001: 080a7390     0 NOTYPE  LOCAL  DEFAULT   27 _ZTTSt14basic_ifstreamIcS\n8412: 080a7390     0 NOTYPE  GLOBAL DEFAULT  ABS _ZTTSt14basic_ifstreamIcS\n</code></pre>\nI debugged the newly produced binary, and to my surprise, in the newly produced binary, symbol <pre><code>_ZTTSt14basic_ifstreamIcS</code></pre> does not get any value after the function call of <pre><code>_ZNSt8ios_baseC2Ev</code></pre>, while in the original binary, after the function call, <pre><code>_ZTTSt14basic_ifstreamIcS</code></pre> do get some memory address referring to library section.  Which means:\n<pre><code>call _ZNSt8ios_baseC2Ev\nmov _ZTTSt14basic_ifstreamIcS+4,%ebx  <--- %ebx gets zero!\nmovb $0x0,0x138(%esp)\nmov _ZTTSt14basic_ifstreamIcS+8,%ecx  <--- %ecx gets zero!\n</code></pre>\nI must state that in these lines of the original binary, registers %ebx and %ecx both gets some addresses referring to the libc section. \nThis is my second question, why does symbol <pre><code>_ZTTSt14basic_ifstreamIcS</code></pre> didn't get any value after function call <pre><code>_ZNSt8ios_baseC2Ev</code></pre>? I also tried with symbol name <pre><code>_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE</code></pre>. But that does not work also.\nAm I clear enough? Could anyone save my ass? thank you!\n",
    "votes": "1",
    "answers": 1,
    "views": "298",
    "tags": [
        "disassembly",
        "assembly",
        "elf",
        "symbols",
        "reassembly"
    ],
    "user": "lllllllllllll",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": [
        {
            "content": "old question, but I think I can answer a part of it\n\nwhy the name of symbol _ZTTSt14basic_ifstreamIcSt11char_traitsIcEE\n  modified to _ZTTSt14basic_ifstreamIcS\n\nI think you've just run into as terminal width limit. By default <pre><code>readelf</code></pre> limits output lines to 80 characters, you neeed to pass <pre><code>-W</code></pre> to disable it:\n<pre><code>-W --wide              Allow output width to exceed 80 characters\n</code></pre>\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 16, 2017 at 13:24",
            "is_accepted": true,
            "comments": []
        }
    ]
}