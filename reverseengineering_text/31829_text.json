{
    "title": "Replacing a function in a 1995 Windows 32-bit binary using Frida causes crash",
    "link": "https://reverseengineering.stackexchange.com/questions/31829/replacing-a-function-in-a-1995-windows-32-bit-binary-using-frida-causes-crash",
    "content": "I am working with a 1995 Windows 32-bit binary compiled with Watcom, which uses the Watcom calling convention. I am trying to replace a simple string length calculation function in the binary using Frida. The decompiled version of the function is:\n<pre><code>uint calculate_string_length(char *input_string)\n\n{\n  char *current_ptr;\n  char current_char;\n  char *next_ptr;\n  \n  current_ptr = input_string;\n  do {\n    next_ptr = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_ptr;\n  } while (current_char != '\\0');\n  return (uint)(next_ptr + (-1 - (int)input_string));\n}\n</code></pre>\nAnd the assembly code is:\n<pre><code>        00452420 53              PUSH       EBX\n        00452421 56              PUSH       ESI\n        00452422 8b f0           MOV        ESI,input_string_EAX\n        00452424 8b de           MOV        EBX,ESI\n                             LAB_00452426                                    XREF[1]:     00452429(j)  \n        00452426 ac              LODSB      current_ptr\n        00452427 0a c0           OR         input_string_EAX,input_string_EAX\n        00452429 75 fb           JNZ        LAB_00452426\n        0045242b 8b c6           MOV        input_string_EAX,current_ptr\n        0045242d 2b c3           SUB        input_string_EAX,EBX\n        0045242f 48              DEC        input_string_EAX\n        00452430 5e              POP        current_ptr\n        00452431 5b              POP        EBX\n        00452432 c3              RET\n</code></pre>\nI used Frida's <pre><code>Interceptor.attach</code></pre> to log the function inputs and outputs successfully. I then wrote my own JavaScript implementation using Frida's NativeCallback:\n<pre><code>var newImplementation = new NativeCallback(function () {\n    console.log(\"######################################\")\n    const input_string = ptr(this.context.eax);\n    const str1 = Memory.readCString(input_string);\n    console.log(\"calculate_string_length In:\", str1)\n    const length = str1.length;\n    console.log(\"calculated length: \", length)\n    return length\n}, 'uint32', []);\n\nInterceptor.replace(ptr(\"0x00452420\"), newImplementation);\n</code></pre>\nHowever, after processing a specific input string, the program crashes. I have checked the address where it crashes, and it's in another function that calls the replaced function. I have already replaced around 10 functions in this binary without any issues, and this is the first function causing problems.\nI also tried to change the calling convention to <pre><code>stdcall</code></pre> as it's more similar to Watcom's calling convention and that helped a bit. The program was able to run further but it eventually crashes again.\nI also asked the question at: https://github.com/frida/frida/issues/2502\n",
    "votes": "4",
    "answers": 1,
    "views": "148",
    "tags": [
        "windows",
        "frida"
    ],
    "user": "Cesar Canassa",
    "time": "Apr 28, 2023 at 10:39",
    "comments": [],
    "answers_data": [
        {
            "content": "Your hook probably clobbers some register which is used by the caller. Watcom fastcall is a bit special and different from stdcall. Maybe try saving and restoring all registers which are not used for the return value (not sure if Frida can do this).\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "May 3, 2023 at 22:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Cesar Canassa",
                    "text": "<span class=\"comment-copy\">I tried storing and restoring the registers with Frida but that didn't help</span>",
                    "time": null
                }
            ]
        }
    ]
}