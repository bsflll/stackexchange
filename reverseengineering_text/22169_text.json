{
    "title": "How to debug a DLL written in .NET/C#?",
    "link": "https://reverseengineering.stackexchange.com/questions/22169/how-to-debug-a-dll-written-in-net-c",
    "content": "I want to reverse engineer an application written in C#. I would like to set a breakpoint at a function and observe the input passed to it during the normal course of the application's functioning.\n",
    "votes": "1",
    "answers": 2,
    "views": "5k",
    "tags": [
        "debugging",
        "dll",
        ".net",
        "breakpoint",
        "c#"
    ],
    "user": "Japjit Singh N.",
    "time": "Aug 15, 2020 at 23:07",
    "comments": [
        {
            "user": "tmr232",
            "text": "Please clarify your question. It is unclear what you're looking for.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I've used dnSpy in production for debugging as it can be put on a USB.  It's perfectly capable of decompiling and debugging dll's.\n\nIt has a pretty rich set of features.  It's able to attach to running .net processes, decompile the code, edit variables at breakpoints and make some code changes on the fly.\n",
            "votes": "3",
            "user": "Paweł Łukasik",
            "time": "Sep 23, 2019 at 13:18",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Try this: https://github.com/hexfati/SharpDllLoader\nA simple C# executable that invokes an arbitrary method of an arbitrary C# DLL. The project is useful to analyze malicious C# DLL through the popular tool DNSpy.\n",
            "votes": "1",
            "user": "Ant",
            "time": "May 23, 2020 at 13:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}