{
    "title": "How to apply IDA structure to a pointer of a structure",
    "link": "https://reverseengineering.stackexchange.com/questions/9485/how-to-apply-ida-structure-to-a-pointer-of-a-structure",
    "content": "I've encountered this function, which accepts a pointer to what I believe is a custom C struct. I came to this conclusion based on subsequent access to it.\n<pre><code>arg_0= dword ptr  4   ;struct passed in\n\npush    ebx\npush    ebp\nmov     ebp, [esp+8+arg_0]  ; store pointer of struct in ebp\npush    esi\npush    edi\nxor     ebx, ebx\n</code></pre>\nand, not too far from above, I see it being populated:\n<pre><code>mov     [ebp+0D4h], bl\nmov     [ebp+0F4h], bl\nmov     [ebp+114h], bl\nxor     eax, eax\nmov     [ebp+0B8h], eax\nmov     [ebp+0BCh], eax\nmov     [ebp+0C0h], eax\n</code></pre>\nI do not know the size of the structure, but I've seen <pre><code>[ebp+0f14h]</code></pre>. Therefore, I've defined a custom IDA sturct of size <pre><code>0xF14</code></pre>. Now I'm having trouble with applying this custom structure to this pointer. I've tried <pre><code>Alt+Q</code></pre> then selecting my own custom struct, but it is not working. The  output window says <pre><code>Command \"DeclareStructVar\" failed</code></pre>\nMy custom struct:\n<pre><code>00000000 custom_sturct   struc ; (sizeof=0xF14)\n00000000                 db ? ; undefined\n00000001                 db ? ; undefined\n00000002                 db ? ; undefined\n[...same stuff...]\n00000F11                 db ? ; undefined\n00000F12                 db ? ; undefined\n00000F13 field_F13       db ?\n00000F14 custom_sturct   ends\n00000F14\n</code></pre>\nI'm using IDA Pro 6.3\n",
    "votes": "6",
    "answers": 1,
    "views": "10k",
    "tags": [
        "ida",
        "struct"
    ],
    "user": "vincentleest",
    "time": "Sep 12, 2016 at 0:08",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "\"but it is not working\" -- what's \"not working\"?\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "You can't tell IDA \"ebp is a structure pointer\" and have every instruction that uses <pre><code>ebp</code></pre> use the structure automatically. You'll have to right-click each of the offsets, select \"Structure offset\" from the context menu, then select your <pre><code>custom_struct</code></pre> field. (Or, as a shortcut, use the <pre><code>T</code></pre> key).\n",
            "time": null
        },
        {
            "user": "vincentleest",
            "text": "@JasonGeffner and @GuntramBlohm thank you both for your responses. After applying the \"T\" operation, IDA did not complain. However, the custom structure is still not showing up. I then realized that I gave <pre><code>ebp</code></pre> register a custom name. The <pre><code>custom_struct</code></pre> showed up after I've removed the custom name for the register.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "@GuntramBlohm, want to create a new answer to this from your comment and mine? I'm happy for you to get the full credit for this one ;)\n",
            "time": null
        },
        {
            "user": "user1354557",
            "text": "To add to @GuntramBlohm's comment:  You can also select an area of text and hit <pre><code>t</code></pre>. A different menu will appear which will allow you to select a register (choose <pre><code>ebp</code></pre>) and a structure (choose <pre><code>custom_struct</code></pre>) and it will convert each offset from <pre><code>ebp</code></pre> within the selection to an offset of <pre><code>custom_struct</code></pre>. This works best in the linear view.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "To set register as an offset to a structure in a sequence of assembly code, you'll need to select that sequence and then hit T. A pop up dialog called \"Structure offsets\" will appear, where you can supply the register and structure it points to, and you'll see all references IDA recognized using it.\nLets take the following code snippet taken from calc.exe for example:\n\nAfter selecting the relevant code and hitting T IDA automatically identified we're setting the <pre><code>ECX</code></pre> register, suggests possible valid structures to the left and the offsets and the selected structure's values.\n\nAfter assigning a valid structure, the code looks like this:\n\nPlease notice the following caveats/remarks:\n\nIDA completely ignored the <pre><code>add ecx, 4</code></pre> line and additionally did not handle the <pre><code>mov [ecx+eax*2], dx</code></pre> too well because of that. Hitting T for that specific line and suppling a non-zero offset delta will let you handle that properly, albeit manually.  \nAs mentioned in the comments, manually setting a register's name completely disables all IDA's representation of the register and instead displays the user supplied free text. This means any offset definitions will be hidden by any register custom name.\nIf you've seen <pre><code>[ebp+0f14h]</code></pre>, the structure's size is at least 0xF15 bytes, as the structure is being written to at offset <pre><code>0x0F14</code></pre>, meaning at least 0xF15 bytes are available to it. If you've seen <pre><code>DWORD [ebp+0f14h]</code></pre> the structure is at least <pre><code>0x0F18</code></pre> bytes long.\n\nThose caveats are at least partially mitigated by third party tools like Autostruct\n",
            "votes": "8",
            "user": "NirIzr",
            "time": "Sep 29, 2016 at 8:31",
            "is_accepted": true,
            "comments": []
        }
    ]
}