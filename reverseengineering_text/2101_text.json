{
    "title": "How to load a dumped process and several accompanied memory pages in IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/2101/how-to-load-a-dumped-process-and-several-accompanied-memory-pages-in-ida",
    "content": "I have dumped process and several dumped pages of memory that were allocated in it. How can I load everything in IDA into one DB and reference pages in the loaded process?\n",
    "votes": "5",
    "answers": 2,
    "views": "4k",
    "tags": [
        "ida",
        "malware",
        "decompilation"
    ],
    "user": "PhoeniX",
    "time": "May 27, 2013 at 13:02",
    "comments": [],
    "answers_data": [
        {
            "content": "If you are using IDA to dump the process, then you can save the contents of the memory directly to the database using the 'Take memory snapshot' feature located in the Debugger menu.\n",
            "votes": "3",
            "user": "shebaw",
            "time": "May 27, 2013 at 2:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "While waiting for an answer I've also done some searching and here what I've got in case, somebody also interested in this issue. Kris Kasperski a.k.a. nzumi gave quiet a an answer to the above question in his blog. It outdated but I hope it works. I'd appreciate if guys from IDA, can comment about Kris's solutions and it being applicable say from v5 of IDA and on.\nKris's solution:\nhow to load two or more files into the same IDA-Pro database\nextract: \n\nIDA Pro has linear address space emulates x86 CPU flat memory model (well, not only x86, it works with other CPUs too). the loader loads a file into virtual memory and does everything has to be done.\nthere is two solutions to load more files\nfirst: we load the next file as an additional binary file (menu File, Load file, Additional binary file…). IDA Pro does nothing, just load the file, leaves us to parse all internal PE/ELF structures (I saw some IDC-scripts, written by Symantec team, but don’t remember the link). this is tedious job, so, thanks, but no thanks!\nsecond: we use IDA Pro function: \n  <pre><code>bool ida_export load_nonbinary_file (const char *original_file_name, const char *real_file_name, const char *sysdlldir, ushort _neflags, load_info_t *loader)</code></pre>, where “loader” – result returned by <pre><code>load_info_t *ida_export build_loaders_list( const char *filename)</code></pre>, – see \\IDA\\SDK\\include\\ loader.hpp. of course, we have to free the pointer with qfree function (see file pro.h).\nthis is all. well… since we have linear address space, we must avoid file overlapping, that means all files are supposed to have different base addresses. if they are match – we must to re-base one of them before loading (if files have relocations it’s very simple, otherwise, extremely tricky, however, it’s possible).\nso, we come to plug-in, looking like this one:\n\n<pre><code>void idaapi run(int arg)\n{\nload_info_t *ld;\nwarning(“plugin \\”dual-load\\” is called!”);\n\n/* NOTE: KERNEL32.DLL and NTDLL.DLL has to be in the current directory!!! */\nld = build_loaders_list(“KERNEL32.DLL”);\nload_nonbinary_file(“KERNEL32.DLL”, “KERNEL32.DLL”, “.”, NEF_SEGS | NEF_RSCS | NEF_NAME | NEF_IMPS | NEF_CODE, ld);\n/* qfree(ld);\n\nld = build_loaders_list(“NTDLL.DLL”); */\nload_nonbinary_file(“NTDLL.DLL”, “NTDLL.DLL”, “.”, NEF_SEGS | NEF_RSCS | NEF_NAME | NEF_IMPS | NEF_CODE, ld);\nqfree(ld);\n}\n</code></pre>\n\nok, we load notepad.exe into IDA Pro, call our plug-in and… have a fun!!! notepad.exe, <pre><code>kernel32.dll</code></pre> and <pre><code>ntdll.dll</code></pre> are loaded into the same idb-database! the only problem is: IDA Pro doesn’t create cross-references between them. I mean, if you analyze <pre><code>notepad.exe</code></pre>, move the cursor to call <pre><code>ds:GetModuleHandleA</code></pre>, press “enter” and… nothing happens! you’re into the import table of notepad.exe. and where is the export? somewhere… but, this is not a problem, really, since, we can find <pre><code>GetModuleHandleA</code></pre> in the “Names Windows” (called by Shift-F4) or write a simple IDC-script to create cross-reference between import and export, it’s like to build a bridge :-]\n\nI did not try it yet.\n",
            "votes": "3",
            "user": "PhoeniX",
            "time": "May 27, 2013 at 19:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}