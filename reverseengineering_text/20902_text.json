{
    "title": "Tektronix firmware XOR puzzle",
    "link": "https://reverseengineering.stackexchange.com/questions/20902/tektronix-firmware-xor-puzzle",
    "content": "As a means of learning about packing firmware and for fun I am trying to unpack the latest firmware for an entry level Tektronix Function generator firmware attached\nI have read the forum and installed a REMnux VM.  I have also used the XOR Cracker site.\nI have convinced myself the file is XORed and not encrypted using binvis image attached\nThe sites and the tools all concur as to probable XOR patterns, 94 94 90 a1 91 89 91 92 being the most likely.\nI have also studied the excellent information available on Malwarebytes \nHowever, saving all combinations of XORed file I am unable to find and meaningful strings nor get binwalk to make any sense of the saved file.\nAm I missing something?  Can anybody suggest any other strategy to yield the un-xored file?\n",
    "votes": "4",
    "answers": 1,
    "views": "356",
    "tags": [
        "xor",
        "firmware-analysis"
    ],
    "user": "Richard Toy",
    "time": "Mar 17, 2019 at 16:11",
    "comments": [],
    "answers_data": [
        {
            "content": "It is just addition/subtraction (mod 256).\n<pre><code>#!/usr/bin/python3\n# These key bytes are the two's complement of the hex sequence mentioned in the question.\n# The string appears twice in the decrypted blob, which makes me think it's what is used.\nkey = [ord(n) for n in \"llp_owon\"]\n\nwith open(\"AFG1022_V1.2.4.tfb\", \"rb\") as infile:\n  data = infile.read()\noutdata=bytearray()\nfor n in range(0, len(data)):\n  outdata.append((data[n]+key[n%len(key)])&0xff)\nwith open(\"decrypted.bin\", \"wb\") as outfile:\n  outfile.write(outdata)\n</code></pre>\nEdit: Some extra information:\n<pre><code>// all uint32_t values are little endian\nstruct section {\n  uint32_t valid; // 0x00000001 if present, 0x00000000 if not\n  uint32_t offset; // offset to beginning of this payload in this file\n  uint32_t length; // length of this payload\n  uint32_t crc32; // crc32 of the payload described by this section\n};\n\n\n// This is the header at the start of the firmware file\nstruct firmware_header {\n  uint32_t crc32; // crc32 of file_contents[4:]\n  uint8_t version[16]; // version string\n  uint8_t package_type[12]; // package type string (\"UpgradePack\")\n  section s[8]; // the payloads, see above for the structure\n  uint8_t model[40]]; // hardware model\n};\n\n// Each section index accesses a specific path\nconst char *section_paths[8] = {\n  \"/flash/boot/fp\",\n  \"/flash/boot/tx\",\n  \"/flash/boot/bmp\",  // splashscreen bitmap\n  \"/flash/boot/hz\",\n  \"/flash/boot/os\",   // load at address 0x00000000, ARM\n  \"/flash/boot/bios\",\n  \"/flash/boot/menu\",\n  \"/flash/boot/help\",\n};\n</code></pre>\n",
            "votes": "3",
            "user": "booto",
            "time": "Mar 18, 2019 at 23:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}