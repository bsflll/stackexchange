{
    "title": "Making changes in ELF file after dissassembly [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/15042/making-changes-in-elf-file-after-dissassembly",
    "content": "This question already has answers here:\n                                \n                            \n\n\n\n\nWhat are the available libraries to statically modify ELF executables?\n\n                                (3 answers)\n                            \n\nClosed 7 years ago.\n\n\n\nI am new to reverse engineering and after some research, I haven't found a clear way to do what I want to do.\nI have an ELF file, but not the original source code that generated it. It is really simple and just prints some numbers. I wanted to make a small change in the range of numbers it prints. I have disassembled it and figured out where the change must be made, but I am not sure how to make this change.\nIs there a way to edit disassembled code and still generate an executable file? Or should I figure out where in the hex file is the  corresponding information that I want to change and use a hex editor?\n",
    "votes": "3",
    "answers": 1,
    "views": "12k",
    "tags": [
        "disassembly",
        "elf",
        "hex"
    ],
    "user": "franchzilla",
    "time": "7 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "Since no details about the binary are provided in the question, only a general answer can be given. It sounds like you are trying to statically modify an executable ELF binary. This is also referred to as patching. This is different from dynamic modification, or program runtime instrumentation.\nTools and Examples\nTools that can be used for patching include <pre><code>gdb</code></pre>, <pre><code>radare2</code></pre>, the ERESI suite, <pre><code>xxd</code></pre> and <pre><code>hexedit</code></pre>.\nRadare2\nPatch a elf binary in linux with radare2\nTutorial 1 - Simple Patch\nfixing bugs in binaries using r2\nGDB\nUse gdb to Modify Binary\nUsing GDB to modify an executable\nxxd\nDoing a Reverse Hex Dump\nhexedit\nModifying Linux ELF Binaries - Changing Callq Addresses\nSimilar questions:\nHow can I change the values in esp?\nHow do I add functionality to an existing binary executable?\nWhat are the available libraries to statically modify ELF executables?\n",
            "votes": "6",
            "user": "cweiske",
            "time": "Sep 29, 2019 at 16:45",
            "is_accepted": true,
            "comments": [
                {
                    "user": "franchzilla",
                    "text": "<span class=\"comment-copy\">Thanks! That was a great and complete answer. Turns out that what I needed was really simple. I used objdump to check the hex of the things that I needed to change and edited them using hexedit. But your answer will help me study more advanced techniques.</span>",
                    "time": null
                }
            ]
        }
    ]
}