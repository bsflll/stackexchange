{
    "title": "IDA Hex-Rays Generating Redundant Code",
    "link": "https://reverseengineering.stackexchange.com/questions/13312/ida-hex-rays-generating-redundant-code",
    "content": "Hex-Rays generated C code is adding a lot of redundancy code, and I cannot figure out why and it really frustrates me to remove them manually on my reverse engineering process.\n<pre><code>if ( v1 )\n{\n    v15.ObjectID = *(_DWORD *)Obj.ObjectID;\n    v6 = AccessObject((Object)&v15);\n    ObjectType::setTypeID(&v16, v6->Type.TypeID);\n    v7 = ObjectType::getFlag(&v16, BANK);\n    v4 = 0;\n    if ( !v7 )\n    {\n      v16.TypeID = *(_DWORD *)Obj.ObjectID;\n      v8 = AccessObject((Object)&v16);\n      ObjectType::setTypeID((ObjectType *const )&v15, v8->Type.TypeID);\n      v9 = ObjectType::getFlag((ObjectType *const )&v15, CLIP);\n      v4 = 1;\n      if ( !v9 )\n      {\n        v16.TypeID = *(_DWORD *)Obj.ObjectID;\n        v10 = AccessObject((Object)&v16);\n        ObjectType::setTypeID((ObjectType *const )&v15, v10->Type.TypeID);\n        v11 = ObjectType::getFlag((ObjectType *const )&v15, BOTTOM);\n        v4 = 2;\n        if ( !v11 )\n        {\n          v16.TypeID = *(_DWORD *)Obj.ObjectID;\n          v12 = AccessObject((Object)&v16);\n          ObjectType::setTypeID((ObjectType *const )&v15, v12->Type.TypeID);\n          v13 = ObjectType::getFlag((ObjectType *const )&v15, TOP);\n          v4 = 3;\n          if ( !v13 )\n          {\n            v16.TypeID = *(_DWORD *)Obj.ObjectID;\n            v14 = AccessObject((Object)&v16);\n            ObjectType::setTypeID((ObjectType *const )&v15, v14->Type.TypeID);\n            v4 = (v15.ObjectID != 99) + 4;\n          }\n        }\n      }\n    }\n  }\n  else\n  {\n    error(\"GetObjectPriority: _bergebenes Objekt existiert nicht.\n\");\n    v4 = 0x7FFFFFFF;\n  }\n</code></pre>\nThere's continous assigns to the v15 stack variable, which are making absolutely non-sense, I doubt the actual programmers of this binary had this intent.\nI could have easily done it this way:\n<pre><code>int32_t Priority = 0;\nif (Object)\n{\n    if (!Object->getFlag(BANK))\n    {\n        Priority = 1;\n        if (!Object->getFlag(CLIP))\n        {\n            Priority = 2;\n            if (!Object->getFlag(BOTTOM))\n            {\n                Priority = 3;\n                if (!Object->getFlag(TOP))\n                {\n                    Priority = (Object->TypeID != 99) + 4;\n                }\n            }\n        }\n    }\n}\nelse\n{\n    std::cout << \"GetObjectPriority: Object is NULL.\" << std::endl;\n    Priority = -1;\n}\n\nreturn Priority;\n</code></pre>\nHow can I mess with IDA to stop this madness?\n",
    "votes": "1",
    "answers": 1,
    "views": "291",
    "tags": [
        "ida",
        "decompilation",
        "static-analysis",
        "decompiler"
    ],
    "user": "Ra√∫l Sanpedro",
    "time": "Aug 19, 2016 at 8:15",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "Welcome to C++, where one line of code may be expanded to hundreds of instructions if you're not careful :)\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "You should compare the C(++) code to the assembly, to check if the code is really there. To me, this reeks of a loop that got unrolled by the compiler (with the <pre><code>if</code></pre> parts originating from a <pre><code>break</code></pre> in the loop) so the assembly instructions are actually duplicated, which makes the decompiler generate code for all of them. Loop unrolling in a compiler isn't always easy, but i guess loop rolling in a decompiler would be way harder.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Writing a good decompiler is hard. There are multiple challenges in the process.\nWriting a decompiler that has no redundant code in its output is even harder.\nMost decompilers still ouput high level code that resembles the assembly code it originated from, and that's what you see as redudant assignments.\nThere isn't really something you can do about it easily. You could try contacting IDA's support to get them to improve the decompiler. You could write an IDAPython script the implements the extra code simplifications. Or you could continue doing that manually.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Aug 19, 2016 at 8:32",
            "is_accepted": true,
            "comments": []
        }
    ]
}