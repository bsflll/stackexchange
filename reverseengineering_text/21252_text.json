{
    "title": "Missing Symbols RtlGetFrame, RtlPushFrame, RtlPopFrame",
    "link": "https://reverseengineering.stackexchange.com/questions/21252/missing-symbols-rtlgetframe-rtlpushframe-rtlpopframe",
    "content": "I'd like to use some undocumented symbols that listed in <pre><code>ProcessHacker</code></pre> project. taken from Here: \nhttps://github.com/processhacker/processhacker/blob/master/phnt/include/ntpebteb.h#L241\nhttps://github.com/processhacker/processhacker/blob/master/phnt/include/ntrtl.h#L7156\nHowever, I don't know to which dll do they belong... \nIn project readme page, it's said that I only need the latest windows SDK, but after compilation I get :  \n<pre><code>Severity    Code    Description Project File    Line    Suppression State\n\nError   LNK2019 unresolved external symbol \"__declspec(dllimport) struct \n_TEB_ACTIVE_FRAME * __cdecl RtlGetFrame(void)\" (__imp_?\nRtlGetFrame@@YAPEAU_TEB_ACTIVE_FRAME@@XZ) referenced in function \"public: static\n struct _TEB_ACTIVE_FRAME * __cdecl _RTL_FRAME::get(struct \n_TEB_ACTIVE_FRAME_CONTEXT const *)\" (?\nget@_RTL_FRAME@@SAPEAU_TEB_ACTIVE_FRAME@@PEBU_TEB_ACTIVE_FRAME_CONTEXT@@@Z) \nTestReentrancy  C:\\projects\\2.3\\unit_tests\\InjectionTest\\Project1\\main.obj  1   \n\n</code></pre>\nPerhaps anybody can tell me how to adjust my project configuration to make it work ? thanks !\n",
    "votes": "2",
    "answers": 1,
    "views": "281",
    "tags": [
        "windows",
        "winapi",
        "symbols"
    ],
    "user": "Irad K",
    "time": "May 5, 2019 at 18:33",
    "comments": [],
    "answers_data": [
        {
            "content": "Those functions are exported from <pre><code>ntdll.dll</code></pre> file. To link with those functions, add <pre><code>#pragma comment (lib, \"ntdll.lib\")</code></pre> in the source file. Or in Visual Studio, first check the active Configuration and Platform. Then add the library in Project > Properties > Linker > Input > Additional Dependencies. For example, like this <pre><code>%(AdditionalDependencies); ntdll.lib</code></pre>. For mingw, cygwin, msys2 etc. toolchains (where GCC is used), use <pre><code>-lntdll</code></pre> option in command. \nOr the functions can be written directly in the source code also without importing those from ntdll. Those functions use members from Thread Information Block (TEB) as follows:\n<pre><code>PTEB_ACTIVE_FRAME RtlGetFrame()\n{\n    return NtCurrentTeb()->ActiveFrame;\n}\n\nvoid RtlPushFrame(PTEB_ACTIVE_FRAME Frame)\n{\n    struct _TEB *Teb;\n\n    Teb = NtCurrentTeb();\n    Frame->Previous = Teb->ActiveFrame;\n    Teb->ActiveFrame = Frame;\n}\n\nvoid RtlPopFrame(PTEB_ACTIVE_FRAME Frame)\n{\nNtCurrentTeb()->ActiveFrame = Frame->Previous;\n}\n</code></pre>\n",
            "votes": "4",
            "user": "Biswapriyo",
            "time": "May 5, 2019 at 13:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Btw, this works for a (quite a) handful of functions, but last I checked the <code>ntdll.lib</code> was fairly incomplete.</span>",
                    "time": null
                }
            ]
        }
    ]
}