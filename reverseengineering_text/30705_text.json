{
    "title": "Ghidra graphing questions",
    "link": "https://reverseengineering.stackexchange.com/questions/30705/ghidra-graphing-questions",
    "content": "I'm trying to learn RE with Ghidra, and have a few Ghidra-specific questions.\n\nExceeded limit of 500 nods - any way to increase this threshold?\n\nAny other way to choose which section of the code is graphed other than highlighting it? Specifically looking for a way to graph an entire program without having to jump to a non-code section.\n\nAnd most importantly, using Ghidra's Calls graph, sometimes I will get a comprehensive graph including jumps to external imported functions (showing things like KERNEL32.DLL::Sleep), while other times such as in case I choose to bundle more functions in the graph resulting in more nodes, it will omit such things such as imported functions even though the calling function is still within the graph. Can I make it more comprehensive, forcing it show everything even if there are more nodes (or other factors impacting it)?\n\n\nThanks a lot :)\n",
    "votes": "2",
    "answers": 0,
    "views": "720",
    "tags": [
        "ghidra"
    ],
    "user": "Soyboii",
    "time": "Jul 27, 2022 at 8:42",
    "comments": [
        {
            "user": "h0r53",
            "text": "I don't think you truly want a Function Graph of the entire program unless it is extremely trivial. It actually makes more sense to isolate graphs to each function, since they can be called from anywhere in the code and combining all graphs would result in a huge mess due to the recursive nature of function calls and reuse. What WOULD be potentially helpful is keeping track of your program counter during execution and then graphing the true control flow for of the program's runtime. Even that could get large and out of hand though.\n",
            "time": null
        },
        {
            "user": "h0r53",
            "text": "With respect to graphing imported functions, what is your use case? Anything from KERNEL32.DLL (such as <pre><code>sleep</code></pre>) is going to be well documented and you can simply lookup what the method does when you encounter it. There really isn't much to reverse unless you want to reverse the DLL itself, in which case you should just import it into Ghidra as its own project.\n",
            "time": null
        },
        {
            "user": "Soyboii",
            "text": "@h0r53 I would like to create sub-trees of a program by using the \"Display Selected as New Graph\" option for an overall overview, e.g. finding main and growing to targets.  As for graphing imported functions, in case of an unlabeled function I think it would be helpful to get an idea of its winAPI usage, so even unlabeled functions can have some meaning in a graph.\n",
            "time": null
        }
    ],
    "answers_data": []
}