{
    "title": "Entry point of a program",
    "link": "https://reverseengineering.stackexchange.com/questions/22405/entry-point-of-a-program",
    "content": "im new to assembly and reverse engineering, i have a question regarding to how the address work.\nI examined the entry point of a program using varies PE tools, the result is 0x00043b33, but when i loaded the same program into ollydbg, the starting address is at 0x770B0D54. Another thing is i executed the program line by line, it somehow jump back to the entry point at 0x00043b33 and then go back to the address 0x770B0D54 later again. Can someone guide me on this？\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "ollydbg"
    ],
    "user": "lim matthew",
    "time": "Oct 28, 2019 at 1:15",
    "comments": [],
    "answers_data": [
        {
            "content": "It's a matter where you want to break. The address <pre><code>0x770B0D54</code></pre> is in kernel code and it's probably before kernel starts executing user code. Useful if there's some magic happening before <pre><code>main</code></pre> is executed and you want to step through that.\nOn the other hand <pre><code>0x00043b33</code></pre> is int user code and it's probably the address of the <pre><code>main</code></pre> function so that is the real code of the application.\nIn OllyDbg you can control the initial breakpoint in Options->Debugging, Startup and exit\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Oct 28, 2019 at 15:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}