{
    "title": "Decrypt application protocol packet",
    "link": "https://reverseengineering.stackexchange.com/questions/25252/decrypt-application-protocol-packet",
    "content": "I have several applications that interact with the network, but the data is encrypted. I set breakpoints on send ws2_32.dll and found the correct buffer in which the encrypted data was located (then I checked the call stack to find the encryption function used), but this did not lead to anything good, for example, breakpoints for reading and entries in. If you have information describing the process of searching for packages in programs or in examples / books. I'll be happy\n",
    "votes": "1",
    "answers": 2,
    "views": "829",
    "tags": [
        "unpacking",
        "decryption",
        "patch-reversing"
    ],
    "user": "Polar Bear",
    "time": "Jun 9, 2020 at 14:08",
    "comments": [],
    "answers_data": [
        {
            "content": "In some games I have found the encryption on, it has been before the send call e.g. a function that calls send sometimes 2-3 calls up.\nFor recv it is decrypting after but some first decrypted part of it for a header to look up the size/id.\nOthers had compressed packets (zlib) which took a little bit of figuring.\nA trick to see if is possibly compressed or encrypted well is try to compress the data (if large enough) if it does not get any meaningful compression then it is already compressed or encrypted enough to look random.\nSo the application might call recv or some other func to get data in.\nThen it may, decrypt some identifier or length e.g. Packet ID lookup size or size in header.\nTry sending 20 A characters the first time\nRestarting the app and sending 23 A characters\nDo a byte by byte difference and see what stands out as different.\nSometimes encryption key could be sent by the server first, in which case look for a single byte, block of bytes etc, that is copied somewhere on first recv, find references to that or memory (add a read breakpoint on it) and you might find your encrypt and/or decrypt routine.\nDo multiple connections with same input data have the same data sent on the wire?\nCan you send some reliable information and packet sniff it to see what it looks like?\nFor example if it has a login as the first packet and it is sent first straight after connection.\nSend a long string of AAAAAAAAAAAAAAAAAAAAAAA\nAnd observe the data.\nDoes it look like\n10 00 01 00 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9 C9\nFor example that would indicate something like xor.\nIf xor observe many packets and look for bytes that you see often, e.g. 00 xor by something is the value.\nCould also look more jumbled up or blocks of 4 bytes or some length.\nIf you see repeating sequence e.g. C9 EF AD CC C9 EF AD CC and you know the input data was a long string of \"A\"  for example, then its doing a pattern.\nI have seen some implementations where something like blowfish was used, initially seeded but they did not handle padding the packet out fully to a multiple of the block length, so odd number of bytes showed up as plain text.\nIf the data is different each time from the very first send with no other recv, it could be a time based encryption based on when you connected, or that the client just picks random key and tells the server it.\nFor example if the first packet sent from client to server is 32 bytes of gibberish, its probably a key or an initialization vector to seed a block cipher or something...\nOne software was like this.\nCustomSend(data, length)\nWhich copied the bytes to a buffer, offset by packet header.\nFilled in the header with the length.\nEncrypted the entire content using another function (Look for loops before send or a function called before send containing loops could be a few levels up or deep, but you should follow what happens to the buffer of data, you need to do this backwards.\nFollowing the code backwards can be tricky sometimes I find it easier to go forward if you can find something you know will submit some known data to send to this socket action/packet.\nSometimes this is after a connect or after a first recv.\nOr after hitting enter in a chat box.\nIt is also not guaranteed that the same encryption or key is used for both encryption and decryption.\nIt could also be some kind of Asymmetric encryption, e.g. one key to encrypt but another to decrypt with each end only knowing the key needed to send or recv data with the other.\nOr they could get crafty and encrypt the data one way for the first few packets and switch it up after negotiating keys to use.\nIf you happen to use IDA or maybe there is an alternative on Ghidra\nhttps://github.com/d3v1l401/FindCrypt-Ghidra\n or other tools? You can use something like FindCrypt to find known crypto algorithms\nhttps://www.hex-rays.com/blog/findcrypt/ which by looking at what uses/references them you might find the encrypt/decrypt that way.\nSounds fun hope you can make some progress on it.\n",
            "votes": "1",
            "user": "Liam Mitchell",
            "time": "Jun 11, 2020 at 11:18",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "The encryption routine is not likely to be in your call stack because it is not actually going to call the send function directly.\nI would suggest you set a watch point inside the buffer to catch whenever the buffer is written to. Routines that write to the buffer will probably be reading from some input buffer. There could well be a few steps of adding headers/checksums but if you keep going backwards you may find a function which reads unencrypted data and writes encrypted data.\n",
            "votes": "2",
            "user": "Artelius",
            "time": "Jun 10, 2020 at 0:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Polar Bear",
                    "text": "<span class=\"comment-copy\">If I have a breakpoint for receiving a packet, can I find a place where the packet is decrypted and encrypted?  If I put a breakpoint on the encrypted buffer, I wonâ€™t get anything, because the address of the encrypted packet changes every time</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@PolarBear in theory you need to do it only once, once you find the decryption routine you can put the breakpoint directly there</span>",
                    "time": null
                },
                {
                    "user": "Polar Bear",
                    "text": "<span class=\"comment-copy\">I do not understand how to find a function that encrypts a packet. I understand that you can find the place where the packet is decrypted (breakpoint for reading from the buffer in recv ws2_32.dll)  But an already encrypted packet comes into the Send function, and if you set a breakpoint for reading from the buffer, this will not help to find the function because each new packet receives a new address.</span>",
                    "time": null
                },
                {
                    "user": "Liam Mitchell",
                    "text": "<span class=\"comment-copy\">You need to step out of the call to send and look around (scroll up after doing so) You may have to do that multiple times. After Send BP is hit, step out. Scroll up 1 or more line of disassembled asm and place a breakpoint. Run it on. Repeat may have to go up a few times to other function calls, you want to make sure you are in games code not system modules.</span>",
                    "time": null
                },
                {
                    "user": "Polar Bear",
                    "text": "<span class=\"comment-copy\">This does not work, the program is too large to manually check the call stack</span>",
                    "time": null
                }
            ]
        }
    ]
}