{
    "title": "IDA Pro: How to set data size and data length in \"Watch List\"",
    "link": "https://reverseengineering.stackexchange.com/questions/9303/ida-pro-how-to-set-data-size-and-data-length-in-watch-list",
    "content": "When using Watch List(Debugger->Watches->Add watch) in IDA Pro, I want to add a memory scope(data size(db) , data length(18)) into Watch List.\nHowever, IDA always only add a dword byte(data size(dd) , data length(1)) into Watch List by default, so how can I get Watch List to work as I want?\n",
    "votes": "2",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Matt Elson",
    "time": "Jul 8, 2015 at 15:59",
    "comments": [],
    "answers_data": [
        {
            "content": "Had the same problem, couldn't find the answer anywhere so i found a workaround.\nI jumped to the address I wanted to watch and used Edit -> Array. Just choose the size of the array you want to watch and then when you add the address to the watch list it adds all the array. Hope it helps.\n",
            "votes": "1",
            "user": "AlonR",
            "time": "Nov 10, 2015 at 19:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vitalii",
                    "text": "<span class=\"comment-copy\">And what if variable is on stack? For me <code>Array</code> is grey when variable is on stack.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This had me confounded for a bit... If this is documented, I'm unsure where. By guessing the following seems to work.\n<pre><code>(type)reference\n</code></pre>\nExample: <pre><code>(int[14])0xDEADBEEF</code></pre>\nThis would give you a representation of an integer array 14 deep at address 0xDEADBEEF independent without having to actually set 0xDEADBEEF to an integer array 14 deep.\nThis seems to work for structures and such as well: <pre><code>(foo[2])0xBEEF</code></pre> would give you an array of two 'foo' structures starting at 0xBEEF.\nThis is true as of IDA 7.5.200728 -- I cannot speak to any other version.\n",
            "votes": "0",
            "user": "efudd",
            "time": "Sep 14, 2020 at 4:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}