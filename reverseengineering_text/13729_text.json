{
    "title": "What does byte_407030[ecx] mean?",
    "link": "https://reverseengineering.stackexchange.com/questions/13729/what-does-byte-407030ecx-mean",
    "content": "I came across the following instruction in IDA:\n<pre><code>movsx edx, byte_407030[ecx]\n</code></pre>\n<pre><code>byte_407030</code></pre> is <pre><code>25h</code></pre>. Is it trying to access some memory location? I know that <pre><code>ecx</code></pre> is storing a counter in a for loop.\n",
    "votes": "0",
    "answers": 1,
    "views": "282",
    "tags": [
        "ida",
        "assembly"
    ],
    "user": "mrQWERTY",
    "time": "Oct 16, 2016 at 4:44",
    "comments": [],
    "answers_data": [
        {
            "content": "Lets go step by step:\n<pre><code>movsx\n</code></pre>\nThis is a specialized move instruction it moves a value from source of a smaller size (in your case, a byte) to a destination of a potentially larger size (in your case, a double word), preserving the sign bit by an operation called sign-extending.\nThis means that if the byte was a negative integer then the destination will also be a negative integer. This is a bit more complex then simply copying the last bit because of the way negative integers are encoded (which is called two's complement). \n<pre><code>edx \n</code></pre>\nThe first operand of a <pre><code>mov</code></pre> instruction is the destination target. In this case it's the double-word register <pre><code>edx</code></pre>. This is were the data is moved to.\n<pre><code>byte_407030[ecx]\n</code></pre>\nThe second operand is the source operand. This is where the data is moved from. Please note that although the instruction is <pre><code>mov</code></pre>, the value also remains in the source location. Calling it \"copy\" might have been a better idea ;).\nIDA's syntax here is similar to C's syntax. This will dereference the memory region at address <pre><code>0x407030</code></pre> plus the value of <pre><code>ecx</code></pre> and fetch a byte from there. In case <pre><code>ecx</code></pre> is <pre><code>11h</code></pre>, the final address would be <pre><code>0x407041</code></pre>.\nsummary\nThis instruction will take the byte value at memory address of <pre><code>0x407030+ecx</code></pre>, sign extend it to dword (4 bytes in most architectures) and assign that final value into register <pre><code>edx</code></pre>\n",
            "votes": "3",
            "user": "NirIzr",
            "time": "Oct 16, 2016 at 4:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}