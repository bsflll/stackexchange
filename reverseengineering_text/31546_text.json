{
    "title": "Reversing C++ Classes in ARM",
    "link": "https://reverseengineering.stackexchange.com/questions/31546/reversing-c-classes-in-arm",
    "content": "I have unstripped linux arm binary,\nThe code calls functions in class object reference like so:\n<pre><code>LDR             R3, [R6]\nMOV             R1, R7\nMOV             R0, R6\nLDR             R3, [R3,#0xC]  ; (Class *)(this + 0xC)\nBLX             R3\n</code></pre>\nI have the vtables in the binary\nWhat is the best way to make this code readable, x86/x64 have plugins for this but i don't find those in ARM, should I do that manually? if so how?\nThanks.\n",
    "votes": "2",
    "answers": 1,
    "views": "215",
    "tags": [
        "c++",
        "arm",
        "vtables"
    ],
    "user": "Dinamo",
    "time": "Feb 14, 2023 at 17:00",
    "comments": [
        {
            "user": "r0xdeadbeef",
            "text": "while demanding in terms of time and effort, can be the preferred method for deciphering code in less commonly used architectures such as ARM. This approach entails a thorough analysis of the virtual table, followed by the RE of its associated functions, as previously outlined. Despite the challenges posed by manual RE, it often yields the most comprehensive understanding of the code in question.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Step 1: Spot the function being called - The function being called is referenced in the virtual table and is executed via a BLX instruction:\n<pre><code>BLX R3\n</code></pre>\nStep 2: Analyze the virtual table - To find out what the functions in the virtual table do, use a disassembler or debugger to take a closer look at the virtual table and see what addresses the functions reference. This info will come in handy when you RE the functions.\nStep 3: Then, RE the functions - With the addresses of the functions in hand, you can use a disassembler or debugger to examine each function and determine its purpose. This makes it easier to understand the code and work with it.\nStep 4: Create a function map - Put everything together by creating a map of the virtual table and its functions, including what each function does.\n",
            "votes": "3",
            "user": "r0xdeadbeef",
            "time": "Feb 14, 2023 at 19:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}