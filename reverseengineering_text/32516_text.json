{
    "title": "Function return in machine code (by platform/compiler)",
    "link": "https://reverseengineering.stackexchange.com/questions/32516/function-return-in-machine-code-by-platform-compiler",
    "content": "I am asking this question to gather a knowledge base. I know in x86-64, a machine code function can have only one function return, i.e., <pre><code>ret</code></pre> instruction. I know it can be compiler (GCC, clang, etc) and platform (MIPS, ARM, etc) specific. My question is, is it always to be true to have only one function <pre><code>return</code></pre> in machine code for every platform and generated by any compiler?\nThanks in advance.\n",
    "votes": "0",
    "answers": 1,
    "views": "62",
    "tags": [
        "functions"
    ],
    "user": "Mustakimur Khandaker",
    "time": "Nov 25, 2023 at 1:49",
    "comments": [
        {
            "user": "blabb",
            "text": "A function as such can have multiple returns like if(foo) {return blah} ; .elseif {} .else {}\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As far as I remember ARM has at least 3 different possibilities to implement return from function functionality, and I had seen all of those in real code, allegedly generated by ordinary compiler.\nThe first pattern is <pre><code>push {list of registers, LR}</code></pre> at the prologue of the function and then <pre><code>pop {same list of registers, PC}</code></pre> at the end of the epilogue. It is used this way because call like instructions in ARM put the return address into LR register and not on stack, and if there is another function call inside the first one LR changes.\nThe second pattern is just <pre><code>BX LR</code></pre> (or just <pre><code>B LR</code></pre>) for functions without calls inside.\nThe third one is <pre><code>MOV PC,LR</code></pre>.\nIt should be also taken in account, that ARM has 2 instruction sets, ARM and THUMB, and instructions from those 2 instruction sets may co-exists in the same executable. This gives us different encodings(and sometimes mnemonics) for all mentioned instructions, so technically all those are different instructions.\nSo the answer to you question is no, it is not always to be true to have only one function return in machine code for every platform and generated by any compiler.\n",
            "votes": "1",
            "user": "w s",
            "time": "Nov 25, 2023 at 16:36",
            "is_accepted": false,
            "comments": []
        }
    ]
}