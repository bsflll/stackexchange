{
    "title": "DLL obfuscator - what kind of obfuscator is this?",
    "link": "https://reverseengineering.stackexchange.com/questions/21793/dll-obfuscator-what-kind-of-obfuscator-is-this",
    "content": "when I am looking for packet editor, I found open project on http://www.packeteditor.com/\nwhen I learn how it works, I see that the application is injecting a dll named WSPE.dat, when I load this WSPE.dat to ida pro, I found it was a dll that has been obfuscated.\nand it was something like this :\n\nwhat is that SteveW section? I also see a lot of this obfuscator on other dll, but protectionId scan result it wasn't being packed\nwith this note :\n<pre><code>Section [0x0] 'SteveW  ' has a higher physical size than virtual size..\n</code></pre>\nand also this :\n<pre><code>Warning : Import Table is bad !!!\n</code></pre>\nhere is the dll link :\nWSPE.dat\n",
    "votes": "1",
    "answers": 1,
    "views": "458",
    "tags": [
        "dll"
    ],
    "user": "user5962153",
    "time": "Jul 29, 2019 at 1:44",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "It looks like it's just a <pre><code>.text</code></pre> section as it has executable permission.\n",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "Looks like a custom crypter to me, not really obfuscated. <pre><code>sub_6464146E</code></pre> has a small rol/xor/rol loop that's probably decrypting the code.\n",
            "time": null
        },
        {
            "user": "SteveW",
            "text": "I didn't make the DLL open source. I wrote it in MASM (x86 assembly) but the source for it is on a hard drive that I'd have no way to to read anymore. I could write a 64-bit version but it would take quite a while. I haven't worked on the application in a long time.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I wrote the code for WSPE.dat and can confirm that I custom wrote the encryption based on the supplied name/key plus the 'invalid' PE heading. So, if a user attempts to modify the PE heading on the drive to allow for debugging of the DLL for a dump then it'll fail to properly decrypt in memory.\n",
            "votes": "1",
            "user": "SteveW",
            "time": "Jan 16, 2020 at 3:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user5962153",
                    "text": "<span class=\"comment-copy\">I see, so it's not open source for the wspe.dat right? can't you make x64 version of that dll?</span>",
                    "time": null
                }
            ]
        }
    ]
}