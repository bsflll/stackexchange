{
    "title": "Why IDA define negative offset?",
    "link": "https://reverseengineering.stackexchange.com/questions/19210/why-ida-define-negative-offset",
    "content": "<pre><code>a = byte ptr -19h\n</code></pre>\nWhy offset from stack base can be a negative number ? Can anyone explain this for me please?\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida"
    ],
    "user": "Đỗ Dũng",
    "time": "Aug 31, 2018 at 12:14",
    "comments": [],
    "answers_data": [
        {
            "content": "The way IDA displays variables at the top of a function definition is by their offset from the stack base (<pre><code>ebp</code></pre>, <pre><code>rbp</code></pre>) at the function's beginning. \nUnless there's something strange going on, negative offsets mean the function itself allocated stack space for local variables (or, depending on compiler and calling convention for argument passing as well). \nWhen stack space is allocated by subtracting the stack pointer (<pre><code>esp</code></pre>, <pre><code>rsp</code></pre>), whether the stack base register is used or not, the base stack does not change. Therefore, memory below the stack base register becomes available. When the stack base register is unused, IDA will still display the stack offset relative to the stack base, by explicitly splitting the stack base offset (from the current stack position) and the variable offset from the stack base.\nFor example, take a look at the following function prelog:\n<pre><code>var_448= qword ptr -448h\nvar_438= word ptr -438h\nvar_436= byte ptr -436h\nvar_434= byte ptr -434h\nvar_38= qword ptr -38h\nvar_28= qword ptr -28h\narg_0= qword ptr  8\narg_10= qword ptr  18h\n\nmov     r11, rsp\npush    rbp\npush    rsi\npush    r14\npush    r15\nsub     rsp, 448h\nmov     rax, cs:__security_cookie\nxor     rax, rsp\nmov     [rsp+468h+var_38], rax\n</code></pre>\nYou can see <pre><code>var_38</code></pre> is at offset <pre><code>-38</code></pre> from the stack base, but because <pre><code>rsp</code></pre> is used to access <pre><code>var_38</code></pre>, IDA displays the <pre><code>468h+var_38</code></pre> instead of the immediate offset used. That's done to show the variable being accessed regardless of the current stack position.\nThe adding <pre><code>rsp</code></pre> and <pre><code>468h</code></pre> gives us the stack base as a computation using the current stack pointer and the stack delta from the function's start. That's how the compiler avoids using the stack base register, by computing it from the stack register and delta.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Aug 31, 2018 at 18:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">Can one make sure about the variable size from <code>var_a - var_b</code> value?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Not necessarily, because variables may be padded and IDA may missing certain variables (think of a stack allocated structure that has only few of it's member used in the allocating function, but other members used in other functions). A better way would probably be reading the code and seeing how the variables are used.</span>",
                    "time": null
                }
            ]
        }
    ]
}