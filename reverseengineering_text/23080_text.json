{
    "title": "Some obstacles in reversing a JNI Native library",
    "link": "https://reverseengineering.stackexchange.com/questions/23080/some-obstacles-in-reversing-a-jni-native-library",
    "content": "I deleted my last question (it was not still answered and none's effort was wasted) as I got back and thought to re-read JNI documentation, to find I misinterpreted some bits. Things are now clearer\nThough I still cannot understand how JavaObject is passed on? Looking through radare2, \n<pre><code>410: sym.Java_com_asobimo_common_jni_NativeResource_getZipedFile (int16_t arg1, int16_t arg3, int16_t arg4);\n           ; var int16_t var_0h @ sp+0x0\n           ; var int16_t var_ch @ sp+0xc\n           ; var int16_t var_14h @ sp+0x14\n           ; var int16_t var_18h @ sp+0x18\n           ; var int16_t var_1ch @ sp+0x1c\n           ; var int16_t var_34h @ sp+0x34\n           ; var int16_t var_40h @ sp+0x40\n           ; arg int16_t arg1 @ r0\n           ; arg int16_t arg3 @ r2\n           ; arg int16_t arg4 @ r3\n           ; DATA XREF from aav.0x0000c664 @ +0x64\n           0x0000c974  ~   f0b5           push {r4, r5, r6, r7, lr}\n</code></pre>\nthis is how the static function is called. I feel like the function makes references to passed class objects, since it subtracts <pre><code>0x44</code></pre> from <pre><code>sp</code></pre> letter on and then do some stuffs. But, how does this referencing works actually? I am pretty clueless. This is how the Java class looks like which corresponds to it:- \n<pre><code>package com.asobimo.common.jni;\n\npublic final class NativeResource {\n  static {\n    System.loadLibrary(\"NativeResource\");\n  }\n\n  public static native void deleteFile(String paramString);\n\n  public static native byte[] getFile(String paramString);\n\n  public static native byte[] getZipedFile(String paramString1, String paramString2);\n\n  public static native boolean isZipedNormality(String paramString);\n\n  public static native void saveFile(String paramString, byte[] paramArrayOfbyte, int paramInt);\n}\n</code></pre>\nAlso, this is not really a necessary thing to answer (and it kinda shifts away from focus of it, I am sorry) but how radare identifies the arguments' size? As it's clear by <pre><code>var int16_t var_40_h @ sp+0x40</code></pre> being a reference (even though sp is subtracted by <pre><code>0x40</code></pre>) and the fact that string function were being called using <pre><code>r0</code></pre> pointer, over <pre><code>r2</code></pre> and <pre><code>r3</code></pre>, (which makes it more obvious that they probably are <pre><code>int32_t</code></pre>)\nAnd why radare didn't assign <pre><code>r1</code></pre> to anything? And skipped <pre><code>arg2</code></pre>? It probably also has to do with <pre><code>JavaObject</code></pre>, but I can't really find anything by researching myself. I would really appreciate any help, I badly want that boss battle music hidden behind some encrypted zip files\nIn case it would help in making some sense, here is the <pre><code>.so</code></pre> file https://files.catbox.moe/foss7s.so\n",
    "votes": "1",
    "answers": 0,
    "views": "815",
    "tags": [
        "android",
        "radare2",
        "c",
        "java",
        "shared-object"
    ],
    "user": "CortexAuth",
    "time": "Jan 23, 2020 at 14:47",
    "comments": [
        {
            "user": "Olvin Roght",
            "text": "I highly recommend you to get in touch with frida, especially with jnitrace, which could help you to understand how and where shared object call jni functions which works with Java objects. Also will be good to read about jni to understand how does it work at all.\n",
            "time": null
        },
        {
            "user": "CortexAuth",
            "text": "@OlvinRoght I will try Frida later, thanks! And I did read Oracle's documentation. It did cleared some doubts I had earlier (or I would say, I just read it previously in hurry) but now I don't get these stuffs\n",
            "time": null
        },
        {
            "user": "Olvin Roght",
            "text": "I have no much time to explain with details, but main idea is next: 1) native function receive pointer to Java String (I'll proceed with getZipedFile from post); 2) to get string bytes in native code used GetStringChars which returns pointer to simple char array; 3) function do smth and then it uses NewByteArray to create Java array and return it. Maybe I'll post an answer later.\n",
            "time": null
        },
        {
            "user": "CortexAuth",
            "text": "@OlvinRoght Yeap! but it also does some stuffs with some values in stack, which probably came from the Java program. but I have no idea what those values could be That's kinda necessary to figure out because it could be part of how the zip files are encrypted\n",
            "time": null
        },
        {
            "user": "Olvin Roght",
            "text": "<pre><code>sub sp, #0x48</code></pre> is allocation of <pre><code>0x48</code></pre> bytes for local variables. Procedure Call Standard for the ARM architecture.\n",
            "time": null
        }
    ],
    "answers_data": []
}