{
    "title": "How do I get all sections in a PE file using C++?",
    "link": "https://reverseengineering.stackexchange.com/questions/29750/how-do-i-get-all-sections-in-a-pe-file-using-c",
    "content": "So I am wondering how can I get all sections and their info from a dumped PE file on the disk, using C++.\nI have the entire PE loaded on a buffer, the NT headers, and hopefully the DOS headers.\nI need this so I can transform a raw offset of the file into an offset that I can add to the base address and get my result.\n",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "windows",
        "c++",
        "executable",
        "winapi",
        "address"
    ],
    "user": "rafa_br34",
    "time": "Dec 21, 2021 at 2:24",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. Your question is actually worded a bit confusingly. Are you talking about a dumped PE file (essentially loaded with <pre><code>SEC_IMAGE</code></pre> and possibly relocated etc) or are you talking about a PE file, which you loaded into a buffer and now you want to make sense of the RVAs?\n",
            "time": null
        },
        {
            "user": "rafa_br34",
            "text": "I want to get the segment sections (.code, .data, etc) and their info (Raw offset, Raw size, Virtual offset, etc) from a  PE file that was dumped while was running\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Assuming you have a binary dump created by say WinDbg <pre><code>.writemem</code></pre>\n<pre><code>0:000> lm m cdb\nstart             end                 module name\n00007ff6`af510000 00007ff6`af53e000   cdb        (deferred)\n\n0:000> .writemem c:\\dumped.bin 00007ff6`af510000 l?(00007ff6`af53e000-00007ff6`af510000)\nWriting 2e000 bytes............................................................................................\n0:000>\n</code></pre>\nC++ does not have the glue to parse PE files. You may need to use the Windows API or roll your own parsing routines.\nFor example the first few bytes of the dump should be <pre><code>IMAGE_DOS_HEADER</code></pre> for it to be a valid PE file.\nI will dump the section of the aforementioned dump using <pre><code>pefile</code></pre> by Ero a versatile PE parsing Python module.\nDumping the first section using the above module from command line\n<pre><code>C:\\>python -c \"import pefile;print(pefile.PE(r\\\"c:\\\\dumped.bin\\\").sections[0]\")\n[IMAGE_SECTION_HEADER]\n0x200      0x0   Name:                          .text\n0x208      0x8   Misc:                          0xC1FF\n0x208      0x8   Misc_PhysicalAddress:          0xC1FF\n0x208      0x8   Misc_VirtualSize:              0xC1FF\n0x20C      0xC   VirtualAddress:                0x1000\n0x210      0x10  SizeOfRawData:                 0xC200\n0x214      0x14  PointerToRawData:              0x400\n0x218      0x18  PointerToRelocations:          0x0\n0x21C      0x1C  PointerToLinenumbers:          0x0\n0x220      0x20  NumberOfRelocations:           0x0\n0x222      0x22  NumberOfLinenumbers:           0x0\n0x224      0x24  Characteristics:               0x60000020\n</code></pre>\nIf you are going to use C basic routines\nYou may need to <pre><code>fopen(....)</code></pre> and <pre><code>fread();</code></pre>, then cast the bytes as DOS header, read <pre><code>e_lfanew</code></pre> as offset to the PE header, then continue to cast, read and parse until you finish.\nA sample DOS header to PE header offset routine may look like:\n<pre><code>#include <stdio.h>\n#include <stdlib.h>\n#include <windows.h>\n#define BUSIZ 0x50\n#define MAXREAD 0x40\n\nint main(void)\n{\n    FILE *infile = NULL;\n    errno_t err = fopen_s(&infile, \"c:\\\\dumped.bin\", \"rb\");\n    if (err == 0 && infile != NULL)\n    {\n        unsigned char buf[BUSIZ] = {0};\n        size_t siz = 0;\n        siz = fread_s(buf, BUSIZ, 1, MAXREAD, infile);\n        if (siz != 0)\n        {\n            for (int i = 0; i < 16; i++)\n            {\n                printf(\"%02x \", buf[i]);\n            }\n            for (int i = 0; i < 16; i++)\n            {\n                printf(\"%c \", buf[i]);\n            }\n            printf(\"\n\");\n        }\n        PIMAGE_DOS_HEADER dhead = (PIMAGE_DOS_HEADER)&buf;\n        printf(\"%x\n\", dhead->e_magic);\n        printf(\"offset to PE Header from start = %x\n\", dhead->e_lfanew);\n    }\n    else\n    {\n        printf(\"file not opened failure \n\");\n    }\n}\n</code></pre>\ncompiled and executed\n<pre><code>:\\>cl /Zi /W4 /analyze /Od /EHsc /nologo parse.cpp /link /release\nparse.cpp\n\n:\\>parse.exe\n4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 M Z Ã‰                    \n5a4d\noffset to PE Header from start = f8\n</code></pre>\nedit\na different demo for IMAGE_FIRST_SECTION\nedit\nsrc that uses IMAGE_FIRST_SECTION to retrieve all section with 16 initial bytes at each section\n<pre><code>#include <stdio.h>\n#include <stdlib.h>\n#include <windows.h>\n#define BUSIZ 0x500\n#define MAXREAD 0x400\nFILE *infile = NULL;\nunsigned char buf[BUSIZ] = {0};\nunsigned char tmpbuf[BUFSIZ] = {0};\nvoid hexdump(int bpos, unsigned char *inbuf){\n    memset(inbuf, 0, BUSIZ);\n    fseek(infile, bpos, SEEK_SET);\n    size_t siz = fread_s(inbuf, BUSIZ, 1, MAXREAD, infile);\n    if (siz != 0)    {\n        for (int i = 0; i < 16; i++) {\n            printf(\"%02x \", inbuf[i]);\n        }\n        printf(\"\n\");\n    }\n}\nint main(void){\n    errno_t err = fopen_s(&infile, \"c:\\\\dumped.bin\", \"rb\");\n    if (err == 0 && infile != NULL){\n        hexdump(0, buf);\n        PIMAGE_DOS_HEADER dhead = (PIMAGE_DOS_HEADER)&buf;\n        hexdump(dhead->e_lfanew, buf);\n        PIMAGE_NT_HEADERS64 nthead = (PIMAGE_NT_HEADERS64)&buf;\n        PIMAGE_SECTION_HEADER Section = IMAGE_FIRST_SECTION(nthead);\n        for (WORD i = 0; i < nthead->FileHeader.NumberOfSections; i++){\n            printf(\"%-8s\\t%x\\t%x\\t%x\n\", Section->Name, Section->VirtualAddress,\n                   Section->PointerToRawData, Section->SizeOfRawData);\n            hexdump(Section->VirtualAddress, tmpbuf);\n            Section++;\n        }\n    }\n}\n</code></pre>\ncompiled and executed\n<pre><code>>cl /Zi /W4 /analyze /Od /EHsc /nologo parse.cpp /link /release\nparse.cpp\n\n>parse.exe\n4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 \n50 45 00 00 64 86 08 00 00 1d 9c 8d 00 00 00 00 \n.text           1000    400     c200\ncc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc \n.rdata          e000    c600    f800\nb0 ff 52 af f6 7f 00 00 50 00 53 af f6 7f 00 00\n.data           1e000   1be00   2000\n60 e0 51 af f6 7f 00 00 90 e0 51 af f6 7f 00 00\n.pdata          27000   1de00   800\n10 10 00 00 88 10 00 00 4c ba 01 00 90 10 00 00\n.didat          28000   1e600   200\n92 ce 51 af f6 7f 00 00 00 00 00 00 00 00 00 00\n.mrdata         29000   1e800   2e00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n.rsrc           2c000   21600   1000\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00\n.reloc          2d000   22600   a00\n00 e0 00 00 28 02 00 00 00 a0 08 a0 10 a0 18 a0\n</code></pre>\nconfirmed independently with a hex editor\n<pre><code>C:\\>for %i in (0x0000,0x1000,0xe000,0x1e000,0x27000,0x28000,0x29000,0x2c000,0x2d000) do xxd -s %i -g 1 -l 16 dumped.bin\n\nC:\\>xxd -s 0x0000 -g 1 -l 16 dumped.bin\n00000000: 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00  MZ..............\n\nC:\\>xxd -s 0x1000 -g 1 -l 16 dumped.bin\n00001000: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................\n\nC:\\>xxd -s 0xe000 -g 1 -l 16 dumped.bin\n0000e000: b0 ff 52 af f6 7f 00 00 50 00 53 af f6 7f 00 00  ..R.....P.S.....\n\nC:\\>xxd -s 0x1e000 -g 1 -l 16 dumped.bin\n0001e000: 60 e0 51 af f6 7f 00 00 90 e0 51 af f6 7f 00 00  `.Q.......Q.....\n\nC:\\>xxd -s 0x27000 -g 1 -l 16 dumped.bin\n00027000: 10 10 00 00 88 10 00 00 4c ba 01 00 90 10 00 00  ........L.......\n\nC:\\>xxd -s 0x28000 -g 1 -l 16 dumped.bin\n00028000: 92 ce 51 af f6 7f 00 00 00 00 00 00 00 00 00 00  ..Q.............\n\nC:\\>xxd -s 0x29000 -g 1 -l 16 dumped.bin\n00029000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n\nC:\\>xxd -s 0x2c000 -g 1 -l 16 dumped.bin\n0002c000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00  ................\n\nC:\\>xxd -s 0x2d000 -g 1 -l 16 dumped.bin\n0002d000: 00 e0 00 00 28 02 00 00 00 a0 08 a0 10 a0 18 a0  ....(...........\n</code></pre>\n",
            "votes": "0",
            "user": "blabb",
            "time": "Dec 22, 2021 at 18:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "rafa_br34",
                    "text": "<span class=\"comment-copy\">yes, I have the DOS and NT header already what I want are the sections info, like when you use alt+1 in PE editor and go-to sections</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Which PE editor you make it sounds as if there is a single <i>one</i>? As for PE-parsing you could have a look at <a href=\"https://github.com/trailofbits/pe-parse\" rel=\"nofollow noreferrer\">pe-parse</a> with which I worked a bit due to work with another project by the same group: uthenticode. Either way, a PE parser can be written easily and portably in C++. The parsing is no different in memory and on disk. Just the calculation of offsets differs due to file vs. section alignment.</span>",
                    "time": null
                },
                {
                    "user": "rafa_br34",
                    "text": "<span class=\"comment-copy\">I'm using the PETools editor, I would like to get the segments the program has, and their information, I just need to find the right offset for the array. edit: sorry for the late response, thought StackOverflow would notify me, I don't think the IMAGE_FIRST_SECTION works for files on the disk</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">maybe you can explain why you think so ??? it is a simple macro that retrieves the position of First Section in the PE header. anyway i edited in a modified source which dumps at  start of each section</span>",
                    "time": null
                }
            ]
        }
    ]
}