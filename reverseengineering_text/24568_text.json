{
    "title": "c++ reading process memory with injected DLL",
    "link": "https://reverseengineering.stackexchange.com/questions/24568/c-reading-process-memory-with-injected-dll",
    "content": "The reading works fine until it reaches base+27.058.176(bytes) address. At this address VirtualProtect() failes with error 487 (Attempt to access invalid address).\nWhy does it return this error? Btw the process uses over 300 MB of memory.\n<pre><code>if (vInTokens.size() == 3 && !vInTokens.at(0).compare(\"scan\")) {   // vInTokens holds the command and parameters\n        int valueToScan = std::stoi(vInTokens.at(1));   // param 1\n        Uint offset = std::stoi(vInTokens.at(2));       // param 2\n        hits.clear();   // hits is a global variable of type std::vector. in this vector all addresses with valueToScan should get stored.\n        Uint scans = 0; // tracks the number of integers (4 bytes) read\n        Uint pages = 0; // tracks the number of process pages read\n\n        Uint addr = base;   // base is a global variable that holds the process base address. retrieved with (Uint)GetModuleHandle(NULL)\n        Uint addr_max = base + offset; // 0x7FFFFFFF;\n        MEMORY_BASIC_INFORMATION mbi{};\n\n        while (addr < addr_max) {\n\n            // get page\n            if (VirtualQuery((LPCVOID)addr, &mbi, sizeof(mbi)) == 0) {\n                std::cout << \"Error: VirtualQuery failed with error \" << GetLastError() << std::endl;\n                break;\n            }\n\n            // update page protection (enable read and write)\n            DWORD oldProtect;\n            if(VirtualProtect(mbi.BaseAddress, mbi.RegionSize, PAGE_EXECUTE_READWRITE, &oldProtect) == 0) {\n                std::cout << \"Error: VirtualProtect(1) failed with error \" << GetLastError() << \" at \" << std::hex << addr << std::endl;\n                break;\n            }\n\n            // read page memory\n            Uint start = addr;\n            Uint end = start + mbi.RegionSize;\n            while (start < end) {\n                int value = *((int*)start);\n                if(value == valueToScan)\n                    hits.push_back(start);\n                scans++;\n                start += 4;\n            }\n\n            // restore old page protection\n            if (VirtualProtect(mbi.BaseAddress, mbi.RegionSize, oldProtect, &oldProtect) == 0) {\n                std::cout << \"Error: VirtualProtect(2) failed with error \" << \" with code \" << GetLastError() << \" at \" << std::hex << addr << std::endl;\n                break;\n            }\n\n            // set values for next page\n            pages++;\n            addr += mbi.RegionSize;\n            mbi = {};\n        }\n\n        std::cout << \"Scanned \" << std::dec << scans << std::endl;\n        std::cout << \"Pages   \" << std::dec << pages << std::endl;\n        std::cout << \"Found   \" << std::dec << hits.size() << std::endl;\n    }\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c++",
        "memory",
        "dll",
        "process",
        "windows-10"
    ],
    "user": "Created",
    "time": "Mar 30, 2020 at 12:48",
    "comments": [],
    "answers_data": [
        {
            "content": "MEMORY_BASIC_INFORMATION struct holds a \"State\" property that is one of the following:\nMEM_RESERVE, MEM_COMMIT, MEM_FREE\nYou can only use VirtualProtect on pages that are actually allocated for use, i.e. the MEM_COMMIT type.\nReserved and free memory pages cannot be read or written to and so you cannot change their protection flags.\nA process may take memory of size x, split over many pages that are not continguous.\n",
            "votes": "0",
            "user": "Yotamz",
            "time": "Mar 30, 2020 at 14:09",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Created",
                    "text": "<span class=\"comment-copy\">Now I added a additional check for state == MEM_COMMIT. But it still returns an error a couple addresses later (base+27.394.048(bytes)). But the error code changed, now it's 87 (The parameter is incorrect.) ??</span>",
                    "time": null
                },
                {
                    "user": "Yotamz",
                    "text": "<span class=\"comment-copy\">You should add sanity checks before the call to VirtualProtect to better understand what is going on, breakpoints/assertions/prints etc. Make sure that the page address and sizes are aligned to the size of a full page. Also, check the <i>type</i> property of the area, if is it a MAPPED_* type region then you cannot change its protection to a different one than the one it was initially mapped with.</span>",
                    "time": null
                }
            ]
        }
    ]
}