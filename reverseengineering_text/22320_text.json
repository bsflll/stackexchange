{
    "title": "Which APIs are responsible for terminating process icons in Taskbar?",
    "link": "https://reverseengineering.stackexchange.com/questions/22320/which-apis-are-responsible-for-terminating-process-icons-in-taskbar",
    "content": "I am trying to reverse and debug a program but it exists after certain point, tried setting breakpoint on any inter module call that starts with exit or terminate, now here's the weird part :\nit does break on exitprocess, but before that the actual executable gets removed from explorer's taskbar and from the bottom right side in the taskbar (which shows small program icons next to clock) but the actual process is still in the task manager\nso how is it exiting that the actual process is not terminated but the taskbar icons (both the main icon and the small one next to clock) get terminated? i want to break on that one before the exit process, because trying to trace back from the exit process one leads me to entrypoint (_start)! (tried tracing back from it with the stack return addresses)\n",
    "votes": "0",
    "answers": 2,
    "views": "88",
    "tags": [
        "windows",
        "debugging",
        "ollydbg",
        "x86"
    ],
    "user": "Mery Ted",
    "time": "Oct 16, 2019 at 18:42",
    "comments": [
        {
            "user": "Mery Ted",
            "text": "Found one : EndDialog, is there anything else?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "the process may run a long after the icons vanish from taskbar tearing down\ntry closing a browser like firefox  its icon will vanish long before one of the many instances of firefox gets out of task manager.\nyou may need to look for WM_DESTROY  WM_GETICON , WM_SHOWWINDOW messages \nuse some spy utility like spy++ and corelate it with procmon  \nbelow is a log of spy++ closing firefox (WM_MOUSE and WM_NONCLIENT WM_NCXX.. excluded)\nand clicked the x button  on right corner \n<pre><code><000001> 003401E6 S WM_WINDOWPOSCHANGING lpwp:0031F198\n<000002> 003401E6 R WM_WINDOWPOSCHANGING\n<000003> 003401E6 S WM_ERASEBKGND hdc:5E010B3E\n<000004> 003401E6 R WM_ERASEBKGND fErased:True\n<000005> 003401E6 S WM_WINDOWPOSCHANGED lpwp:0031F198\n<000006> 003401E6 R WM_WINDOWPOSCHANGED\n<000007> 003401E6 S WM_ACTIVATEAPP fActive:True dwThreadID:00000000\n<000008> 003401E6 R WM_ACTIVATEAPP\n<000009> 003401E6 S WM_ACTIVATE fActive:WA_CLICKACTIVE fMinimized:False hwndPrevious:(null)\n<000010> 003401E6 S WM_IME_SETCONTEXT fSet:1 iShow:C000000F\n<000011> 003401E6 S WM_IME_NOTIFY dwCommand:IMN_OPENSTATUSWINDOW dwCommand:00000002 dwData:00000000\n<000012> 003401E6 R WM_IME_NOTIFY\n<000013> 003401E6 R WM_IME_SETCONTEXT\n<000014> 003401E6 S WM_SETFOCUS hwndLoseFocus:(null)\n<000015> 003401E6 S WM_WINDOWPOSCHANGING lpwp:0031E8F4\n<000016> 003401E6 R WM_WINDOWPOSCHANGING\n<000017> 003401E6 S WM_IME_SETCONTEXT fSet:0 iShow:C000000F\n<000018> 003401E6 R WM_IME_SETCONTEXT\n<000019> 003401E6 S WM_IME_SETCONTEXT fSet:1 iShow:C000000F\n<000020> 003401E6 R WM_IME_SETCONTEXT\n<000021> 003401E6 R WM_SETFOCUS\n<000022> 003401E6 R WM_ACTIVATE\n<000023> 003401E6 S WM_PAINT hdc:00000000\n<000024> 003401E6 R WM_PAINT\n<000025> 003401E6 S WM_IME_SETCONTEXT fSet:0 iShow:C000000F\n<000026> 003401E6 R WM_IME_SETCONTEXT\n<000027> 003401E6 S WM_IME_SETCONTEXT fSet:1 iShow:C000000F\n<000028> 003401E6 R WM_IME_SETCONTEXT\n<000029> 003401E6 S WM_GETICON nType:ICON_SMALL2\n<000030> 003401E6 R WM_GETICON hicon:00000000\n<000031> 003401E6 S WM_GETICON nType:ICON_SMALL\n<000032> 003401E6 R WM_GETICON hicon:00000000\n<000033> 003401E6 S WM_GETICON nType:ICON_BIG\n<000034> 003401E6 R WM_GETICON hicon:00000000\n<000035> 003401E6 S WM_CAPTURECHANGED hwndNewCapture:00000000\n<000036> 003401E6 R WM_CAPTURECHANGED\n<000037> 003401E6 S WM_IME_SETCONTEXT fSet:0 iShow:C000000F\n<000038> 003401E6 R WM_IME_SETCONTEXT\n<000039> 003401E6 S WM_IME_SETCONTEXT fSet:1 iShow:C000000F\n<000040> 003401E6 R WM_IME_SETCONTEXT\n<000041> 003401E6 S WM_CAPTURECHANGED hwndNewCapture:00000000\n<000042> 003401E6 R WM_CAPTURECHANGED\n<000043> 003401E6 S WM_IME_SETCONTEXT fSet:0 iShow:C000000F\n<000044> 003401E6 R WM_IME_SETCONTEXT\n<000045> 003401E6 S WM_IME_SETCONTEXT fSet:1 iShow:C000000F\n<000046> 003401E6 R WM_IME_SETCONTEXT\n<000047> 003401E6 S WM_SHOWWINDOW fShow:False fuStatus:0 (ShowWindow was called)\n<000048> 003401E6 R WM_SHOWWINDOW\n<000049> 003401E6 S WM_WINDOWPOSCHANGING lpwp:0031F1B4\n<000050> 003401E6 R WM_WINDOWPOSCHANGING\n<000051> 003401E6 S WM_WINDOWPOSCHANGED lpwp:0031F1B4\n<000052> 003401E6 R WM_WINDOWPOSCHANGED\n<000053> 003401E6 S WM_SIZE fwSizeType:SIZE_MAXIMIZED nWidth:1280 nHeight:778\n<000054> 003401E6 R WM_SIZE\n<000055> 003401E6 S WM_MOVE xPos:0 yPos:65528\n<000056> 003401E6 R WM_MOVE\n<000057> 003401E6 S WM_ACTIVATE fActive:WA_INACTIVE fMinimized:False hwndPrevious:(null)\n<000058> 003401E6 R WM_ACTIVATE\n<000059> 003401E6 S WM_ACTIVATEAPP fActive:False dwThreadID:00000420\n<000060> 003401E6 R WM_ACTIVATEAPP\n<000061> 003401E6 S WM_KILLFOCUS hwndGetFocus:(null)\n<000062> 003401E6 R WM_KILLFOCUS\n<000063> 003401E6 S WM_IME_SETCONTEXT fSet:0 iShow:C000000F\n<000064> 003401E6 S WM_IME_NOTIFY dwCommand:IMN_CLOSESTATUSWINDOW dwCommand:00000001 dwData:00000000\n<000065> 003401E6 R WM_IME_NOTIFY\n<000066> 003401E6 R WM_IME_SETCONTEXT\n<000067> 003401E6 S message:0x0090 [Unknown] wParam:00000000 lParam:00000000\n<000068> 003401E6 R message:0x0090 [Unknown] lResult:00000000\n<000069> 003401E6 S WM_DESTROY\n<000070> 003401E6 R WM_DESTROY\n</code></pre>\n",
            "votes": "0",
            "user": "blabb",
            "time": "Oct 16, 2019 at 22:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mery Ted",
                    "text": "<span class=\"comment-copy\">I found the API that was closing the icons : EndDialog, just wondering if there is anything else that i should look after in future? also is it normal that EndDialog causes closing of icons?</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">the rabbit hole is much deeper  this api is just the entrance  to the burrow</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There is no single specific API for this. IIRC the taskbar button corresponds to the main window of the process so likely it’s removed once the window is destroyed (but the process may continue running until it exits). \nThe code you’re looking for will likely be either in the main window procedure (e.g. handling of WM_CLOSE or WM_QUIT), or after the end of the main message loop.\n",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Oct 16, 2019 at 21:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mery Ted",
                    "text": "<span class=\"comment-copy\">But i found one : EndDialog, just wondering if there is something else as well ( the app icons close after the EndDialog call, not sure how they wrote the app to work like this)</span>",
                    "time": null
                }
            ]
        }
    ]
}