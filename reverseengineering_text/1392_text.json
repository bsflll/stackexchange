{
    "title": "Decent GUI for GDB",
    "link": "https://reverseengineering.stackexchange.com/questions/1392/decent-gui-for-gdb",
    "content": "Learning the GDB commands is on my bucket-list, but in the meantime is there a graphical debugger for *nix platforms that accepts Windbg commands, and has similar functionality?  For example, the ability to bring out multiple editable memory windows, automatically disassemble around an area while stepping, set disassembly flavor, and have a window with registers that have editable values?\n",
    "votes": "102",
    "answers": 20,
    "views": "144k",
    "tags": [
        "debuggers",
        "gdb"
    ],
    "user": "mrduclaw",
    "time": "Mar 31, 2013 at 3:00",
    "comments": [
        {
            "user": "perror",
            "text": "Voltron is totally new but seems to be promising (I did not test it yet).\n",
            "time": null
        },
        {
            "user": "Ciro Santilli OurBigBook.com",
            "text": "On SO: stackoverflow.com/questions/79023/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I started my own gdb frontend called gdbgui which is a server (in python) that lets you access a full-featured frontend in your browser.\n\nInstall\n<pre><code>pip install gdbgui --upgrade\n</code></pre>\nor download at gdbgui.com\nWorks on all platforms (Linux, macOS, and Windows) and browsers with JavaScript.\nRun\nJust type\n<pre><code>gdbgui\n</code></pre>\nin your terminal, and your browser will open a new tab.\nFeatures\n\nset/remove breakpoints\nview sourcecode, with optional inline machine code \nselect current frame in stack\nstep through source code or machine code\ncreate/explore variables\nview/select threads\nexplore memory\nview registers\nfull gdb terminal functionality so you can send traditional gdb commands, and view gdb/inferior program output\nlayout inspired by the amazing Chrome debugger\ncompatible with Mozilla's RR, for reverse debugging\n",
            "votes": "75",
            "user": "Jonas Stein",
            "time": "Nov 22, 2019 at 23:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "sherrellbc",
                    "text": "<span class=\"comment-copy\">This is some good work, truly. The design gets to the core of the average use-case. I like it. It also supports remote debugging (or, rather, it supports using the <code>target remote host:port</code> gdb command. Nicely done. Perhaps adding the ability to connect to a remote host in the menu would be a nice add-on. Would it be possible to scale down the 'register` size? All the information is available, but (at least on ARM) you can't see all registers at once, so you have to scroll.</span>",
                    "time": null
                },
                {
                    "user": "Jonas Stein",
                    "text": "<span class=\"comment-copy\">The comments in here are not for individual <code>gdbgui</code> support. Please open a new question on sx, or use the gdbgui support channels / bug tracker.</span>",
                    "time": null
                },
                {
                    "user": "ATL_DEV",
                    "text": "<span class=\"comment-copy\">Can this report if a binary has all the buffer overflow protections?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Although some people don't care for its interface, it's worth mentioning that GDB has its own built-in GUI as well (called TUI).\nYou can start GDB in GUI mode with the command: <pre><code>gdb -tui</code></pre>\nA quick reference to TUI commands may be found here: http://beej.us/guide/bggdb/#qref\n",
            "votes": "57",
            "user": "mncoppola",
            "time": "Mar 30, 2013 at 3:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I've generally used Emacs GUD as a GDB frontend.\n\nIt isn't too hard to use, allows you to set breakpoints visually (or though the GDB window if you prefer).\nIt has multiple different views that you can access from a top-level GDB menu:\n\nIt also allows niceties like allowing you to inspect values by mousing over them:\n\nIn order to use it, you first need to navigate to the folder of your binary with <pre><code>C-x C-f</code></pre>, then <pre><code>M-x gdb</code></pre> (That's \"<pre><code>Alt + X</code></pre>\", then typing \"<pre><code>gdb</code></pre>\"). After doing this, you can type a gdb command line, or just hit <pre><code>[Enter]</code></pre> to accept its default. From there, you just type \"start\" in the gdb window with any parameters you want to pass to the program you are debugging.\nAfter that, you are pretty much golden, but with only one view. The menus along the top of the screen under \"GUD\" will let you open other relevant views for whatever you are trying to debug. (Frames are separate windows, and \"Windows\" are in-frame windows)\nUsually by default, a breakpoint is set on program start, and you can then either navigate your code using the buttons at the top of the window or if you have no code, you can customize your view to let you step through a disassembly of the binary you are looking at.\nThe buttons along the top of the window surrounded with \"{}\" are for code-level stepping, and the buttons with \"<>\" in their icon are for instruction-level debugging. So you will probably want to focus on the left if you are doing normal code debugging and focus more on the right if you are getting into the real nitty-gritty.\nAlso, if you ever get lost, this icon:\n\nIt is an entire book that can likely answer your questions. The only time it won't exist in Emacs is if you are on Debian (Ubuntu is fine) and installed Emacs from its repos. In this case you will need to install \"<pre><code>emacs<version>-common-non-dfsg</code></pre>\" to get the manuals. (With \"<pre><code><version></code></pre>\" being the non-decimal digits returned by <pre><code>M-x version</code></pre> in Emacs)\n",
            "votes": "33",
            "user": "Rohit Gupta",
            "time": "May 24, 2023 at 21:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RichieHH",
                    "text": "<span class=\"comment-copy\">cant enable any panes to show locals or breakpoints using gud. What am is missing?  Noting in the gud menu to suggest this is possible. the -mi interface shows them.</span>",
                    "time": null
                },
                {
                    "user": "Archenoth",
                    "text": "<span class=\"comment-copy\">@RichieHH oh! Those should be in Gud -&gt; GDB-Windows in your menu-bar (If you don't have a menu-bar, F10 can get you into that)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "My opinion is a bit biased but, for debugging assembler, the best GDB 'frontend' out there is IDA (it supports communication with remote GDB targets). For source code debugging, though, I would recommend KDBG.\n",
            "votes": "30",
            "user": "joxeankoret",
            "time": "Mar 30, 2013 at 10:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I would actually recommend using IDA's <code>linux_server</code> over remote GDB, it's more capable and faster (since it uses binary protocol and not text-based one).</span>",
                    "time": null
                },
                {
                    "user": "asheeshr",
                    "text": "<span class=\"comment-copy\">Please justify your recommendation. The answers are written not just for the OP but for all the other people who may come across this in the future.</span>",
                    "time": null
                },
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">Basically because you have all the power of IDA (plugins, IDAPython scripting, known GUI, ...) and is not only a frontend for GDB.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Even at the risk of severe downvoting, I'd like to side with the plain old <pre><code>gdb</code></pre> prompt and recommend against a GUI frontend. I started out learning more advanced use of GDB by reading Art of Debugging some years ago. It describes GDB and DDD as well as Eclipse as frontends to GDB. I still recommend the book even in 2023 to learn the basics; despite its age. Of course there is also the GDB manual.\nAdmittedly most of the time I am using Vim as my IDE on the terminal and <pre><code>tmux</code></pre> (earlier <pre><code>screen</code></pre> with <pre><code>byobu</code></pre>). Therefore I am switching between panes in my terminal multiplexer to switch quickly between code and debugger. The GDB prompt - after some weeks of trying the TUI (start with <pre><code>gdb -tui</code></pre>, <pre><code>gdbtui</code></pre> or at the prompt layout next) - has indeed everything I ever desired and you should keep in mind that you can attach multiple times to the same process (thereby having a look at memory the way you describe it).\nIt seems that all frontends are lagging behind a little - no surprise - and it makes more sense to come to terms with the GDB prompt and its niceties and oddities. Keep in mind that on a bare-metal setup it may be the only thing you have. Thus it makes sense to learn it even if you find a \"decent\" GUI by your own standards.\nNewer versions of GDB will also support Python scripting and through that provide a very powerful set of tools to debug, even just from the command line.\nIf you absolutely insist on using a GUI frontend, I would also recommend IDA Pro for the simple reason that it gives you a single frontend for a variety of debuggers and you have to learn (or customize) its shortcuts only once. Disadvantages: price and flexibility when you don't have a license on a particular machine or no way to tunnel to a GDB server etc ...\n\nAdditional options to make your debugging experience slicker would be:\n\ngef: GDB Enhanced Features as recommended in this answer, which is particularly conducive to reverse engineering endeavours\nGDB dashboard\n\n\nI'm not aware of any frontend of GDB that accepts WinDbg commands. And I can only emphasize again: you will reap the fruit of the time invested in learning vanilla GDB anyway. Don't shy away from the effort. There are plenty of things in WinDbg which are specific to the way Windows works, the Windows kernel works and so on. GDB is much more generic.\n",
            "votes": "25",
            "user": "0xC0000022L",
            "time": "May 23, 2023 at 11:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I'd like to suggest DDD.\nIf you've got source code, you should check out QTCreator.  Its debugger is similar to Visual Studio's, if you're familiar with that.\n",
            "votes": "20",
            "user": "omghai2u",
            "time": "Mar 30, 2013 at 2:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">I've used <code>DDD</code> and wasn't a fan.  I'll check out QtCreator though, thanks!</span>",
                    "time": null
                },
                {
                    "user": "Roman PlÃ¡Å¡il",
                    "text": "<span class=\"comment-copy\">DDD is great for displaying data structures, you can lay them out on a board (a light table of sorts). Hence data-display-debugger.</span>",
                    "time": null
                },
                {
                    "user": "Alexander",
                    "text": "<span class=\"comment-copy\">DDD looks weird and out-of-date at first glance, but it's really powerful.</span>",
                    "time": null
                },
                {
                    "user": "RichieHH",
                    "text": "<span class=\"comment-copy\">Ddd is, imo, poor and pretty much abandoned. It's certainly not in anyway powerful as all it is  is  a front end to gdb.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Not GUI but a good replacement once you get used to it (and personally I think it's faster for most stuff) -> https://github.com/gdbinit/Gdbinit.\nI remembered when I started *nix reversing and I had to face gdb for the first time. Hated it and +mammon original's gdbinit saved my day. These days I prefer gdb to most GUI debuggers.\nGive it a try :-)\nFull disclosure: I am the author of the tool.\n",
            "votes": "14",
            "user": "0xC0000022L",
            "time": "Jan 24, 2020 at 10:01",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">You should write a disclosure that Gdbinit is a software you're maintaining...</span>",
                    "time": null
                },
                {
                    "user": "fG-",
                    "text": "<span class=\"comment-copy\">So? It's free, available to anyone. Not exactly trying to sell anything here. Geez...!</span>",
                    "time": null
                },
                {
                    "user": "heinrich5991",
                    "text": "<span class=\"comment-copy\">@fg- That still might be some advertising that is not based on experience but solely on the fact you wrote that tool.</span>",
                    "time": null
                },
                {
                    "user": "fG-",
                    "text": "<span class=\"comment-copy\">So you can't advertise your useful tools that solve problems and have to wait for others to do it? That's some really weird thinking mode for a problem solver \"community\".</span>",
                    "time": null
                },
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">@fG- please read the FAQ: <a href=\"https://reverseengineering.stackexchange.com/help/behavior\">reverseengineering.stackexchange.com/help/behavior</a> (section \"Avoid overt self-promotion\")</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I don't really like DDD, it's so 90's in it's GUI.\nI would like to recommend KDBG, which is a KDE frontend to gdb.\nBesides, you might want to take a look at Cgdb, which is a curses extension for gdb.\nLately I came across Nemiver, it looks really promising.\n",
            "votes": "12",
            "user": "Mellowcandle",
            "time": "May 5, 2013 at 7:30",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">Does KDBG work well for disassembling and debugging without source as well?  Their screenshots showed source code only.</span>",
                    "time": null
                },
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">I don't know, never tried it before...</span>",
                    "time": null
                },
                {
                    "user": "torvin",
                    "text": "<span class=\"comment-copy\">\"it's so 90's in it's GUI\"... more like 80's</span>",
                    "time": null
                },
                {
                    "user": "Sunspawn",
                    "text": "<span class=\"comment-copy\">Is the appearance of the GUI the only downside?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "cgdb is also a great option if you use Vim.\ncgdb shares a lot of commands with vim, such as regex search and many others. From the cgdb home page: \n\nThe keyboard interface is modeled after vim, so vim users should feel at home using cgdb.\n",
            "votes": "8",
            "user": "0xC0000022L",
            "time": "Jan 24, 2020 at 9:58",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I usually use Vim + gdb in CLI mode when coding etc. But sometimes a GUI is preferable.\nOne other option, beside the ones mentioned, is Code::Blocks. It uses GDB and CDB as back-end. For GDB you can select AT&T, Intel or custom for disassembly. It supports mixed mode as well as pure instructions listing. You can further set it up to evaluate variables (in code) under cursor etc.\nThere is only one memory dump window, but you can additionally enter raw GDB commands in Command line at bottom which gets printed to window â€“ thus e.g. memory dumps.\nIt has a separate window for CPU registers, they are not directly editable, but you can set values by mentioned command line, as well as other values:\n<pre><code>set $eax = 123\nset var xyz = 'q'\n</code></pre>\nPicture below shows it in action with source debugging on a KVM (Open link to view it in larger format).\nOne issue I have had with it is some GUI bugs etc. when I run it on Ubuntu 12 â€“ UB 12 have version 10.10. But a compile and install of current release, 12.11, was painless.\nE.g. for custom install path install (If your distribution does not have up to date version and you want to have both):\n<pre><code>- Download (SVN or release).\n- Unpack.\n- ./configure --exec-prefix=/blahblah/codeblocks --prefix=/blahblah/codeblocks\n- make\n- sudo make install 2>&1 | tee my_install.log\n</code></pre>\n",
            "votes": "6",
            "user": "Runium",
            "time": "Jun 21, 2013 at 23:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "VisualStudio.Code (VS.Code) runs on Linux and has a \"Native Debug\" extension that lets you use gdb. It has very responsive UI. It's extremely light on resources. The experience somewhat approximates Visual Studio on Windows for C++ developers (there's no assembly view though). The main debug shortcuts are the same out of the box (F5, Shift-F5, F10, F11).\nInstallation is two-click (one to install VS.Code, the other to install the extension), great for someone coming from Windows Visual Studio and looking to be productive right away.\n",
            "votes": "6",
            "user": "Sergiy Migdalskiy",
            "time": "Feb 10, 2018 at 2:31",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "This Dr Dobbs article shows in detail GUIs for debugging on Linux OS. I recommend the Qt-Creator called GDB debug based on Linux environment. Anyway the article only reviews debugging C++ code, but that is enough to show off GDBs debugging features.\n",
            "votes": "5",
            "user": "cb88",
            "time": "Jun 26, 2013 at 12:15",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "There's Voltron, which is an extensible Python debugger UI that supports LLDB, GDB, VDB, and WinDbg/CDB (via PyKD) and runs on macOS, Linux and Windows. For the first three it supports x86, x86_64, and arm with even arm64 support for lldb while adding even powerpc support for gdb.\nThe author also wrote a Binary Ninja plugin to integrate Voltron -- https://github.com/snare/binjatron -- which allows syncronized views.\n",
            "votes": "5",
            "user": "atdre",
            "time": "Sep 4, 2016 at 20:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can use GDBFrontend that I develop for a while.\n",
            "votes": "4",
            "user": "Meowing Cat",
            "time": "Jan 30, 2022 at 8:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "RichieHH",
                    "text": "<span class=\"comment-copy\">It's rather nice. I liked it but ended up moving back to gef.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I will recommend UltraGDB, which is GDB GUI frontend and lightweight IDE based on Eclipse technology.\n",
            "votes": "3",
            "user": "Xiao Ming",
            "time": "Jun 12, 2015 at 0:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "There iswas Affnic Debugger GUI. It is not free but a lite version exists. It's available for Windows, Linux & MacOS.\nFrom the official website,\n\nAffinic Debugger GUI .aka. ADG, is designed as a graphical user interface for various debuggers. This build is specifically targeted on GDB, the GNU debugger. With the graphical windows, ADG can unleash the full power of debuggers by viewing multiple types of information within one view and maneuvering debuggers with easily clicking.  ADG also provides an integrated command terminal for users to input debugger command directly. ADG is available on Linux/Windows/Mac OS X.\n",
            "votes": "3",
            "user": "0xC0000022L",
            "time": "May 23, 2023 at 10:52",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Note that the following applies to source code debugging only.\n<pre><code>CLion</code></pre> is an <pre><code>IDE</code></pre> using <pre><code>gdb</code></pre>. You still have the ability to type in commands but many features are seamlessly implemented in the GUI such as stepping, seeing currently active variables and setting <pre><code>breakpoints</code></pre>. Read more <pre><code>here</code></pre>.\n",
            "votes": "2",
            "user": "BullyWiiPlaza",
            "time": "Jan 17, 2017 at 8:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I've written a new frontend called Seer. Give it a try and offer and suggestions.\nhttps://github.com/epasveer/seer\n",
            "votes": "2",
            "user": "epasveer",
            "time": "Sep 5, 2021 at 22:43",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Frankly speaking... Nothing can really compare to the GDB itself. Just take the newest version, start it with <pre><code>gdb-multiarch</code></pre> (GDB now has support for all architectures and you don't need any kind of GDB branch anymore).\nWhen GDB runs just load a file:\n<pre><code>file <some_file_with_gdb_symbols.elf>\n</code></pre>\nand connect to a running GDB server (on port <pre><code>:3333</code></pre>) - in my case Openocd that communicates with any kind of embedded board:\n<pre><code>target extended-remote :3333\n</code></pre>\nWhen the session starts type these commands taken directly from the newest GDB manual (link, section 25):\n<pre><code>tui enable\ntui new-layout mylayout {-horizontal {src 8 asm 2} 6 regs 4} 8 status 0 cmd 2\nlayout mylayout\nrefresh\nset tui border-kind space\nset tui tab-width 4\nset tui compact-source on\nwith pagination off -- focus cmd\n</code></pre>\n\nPut these commands in a system wide GDB configuration file <pre><code>/etc/gdb/gdbinit</code></pre> and live happily ever after.\n\nAfter all is done you should end up with something like this:\n\nExtremely pleasing if you ask me. Especially with the newest GDB that now can stack windows horizontally (excluding <pre><code>cmd</code></pre> & <pre><code>status</code></pre> where <pre><code>cmd</code></pre> can only be full width... oh why such limitations...) as can be seen from the command where I created my layout i.e. <pre><code>mylayout</code></pre>.\nAll that I am missing is a window for monitoring variables, addresses or expressions which I would love to position on the right of <pre><code>asm</code></pre> window... GNU, I know you can do it!\n",
            "votes": "2",
            "user": "71GA",
            "time": "Apr 22, 2022 at 22:02",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Fast, self contained, documented and supported is the wonderful gef (GDB Enhanced Features)\n",
            "votes": "1",
            "user": "0xC0000022L",
            "time": "Mar 1, 2021 at 7:58",
            "is_accepted": false,
            "comments": []
        }
    ]
}