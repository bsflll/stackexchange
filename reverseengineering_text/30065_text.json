{
    "title": "Make Ghidra recognize thread-local variables",
    "link": "https://reverseengineering.stackexchange.com/questions/30065/make-ghidra-recognize-thread-local-variables",
    "content": "I am trying to reverse an ELF binary that makes use of thread-local variables. I can't figure out how to make Ghidra display them in a friendlier way (something like declaring a struct or similar).\nFor example, this is how a call to scanf with a FILE* stored in TLS looks like:\n<pre><code>scanf(*(FILE **)(in_FS_OFFSET + 0xfffffff0),\"%d\",&num);\n</code></pre>\nIdeally, I would like this to look something like:\n<pre><code>scanf(tls->outfile, \"%d\", &num);\n</code></pre>\nIs it possible to make it more user-friendly? I looked around but I haven't seen anyone complaining about this.\nHere's an example code:\n<pre><code>#include <threads.h>\n#include <stdio.h>\n#include <assert.h>\n\nthread_local int foo = 0;\n\nint main(void) {\n    assert(scanf(\"%d\", &foo) == 1);\n    printf(\"foo is: %d\n\", foo);\n    return 0;\n}\n</code></pre>\n<pre><code>tls.c</code></pre> compile with <pre><code>CFLAGS=\"-std=c11 -Wall -Wextra -O0 -ggdb -Werror\" make tls</code></pre>\nAnd here's the decompiled code:\n",
    "votes": "1",
    "answers": 1,
    "views": "569",
    "tags": [
        "ghidra",
        "thread"
    ],
    "user": "Marco",
    "time": "Feb 22, 2022 at 23:19",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Okay, so it does indeed handle it differently at <pre><code>-O0</code></pre> (and even at <pre><code>-O3</code></pre> for that matter) to <pre><code>static</code></pre> or a mere global variable. However, what's shown as <pre><code>in_FS_OFFSET</code></pre> presumably is <pre><code>fs:0</code></pre> and this answers how and why -4 is needed here. Given your answer, I think however, you're conflating things a bit.\n",
            "time": null
        },
        {
            "user": "Marco",
            "text": "In my answer, they propose a way to support having pointers to the middle of a struct, enabling having negative offsets. If that were supported, you could retype <pre><code>in_FS_OFFSET</code></pre> as a pointer to the end of your struct, and then it would automatically recognize your thread_local fields.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "yes you could do that. However, just like when you see access to the TEB or PEB via one of the selectors on Windows, this is a particular \"well-known construct\" particular to Linux that should be handled (and is, evidently handled, given the name it is assigned) accordingly. That doesn't make this a struct, however. I really don't see it as of yet.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It seems like this feature is not yet implemented in Ghidra.\n",
            "votes": "-1",
            "user": "Marco",
            "time": "Feb 22, 2022 at 23:16",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">What does this have to do with thread-local variables? All I can see in the defect report is that there is no way to properly access structs from a linked list, where the linked list members have an <code>LIST_ENTRY</code> as their member. This is a common scheme in NT and support for <code>CONTAINING_RECORD</code> therefore a sensible request. But where is the connection to thread-local variables?</span>",
                    "time": null
                },
                {
                    "user": "Marco",
                    "text": "<span class=\"comment-copy\">The question is about supporting pointers to the middle of a struct, it has nothing to do with lists. In this case, if you define a struct that would be \"thread_local_vars\", and get your pointer to the end of it, you should be able to get Ghidra to recognize it, right?</span>",
                    "time": null
                }
            ]
        }
    ]
}