{
    "title": "Daikin A/C 4bit CRC/Checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/13936/daikin-a-c-4bit-crc-checksum",
    "content": "I am reverse engineering IR protocol of Daikin A/C. AC sends the whole current state of remote on each key press. Data sent is 8 byte long, last 4 bits seem to be the some kind of error checking.\nFirst byte never changes, it's always 01101000!\nHere is the samples:\nTime/Minutes changes in 3d byte (time 12:00am from 00 minutes to 10 minutes) (button On/off, it's 8th byte first bit before checksum):\n<pre><code>01101000 01000100 00000000 00000000 00000000 00000000 00000100 001 1 1001\n01101000 01000100 10000000 00000000 00000000 00000000 00000100 001 1 0101\n01101000 01000100 01000000 00000000 00000000 00000000 00000100 001 1 1101\n01101000 01000100 11000000 00000000 00000000 00000000 00000100 001 1 0011\n01101000 01000100 00100000 00000000 00000000 00000000 00000100 001 1 1011 \n01101000 01000100 10100000 00000000 00000000 00000000 00000100 001 1 0111 \n01101000 01000100 01100000 00000000 00000000 00000000 00000100 001 1 1111 \n01101000 01000100 11100000 00000000 00000000 00000000 00000100 001 1 0000 \n01101000 01000100 00010000 00000000 00000000 00000000 00000100 001 1 1000 \n01101000 01000100 10010000 00000000 00000000 00000000 00000100 001 1 0100 \n01101000 01000100 00001000 00000000 00000000 00000000 00000100 001 1 0101 \n</code></pre>\nTemp (7th byte) from 20 to 30 (time 12:00am): \n<pre><code>01101000 01000100 00000000 00000000 00000000 00000000 10000100 0010 0100 \n01101000 01000100 00000000 00000000 00000000 00000000 01000100 0010 1100 \n01101000 01000100 00000000 00000000 00000000 00000000 11000100 0010 0010 \n01101000 01000100 00000000 00000000 00000000 00000000 00100100 0010 1010 \n01101000 01000100 00000000 00000000 00000000 00000000 10100100 0010 0110 \n01101000 01000100 00000000 00000000 00000000 00000000 01100100 0010 1110 \n01101000 01000100 00000000 00000000 00000000 00000000 11100100 0010 0001 \n01101000 01000100 00000000 00000000 00000000 00000000 00010100 0010 1001 \n01101000 01000100 00000000 00000000 00000000 00000000 10010100 0010 0101 \n01101000 01000100 00000000 00000000 00000000 00000000 00001100 0010 0100\n</code></pre>\nFan speed (2nd byte, last 4bits) from auto to 3 (time 12:00am): \n<pre><code>01101000 0100 1000 00000000 00000000 00000000 00000000 00001100 0010 1000 \n01101000 0100 0001 00000000 00000000 00000000 00000000 00001100 0010 0001 \n01101000 0100 0010 00000000 00000000 00000000 00000000 00001100 0010 0010 \n01101000 0100 0100 00000000 00000000 00000000 00000000 00001100 0010 0100 \n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "944",
    "tags": [
        "binary-analysis",
        "protocol",
        "crc"
    ],
    "user": "Alex",
    "time": "Nov 15, 2016 at 9:38",
    "comments": [
        {
            "user": "0xec",
            "text": "and the question is...?\n",
            "time": null
        },
        {
            "user": "Alex",
            "text": "determine CRC calculation....\n",
            "time": null
        },
        {
            "user": "BenB",
            "text": "What remote model is this? For most models (e.g ARC433), the checksum is the last byte, not just the last 4 bits. It's just the sum of all the previous bytes, modulo 0xff. For your codes, it looks similar (note that the checksum increased as the data values increase), however treating it as a simple sum isn't quite working here, perhaps your bit decoding is a little off?\n",
            "time": null
        },
        {
            "user": "Kerim Can Kalıpcıoğlu",
            "text": "You may want to add that to question section, are you analysing binary file or network traffic? It will be better if you use relevant tags.\n",
            "time": null
        },
        {
            "user": "A. B. Al-Idrus",
            "text": "I am curious as to whether you found a solution to this problem. I am facing a very similar problem. And indeed the readings I have taken from the A/C remote are very similar to yours. It appears both our A/C remotes are \"speaking\" the same protocol. BTW, I tried running the answer given above against my numbers and not only do I not understand what is going on but I also think it doesn't work. ``` 0110 1000 0100 1000 1001 0000 0100 0100 1100 0110 1000 0000 0110 1000 0010 0011 :ModeCool 0110 1000 1000 1000 1001 0000 0100 0100 1100 0110 1000 0000 0110 1000 0010 1101 :ModeDry 0110 1000 0010 0001\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Not sure why my last question was deleted.. anyway here is the answer - the bit order of the sum at the end is reversed..\n<pre><code>uint8_t rev(uint8_t b) {\n   b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;\n   b = (b & 0xCC) >> 2 | (b & 0x33) << 2;\n   b = (b & 0xAA) >> 1 | (b & 0x55) << 1;\n   return b;\n}\n\nint main() {\n  uint8_t test2[] = { 0x68,0x44,0x1C,0xC8,0x88,0x08,0x04,0x2C };\n\n  uint8_t total=rev(test2[7]) & (uint8_t)0xF;\n  for (uint8_t i=0; i<7; i++) {\n    total += (uint8_t)rev(test2[i]) & (uint8_t)0xf;\n    total += (uint8_t)rev(test2[i]) >> 4;\n  }\n  printf(\"total sum: %d\n\",total);\n  printf(\"calc mask: %d\n\",total & (uint8_t)0xF);\n  printf(\"supplied mask: %d\n\",rev(test2[7]) >> 4);\n}\n</code></pre>\n",
            "votes": "2",
            "user": "daikin",
            "time": "Dec 24, 2017 at 6:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}