{
    "title": "How can I modify these?",
    "link": "https://reverseengineering.stackexchange.com/questions/25568/how-can-i-modify-these",
    "content": "So I'm onto something interesting, I asked the less direct way but failed to meet the requirements in terms of explanation\nSo here it is, how would I go about editing these the same way I would go about editing them in the code?\n\nIn reality I would set these to '0' ,how would I go about this with the Debugger?\n",
    "votes": "0",
    "answers": 1,
    "views": "180",
    "tags": [
        "disassembly",
        "assembly",
        "debugging",
        "c++",
        "x86-64"
    ],
    "user": "memapa4364",
    "time": "Jul 27, 2020 at 23:25",
    "comments": [
        {
            "user": "Jongware",
            "text": "Your \"set these to '0'\" is highly ambiguous. These functions return the string address for some internal variables -- presumably you want to set their value to 0, right? Not the string contents? Then you need to trace back where these functions are called from and get their value assigned.\n",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "Do you want to set rax to 0? Press space and type \"xor rax, rax\". Anyway I think it won't be good for software you are editing.\n",
            "time": null
        },
        {
            "user": "memapa4364",
            "text": "do you mean this? i.imgur.com/zdWPgvz.png , doesn't make much sense as there is no \"DS\" , also in the aforementioned less direct post someone said : (4831c9 xor rcx, rcx ),,,,,, AND YES, I do mean change the Variable recoil to 0.\n",
            "time": null
        },
        {
            "user": "morsisko",
            "text": "There is little chance that nulling the rax here will change variable recoil to 0, you want to null register which is supposed to hold string, not that one with recoil.\n",
            "time": null
        },
        {
            "user": "memapa4364",
            "text": "And how do I find it according to what I got? ty btw\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "the instruction lea loads the Effective Address of its operand\nso after executing lea rcx, qword ptr ds:[xxxxxxx]\nrcx will hold the address xxxxxxx\nso if you are sure you need rcx to be 0 in that instruction simply wipe the address from that specific operand\nthat is make 48:8d05 xyzabcd  as 48:8d0425 00000000\nor assemble lea rax,qword ptr ds:[0]\nkeep in mind this requires one extra byte because of rip relative addressing\n8d05 00000000 will address the next instruction in x64\nand will destroy the ret opcode\nhaving said that what you are trying to do simply doesnt make sense\nthat instruction returns an address which will be acted upon\nreturning 0 to process further will surely result in access violation\ndown the line\nassume the returned address holds a string whose length is checked further down\nwhat will happen if NULL address was passed to that function\nthese kind of construction often represent a switch case or jump table construct\nread about them\nbelow is a samll poc that will generate code similar to your screenshot\n<pre><code>#include <stdio.h>\nchar *a[] =  \n{\n    \"Your Name\",\"Our Name\",\"Her Name\",\"His Name\",\"Their Name\",\"That Name\",\n    \"This Name\",\"What Name\",\"Why Name\",\"Where Name\",\"How Name\",\"Whose Name\",NULL\n};\nchar *getname( int indx ) \n{\n    switch(indx)\n    {\n        case 'a': return a[0];\n        case 'b': return a[1];\n        case 'c': return a[2];\n        case 'd': return a[3];\n        case 'e': return a[4];\n        case 'f': return a[5];\n        case 'g': return a[6];\n        case 'h': return a[7];\n        case 'i': return a[8];\n        case 'j': return a[9];\n        case 'k': return a[10];\n        case 'l': return a[11];        \n        default:  return \"NoName\";\n    }\n}\nint main(int argc,char *argv[]) \n{\n    if(argc !=2) return 0;\n    printf(\"%s\n\" , getname(*argv[1]));\n    return 0;\n}\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Jul 28, 2020 at 19:46",
            "is_accepted": false,
            "comments": []
        }
    ]
}