{
    "title": "Colorize and disassemble byte sequences with IDA Pro and IDAPython",
    "link": "https://reverseengineering.stackexchange.com/questions/11350/colorize-and-disassemble-byte-sequences-with-ida-pro-and-idapython",
    "content": "Maybe someone could help me with the following problem:\nI have an interesting byte sequence that I found within a MIPS ELF binary that exists on the hard drive. This byte sequence may be, for example, <pre><code>9c 6c 3c 04 80 2d 24 84 85</code></pre>. Now I want to find this byte sequence with IDAPython. Therefore, I use the <pre><code>idc.FindBinary()</code></pre> function like so:\n<pre><code>address = idc.FindBinary(0, SEARCH_DOWN, byte_sequence)\n</code></pre>\nwhich finds the first occurrence of the byte sequence at <pre><code>address</code></pre>. In general I want to achieve two things:\n\nI want to colorize the effected affected lines in the IDA View\nI want to get the disassembled instructions\n\nCurrently there are two subproblems I want to solve:\n\nThe byte sequence may start within the instruction, for example, in a <pre><code>jal address</code></pre> the byte sequence starts at <pre><code>address</code></pre> instead of at <pre><code>jal</code></pre>. How can I search backwards to find the beginning of the instruction when the byte sequence started within the instruction? Colorizing works with:\n<pre><code>SetColor(address, CIC_ITEM, 0x208020)\n</code></pre>\nIf the byte sequence is 9 bytes long (as in the example above), how can I tell IDAPython to disassemble all 9 bytes. I would have to know how \"long\" the instructions are that IDAPython disassembles to get to the next instruction. What I know is that I can disassemble at a single addresses with:\n<pre><code>disasm = idc.GetDisasm(address)\n</code></pre>\n\nAny help would be greatly appreciated!\n",
    "votes": "3",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "disassembly",
        "idapython",
        "binary"
    ],
    "user": "metaphysicalmarty",
    "time": "Nov 18, 2015 at 9:25",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "Not 100% sure, but i seem to remember that MIPS instructions are always exactly 4 bytes, so you can just do some modulo calculations. Otherwise, PrevHead and NextHead are probably what you want (<pre><code>idc.PrevHead</code></pre> and <pre><code>idc.NextHead</code></pre> in IdaPython).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can easily do that using Sark:\n<pre><code># Get all the lines relevant to your bytes\nfor line in sark.lines(start=address, end=address + len(byte_sequence)):\n    # For each line, color it, and print the disasm and the instruction length\n    line.color = 0x123456\n    print 'Line Size: {}\nLine Disasm: {}'.format(line.size, line.disasm)\n</code></pre>\nYou might need to add handling for cases where there is no disassembly (the bytes are data-bytes and not code).\n",
            "votes": "3",
            "user": "tmr232",
            "time": "Nov 18, 2015 at 11:33",
            "is_accepted": true,
            "comments": []
        }
    ]
}