{
    "title": "Decrypting assets (json/png/lua)",
    "link": "https://reverseengineering.stackexchange.com/questions/14102/decrypting-assets-json-png-lua",
    "content": "Context\nI am trying to decrypt a game for its assets for learning purposes. I have extracted out said assets from the game package, they are in formats of <pre><code>.json</code></pre>, <pre><code>.png</code></pre> and <pre><code>.lua</code></pre>. However, they are encrypted. Inspecting the files in hex view, I noticed something particularly interesting: all of their bytes start with <pre><code>4448 4741 4d45 53</code></pre>, which in ascii corresponds to the publisher of the game.\nWhat I have done\n\nRan a <pre><code>strings</code></pre> command on the game binary to extract all the strings out, one of which should be the decryption key\nWrote a python script to try each of the possible keys on these encrypted assets using AES, XXTEA and XOR. The key is validated if the decryption result is a valid json/lua text file. \n\nUsually these two steps alone would find me the key for many other games, but this time to no avail. \nWhat other steps can I do to try to decrypt these assets statically without having to gdb into runtime? \n** The link to assets can be found here https://www.dropbox.com/sh/7pqhvpsa0ems0q9/AAA8lHrudeix3hJ0Rz2tXPSxa?dl=0\n",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "decryption"
    ],
    "user": "saulgoodman",
    "time": "Dec 3, 2016 at 15:00",
    "comments": [],
    "answers_data": [
        {
            "content": "There are a few things you can still try, like running signsrch over the binary to see if it has any encryption algorithm signatures.\nAlso, gzipping these files increases their size:\n<pre><code>gbl@roran:~/Temp/14102$ ls -l\n-rw-r--r-- 1 gbl users 1319 Dez  3 20:40 effect.json\n-rw-r--r-- 1 gbl users  119 Dez  3 20:40 version.lua\ngbl@roran:~/Temp/14102$ gzip *\ngbl@roran:~/Temp/14102$ ls -l\n-rw-r--r-- 1 gbl users 1354 Dez  3 20:40 effect.json.gz\n-rw-r--r-- 1 gbl users  154 Dez  3 20:40 version.lua.gz\n</code></pre>\nwhich might be a hint they're compressed as well -- but maybe not, as encrypting them should increase their entropy just the same, which would result in the same effect.\nAnyway, check if the result of your decryption step has a compressor signature, and decompress if it has.\nBut honestly, disassembling the code, checking for the <pre><code>4448 4741 4d45 53</code></pre> string, where it is referenced, and starting your reversing there, is probably the only way to do this. Remember the encryption key might be any binary byte sequence as well, or even generated on runtime, so you can't really assume to find it using <pre><code>strings</code></pre>.\n",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Dec 3, 2016 at 19:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}