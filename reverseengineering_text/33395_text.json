{
    "title": "Identify an unknown attached signature algorithm",
    "link": "https://reverseengineering.stackexchange.com/questions/33395/identify-an-unknown-attached-signature-algorithm",
    "content": "I have a collection of both signed and unsigned firmware images for a device (of which the bootloader seems to require the signed images).\nI also have what I think may be the signing key (a 256-bit EC key for a NIST curve).\nThe signed images are identical to the unsigned images, but with a 68-byte footer. The first 4 bytes of that footer always seem to be zero, and are probably superfluous, while the remaining 64 bytes appear to be totally random.\nI've played around with <pre><code>openssl dgst -sign -sha256</code></pre> and other OpenSSL CLIs, but can't get anything that matches even the format of the expected output. Can anyone suggest any signature schemes that would take an EC key and generate a 64- or 68-byte signature, that I should investigate?\n",
    "votes": "2",
    "answers": 1,
    "views": "50",
    "tags": [
        "encryption",
        "firmware-analysis",
        "openssl"
    ],
    "user": "Dan Lenski",
    "time": "Feb 26 at 0:10",
    "comments": [],
    "answers_data": [
        {
            "content": "Figured it outâ€¦\nThe ECDSA signature is in the form of a raw (r, s) pair, rather than the standard DER-encoded form.\n<pre><code>from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.asymmetric.utils import encode_dss_signature\nfrom cryptography.hazmat.primitives.serialization import load_pem_private_key\n\npk = load_pem_private_key(open('signing-key.pem','rb').read(),None)\nsigned = open('signed-firmware.bin', 'rb').read()\n\nassert signed[-68:-64] == b'\\0\\0\\0\\0'\nunsigned = signed[:-68]\n\nr, s = int.from_bytes(signed[-64:-32], 'big'), int.from_bytes(signed[-32:], 'big')\nsig = encode_dss_signature(r, s)\npk.public_key().verify(sig, unsigned, ec.ECDSA(hashes.SHA256()))\n</code></pre>\n",
            "votes": "2",
            "user": "Dan Lenski",
            "time": "Feb 26 at 5:55",
            "is_accepted": true,
            "comments": []
        }
    ]
}