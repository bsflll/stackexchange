{
    "title": "ELF File format Two terminating null dword towards 0xc0000000?",
    "link": "https://reverseengineering.stackexchange.com/questions/6723/elf-file-format-two-terminating-null-dword-towards-0xc0000000",
    "content": "While I was reversing an elf binary, I tried to manually compute my environment variable's address. Therefore I found this documentation and we're said that there is one NULL DWORD at the end of the stack.\nIn that case, the stack's binary isn't randomized, so there is a NULL DWORD at 0xbffffffc (0xc0000000 - 4). Then normally goes the program's name towards low addresses. So one would read into the stack:\n<pre><code>./program_name\\0 + NULL DWORD\n</code></pre>\nBut I'm finding two dwords when I check this out with gdb:\n<pre><code>(gdb) x/4x 0xc0000000 - 0x10\n0xbffffff0:     0x5f747365      0x00766e65      0x00000000      0x0000000\n</code></pre>\nI can see that there's the end of my program name (plus the \\0 as well) but shouldn't it end  at 0xbffffffc instead of 0xbffffff8? There are two nul dwords instead of one, and I cannot understand why.\n",
    "votes": "1",
    "answers": 2,
    "views": "137",
    "tags": [
        "gdb",
        "elf",
        "stack"
    ],
    "user": "Geoffrey R.",
    "time": "Nov 27, 2014 at 11:37",
    "comments": [],
    "answers_data": [
        {
            "content": "I don't know which architecture you are on, but the original documentation links to <pre><code>create_elf_tables</code></pre> in binfmt_elf.c.\nIn this function, you've got <pre><code>p = arch_align_stack(p);</code></pre>. The chinese documentation is obviously written for x86, but your architecture may use 8 bytes alignement for your stack, and pad with an extra DWORD.\n",
            "votes": "1",
            "user": "Jacen",
            "time": "Nov 27, 2014 at 16:48",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Actually the architecture you're based on is important. In the given example, we were supposed that the binary was running on an x86 system. In my case, although it's been compiled with <pre><code>-m32</code></pre>, it's been run on an x64 system, thus aligning the stack with a QWORD, not a DWORD. This explains why there are \"two DWORD\" instead of one.\n",
            "votes": "0",
            "user": "Geoffrey R.",
            "time": "Nov 27, 2014 at 16:43",
            "is_accepted": false,
            "comments": []
        }
    ]
}