{
    "title": "Make avaible x64 C++ exceptions on manually mapped module",
    "link": "https://reverseengineering.stackexchange.com/questions/29702/make-avaible-x64-c-exceptions-on-manually-mapped-module",
    "content": "I am trying to bind Lua on manually mapped module. As you can see clearly on here.\nThey are using C++ or C exceptions on their API and there is no way to avoid them.\nI wonder to know if there are possibilities to enable that exceptions on my module.\nI had tried to patch these line as following:\n<pre><code>#define LUAI_THROW(L,c) c->throwed = true\n#define LUAI_TRY(L,c,a) \\\n    __try { a } except(0xDEADBEEF) { if ((c)->status == 0 && ((c)->throwed == true)) (c)->status = -1; }\n#define luai_jmpbuf     int  /* dummy variable */\n\n/* chain list of long jump buffers */\nstruct lua_longjmp {\n  struct lua_longjmp *previous;\n  luai_jmpbuf b;\n  volatile int status;  /* error code */\n  bool throwed;\n};\n</code></pre>\nAnd compiled my module with /EHa, but it didn't work as expected.\n",
    "votes": "1",
    "answers": 0,
    "views": "41",
    "tags": [
        "c++",
        "c"
    ],
    "user": "aya",
    "time": "Dec 10, 2021 at 19:34",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "What do you mean by “manually mapped”? I think we need more details about your environment and what exactly you are trying to achieve.\n",
            "time": null
        },
        {
            "user": "aya",
            "text": "@IgorSkochinsky writing shellcode to victim process and calling it by creating remote thread on usermode without syscalls.\n",
            "time": null
        }
    ],
    "answers_data": []
}