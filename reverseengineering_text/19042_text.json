{
    "title": "Trying to identify block of code which generates 256 bit key",
    "link": "https://reverseengineering.stackexchange.com/questions/19042/trying-to-identify-block-of-code-which-generates-256-bit-key",
    "content": "I'm reversing a C++ program using IDA PRO to examine how the some data is stored, encrypted and decrypted.\nI've managed to identify the data is encrypted with AES CBC 16 block and 256 bit key. I have tested this as I have found the generated key in the program and managed to decrypt the data using online tools.\nThe problem I have is working out how the AES 256 bit key is generated. I have identified the code but is several hundered lines long. I \"think\" its a cut n copy of one of the hash functions from OpenSSL as I see references to that in other areas of the code but I cant be 100% sure.\nThere isn't much to go on in the code except a few magic numbers like 0x2AAAAAAB and that 3 DWORDS are pushed to the stack before the sub is called.\nI've downloaded the OpenSSL code but cant find anything yet. I've also used tools like Detect it Easy and a Plugin for IDA, which finds some crypto signatures which I BP, but they are never hit when stepping over the keygen function.\nCan anyone recommend anything what can help which this ? My ASM skills are no where near good enough to Single Step several hundreds of instructions.\nEDIT: I used the Hex Rays decomplier for the specific func and it churned out only a few lines of code !?!\nI've put it on paste bin at:\nhttps://pastebin.com/y6Zu42Ux\nCan anyone explain what it does ? However I'm not even sure this is the correct code as no matter where I press F5 to generate the Pseudo Code, it gives me the same output.\nEDIT: here is the paste of the full code\nhttps://pastebin.com/x0pjyuZD\n",
    "votes": "1",
    "answers": 0,
    "views": "624",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "henda79",
    "time": "Aug 12, 2018 at 10:42",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "Please also make the disassembly listing available for this function.\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "googling the constants 0xc48, 0x848 and 0x448 is a good idea. rohitab.com/discuss/topic/36066-blowfish relates this to blowfish somehow\n",
            "time": null
        },
        {
            "user": "henda79",
            "text": "added a pastebin link to the full code\n",
            "time": null
        },
        {
            "user": "henda79",
            "text": "@sudhackar There are references to blowfish in the code but I'm not sure this routine is part of it. I've posted the full code of that routine and a few small subs it uses\n",
            "time": null
        },
        {
            "user": "henda79",
            "text": "Yes, I found the decrypt routine as I can see the cleartext at the end and I can see the key used to decrypt, but I cant work out how it generates the key as the routine is so long.\n",
            "time": null
        }
    ],
    "answers_data": []
}