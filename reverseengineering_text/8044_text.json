{
    "title": "Repackaging APK file using baksmali and smali",
    "link": "https://reverseengineering.stackexchange.com/questions/8044/repackaging-apk-file-using-baksmali-and-smali",
    "content": "I am a student interested in Android Security. I was trying to modify a APK file using baksmali and smali. However, I am not able to run the repackaged app in my mobile. When I click on the icon it say \"Unfortunately, test has stopped\" and exists. (Even the icon of the app got changed, now I see default android icon instead of old real colorful icon of the app)    \nWhat could be the reason for this ? Actually I haven't even modified code of the apk file. I just unzipped apk to get dex file, then I converted it to smali using <pre><code>baksmali.jar</code></pre>, and then back to dex using <pre><code>smali.jar</code></pre>. Finally zipped and signed. \nWhat I have done in detail:\n\nDecompress the apk file\n<pre><code>$   Unzip test.apk\n</code></pre>\nConvert 1classes.dex1 to smali\n<pre><code>$ baksmali -x classes.dex -o smaliClasses\n</code></pre>\nConverted the classes back to <pre><code>classes.dex</code></pre> (replaced old <pre><code>classes.dex</code></pre>, in fact I did not add any new code to smali file. I wanted to know whether this works first).\n<pre><code>$ smali smaliClasses -o classes.dex\n</code></pre>\nZip all the files to <pre><code>test.zip</code></pre>\n<pre><code>$ zip test.zip AndroidManifest.xml classes.dex res META-INF resourses.arsc\n</code></pre>\nRename <pre><code>test.zip</code></pre> to <pre><code>test.apk</code></pre>\n<pre><code>$ mv test.zip test.apk\n</code></pre>\n\nNow I believe I have to sign the APK again, please correct me if am wrong here.\nEdited:\n\n<pre><code>java -jar signapk.jar testkey.x509.pem  testkey.pk8 test.apk  test-patched.apk</code></pre>\nI tried to install the new repackaged APK. Using adb shell. Adb shell showed it successfully installed. However, I am not able to run the repackaged app in mobile. The App crashes when I click on it. It says \"Unfortunately, test has stopped\".\n\nWhy doesn't the repackaged app running ? I don't understand what I am missing here ?\nEdited:\nI tried to repackage the same app using apktool. I extracted the smali files using it and repackaged. But why repackaging is not working with baksmali, smali, zip and signapk. Is zipping the real problem in this procedure? I see the size of the app is reduced drastically when I zip it and rename it to .apk compared to the original apk file :|\n",
    "votes": "14",
    "answers": 8,
    "views": "41k",
    "tags": [
        "android",
        "apk"
    ],
    "user": "aMa",
    "time": "Feb 22, 2015 at 11:17",
    "comments": [
        {
            "user": "xDragonZ",
            "text": "You should check your logcat for more information, if possible please post the crash log too.\n",
            "time": null
        },
        {
            "user": "aMa",
            "text": "@xDragonZ,I  have edited the post. This time I tried to install using \"adb install\" and signed using signapk.jar. This time app got installed in phone. However, when I click on the app it crashes saying \"\"Unfortunately, app has stopped\". One thing I noticed is size of the repacked apk is lesser than the orginal, is it the zip tool reason for that change is size ? Any clue on why the app crashes ? How do I get a log for this? Thank you so much.\n",
            "time": null
        },
        {
            "user": "evlncrn8",
            "text": "perhaps you also need to zipalign the file?\n",
            "time": null
        },
        {
            "user": "diff",
            "text": "Are you deodexing (<pre><code>baksmali -x option</code></pre>) on purpose? You are it would appear that since you are performing this option, without providing a \"bootclasspath\" you're going to get some odd smali code that might not be able to converted back into a dex file.  Also, just remove the META-INF folder prior to zipping and trying doing <pre><code>zip -r unsigned.apk *</code></pre> inside the directory with all the contents.  If this still crashes, try posting the logcat output\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "So out of five answers not a single one is acceptable?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I use <pre><code>apktool</code></pre> for this purpose, and a short little pair of shell scripts for decompiling and recompiling APKs:\n\ndecompile-apk\n\n<pre><code>#!/bin/bash -e\nif ! [ \"$1\" ]; then\n    echo \"usage: $0 <file.apk>\"\n    exit -1\nfi\n\nfn=${1%.apk}\ntarget_apk=$fn.apk\napktool d -f \"$target_apk\" -o smali\necho \"Done.\"\n</code></pre>\ncompile-apk\n\n<pre><code>#!/bin/bash -e\nif ! [ \"$1\" ]; then\n    echo \"usage: $0 <original.apk>\"\n    exit -1\nfi\n\nfn=${1%.apk}\n\nrm -f $fn.unaligned.apk $fn.smali.apk\nrm -rf smali/build\n\napktool b -f smali/ -o $fn.unaligned.apk\njarsigner -verbose -sigalg MD5withRSA -digestalg SHA1 -keystore ~/.android/debug.keystore  -storepass android  $fn.unaligned.apk  androiddebugkey\nzipalign -v 4 $fn.unaligned.apk $fn.smali.apk\nrm -rf smali/build\n</code></pre>\n\nUsing <pre><code>apktool</code></pre> has the advantage of being able to view and edit all of the resources as well as the decoded manifest file.\n",
            "votes": "21",
            "user": "nneonneo",
            "time": "Jun 20, 2015 at 10:12",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Noury",
                    "text": "<span class=\"comment-copy\">This the only one method that works for me. I've tried dozens, none worked. Thanks a lot.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "After playing with smali/baksmali I got it working. I think you didn't use the recursive flag when zipping. This caused the res folder to be empty which caused the crash. Also I run zipalign after signing the apk.\nSteps:\n\nUnzip\n<pre><code>$ unzip test.apk</code></pre>\nBaksmali\n<pre><code>$ baksmali classes.dex -o smaliClasses</code></pre>\nSmali\n<pre><code>$ smali smaliClasses -o classes.dex</code></pre>\nZip -r\n<pre><code>$ zip -r test.apk AndroidManifest.xml classes.dex res/ resources.arsc</code></pre>\nJarsign\n<pre><code>$ java -jar signapk.jar testkey.x509.pem  testkey.pk8 test.apk  test-patched.apk</code></pre> \nZipalign\n<pre><code>$ zipalign -v 4 test-patched.apk final-apk.apk</code></pre>\nProfit :)\n",
            "votes": "2",
            "user": "Gal",
            "time": "Oct 11, 2017 at 14:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I can't comment due to reputation, so I will post it here.\nSince the job is done correctly with the use of apktool, it seems to me that something is going wrong with the zip process.\nAfter repackaging the app, can you verify that the contents of the new APK are identical (as far as file names and structure is concerned) with the contents of the original one?\nEDIT: also, since the file is a .dex file, I don't think that you need the -x option in baksmali.\nEDIT2: When repackaging, you don't need to include the META-INF directory in the zip file. It will be created when signing the file.\n",
            "votes": "1",
            "user": "The Dart Code",
            "time": "Feb 19, 2015 at 13:33",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Using the deodex option \"-x\" is not required since you're not performing baksmali on an odex. Just run baksmali on the dex file. You can also use apktool to unpack/pack everything, which I think is easier.\n",
            "votes": "1",
            "user": "Michael Schwartz",
            "time": "Mar 12, 2015 at 2:24",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Why File size reduced?\nBecause <pre><code>apktool</code></pre> optimized it while recompiling.\nWhy it crashed ?\nPossible reasons for crash:\n\nYou cannot perform all steps in proper order.\nApplication may have a CRC check for file size.\n\n\nTool Fully automated with GUI..\nIt's updated with recent android framework so no resource decompile error and better handling.\nhttps://www.dropbox.com/s/02ifm4veotiuik1/apkstudio-2.0.3b-windows-Updates-Framework.rar?dl=0\nAnd this small Paper which includes Tuts on reversing android apps and all basic info regarding to modify/handling apk.\nhttps://www.dropbox.com/s/nkkmp4ait71kjku/Android%20Application%20Reversing%20Via%20Android%20Mobile.pdf?dl=0\n",
            "votes": "1",
            "user": "perror",
            "time": "Jul 5, 2015 at 14:38",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If you are interested in Anroid apps RE, then you shall find better tools to use regularly.\nWell, one of the tools is Android Cracker Kit (which I developed), it gives you all what you need: Android Cracker Kit (ACK):\n\nhttp://www.at4re.com/f/showthread.php?11231\nhttp://forum.exetools.com/showthread.php?t=16538\n",
            "votes": "0",
            "user": "0xC0000022L",
            "time": "Apr 13, 2016 at 15:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Behrouz.M",
                    "text": "<span class=\"comment-copy\">Broken link. please fix it.</span>",
                    "time": null
                },
                {
                    "user": "Yaser Alnajjar",
                    "text": "<span class=\"comment-copy\">here you go: <a href=\"http://forum.exetools.com/showthread.php?t=16538\" rel=\"nofollow noreferrer\">forum.exetools.com/showthread.php?t=16538</a></span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@raypixar: link was not broken, just slow.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I use APK Editor Pro to edit APKs right from my Android device!\nhttps://play.google.com/store/apps/details?id=com.gmail.heagoo.apkeditor.pro\n",
            "votes": "0",
            "user": "Tyler Brownfield",
            "time": "May 4, 2016 at 19:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zekitez",
                    "text": "<span class=\"comment-copy\">Great tip. The generated apk does not install correctly with the above (de)compile script (why ?) but replacing the classes.dex did it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Step 4. You forgot to do it recursively. It won't copy the files in /res when you zip it. Add -r option.\n<pre><code>zip -r test.zip AndroidManifest.xml classes.dex res META-INF resources.arsc\n</code></pre>\nStep 6. You don't need to sign it again since you re-packed it with META-INF directory to your apk already. Signing info is inside META-INF.\n",
            "votes": "0",
            "user": "Hao Liu",
            "time": "Aug 20, 2016 at 1:10",
            "is_accepted": false,
            "comments": []
        }
    ]
}