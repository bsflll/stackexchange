{
    "title": "What is _bittest macro?",
    "link": "https://reverseengineering.stackexchange.com/questions/19253/what-is-bittest-macro",
    "content": "Here is an example of the <pre><code>bt</code></pre> instruction in a X64 Windows binary:\n<pre><code>bt      eax, 18h\njnb     short loc_a\nlea     rcx, String\ncall    cs:__imp_wprintf\nmov     eax, [rbx+40h]\n</code></pre>\nIn pseudocode:\n<pre><code>if ( _bittest(&Mode, 0x18u) )\n{\n  wprintf(L\"String\");\n  Mode = Properties->Mode;\n}\n</code></pre>\nWhat is the <pre><code>_bittest</code></pre> macro used in a IF statement? Is it similar with <pre><code>if(a & b == b)</code></pre> or something? The code <pre><code>if(a & b == b)</code></pre> is used for checking if a flag is present in an OR-ed flag. And from debugging, I found the above assembly code is doing something like that.\n",
    "votes": "2",
    "answers": 3,
    "views": "1k",
    "tags": [
        "disassembly"
    ],
    "user": "Biswapriyo",
    "time": "Sep 4, 2018 at 16:00",
    "comments": [],
    "answers_data": [
        {
            "content": "It tests if the nth bit is set, returns <pre><code>true</code></pre> if set, <pre><code>false</code></pre> if not set.\nIt's basically the same as <pre><code>if(a & (1 << num_bit))</code></pre> as the argument is the number of the bit to test rather than the bit (or flag if you will) itself.\n",
            "votes": "3",
            "user": "Johann Aydinbas",
            "time": "Sep 4, 2018 at 16:44",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<pre><code>_bittest</code></pre> is a compiler intrinsic which maps to the <pre><code>bt</code></pre> instruction:\n\nGenerates the <pre><code>bt</code></pre> instruction, which examines the bit in position b of\n  address a, and returns the value of that bit.\n<pre><code>unsigned char _bittest(  \n   long const *a,  \n   long b  \n);\n</code></pre>\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 5, 2018 at 12:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<pre><code>bt</code></pre> is an x86 instruction to check if a bit is set in a number/value. It sets <pre><code>CF</code></pre> flag as the value of that bit and you can use <pre><code>jb</code></pre>/<pre><code>jnb</code></pre>/<pre><code>jc</code></pre>/<pre><code>jnc</code></pre> to check if its 1/0.\n<pre><code>bt      eax, 18h\n</code></pre>\nAs already mentioned in @Johann's answer, its equivalent to python \n<pre><code>CF = (eax & (1 << 0x18)) >> 0x18\n</code></pre>\nI have added some code for you to play with it here.\n",
            "votes": "1",
            "user": "sudhackar",
            "time": "Sep 5, 2018 at 8:16",
            "is_accepted": false,
            "comments": []
        }
    ]
}