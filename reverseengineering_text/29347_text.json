{
    "title": "How to debug a .net DLL?",
    "link": "https://reverseengineering.stackexchange.com/questions/29347/how-to-debug-a-net-dll",
    "content": "I'm trying to reverse engineer a .net malicious EXE but it loads a DLL inside its memory. I have tried to debug this DLL using a tool called SharpDllLoader and dnspy but I have 2 issues:\nFirst one:\n(Cannot create an abstract class.) I searched a little bit and find out that the class inside DLL is <pre><code>static</code></pre>.\nSecond one:\nAfter modifying the class type, I have another issue (no parameterless constructor defined for this object)\nI'm not expert in c# but these issues appears after executing <pre><code>CreateInstance</code></pre>\n<pre><code>private static void Main(string[] args)\n{\n    ParserResult<Options> result = Parser.Default.ParseArguments<Options>(args);\n    if (result.Tag != ParserResultType.Parsed)\n    {\n        Environment.Exit(1);\n        return;\n    }\n    Options options = ((Parsed<Options>)result).Value;\n    string filepath = options.Dll;\n    string ns = options.Namespace;\n    string c = options.Class;\n    string i = options.Method;\n    string[] arguments = null;\n    if (options.Args != null)\n    {\n        arguments = options.Args.Split(new char[0]);\n    }\n    Assembly assembly = Assembly.LoadFile(filepath);\n    Type type;\n    if (ns == null)\n    {\n        type = assembly.GetType(c);\n    }\n    else\n    {\n        type = assembly.GetType(ns + \".\" + c);\n    }\n    if (!(type != null))\n    {\n        Console.WriteLine(\"Class or namespace not found\");\n        return;\n    }\n    object cl = Activator.CreateInstance(type); //Here\n</code></pre>\nSolution\nI have tried another way to get an instance of this object without running any constructors by using\n<pre><code>FormatterServices.GetUninitializedObject(type)</code></pre>.\nhttps://stackoverflow.com/questions/2501143/activator-createinstancetype-for-a-type-without-parameterless-constructor\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "debugging",
        ".net",
        "dnspy"
    ],
    "user": "ManJaro",
    "time": "Sep 29, 2021 at 17:58",
    "comments": [
        {
            "user": "Rup",
            "text": "What are you trying to do: just call a static method on a static class? Or something more complicated?\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Have you had a look at Mono.Cecil?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "By far the easiest way to work with a .NET DLL is to just add it to a console app in the IDE.\n\nCreate a new console app in Visual Studio / Rider, etc. - make sure it's the right Core / Framework version if possible (you'll find out soon if not)\nAdd the DLL as a reference to the project (right-click References, Add Reference, Browse)\nYou can then just work with the classes and call your static method directly\n<pre><code>The.Namespace.ClassName.Method();\n</code></pre>\n\n\nHowever you're then at the mercy of any static initialisation in that class or any classes referenced by that class, which might be something to worry about if you think this is malicious code. (But in that case you should be reading it not running it I expect.)\nTo make your existing loader work you can just call the static method on your type directly without making an instance, e.g.\n<pre><code>type.GetMethod(i).Invoke(null, null);\n</code></pre>\n(relevant StackOverflow question)\n",
            "votes": "2",
            "user": "Rup",
            "time": "Sep 29, 2021 at 9:10",
            "is_accepted": true,
            "comments": [
                {
                    "user": "ManJaro",
                    "text": "<span class=\"comment-copy\">Thanks for replying. I solved the first issue when I re-defined class to non-static. The second issue I used another way to get an instance of object without running any constructor using <code>FormatterServices.GetUninitializedObject(type)</code> and works without any problems. <a href=\"https://stackoverflow.com/questions/2501143/activator-createinstancetype-for-a-type-without-parameterless-constructor\">link</a></span>",
                    "time": null
                }
            ]
        }
    ]
}