{
    "title": "Tool to analyze .obj files (not COFF) created with /LTCG",
    "link": "https://reverseengineering.stackexchange.com/questions/32181/tool-to-analyze-obj-files-not-coff-created-with-ltcg",
    "content": "This Microsoft article states that:\n\nWhen building with LTCG, the compiler front end doesn't invoke the\nback end. Instead, it emits an OBJ file with IL in it. It bears\nrepeating: this IL is not the same IL that the .NET runtime uses.\nWhile .NET IL is standardized and documented, the IL used with LTCG is\nundocumented and subject to change from version to version of the\ncompiler.\n\n... and concludes:\n\nOBJ files produced when using LTCG aren't standard COFF format OBJs.\nAgain, this isn't a problem for most people, but if you examine OBJ\nfiles with tools like dumpbin, you're simply out of luckâ€”it won't\nwork.\n\nAre there - by now - any tools that let me disassemble the code inside these \"IL .obj\" files and let me access things like symbols, relocation tables, etc.? Even IDA Pro seems to have problems with these kind of files. It identifies them as \"COFF (Microsoft CIL bytecode)\" and doesn't show any meaningful disasembly...\n",
    "votes": "0",
    "answers": 1,
    "views": "127",
    "tags": [
        "ida",
        "windows",
        "compiler-optimization",
        "object-code",
        "linker"
    ],
    "user": "langlauf.io",
    "time": "Aug 16, 2023 at 14:43",
    "comments": [],
    "answers_data": [
        {
            "content": "I don't know of any tools that can analyze or disassemble CIL bytecode, but what you can do is to link those files and produce normal machine code. E.g. something like:\n<pre><code>LINK 1.obj /force /debug /dll /out:1.dll /noentry \n</code></pre>\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 18, 2023 at 22:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}