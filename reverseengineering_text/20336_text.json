{
    "title": "How does this command modify the condition?",
    "link": "https://reverseengineering.stackexchange.com/questions/20336/how-does-this-command-modify-the-condition",
    "content": "I'm new to radare2 here. Just started learning and I was trying out a challenge. What does the 3 columns in the radare2 visual mode represent?\nMay I know how the command below:\n<pre><code>wa je 0x400976 @0x00400968</code></pre>\nchanges <pre><code>760c</code></pre> to <pre><code>740c</code></pre> and <pre><code>jne 0x400976</code></pre> to <pre><code>je 0x400976</code></pre>?\nAlso, what does that accomplish?\nDoes it just bypass the function\nThank you!\nfull program\n\ncommand\n",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "radare2"
    ],
    "user": "karmacollide",
    "time": "Jan 11, 2019 at 6:51",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "Please do post code as text and not as an image. Thank you\n",
            "time": null
        },
        {
            "user": "karmacollide",
            "text": "@PawełŁukasik sorry I will take note next time. I kinda jumped straight into solving a challange, will read up more. Thanks for your explaination!\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "What does the 3 columns in the radare2 visual mode represent?\n\nThe first one is an address of the instruction, then opcodes followed by mnemonic. On the far left you have also some arrows indicating jumps and on the far right there are comments.\n\nMay I know how the command below:\n   wa je 0x400976 @0x00400968\n   changes 760c to 740c and jne 0x400976 to je 0x400976?\n\n<pre><code>wa</code></pre> command, which you could check by requesting help in r2, is a command that writes the opcode of the provided mnemonic.\n<pre><code>| wa[?] push ebp       write opcode, separated by ';' (use '\"' around the command)\n</code></pre>\nSo executing <pre><code>wa je 0x400976 @0x00400968</code></pre> will write the opcodes for the <pre><code>je 0x400976</code></pre> at the address of <pre><code>0x400968</code></pre>. \nAnd actually it changes from <pre><code>750c</code></pre>, and that is the opcode of the jump-not-equal with the offset of <pre><code>0xC</code></pre> bytes. You requested (by issuing the command <pre><code>wa</code></pre>) to write on that spot the jump-if-equal and the opcode of this is <pre><code>74</code></pre>. The offset stays the same.\n\nAlso, what does that accomplish? Does it just bypass the function\n\nIt changes the condition so from now on the jump will be taken when the strings that are being compared (@<pre><code>0x400961</code></pre>) are equal and not taken if they are different. This also happens to the string being printed at offset <pre><code>0x400971</code></pre>.\nApart from the first question this is nor really radare2 specific stuff. It looks like you should start with some basic assembly and/or RE topics/tutorials that are plenty on the internet.\n",
            "votes": "0",
            "user": "Paweł Łukasik",
            "time": "Jan 11, 2019 at 6:50",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "You can check the official Radare 2 Book where you should find the first steps as well as the basic command to go. The write command is described here\nAnother resouce I found so useful when I started learning r2 is the two part tutorial Megabeets wrote about a simple crackme.\n",
            "votes": "0",
            "user": "h0pp",
            "time": "Jan 11, 2019 at 7:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}