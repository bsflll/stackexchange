{
    "title": "Hex-Rays function signature does not match demangled name",
    "link": "https://reverseengineering.stackexchange.com/questions/17269/hex-rays-function-signature-does-not-match-demangled-name",
    "content": "From the demangled name, I know that a function takes an <pre><code>std::string const&</code></pre> as a parameter but when generating psuedo-c code with Hex-Rays' decompiler it autodetects the parameters as <pre><code>(int a1, int a2, int a3)</code></pre>\nHow can I fix the function signature Hex-Rays' is generating?\n\n<pre><code>int __fastcall EncodeUtil::getDecryptStr(int a1, int a2, int a3)\n{\n  int v3; // r7\n  unsigned int i; // r5\n  char v5; // r6\n  int v7; // [sp+4h] [bp-1Ch]\n  int v8; // [sp+8h] [bp-18h]\n\n  v7 = a2;\n  v8 = a3;\n  v3 = a1;\n  HttpUtility::URLDecode(&v7);\n  for ( i = 0; i < *(_DWORD *)(v7 - 12); ++i )\n  {\n    sub_3B25D0(&v7);\n    v5 = byte_41A7DD[i & 7];\n    *(_BYTE *)(v7 + i) ^= v5;\n    sub_3B25D0(&v7);\n    if ( !*(_BYTE *)(v7 + i) )\n    {\n      sub_3B25D0(&v7);\n      *(_BYTE *)(v7 + i) ^= v5;\n    }\n  }\n  sub_3B2E20(v3, &v7);\n  sub_3B1CCC(&v7);\n  return v3;\n}\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "383",
    "tags": [
        "ida",
        "arm",
        "hexrays",
        "strings"
    ],
    "user": "armnotstrong",
    "time": "Jan 26, 2018 at 18:14",
    "comments": [
        {
            "user": "EWD-0-",
            "text": "It looks like they have different calling conventions.\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "@armnostrong: You should have specified that you are dealing with ARM targets...\n",
            "time": null
        },
        {
            "user": "Avery3R",
            "text": "@armnotstrong: Do you know what compiler was used? The structure of an std::string is going to vary wildly based upon that\n",
            "time": null
        },
        {
            "user": "armnotstrong",
            "text": "@Avery3R all I know is that this was a project of cocos2dx compiled for android device\n",
            "time": null
        },
        {
            "user": "armnotstrong",
            "text": "@perror sorry for the inconvenience\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It looks like hex-rays mistakenly thought there were three parameters instead of two. If you look at the start of the function's disassembly <pre><code>R1</code></pre> and <pre><code>R2</code></pre> are not saved, only <pre><code>R0</code></pre> is. You should be able to just change the function signature to <pre><code>int __fastcall EncodeUtil::getDecryptStr(void* pString)</code></pre>. The default key to do so is <pre><code>Y</code></pre>. If you have a struct definition for <pre><code>std::string</code></pre> you can replace the <pre><code>void*</code></pre> in the signature with an <pre><code>std::string*</code></pre>\n",
            "votes": "1",
            "user": "Avery3R",
            "time": "Jan 25, 2018 at 2:35",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">FYI <code>PUSH {R0-R2}</code> saves R0, R1 and R2.</span>",
                    "time": null
                },
                {
                    "user": "Avery3R",
                    "text": "<span class=\"comment-copy\">Ah yeah, I meant saved in another register to be used within this function later, like it did with <code>MOV R7, R0</code>. <code>R1</code> and <code>R2</code> are definitely used somewhere in this function later, but I'm willing to bet they're assigned to first before they're read from.</span>",
                    "time": null
                }
            ]
        }
    ]
}