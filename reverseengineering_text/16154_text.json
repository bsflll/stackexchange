{
    "title": "ARM \"add\" instruction with shift",
    "link": "https://reverseengineering.stackexchange.com/questions/16154/arm-add-instruction-with-shift",
    "content": "I'm trying to understand how ARM <pre><code>add</code></pre> with shift is implemented e.g. \n<pre><code>sym.imp.__libc_start_main :                                                                                                                                                           \n\n.plt:0x000082bc 00c68fe2 add ip, pc, 0, 12; after execution ip=0x82c4\n.plt:0x000082c0 08ca8ce2 add ip, ip, 8, 20; after execution ip=0x102c4\n.plt:0x000082c4 48fdbce5 ldr pc, [ip, 0xd48]!\n</code></pre>\nI wonder about the line\n<pre><code>.plt:0x000082c0 08ca8ce2 add ip, ip, 8, 20;\n</code></pre>\nit will add <pre><code>#0x8000</code></pre> to the ip register. My question is why <pre><code>#0x8000</code></pre> ?\nI'd assume it will be:\n<pre><code>ip = ip + (8<<20)\n</code></pre>\nso <pre><code>0x800000</code></pre> but it's more like\n<pre><code>ip = ip + (8<<(20-8))\n</code></pre>\nWhy is that? do I always have to substract 8 from the shift ?\n",
    "votes": "4",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "arm"
    ],
    "user": "krusty",
    "time": "Aug 21, 2017 at 9:46",
    "comments": [],
    "answers_data": [
        {
            "content": "It's a Circular Shift on a 32-bit system.\nCircular Shift\n\nIn computer programming, a circular shift (or bitwise rotation) is a\n  shift operator that shifts all bits of its operand. Unlike an\n  arithmetic shift, a circular shift does not preserve a number's sign\n  bit or distinguish a number's exponent from its significand (sometimes\n  referred to as the mantissa). Unlike a logical shift, the vacant bit\n  positions are not filled in with zeros but are filled in with the bits\n  that are shifted out of the sequence.\n\nUnderstanding the code\nFirst Line:\nThis is simply translated into <pre><code>add ip, pc</code></pre> because rotate operations on <pre><code>#0</code></pre> is still 0.\nSo it's actually <pre><code>IP = PC  + (0 << 12) = PC + 0</code></pre>\nSecond Line:\nLet's take apart the opcodes and understand the problematic line:\nThe opcodes should be read like this because of endianness: <pre><code>e28cca08</code></pre>\n\n<pre><code>e</code></pre> - always execute this instruction\n<pre><code>28</code></pre> - add immediate\n<pre><code>c</code></pre> - Rd is the ip\n<pre><code>c</code></pre> - Rn is the ip\n<pre><code>a 08</code></pre> - 8 right rotated by 20\n\nThe things is, that it's not <pre><code>8<<20</code></pre> but instead it is <pre><code>8<<(32-12)</code></pre> because we are on a 32-bit system and it is a Circular Shift.\nHere's a C code that showing the Circular Shift based on the example from Wikipedia:\n<pre><code>#include <stdint.h>  // for uint32_t, to get 32bit-wide rotates, regardless of the size of int.\n#include <limits.h>  // for CHAR_BIT\n\nuint32_t rotl32 (uint32_t value, unsigned int count) {\n    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);\n    count &= mask;\n    return (value<<count) | (value>>( (-count) & mask ));\n}\n\nuint32_t rotr32 (uint32_t value, unsigned int count) {\n    const unsigned int mask = (CHAR_BIT*sizeof(value)-1);\n    count &= mask;\n    return (value>>count) | (value<<( (-count) & mask ));\n}\n\nint main()\n{\n    printf(\"Result: 0x%x\n\",rotr32(8,20));\n    return 0;\n}\n</code></pre>\nThe code will output:  \n<pre><code>Result: 0x8000\n</code></pre>\n",
            "votes": "4",
            "user": "Megabeets",
            "time": "Aug 21, 2017 at 16:12",
            "is_accepted": true,
            "comments": [
                {
                    "user": "krusty",
                    "text": "<span class=\"comment-copy\">I see so its rotate right and not left, thanks! BTW. typo in the anwser on line \"that it's not 8&lt;&lt;20 but instead it is 8&lt;&lt;(32-12)\" should be 8&gt;&gt;(32-12)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "It is proposed in the official document of arm\n\nWhen s = 1 and RD = R15 (PC), this instruction is used to save the status register CPSR, not to do calculation\n",
            "votes": "1",
            "user": "Dragon",
            "time": "Dec 23, 2020 at 3:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}