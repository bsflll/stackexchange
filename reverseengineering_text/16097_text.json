{
    "title": "How can I get the shared libraries' function calls using angr",
    "link": "https://reverseengineering.stackexchange.com/questions/16097/how-can-i-get-the-shared-libraries-function-calls-using-angr",
    "content": "I am trying to get all the library function calls that a binary performs in a preorder-DFT traversal of the CFG. I'm able to get the CFG like:\n<pre><code>import sys, angr\nimport networkx as nx\nproj = angr.Project(sys.argv[1],auto_load_libs=False)\ncfg = proj.analyses.CFG().graph\n</code></pre>\nI was able to get the CFG and I can even traverse it like this (Suppose I'm getting the correct main function's node):\n<pre><code>s = nx.dfs_preorder_nodes(cfg,mainFuncNode)\nnodes = []\ntry:\n    while True:\n        nodes.append(ns.next())\nexcept:\n    pass\n</code></pre>\nHowever I don't know how to get the function calls from the nodes (if they are actually doing it).\nI read some documentation and all I could come up with was:\n<pre><code>for n in nodes:\n    if n.is_simprocedure:\n          print n.to_codenode().function\n</code></pre>\nThe output is all None and I'm sure that's wrong because the binary Is doing some I/O operations. So I expect to see something like:\n\n<pre><code>libc_puts</code></pre>\n<pre><code>libc_gets</code></pre>\n...\n\nI would appreciate if you could give me some better pointers.\n",
    "votes": "6",
    "answers": 1,
    "views": "2k",
    "tags": [
        "static-analysis",
        "python",
        "binary",
        "control-flow-graph",
        "angr"
    ],
    "user": "anon",
    "time": "Aug 16, 2017 at 8:04",
    "comments": [
        {
            "user": "perror",
            "text": "Hmm, on this SE site we have specialists of IDApro, Radare2 and others, but I did not see a lot of people from Angr... It would be nice to try to attract some community from them! :-) @anon : Thanks for your question about Angr!\n",
            "time": null
        },
        {
            "user": "sraboy",
            "text": "I know OP was already there but, just for others who browse here, there is a Slack channel with automatic invites generated. Hopefully the angr tag picks up here though.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "However I don't know how to get the function calls from the nodes \n\nAre you saying you want to know which function a node belongs to, or which function a node is calling?\nFor the former, each block has a corresponding <pre><code>CFGNode</code></pre> object that are in the graph. Each <pre><code>CFGNode</code></pre> has a <pre><code>.function_address</code></pre> member, which tells you the address of the function that the node belongs to.\nFor the latter, every edge in the graph is labeled with properties, and we use 'jumpkind' to mark the type of an edge. An <pre><code>Ijk_Call</code></pre> jumpkind means that edge is a call from a block (or a node) to a function.  \nBy the way, angr's CFG class is more than just the <pre><code>.graph</code></pre> member (which is a <pre><code>networkx.DiGraph</code></pre> instance). You might find it easier sometimes to directly work on <pre><code>CFG</code></pre>, instead of manually traversing the graph.\nIn addition, once a CFG is generated, you can access all functions by accessing <pre><code>CFG.functions</code></pre>. Each <pre><code>Function</code></pre> instance has two intra-function graphs associated with it: a <pre><code>.graph</code></pre> and a <pre><code>.transition_graph</code></pre>. You may find it easier to work with than traversing the CFG of the whole binary.\nIn the end, if you like GUI, and you have a lot of patience, you might want to give angr Management a try.\n",
            "votes": "5",
            "user": "Fish",
            "time": "Aug 16, 2017 at 9:07",
            "is_accepted": true,
            "comments": [
                {
                    "user": "anon",
                    "text": "<span class=\"comment-copy\">Thank you for the pointers. Yes I meant the latter. I also want to know. How does the CFG represent a shared library function call. Does it have a jump edge to that shared lib's location(@ptr actually) with the respective symbol name?</span>",
                    "time": null
                },
                {
                    "user": "anon",
                    "text": "<span class=\"comment-copy\">Thanks for the GUI I was able to get the functions I expected like memset, memcpy, _controlfp, etc... However I need to know if I can find these in the CFG nodes.</span>",
                    "time": null
                },
                {
                    "user": "Fish",
                    "text": "<span class=\"comment-copy\">It does have edges pointing to functions in shared libraries, even if the library is not loaded with the project.</span>",
                    "time": null
                },
                {
                    "user": "anon",
                    "text": "<span class=\"comment-copy\">Thank you! Do you know how I can see if that node is a shared lib function?</span>",
                    "time": null
                },
                {
                    "user": "Fish",
                    "text": "<span class=\"comment-copy\">First get the address of the node. If it is a function, you can get the <code>Function</code> instance by <code>cfg.functions[addr]</code>, and then access <code>.binary</code> and <code>.binary_name</code>. If it is not a function, you can call <code>project.loader.whats_at(addr)</code>.</span>",
                    "time": null
                }
            ]
        }
    ]
}