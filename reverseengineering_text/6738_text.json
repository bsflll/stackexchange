{
    "title": "How can I do this in less than 10 bytes of space?",
    "link": "https://reverseengineering.stackexchange.com/questions/6738/how-can-i-do-this-in-less-than-10-bytes-of-space",
    "content": "I have some value stored at a memory location.\nI have 10 bytes of space and have following to do:\n\npush registers\ncopy a string constant \"abcedfghijkl\" to that memory location\nrestore registers\n\nIs it possible?\n",
    "votes": "-2",
    "answers": 1,
    "views": "150",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "ollydbg",
        "patch-reversing"
    ],
    "user": "ASHUTOSH",
    "time": "Nov 29, 2014 at 12:00",
    "comments": [],
    "answers_data": [
        {
            "content": "YES! so possible... why wouldn't it?\nI don't have resources to make sure this is 10 or less bytes, but this SHOULD be about 10 give or take 2 or 3 bytes...\nuse16\n<pre><code>org 0x100\nstart:\n    pusha\n    mov di, memory_location\n    mov al, 'a'\n    mov cl, 11\n    stosb\n    inc al\n    loop $-2\n    popa\n    ret\n\nmemory_location EQU 0x0100\n</code></pre>\nIf you want to COPY a string then defenently less than 10 bytes\n<pre><code>    use16\norg 0x100\nstart:\n    pusha\n    mov di, memory_location\n    mov si, string2copy\n    mov cl, 12   ; byte count to copy\n    rep movsb    ; move data byte by byte from SI location to DI location\n    popa\n    ret\n\nmemory_location = 0x0200\n\n;\n; STRING CANT COUNT AS DATA SINCE  \"abcedfghijkl\" IS 12 BYTES ON IT'S OWN!\n;\nstring2copy: \n    db \"abcedfghijkl\"\n</code></pre>\nYou defined nothing else, however, I don't know how this equates to reverse engineering at all though...\n",
            "votes": "1",
            "user": "Hidden_User",
            "time": "Nov 29, 2014 at 13:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">right idea but the code is wrong.  mov cl -&gt; mov cx (don't know what's in ch); inc al -&gt; inc ax (otherwise the loop stores only one character, because inc al is two bytes by itself).</span>",
                    "time": null
                }
            ]
        }
    ]
}