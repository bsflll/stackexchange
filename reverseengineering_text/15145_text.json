{
    "title": "Trying to identify a string in a strcmp instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/15145/trying-to-identify-a-string-in-a-strcmp-instruction",
    "content": "Working to debug and analyze a piece of firmware, I've come across a bunch of cgi files which are all symlinked to a central cgi file. The first thing the main function does is run a series of string comparisons to identify which cgi file's functions should be run.\nThe issue is I am now trying to map the functions to their respective cgi names, but I am relatively new to binary debugging and cannot figure how to identify which values represent the string hard-coded into memory that the input is being compared to. I am using Radare2 and a sample of the code and a screenshot of the structure can be seen below. \nAny advice would be appreciated!\n<pre><code>0x000099a4   08001be5    ldr r0, [fp - local_8h]   ; const char * s1\n0x000099a8   b81709e3    movw r1, 0x97b8\n0x000099ac   021040e3    movt r1, 2                ; const char * s2\n0x000099b0   5affffeb     bl sym.imp.strcmp        ;[3]; int strcmp(const char *s1, const char *s2)\n0x000099b4   0030a0e1    mov r3, r0\n0x000099b8   000053e3    cmp r3, 0\n0x000099bc   0500001a    bne 0x99d8                ;[4]\n0x000099c0   10001be5    ldr r0, [fp - local_10h]\n0x000099c4   14101be5    ldr r1, [fp - local_14h]\n0x000099c8   18201be5    ldr r2, [fp - local_18h]\n0x000099cc   1f4e00eb    bl sub.setuid_250         ;[5]\n0x000099d0   0c000be5    str r0, [fp - local_ch]\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "firmware",
        "radare2",
        "binary"
    ],
    "user": "Zachary Mason",
    "time": "Dec 16, 2017 at 16:54",
    "comments": [
        {
            "user": "Nordwald",
            "text": "could you provide the output of the command <pre><code>ag $$ > graph.dot</code></pre> (you can plot it using <pre><code>dot -Tpng graph.dot -o graph.png</code></pre> if you got graphviz)?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You need to read the ARM instruction reference. <pre><code>movt</code></pre> is the \"Move Top\" instruction, which sets the top 16 bits of a register to the specified value without changing the low 16 bits.\nIn other words, the sequence:\n<pre><code>movw r1, 0x97b8\nmovt r1, 2    \n</code></pre>\nis equivalent to:\n<pre><code>r1 = 0x97b8\nr1 |= (2<<16);\n</code></pre>\nwhich results in  <pre><code>r1= 0x297b8</code></pre>, so that check that address for the string being compared to.\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Apr 12, 2017 at 12:37",
            "is_accepted": true,
            "comments": []
        }
    ]
}