{
    "title": "How to reverse engineer an elliptical trainer? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/20576/how-to-reverse-engineer-an-elliptical-trainer",
    "content": "Closed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI have a Schwinn 420 Elliptical Trainer (2012 model), and I want to reverse engineer it. Right now it has a big honking console that lets you increase/decrease the resistance and start a small handful of preprogrammed workout routines. The trouble is that the workout routines are very limited, and the console is bulky and annoying. I'd like to replace it with a flat board that I can rest my laptop on (not possible with it present) so I can do work while I run. I'd also like to replace the console's onboard computer with something like a Raspberry Pi to control the resistance levels. That way the sky's the limit in terms of programming custom workout routines.\nI took a look at the wiring to the console, and there is a twelve-pin cable, pictured below.\n\n\nI checked the Schwinn website for service manuals; unfortunately they don't have a service manual for my particular model, plus the service manuals they do offer say nothing about the wiring (the only thing they do say is \"All wires in cable should be intact. If any are visibly crimped or cut, replace cable.\").\nI can't imagine that this is a terribly complex circuit. I believe there's only three things this cable can truly be doing:\n\nSupplying power to the console\nIncreasing/decreasing resistance on command\nReceiving a signal as to whether the user is running, or not\n\nAll the other functions, like showing a countdown clock, going through different workout routines, etc. would all be happening on the console and are therefore irrelevant (i.e. they can be replaced with a Pi). Because regardless of how complex a given workout routine is, at the end of the day, all it's doing is telling the machine to increase or decrease resistance. I noticed that it does automatically pause the workout when you stop moving, so it also must be getting some kind of signal to indicate whether the pedals are moving. I'm quite confident I can program a Pi to send the right signals on GPIO pins, if I know which ones to send.\nBut while I have a pretty extensive knowledge of software engineering, I have next to zero knowledge of electrical engineering. So I'm not really sure where to start. I imagine I'll need to essentially \"tap\" the wires (while they're still in use by the console) with something like a multimeter or oscilloscope. But I don't really know how to do that. For example, a multimeter has both a black and red cable. So if I want to test just one of the 12 wires, do I hold the black to it? Then where would the red go?\nCan anyone here recommend any tips on how I can close my own knowledge gap here and start to figure out how to reverse engineer these 12 wires in my elliptical machine? Or better yet, has anyone here already done something like this, with exercise equipment?\n",
    "votes": "4",
    "answers": 0,
    "views": "274",
    "tags": [
        "hardware"
    ],
    "user": "soapergem",
    "time": "6 years ago",
    "comments": [],
    "answers_data": []
}