{
    "title": "exit() syscall within shellcode not working",
    "link": "https://reverseengineering.stackexchange.com/questions/20851/exit-syscall-within-shellcode-not-working",
    "content": "<pre><code>int main()\n{\n    char shellcode[] = \"\\xbb\\x00\\x00\\x00\\x00\\xb8\\x01\\x00\\x00\\x00\\xcd\\x80\";\n\n    int *ret;\n    ret = (int *)&ret + 2;\n    (*ret) = (int)shellcode;\n}\n</code></pre>\nI tried to run the above shellcode but got a segmentation fault.\nThen, I tried putting the shellcode inside the main and it worked, why? \nAlso, when I do <pre><code>strace</code></pre> to the binary to check the syscall, it shows that <pre><code>exit_group()</code></pre> syscall is called but the shell code is for <pre><code>exit()</code></pre> syscall.\n",
    "votes": "0",
    "answers": 2,
    "views": "685",
    "tags": [
        "assembly",
        "shellcode"
    ],
    "user": "Mukesh",
    "time": "Mar 12, 2019 at 19:08",
    "comments": [],
    "answers_data": [
        {
            "content": "First of all, the opcodes that you are pointing are not responsible for the syscall. If you disassemble your shellcode, you get:\n<pre><code>0000000000004028 <shellcode>:\n    4028:   bb 00 00 00 00          mov    $0x0,%ebx\n    402d:   b8 01 00 00 00          mov    $0x1,%eax\n    4032:   cd 80                   int    $0x80\n</code></pre>\nA first <pre><code>mov</code></pre> to set <pre><code>ebx</code></pre> to zero (the return code), then a second <pre><code>mov</code></pre> to set <pre><code>eax</code></pre> to the id of the <pre><code>exit</code></pre> syscall, and finally it trigger the system call.\nSecond, this shellcode is obviously designed for a 32-bit architecture. And, you have to know that the syscall numbers are different between i386 and amd64.\nSo, my recommendation would be that you compile your program with the option <pre><code>-m32</code></pre> to ensure that you have a full 32-bit program (and not a mix between 64-bit and 32-bit).\nThird, you need to be sure that you compile with <pre><code>-zexecstack</code></pre> in order to be able to execute the code in case it is stored on the stack.\nFinally, there is no evidence that getting <pre><code>ret + 2</code></pre> will set your pointer in front of the saved <pre><code>eip</code></pre>. You'd better write:\n<pre><code>int main()\n{\n    char shellcode[] = \"\\xbb\\x00\\x00\\x00\\x00\\xb8\\x01\\x00\\x00\\x00\\xcd\\x80\";\n\n    (*(void(*)()) shellcode)();\n    return 0;\n}\n</code></pre>\n",
            "votes": "0",
            "user": "perror",
            "time": "Mar 12, 2019 at 19:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Mukesh",
                    "text": "<span class=\"comment-copy\">I am using i386 machine. I believe the <code>0x1</code> which is being set to <code>eax</code> is responsible for <code>exit</code> syscall. Please correct me if I am wrong.</span>",
                    "time": null
                },
                {
                    "user": "Mukesh",
                    "text": "<span class=\"comment-copy\">I tried again compiling the program with <code>-m32</code> option and got exactly the same disassemble as you have mentioned. But, the issue still remains the same. I am using now <code>char shellcode[] = \"\\xbb\\x00\\x00\\x00\\x00\\xb8\\x01\\x00\\x00\\x00\\xcd\\x80\";</code></span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Ah, in fact, the <code>exit()</code> syscall call the <code>exit_group()</code> function to kill all threads. So, it might be okay from the beginning. Look at <code>man exit_group</code></span>",
                    "time": null
                },
                {
                    "user": "Mukesh",
                    "text": "<span class=\"comment-copy\">I think the program is crashing because whatever the opcode number instead of <code>0x1</code> I pass, I am getting the same result and hence the <code>exit_group()</code> is called rather than <code>exit()</code></span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Are you compiling with <code>-zexecstack</code> ?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "<pre><code>div eax\nint 0x80\njmp short 0x0\n</code></pre>\nIt's different ways <pre><code>exit()</code></pre> syscall\n",
            "votes": "1",
            "user": "J. Daisy",
            "time": "Oct 5, 2019 at 9:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}