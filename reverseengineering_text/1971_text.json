{
    "title": "Any idea how to decode this binary data?",
    "link": "https://reverseengineering.stackexchange.com/questions/1971/any-idea-how-to-decode-this-binary-data",
    "content": "I have binary data representing a table.\nHere's the data when I print it with Python's repr():\n<pre><code>\\xff\\xff\\x05\\x04test\\x02A\\x05test1@\\x04\\x03@@\\x04\\x05@0\\x00\\x00@\\x05\\x05test2\\x03\\x05\\x05test1\\x06@0\\x00\\x01@\\x00</code></pre>\nHere's what the table looks like in the proprietary software.\n        test1        \n        test1test1\ntest          test1\ntest1                \ntest1test2        \n                        \n                        \ntest1                \ntest1                \ntest1                \n        test1        \n        test1        \n                        \n                        \ntest1                \ntest1                \nI was able to guess some of it:\n\nIt's column by column then cell by cell, starting at the top left cell.\nThe <pre><code>\\x04</code></pre> in <pre><code>\\x04test</code></pre> seems to be the length (in bytes I guess) of the following word.\n<pre><code>@</code></pre> mean the last value\n\nAnyone knows if the data is following a standard or have any tips how to decode it?\nThanks!\nHere's an example with python :\n<pre><code>from struct import unpack\n\n\ndef DecodeData(position):\n    print \"position\", position\n    firstChar = data[position:][:1]\n    size_in_bytes = unpack('B', firstChar)[0]\n    print \"firstChar: {0}. size_in_bytes: {1}\".format(repr(firstChar), size_in_bytes)\n    return size_in_bytes\n\n\ndef ReadWord(position, size_in_bytes):\n    word = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\n    print \"word:\", word\n\ndata = \"\\xff\\xff\\x05\\x04test\\x02A\\x05test1@\\x04\\x03@@\\x04\\x05@0\\x00\\x00@\\x05\\x05test2\\x03\\x05\\x05test1\\x06@0\\x00\\x01@\\x00\"\n\nposition = 0\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\xff - ?\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x05 - ?\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nReadWord(position, size_in_bytes)\n\n\nprint \"\"\nposition += size_in_bytes\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\"\"'2A' : could be to say that \"test\" has 2 empty cells before it\"\"\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nword = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\nprint \"word:\", word\n\nposition += size_in_bytes\n\nDecodeData(position)\nprint \"\"\"@: mean that there's another \"test1\" cell\"\"\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x04\\\\x03 - Could be that the next value is 3 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\"\nposition += 1\nprint \"@@ - Seems to mean 3 repetitions\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x04\\\\x05 - Could be that the next value is 5 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x00\\\\x00 - That could mean to move to the first cell on the next column\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x05 - ?\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nword = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\nprint \"word:\", word\nposition += size_in_bytes\n\nprint \"\"\nDecodeData(position)\nprint \"\\\\x03 - Could be to tell that the pervious word 'test2' is 3 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x05 - ?\"\n\nprint \"\"\nposition += 1\nsize_in_bytes = DecodeData(position)\nposition += 1\nword = unpack('%ds' % size_in_bytes, data[position:][:size_in_bytes])[0]\nprint \"word:\", word\nposition += size_in_bytes\n\nprint \"\"\nDecodeData(position)\nprint \"\\\\x06 - Could be to tell that the pervious word 'test1' is 6 cells down\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\0 - ?\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nposition += 1\nDecodeData(position)\nprint \"\\\\x00\\\\x01 - Seems to mean, next column second cell\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"@ - repetition\"\n\nprint \"\"\nposition += 1\nDecodeData(position)\nprint \"\\\\x00 - end of data or column\"\n</code></pre>\n",
    "votes": "7",
    "answers": 1,
    "views": "5k",
    "tags": [
        "unpacking",
        "file-format"
    ],
    "user": "bbigras",
    "time": "May 1, 2013 at 18:00",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Do you have the module itself? It would be almost trivial to disassemble the <pre><code>repr</code></pre> function, assuming this is registered the normal way it is in C extension modules.\n",
            "time": null
        },
        {
            "user": "bbigras",
            "text": "I'm not sure I understand what you mean by \"module\". But here's the data in HEX 0xFFFF050474657374024105746573743140040340400405403000004005057465737432030505746573743106403000014000. I'm using repr() only to get rid of the 'Decode error - output not utf-8' message in python so you can ignore that.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "The data belongs to some kind of object and that usually belongs to a module, such as the ones you <pre><code>import</code></pre> in Python ;)\n",
            "time": null
        },
        {
            "user": "bbigras",
            "text": "The data is from a [varbinary](max) field in a MSSQL database which is used by a proprietary and uncooperative software.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "It would make sense to have the software that processes the data. See here. Basically too little info to help you.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Here's an explanation for what I think the individual symbols mean. I'm basing this around the presumption that a little selector is going through the cells, one by one.\n\n<pre><code>\\xFF</code></pre> = Null cell\n<pre><code>\\x05</code></pre> = A string is following, with <pre><code>\\xNumber</code></pre> coming after the string to define how far to displace the string from the selector's current position, if at all. \n<pre><code>\\xNumber string</code></pre> = A string of length number\n<pre><code>\\x2A</code></pre> = Could be a byte that says not to displace the current string, and also to assume that the next piece of data is defining a string to be placed in the next cell. Questionable meaning.\n<pre><code>\\x04 \\xNumber</code></pre> = Move selector ahead <pre><code>\\xNumber</code></pre> cells and place previous string into there.\n<pre><code>0 \\x00 \\x0Number</code></pre> = New column, move selector into row <pre><code>\\xNumber</code></pre>, and place previous string into there.\n<pre><code>@</code></pre> = Place previously used string in the cell following the current one.\n\nSo here's my interpretation of the data you're giving us:\n\n<pre><code>\\xFF\\xFF</code></pre> = two null cells\n<pre><code>\\x05</code></pre> = A cell, singular, with a string, placed following the null cells, because of the <pre><code>\\x2A</code></pre> following the string \n<pre><code>\\x04 test</code></pre> = The string.\n<pre><code>\\x2A \\x05 test1</code></pre> = Another string placed into the cell following. No number needed, since \\x2A implies that it's being placed right after \"test\"\n<pre><code>@</code></pre> = Place \"test1\" into the cell after the \"test1\" string was first placed.\n<pre><code>\\x04 \\x03</code></pre> = Move selector ahead three cells and place test1 where it lands.\n<pre><code>@@</code></pre> = Place into the two cells following also.\n<pre><code>\\x04 \\x05 @</code></pre> = Skip four cells, place into two cells.\n<pre><code>0</code></pre> = New column.\n<pre><code>\\x00 \\x00 @</code></pre> = Using string last defined (test1), place into first two cells of the column. \n<pre><code>\\x05 \\x05 test2 \\x03</code></pre> = Place a cell three cells afterwords.\n<pre><code>\\x05\\x05test1\\x06</code></pre> = Place test1 into a cell 6 after test2\n<pre><code>@</code></pre> = Place test1 again, too.\n<pre><code>0</code></pre> = move to next column\n<pre><code>\\x00\\x01</code></pre> = Place previous string at location 01 \n<pre><code>@</code></pre> = And also at location 02\n<pre><code>\\x00</code></pre> = Done\n\nExplanation: My method was to look for a pattern, check if the pattern withstood further scrutiny - the first pattern I checked seemed to - and clear up any minor issues I had with it. Seems to have worked.\n",
            "votes": "7",
            "user": "0xC0000022L",
            "time": "May 4, 2013 at 2:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "asheeshr",
                    "text": "<span class=\"comment-copy\">Please format your answers properly. @0xC0000022L did it for you this time.</span>",
                    "time": null
                }
            ]
        }
    ]
}