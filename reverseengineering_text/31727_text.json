{
    "title": "Reverse engineer a blackbox function operating on single or double precision floats for emulation",
    "link": "https://reverseengineering.stackexchange.com/questions/31727/reverse-engineer-a-blackbox-function-operating-on-single-or-double-precision-flo",
    "content": "I own and run a NEC VectorEngine 10C which is a PCIe accelerator running a proprietary ISA which has many fun instructions among them is <pre><code>VRSQRT</code></pre> which computes an approximation of the inverse squareroot <pre><code>1/sqrt(x)</code></pre> for 16384 bits of floating point numbers (could be 256 double or 512 single precision floats) at a time. The exact computation result is <pre><code>Implementation defined</code></pre> according to the specification.\nFor the 32 bit variant a dump of the entire instruction fits in RAM (<18 Gigabytes). The 64 bit variant obviously doesn't.\nHow can i get a computer program which emulates this implementation? Ideally i would like a computer to find this emulation for me. However an actionable description of a manual approach is also acceptable and should it be required I can give access to the hardware remotely.\n",
    "votes": "3",
    "answers": 1,
    "views": "100",
    "tags": [
        "assembly",
        "hardware",
        "binary",
        "machine-code",
        "float"
    ],
    "user": "worldsmithhelper",
    "time": "Mar 30, 2023 at 13:04",
    "comments": [],
    "answers_data": [
        {
            "content": "My starting point here wouldn't be to look at generic emulation approaches as these themselves produce approximations to the function being emulated. (If an approximation is good enough then why not use the exact reciprocal square root result as an approximation to the approximate function ?)\nInstead, here you know the instruction returns an approximation to a known mathematical calculation.\nApproximate reciprocal square-root operation were developed some time ago. Initial versions were based on a 'magic' first step followed by 1 or more Newton-Raphson iterations.\nSince them similar instructions have appeared in several hardware architecture. (Intel & AMD x86-64, ARM NEON etc.)\nThe exact implementation of these is not generally documented, presumably because you seldom need to reproduce bit-accurate versions of approximate calculations. (The SX-Aurora document you linked to says that its implementation is system dependent. This, in theory, could mean that different versions or steppings of the same hardware could produce different results.\nThere is however at least one documented hardware implementation as Intel provided C reference implementations of the AVX-512 versions of their approximation instructions in 2015. These can be found here.\nThe first thing I'd try would be to implement a couple of the obvious or published implementations and see if they match the results you get from the hardware.\n",
            "votes": "2",
            "user": "Ian Cook",
            "time": "Apr 1, 2023 at 9:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}