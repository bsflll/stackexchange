{
    "title": "Should I keep parenthesis information while source modeling?",
    "link": "https://reverseengineering.stackexchange.com/questions/151/should-i-keep-parenthesis-information-while-source-modeling",
    "content": "I'm developing an AST model for a source code reverse engineering platform. My question is, should I keep parenthesis data in my AST? Because I have everything in a tree, I already know which operation will be executed first.\n",
    "votes": "6",
    "answers": 1,
    "views": "512",
    "tags": [
        "static-analysis",
        "ast",
        "code-modeling"
    ],
    "user": "Uko",
    "time": "May 15, 2013 at 8:38",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "I think it might be useful if you do static analysis, e.g. to detect common operator priority mistakes, like <pre><code>a & 3 == 1</code></pre>.\n",
            "time": null
        },
        {
            "user": "jix",
            "text": "It can also be useful when you want to convert ASTs back into source code, to get more readable code. It might make sense not to introduce a parenthesis AST node though, as it would make code working on the AST that doesn't care about them more complex. Adding a parenthesis flag to expression AST nodes seems to be the better option to me, it can be ignored by parts that do not care about them. It can also be retrofitted or removed without having to restructure everything.\n",
            "time": null
        },
        {
            "user": "Uko",
            "text": "@jix but on the other hand you can regenerate parenthesis following the language rules. This will also produce the code with no unnecessary or missing parenthesis. Thou it may affect readability\n",
            "time": null
        },
        {
            "user": "jix",
            "text": "Yes my point was about readability.\n",
            "time": null
        },
        {
            "user": "Jesper.Reenberg",
            "text": "This is more a question about how best to model an AST, than it is a question about reverse engineering.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a fairly general question, and the right decision will depend on what kind of analysis you wish to do. When reverse engineering, I'm of the philosophy that more information is better.\nSyntax Analysis\nAs mentioned by Igor, the C programming language parses <pre><code>a & 3 == 1</code></pre> as <pre><code>a & (3 == 1)</code></pre>, leading to a large number of bugs in code. There is nothing invalid about the code, but it is unlikely to be what the developer intended, and the syntactic pattern can be found and a warning can be given. Several compilers implement this already:\n\nGCC does not store parentheses in its AST, but warns about this during parsing, showing that parentheses needn't be in the AST to detect problems (see the call to <pre><code>warn_about_parentheses</code></pre> in <pre><code>gcc/c-typeck.c</code></pre>).\nClang, on the other hand, stores the parentheses in the AST as a node called <pre><code>ParenExpr</code></pre>. This allows for checks for common error conditions to be separated from the parser (see <pre><code>DiagnoseBitwisePrecedence</code></pre> in <pre><code>SemaExpr.cpp</code></pre>).\n\nHaving read both implementations, the Clang design seems preferable. The design makes it possible to add more modules that analyse the syntax of the code without modifying the parser. Clang also uses whitespace information to warn about things like <pre><code>x =+ 1</code></pre> (as opposed to <pre><code>x = +1</code></pre>), and code origin information to prevent warnings when macros are responsible for excessive parentheses. Although that exact functionality is unlikely to be needed in any non-C-derived language, it illustrates that the more information you have in your AST, the more you can do with it.\nCode Regeneration and Debugging\nAs mentioned by jix, discarding information about parentheses can be detrimental to the readability of code generated from your AST. Without storing information about parentheses, a code-regenerator is likely to turn <pre><code>x & (y == z)</code></pre> into <pre><code>x & y == z</code></pre>, which is both correct and confusing.\nThis also goes for debugging - the more closely your AST models the source code, the easier it is for you to look at your AST and see how it corresponds to the input code.\nSemantic Analysis\nAs noted in your question, once everything is parsed into a tree, you no longer need information about parentheses to understand the semantics of your code. If this is your sole intent, then your tree will be smaller and simpler without parentheses.\nDecompilers reconstruct ASTs from binary code and perform extensive analysis and transformation on them, with no knowledge about parentheses. The language's operator precedence is used to figure out where parentheses need to be put at the end of the decompilation process.\nImplementation\nIf you wish to keep parentheses in your AST for any of the reasons mentioned above, I would use Clang's approach and add a simple node for parenthesised expressions. This probably won't add more than ten lines to any code that traverses the tree.\njix noted above that you could use a flag for grouped expressions. It should be noted that this is inadequate for expressing the valid code <pre><code>((x + 5))</code></pre>, and is likely to encourage code-duplication by making each node responsible for printing its own parentheses (although I'm sure you can engineer around that).\n",
            "votes": "5",
            "user": "Dougall",
            "time": "Mar 23, 2013 at 11:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}