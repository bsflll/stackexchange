{
    "title": "How does a stripped XCOFF binary still remain usable?",
    "link": "https://reverseengineering.stackexchange.com/questions/18479/how-does-a-stripped-xcoff-binary-still-remain-usable",
    "content": "IBM's AIX <pre><code>strip</code></pre> utility documentation states the following:\n\nThe strip command with no options removes the line number information,\n  relocation information, symbol table, the debug section, and the\n  typchk section, and the comment section.\n\nIf relocation information is removed, how come the stripped executable still remain usable?\n",
    "votes": "4",
    "answers": 2,
    "views": "1k",
    "tags": [
        "file-format"
    ],
    "user": "sherlock",
    "time": "Jun 7, 2018 at 19:22",
    "comments": [
        {
            "user": "manduca",
            "text": "Okay, that‘s weird. Without relocation information, the binary either has to be position independent code or cannot be ASLRed. I‘m looking forward to the answer.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "That's not exactly a reverse engineering question, though.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "COFF files were not designed to support relocation after link-time:\n\nThe binary format used initially for Linux was an <pre><code>a.out</code></pre>\n  variant. When introducing shared libraries certain design\n  decisions had to be made to work in the limitations of\n  <pre><code>a.out</code></pre>. The main accepted limitation was that no relocations are performed at the time of loading and afterward.\n  The shared libraries have to exist in the form they are\n  used at run-time on disk. This imposes a major restriction on the way shared libraries are built and used: every\n  shared library must have a fixed load address; otherwise it\n  would not be possible to generate shared libraries which\n  do not have to be relocated.1\n\nWhile XCOFF represents an extension of COFF that does support use of shared libraries, the relocation information removed by <pre><code>strip</code></pre> pertains to information used for link-time relocation rather than load- or run-time relocation:\n\n\nReduces the size of an Extended Common Object File Format (XCOFF) object file by removing information used by the binder and symbolic debug program.\n\n\nThe binder uses the relocation information to modify address constants and other relocatable values when individual XCOFF object files are linked to create an XCOFF executable file.2\n\n\nThe binder appears to play a role similar to that of the link editor <pre><code>ld</code></pre> on Linux systems. \nSee the description of the <pre><code>-x</code></pre> flag:\n\nRemoves the symbol table information but does not remove static or external symbol information. The -x flag also removes relocation information, therefore linking to the file would not be possible.\n\n\n\nHow to Write Shared Libraries\nRelocation Information for XCOFF File (reloc.h)\n",
            "votes": "6",
            "user": "julian",
            "time": "Jun 7, 2018 at 21:47",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "apparently the XCOFF format  has a separate section for dynamic linker (system loader):\n\nLoader Section (loader.h)\nThe loader section contains information required by the system loader\nto load and relocate an executable XCOFF object. The loader section is\ngenerated by the binder. The loader section has an s_flags section\ntype flag of STYP_LOADER in the XCOFF section header. By convention,\n.loader is the loader section name. The data in this section is not\nreferenced by entries in the XCOFF symbol table.\n\nPresumably this one is not removed by <pre><code>strip</code></pre>, so the file still works.\nSee also similar question on what happens with stripped ELF files.\n",
            "votes": "2",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}