{
    "title": "How to decrypt data during runtime before executing and then encrypting it back",
    "link": "https://reverseengineering.stackexchange.com/questions/31237/how-to-decrypt-data-during-runtime-before-executing-and-then-encrypting-it-back",
    "content": "I was doing some research and came across the term <pre><code>protectors</code></pre>. From my understanding is they encrypt a file to be protected but run it without an issue. During its execution it is able to decrypt the file and encrypt it back to hide the data.\nSo instead of someone downloading my file and reverse engineering it and bypassing it or creating a clone, I could send through a protector. Now its all encrypted and only the parts running are decrypted.\nI am curious how that would work since you wouldn't know which assembly would be executed before so that you could decrypt.\n",
    "votes": "2",
    "answers": 0,
    "views": "217",
    "tags": [
        "disassembly",
        "windows",
        "assembly",
        "memory",
        "emulation"
    ],
    "user": "soqq",
    "time": "Dec 6, 2022 at 0:27",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. Technically there is no need to encrypt it again, since it already exists in that form in the executable. Otherwise protectors are an extension of the idea of packers. You could look for VMProtect and Themida and terms like \"devirtualization\" in conjunction with x64dbg or IDA, Ghidra etc. These two protectors use virtualization to obfuscate code. I.e. they invent \"machines\" and implement the logic to execute instructions in those \"machines\".\n",
            "time": null
        }
    ],
    "answers_data": []
}