{
    "title": "How to find function start in stripped binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/25542/how-to-find-function-start-in-stripped-binary",
    "content": "Given C code, are the function addresses from the ELF the same as those in the stripped version?\nI don't have any specific code in mind. Just trying to learn in general how to find the function beginning (and possibly end) in the stripped binary given the original code.\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "c",
        "gcc"
    ],
    "user": "Steven",
    "time": "Jul 24, 2020 at 14:51",
    "comments": [
        {
            "user": "blabb",
            "text": "if you have  c code you have line numbers  and one lineof c code can correspond to several address also a debug version of  code will and can have a completely different code sequence and from a releaseversion and as such can differ greatly please edit in relevent details your query as is kinda vague\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In a nutshell, stripping a binary means removing sections containing symbol and debug information from the file. These sections lie at the end of the binary, separate from the code. Removing this information has no bearing on the code itself, so the locations of functions in the file (their file offsets) will be the same after stripping the binary. Function addresses (their location in virtual memory), on the other hand, may either be hardcoded or position independent; it depends on how the binary was compiled (this is also unaffected by stripping symbol info).\nFinding the boundaries of functions in stripped binaries is an undecidable problem, but workarounds and heuristics exist, such as a signature-based approach to function detection. Here are some examples:\n\nIDA FLIRT essentially uses byte patterns to create function signatures\nGhidra's FunctionID feature takes mnemonic and operand type into account when hashing instructions to match functions to their well-known name\n\nthis is according to Willi Ballenthin's analysis\nhashing implementation\n\n\nJEB's disassembler creates function signatures by hashing the assembly (not binary code) of the function with a custom hashing algorithm.\nBinaryNinja's Signature Library\n\nHere is an interesting article on the subject: Architecture Agnostic Function Detection in Binaries\n",
            "votes": "2",
            "user": "julian",
            "time": "Jul 25, 2020 at 20:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Steven",
                    "text": "<span class=\"comment-copy\">Thanks a bunch!  I was worried that the address space of functions would change by converting the ELF to a stripped binary.</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@Steven no conversion takes place. Stripping merely removes information from the file that isnt used during execution anyway</span>",
                    "time": null
                }
            ]
        }
    ]
}