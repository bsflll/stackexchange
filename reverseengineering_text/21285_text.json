{
    "title": "String Encoding and Decoding Method",
    "link": "https://reverseengineering.stackexchange.com/questions/21285/string-encoding-and-decoding-method",
    "content": "so I came across the following string encoding method in python.\n<pre><code>def encode(the_string):\n    encoded_string = ''\n    rotations = ord(the_string[-1]) + 5\n\n    for i in range(0, len(the_string)):\n        value = ord(the_string[i])\n\n        for j in range(0, rotations):\n            value -= 1\n            if value < 65:\n                value = 25 + value\n\n        encoded_string += chr(value)\n        rotations += ord(the_string[i])-2\n    return encoded_string\n</code></pre>\nIt looks like a Caesar Cipher where ASCII value of the letter determines the number of shifts of the alphabet, however 'Z' stays at the end. The initial number of rotations is the ASCII value of the last letter of the string plus 5.\n<pre><code>def encode(the_string):\n   ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n   encoded_string = ''\n   rotations = (ord(the_string[-1]) + 5) % 25\n\n   for i in range(0, len(the_string)):\n       alphabet_rotate = ALPHABET\n       print('Rots:',rotations)\n       for j in range(0, rotations):\n           alphabet_rotate = alphabet_rotate[1:-1] + alphabet_rotate[0] + alphabet_rotate[-1]\n\n       encoded_string += ALPHABET[alphabet_rotate.index(the_string[i])]\n       rotations += (ord(the_string[i]) - 2) \n       rotations %= 25\n\n   return encoded_string\n</code></pre>\nI am trying to write a decoding method however I am struggling to find the the correct offsets for the rotations. I am reversing the direction of the shifts. Also the lookup of the decoded letter works in reverse. Is this the correct approach? Any help will be appreciated.\n<pre><code>def decode(the_string):\n    ALPHABET='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n    decoded_string = ''\n    rotations = (ord(the_string[-1]) + 3) % 25 # <== 1. PROBLEM HERE\n\n    for i in range(0, len(the_string)):\n        alphabet_rotate = ALPHABET\n\n        for j in range(0, rotations):\n            alphabet_rotate = alphabet_rotate[-2] + alphabet_rotate[0:-2] + alphabet_rotate[-1]\n\n        decoded_string += alphabet_rotate[ALPHABET.index(the_string[i])]\n\n        rotations += (ord(the_string[i]) +20 ) # <== 2. PROBLEM HERE\n        rotations %= 25\n\n    return decoded_string   \n</code></pre>\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "encryption",
        "python",
        "encodings"
    ],
    "user": "user28336",
    "time": "May 6, 2019 at 15:17",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "This is not the right subreddit for the question, crypto.stackexchange.com would be better suited. However I had a short look at it and I don't think there's a way to decode the string directly. The first and all subsequent rotations depend on the last plaintext char. We do not know that char and it isn't part of the encoded string. That only leaves bruteforce until one decoding makes sense, if I didn't miss an obvious hint.\n",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "(2nd comment due to space) Actually there is a correct decoding. You try all initial rotations until you have a plaintext for which the last character and the initial rotation + 5 match, but you have to try all offsets until you find the right one, so still bruteforce.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Some observations first:\n\nThe initial rotations is based on a plaintext char we do not know, and so are all further rotations. Therefore, I don't think we can decode a given string directly.\nPlaintexts with characters outside A-Z can be encoded but I'm not sure we can decode them properly. For my analysis I assumed A-Z inputs only.\nThere seems to be some oddness around rotations because effectively it does <pre><code>idx % 25</code></pre> instead of 26. If the input character is below 65 (='A'), it will be rotated to 'Y', not 'Z'.\n\nThat said, the following decodes a given encoded string and a given initial rotation which is not known:\n<pre><code>def decode(string,initial):\n    alph = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    rot = initial\n\n    decoded = \"\"\n\n    for i in range(len(string)):\n        c = string[i]\n        plain = alph[(alph.index(c)+rot) % (len(alph)-1)]\n        decoded += plain\n\n        rot += ord(plain)-2\n</code></pre>\nIf we add a line to the encode function to spit out the initial rotation we can test this:\n<pre><code>print(decode(encode(\"HELLO\"),84))\n</code></pre>\nprints <pre><code>HELLO</code></pre> correctly given the initial rotation of 84 as printed by the modified <pre><code>encode</code></pre> function.\nNow we have one clue to verify if we got the proper decoding. The first rotation and the last plaintext character are in relation:\n<pre><code>first rot = ord(last plaintext char) + 5\n</code></pre>\nSo we can test all initial rotations and the verify the above.\nHowever, the equality is under modulo 25. For example the 'HELLO' line can be properly decoded with the initial rotation 84 - but also with 9 (which you get by doing 84 % 25).\nIf we write a function to find a proper decoding like this:\n<pre><code>def find_decoding(string):\n    for i in range(26):\n        decoded = decode(string,i)\n        if ((ord(decoded[-1])+5) % 25) == i:\n            print(\"Key %d valid: %s\" % (i,decode(string,i)))\n</code></pre>\nwe can then find initial rotations for which the mentioned relationship holds. Interestingly 'HELLO' seems to be a rare input with multiple possible keys in the range 0-25:\n<pre><code>Key 4 valid: CTQVJ\nKey 9 valid: HELLO\nKey 14 valid: MOGBT\nKey 19 valid: RYBQY\nKey 24 valid: WJVGE\n</code></pre>\nbut any other string I tried randomly only had one valid initial rotation.\n",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "May 8, 2019 at 17:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pythonpython",
                    "text": "<span class=\"comment-copy\">Has anyone added a n-gram model to this to select the right rotation?</span>",
                    "time": null
                }
            ]
        }
    ]
}