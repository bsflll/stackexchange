{
    "title": "Help analyzing ThunderSoft DRM-protected EXE video (Delphi, AES, Machine ID binding)",
    "link": "https://reverseengineering.stackexchange.com/questions/33435/help-analyzing-thundersoft-drm-protected-exe-video-delphi-aes-machine-id-bind",
    "content": "I'm currently analyzing a video file that has been wrapped in a .exe and protected using ThunderSoft Video Password Protect / DRM Protection v4.1. I'm trying to understand how the protection works and if there's a way to play the video on a different machine where the original credentials fail.\nDetails:\nThe original video is in .wmv format.\nIt's wrapped into an EXE built with Borland Delphi 6.0 â€“ 2010.\nThe DRM uses AES encryption.\nThe \"Play Password\" is generated based on:\nAn encryption key\nThe machine ID\nIf run on another device (even with the same password), it shows:\n\n\"Illegal password, inconsistent with the current machine code!\"\n\nMy questions:\n\nHow can I bypass the machine ID check (e.g., patching JNZ to JMP)?\nIs it possible to extract the WMV video from inside the EXE, or is it likely fully encrypted until runtime?\nAre there known unpacking strategies/tools for ThunderSoft-protected files?\n\n\nI own the file and password and just want to be able to run it on a secondary machine.\nAttached is a sample of the encrypted file from the link provided, for analysis purposes only\nhttps://pixeldrain.com/u/wRJfvCAg\n\n\nThanks in advance for any help, suggestions, or tools you recommend!\n",
    "votes": "1",
    "answers": 0,
    "views": "6",
    "tags": [
        "unpacking"
    ],
    "user": "power mind",
    "time": "yesterday",
    "comments": [],
    "answers_data": []
}