{
    "title": "Why PTRACE_POKEDATA returns I/O error?",
    "link": "https://reverseengineering.stackexchange.com/questions/27499/why-ptrace-pokedata-returns-i-o-error",
    "content": "I learning usage of ptrace.\nI tried following simple example but raises a I/O Error.\nI would like to overwrite \"Hello, world\" (printing string) from other process.\nA target program prints \"Hello, world\" string until stop then I want to change this prints string from another program that use ptrace.\nHowever the ptrace program failed to POKEDATA with I/O Error.\nI have no idea why it failed.\nI have tried on:\nx86_64 Linux 5.11.\nAMD Ryzen 7 4750U\nptrace code: (This ptrace code refer from http://0xcc.net/blog/archives/000077.html (Japanese))\n<pre><code>#include <assert.h>\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <stdio.h>\n\nint\nmain (int argc, char **argv)\n{\n    assert(argc == 4);\n    pid_t pid = atoi(argv[1]);\n    void *addr = (void *)strtol(argv[2], NULL, 0);\n    void *word = (void *)strtol(argv[3], NULL, 0);\n\n    assert(ptrace(PTRACE_ATTACH, pid, NULL, NULL) == 0);\n    wait(NULL);\n    if (ptrace(PTRACE_POKEDATA, pid, addr, word) != 0) {\n        printf(\"Error: %s\n\", strerror(errno));\n        return 0;\n\n    }\n    assert(ptrace(PTRACE_DETACH, pid, NULL, NULL) == 0);\n    return 0;\n}\n</code></pre>\ntarget code:\n<pre><code>#include <stdio.h>\n#include <stdbool.h>\n\nint main() {\n    while (true) {\n        printf(\"%s\n\", \"Hello, world\");\n    }\n}\n</code></pre>\nA address of target string in target binary (in my environment):\n<pre><code>Contents of section .rodata:\n 2000 01000200 48656c6c 6f2c2077 6f726c64  ....Hello, world\n</code></pre>\nexection (shell):\n<pre><code>./ptrace target_process_id 0x2004 0x60616263   //try to replace from Hell to abcdl \n</code></pre>\n",
    "votes": "2",
    "answers": 0,
    "views": "401",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "KiYugadgeter",
    "time": "Apr 18, 2021 at 13:17",
    "comments": [
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "you need an actual address of this string in the process' memory\n",
            "time": null
        },
        {
            "user": "KiYugadgeter",
            "text": "@Pawe≈Ç≈Åukasik How to get it?\n",
            "time": null
        },
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "one way is, you can compile w/o PIE and the <pre><code>objdump</code></pre> will give you the address\n",
            "time": null
        },
        {
            "user": "Pawe≈Ç ≈Åukasik",
            "text": "<pre><code>gcc -no-pie -o target target.c</code></pre> works for me\n",
            "time": null
        },
        {
            "user": "KiYugadgeter",
            "text": "Oops I was misunderstandeding that pie and pic!   It works fine for me.  „ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„ÅüüòÄ\n",
            "time": null
        }
    ],
    "answers_data": []
}