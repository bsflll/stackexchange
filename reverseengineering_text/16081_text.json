{
    "title": "How to generate the call graph of a binary file?",
    "link": "https://reverseengineering.stackexchange.com/questions/16081/how-to-generate-the-call-graph-of-a-binary-file",
    "content": "I have a non-stripped ELF binary for which I want to create a call graph as a dot file. Is there such a tool which generates the call graph?\nEDIT: Is there away in addition to the conventional call graph to find a call graph between libraries based on the executable. For example showing the call graph only of from <pre><code>libc</code></pre> to <pre><code>pthread</code></pre>.\n",
    "votes": "18",
    "answers": 4,
    "views": "16k",
    "tags": [
        "binary-analysis",
        "elf",
        "call-graph"
    ],
    "user": "0x90",
    "time": "Aug 6, 2018 at 15:05",
    "comments": [
        {
            "user": "0x90",
            "text": "Another option would be: rizin.re\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use radare2 or one of the alternatives below to generate a full call-graph in dot format.  \nradare2 Installation\nFirst of all, install radare2 from git repository:\n<pre><code>$ git clone https://github.com/radare/radare2.git\n$ cd radare2\n$ ./sys/install.sh\n</code></pre>\nAnalysis\nAfter you've downloaded and installed radare2, open your binary and perform analysis on it using the <pre><code>aaa</code></pre> command:\n<pre><code>$ r2 /bin/ls\n[0x004049a0]> aaa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Constructing a function name for fcn.* and sym.func.* functions (aan)\n[x] Type matching analysis for all functions (afta)\n[x] Use -AA or aaaa to perform additional experimental analysis.\n</code></pre>\nOutput visual graph\nThe <pre><code>ag</code></pre> command and subcommands can help you to output the visual graph into Graphviz format.\n<pre><code>[0x00000000]> ag?\nUsage: ag<graphtype><format> [addr]\nGraph commands:\n| aga[format]             Data references graph\n| agA[format]             Global data references graph\n| agc[format]             Function callgraph\n| agC[format]             Global callgraph\n| agd[format] [fcn addr]  Diff graph\n| agf[format]             Basic blocks function graph\n| agi[format]             Imports graph\n| agr[format]             References graph\n| agR[format]             Global references graph\n| agx[format]             Cross references graph\n| agg[format]             Custom graph\n| ag-                     Clear the custom graph\n| agn[?] title body       Add a node to the custom graph\n| age[?] title1 title2    Add an edge to the custom graph\n\nOutput formats:\n| <blank>                 Ascii art\n| *                       r2 commands\n| d                       Graphviz dot\n... <truncated> ...\n| w [path]                Write to path or display graph image (see graph.gv.format and graph.web)\n</code></pre>\nYou're searching for the <pre><code>agCd</code></pre> command. The <pre><code>C</code></pre> specifies to output a full (\"global\") call-graph of the program. The <pre><code>d</code></pre> specifies to output in Graphviz dot format.\n<pre><code>[0x004049a0]> agCd > output.dot\n</code></pre>\nThe <pre><code>dot</code></pre> utility is part of the Graphviz software which can be installed using <pre><code>sudo apt-get install graphviz</code></pre>.\nYou can view your output in any offline dot viewer, paste the output into an online Graphviz viewer and even convert the dot file to PNG:  \n<pre><code>$ r2 /bin/ls\n[0x004049a0]> aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x004049a0]> agCd > output.dot\n[0x004049a0]> !!dot -Tpng -o callgraph.png output.dot\n</code></pre>\nTo read more about radare2 it is recommended to read radare2 book.\n\nAlternatives\n\ngen-callgraph - gen-callgraph is a script to generate call graph from elf binary\nIDA Pro - generate GDL (Graph Description File) call graph using CTRL+F12, save it and then convert it to dot file with one of the following options:\n\ngraph-easy - Convert between graph formats\nThis perl script from Multimedia Wiki\n\n\nThe free version of IDA is also capable of generate GDL of call graph but it is only available as exe, use wine on Linux to run it\n",
            "votes": "21",
            "user": "devtty1er",
            "time": "Sep 24, 2018 at 8:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0x90",
                    "text": "<span class=\"comment-copy\">Is there away to get a call graph between libraries or files rather call graph between functions?</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">You can use <code>il</code> to get libraries used by the binary or <code>rabin2 -l /bin/ls</code> which is the same</span>",
                    "time": null
                },
                {
                    "user": "Megabeets",
                    "text": "<span class=\"comment-copy\">I don't know of a command to generate a call graph of only libraries, sorry</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You might want to give angr a try.\n\nLoad the binary. Suppose <pre><code>p</code></pre> is the angr Project instance.\nGenerate a CFG: <pre><code>cfg = p.analyses.CFG(show_progressbar=True)</code></pre>.\nAccess/traverse the call graph (which is a networkx.DiGraph) in whatever way you want: <pre><code>cfg.functions.callgraph</code></pre>.\n\n\nFor example showing the call graph only of specific address range or specific static library\n\nYou can limit the range of CFG generation by passing the <pre><code>regions</code></pre> argument to <pre><code>CFG()</code></pre>.\n",
            "votes": "8",
            "user": "Fish",
            "time": "Aug 16, 2017 at 23:07",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can use angr-utils in order to generate the graph from angr : https://github.com/axt/angr-utils\nFor more information please see:\nhttps://github.com/axt/angr-utils/blob/master/examples/plot_cg/README.md\n",
            "votes": "3",
            "user": "Peter Teoh",
            "time": "Dec 26, 2021 at 0:24",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">You should elaborate a bit...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Check out Callgrind or KCachegrind. Much simpler than any other alternative.\n",
            "votes": "2",
            "user": "yaspr",
            "time": "Jan 4, 2020 at 9:52",
            "is_accepted": false,
            "comments": [
                {
                    "user": "rfabbri",
                    "text": "<span class=\"comment-copy\">but are these static analyzers? or only report what is called in some typical run?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Callgrind is based on Valgrind, a serializing dynamic analysis framework.</span>",
                    "time": null
                }
            ]
        }
    ]
}