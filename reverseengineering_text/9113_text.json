{
    "title": "How can I generate a call graph from an unstripped x86 Linux ELF?",
    "link": "https://reverseengineering.stackexchange.com/questions/9113/how-can-i-generate-a-call-graph-from-an-unstripped-x86-linux-elf",
    "content": "There's a piece of software, for which I only have the binary, not the source code. It's:\n\nunobfuscated (so, not polymorphic or anything. It is optimized a bit, though)\nunstripped\nx86 32 bit\ntrustworthy (not suspected malware)\ncompiled from C++ (based on contents of symbol table)\nprobably uses JNI (a couple reasons; partly because it has a fair number of its strings in UTF-16)\n\nI don't need the full call graph, just the call graph / control flow when given certain arguments. The only reverse engineering I've done has been relatively basic stuff with binutils + gdb + strace. Essentially, I just need a piece of software to match up 'call' and 'ret' pairs, and translate 'call' instruction destinations to their human-readable symbol names. Hopefully generate a readable 2D graph image to give me a feel for app execution.\nSo, something to map control flow. It is just a single binary (with some dynamic library dependencies), but it's large enough that manual traces would be prohibitively labor-intensive.\nEDIT: I don't want to have to pay for anything or run windows to do this. If at all possible, I'd like to be able to run something natively on Linux.\n",
    "votes": "11",
    "answers": 4,
    "views": "8k",
    "tags": [
        "x86",
        "linux",
        "elf",
        "visualization"
    ],
    "user": "Parthian Shot",
    "time": "Jun 10, 2015 at 21:55",
    "comments": [],
    "answers_data": [
        {
            "content": "Radare2 is also able to collect the callgraph of a program based on its binary only.\nSome time ago, I asked this question which is somehow related to yours and one of the author of Radare2 answered:\n\nRecursive traversal disassembling with Radare2?\n\nYet, if you want a graphical representation of the callgraph here is the way to do:\n<pre><code>$> radare2 /usr/bin/md5sum\n... start of radare2 ...\n[0x00402427]> aa\n[0x00402427]> afl\n[0x00402427]> ag > b.dot\n[0x00402427]> !xdot b.dot\n</code></pre>\nThe <pre><code>aa</code></pre> command collect information about the analyzed binary. Then, the <pre><code>afl</code></pre> command collect information about all the function call sites (addr, size, bbs, name). Finally, the <pre><code>ag</code></pre> command output the graphviz representation of the collected data. Note that we dumped the data in the file <pre><code>b.dot</code></pre>, I used the <pre><code>xdot</code></pre> software from the Radare2 prompt but it can be done outside of the Radare2 shell (of course).\nI found this way of doing in a talk given at Auckland in 2015 by Andrew McDonnell (slides 26-27).\n",
            "votes": "9",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "All (caller, callee)-tuples except for direct recursion and duplicates:\n<pre><code>objdump -d $BINARY_FILENAME \\\n| grep '<' \\\n| sed -e 's/^[^<]*//' \\\n| sed 's/<\\([^+]*\\)[^>]*>/\\1/' \\\n| awk 'BEGIN { FS = \":\" } \\\n       NF>1 { w=$1; } \\\n       NF==1 && w != $1 { print \"(\\\"\" w \"\\\", \\\"\" $0 \"\\\"),\" }' \\\n| sort -u\n</code></pre>\n",
            "votes": "5",
            "user": "lambda",
            "time": "Mar 15, 2017 at 20:44",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can use IDA Pro to generate call graphs:\n\n(source: hex-rays.com)\n",
            "votes": "4",
            "user": "Glorfindel",
            "time": "Dec 29, 2020 at 7:34",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Parthian Shot",
                    "text": "<span class=\"comment-copy\">I'd always thought of IDA as Windows-specific. Learn something new every day... <b>edit</b>: I'll leave my upvote, because I didn't specify \"free\" but  the free version of IDA is an exe.</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">According to <a href=\"https://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=23368\" rel=\"nofollow noreferrer\">WineHQ</a>, IDA's graph view works just fine in the free version of IDA 5.0 when run on Wine.</span>",
                    "time": null
                },
                {
                    "user": "Parthian Shot",
                    "text": "<span class=\"comment-copy\">Good point. Testing it now. :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can use Ghidra to generate call graphs for various binaries, including x86 Linux ELF binaries.\n",
            "votes": "1",
            "user": "auspicious99",
            "time": "Jan 6, 2021 at 14:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}