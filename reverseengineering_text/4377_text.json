{
    "title": "OllyDebugger How to use Find Sequence of commands with wildcard 32bit registers",
    "link": "https://reverseengineering.stackexchange.com/questions/4377/ollydebugger-how-to-use-find-sequence-of-commands-with-wildcard-32bit-registers",
    "content": "Lets say I want to find all the\n<pre><code>MOV EAX, 1234h\nMOV WORD PTR[EBP+ADDR], AX\n</code></pre>\nBut it won't be always <pre><code>EAX</code></pre> or <pre><code>EBP+ADDR</code></pre>\nHow do I wildcard search like\n<pre><code>MOV ???, 1234h\nMOV WORD PTR[???+ADDR], ??\n</code></pre>\nI tried\n<pre><code>MOV ANY, 1234h\nMOV WORD PTR[ANY+ADDR], ANY\n\nMOV ?, 1234h\nMOV WORD PTR[ANY+ADDR], ?\n\nMOV r32, 1234h\nMOV WORD PTR[r32+ADDR], r16\n</code></pre>\nNone of these patterns compile in Ollydebugger how do I do this? (I would like to avoid scripts for such a easy task.\nThis one below compiles and works,\n<pre><code>MOV r32, 0x1234\n</code></pre>\nbut how do I combine it with \n<pre><code>MOV WORD PTR[r32+ADDR], r16\n</code></pre>\n",
    "votes": "4",
    "answers": 2,
    "views": "6k",
    "tags": [
        "ollydbg"
    ],
    "user": "SSpoke",
    "time": "May 19, 2014 at 19:02",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>ollydbg 1.10</code></pre> right click <pre><code>Search For All Sequences wildcard</code></pre> MOV R32 , CONST\nresult from calc.exe xp sp3 32 bit vm\n<pre><code>Found sequences\nAddress                    Disassembly                            Comment\n01001004 <&ADVAPI32.RegQu  DD      ADVAPI32.RegQueryValueExA      (Initial CPU selection)\n010019E5                   MOV     EDI, OFFSET calc.ghnoParNum    01014C08=OFFSET calc.ghnoParNum\n010019EF                   MOV     EDI, OFFSET calc.ghnoPrecNum   01014C70=OFFSET calc.ghnoPrecNum\n01001A6B                   MOV     EBX, calc.010012A0             UNICODE \"intl\"\n01001D51                   MOV     ESI, 130\n01001DDF                   MOV     EAX, OFFSET calc.szBlank       01014DA4=OFFSET calc.szBlank\n01001DE6                   MOV     EAX, calc.01001264             UNICODE \" M\"\n01001F51 calc.WinMain      MOV     EAX, calc.010128EE             10128EE=calc.010128EE\n01001FED                   MOV     ESI, 400\n010020A2                   MOV     EAX, calc.010020A8             010020A8=calc.010020A8\n010020D5                   MOV     EAX, 80000000\n0100210A                   MOV     EDI, OFFSET calc.szAppName     UNICODE \"SciCalc\"\n</code></pre>\ncombined wild card \nMOV WORD PTR [R32+CONST] , R16\n<pre><code>Found sequences\nAddress        Disassembly                                     Comment\n01001F6E       MOV     WORD PTR SS:[EBP-FC], BX\n01002234       MOV     WORD PTR DS:[EAX+EDX*2+14], DI\n0100230D       MOV     WORD PTR DS:[ESI+EAX*2+14], DI\n0100231C       MOV     WORD PTR DS:[ESI+EAX*2+A4], DI\n01002358       MOV     WORD PTR SS:[EBP+EDI*2-108], AX\n01002376       MOV     WORD PTR SS:[EBP+EDI*2-108], AX\n01002470       MOV     WORD PTR DS:[ECX+EAX*2+C], BX\n010024AF       MOV     WORD PTR DS:[ECX+ESI*2+C], BX\n0100251D       MOV     WORD PTR DS:[EAX+ECX*2+14], DX\n010025AA       MOV     WORD PTR DS:[ECX+EAX*2+14], DX\n0100404D       MOV     WORD PTR SS:[EBP+EAX*2-74], BX\n010056E0       MOV     WORD PTR SS:[EBP+8], AX\n010056F4       MOV     WORD PTR SS:[EBP+A], BX\n01012475 calc  PUSH    70                              (Initial CPU selection)\n</code></pre>\nedit to address comment\nyou <pre><code>dont need the WORD ptr</code></pre> simply doing\nmov [R32+CONST] ,R16\nwill fetch the same results\nollydbg <pre><code>implicitly knows R!6 means word ptr</code></pre> instead of R16\nif you provide <pre><code>r32</code></pre> ollydbg will decode it as <pre><code>DWORD PTR</code></pre>\n<pre><code>Found sequences, item 1\n Address=010017E7\n Disassembly=MOV     DWORD PTR SS:[EBP-2C], ESI\n</code></pre>\nprovide <pre><code>mov [CONST} , R8</code></pre>  and you get back <pre><code>all BYTE PTR</code></pre> Sequences\n<pre><code>Found sequences, item 1\n Address=0100AC75\n Disassembly=MOV     BYTE PTR DS:[ftrueinfinite], BL\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "May 19, 2014 at 20:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "SSpoke",
                    "text": "<span class=\"comment-copy\">So how I combine them? I don't know the <code>CONST</code> for <code>WORD PTR</code> it is local variable i think, OH <code>CONST</code> is a keyword for any value, Nevermind both lines at once on All sequences search. I see, works perfect thanks</span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">you dont need the WORD ptr simply doing mov [R32+CONST] ,R16 will fetch the same results ollydbg implicitly knows R!6 means word ptr instead of R16 if you provide r32 ollydbg will decode it as DWORD PTR Found sequences, item 0  Address=010017E7  Disassembly=MOV     DWORD PTR SS:[EBP-2C], ESI</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Nevermind this don't work right.. it has to find the constant in both areas for it to find the WORD PTR.. and that's not the case.\nI solved it differently don't really need Sequence of commands,\nAll Constants works nearly the same (just more stuff to look though and it's all sorted so I would see the <pre><code>WORD PTR</code></pre> right under it if it's what i'm looking for.\n",
            "votes": "2",
            "user": "SSpoke",
            "time": "May 19, 2014 at 19:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}