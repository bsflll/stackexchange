{
    "title": "Unable to extract IP camera firmware",
    "link": "https://reverseengineering.stackexchange.com/questions/21175/unable-to-extract-ip-camera-firmware",
    "content": "I am trying to extract the firmware for a Panasonic WV-S2131L ip camera. It comes as a .zip file that contains a .img file. I have tried many methods to try to analyze this file and I have found nothing of value.\nBinwalk returned absolutely nothing\nxxd at least gave me back the firmware version\n\n<pre><code>xxd -a s1131_402ES.img | head\n  00000000: 342e 3032 4530 0000 302e 3030 0000 0000  4.02E0..0.00....\n  00000010: 1314 0000 1314 0000 0004 0000 8000 b003  ................\n  00000020: 1f06 0000 0000 0000 0000 0000 0000 0000  ................\n  00000030: 0000 0000 0000 0000 0000 0000 0000 8000  ................\n  00000040: 0000 0000 0000 0000 0000 8000 0000 2003  .............. .\n  00000050: 0000 0000 0000 0000 0000 a003 9601 0000  ................\n  00000060: 0100 0000 0000 0000 0100 0000 0000 0000  ................\n  00000070: 0000 0000 0000 0000 0000 0000 0000 797d  ..............y}\n  00000080: 5e12 3e81 1370 6400 a6fa c4e5 058b 3136  ^.>..pd.......16\n  00000090: 5630 f8f0 2878 5f56 7788 279b a597 114c  V0..(x_Vw.'....L</code></pre>\n\nA complete hex dump revealed no recognizable string\nFDisk said there was no recognizable file system\n7zip thinks it's corrupt\nI'm thinking that it has to be some type of binary image but since no tools, I've tried have given any indication that any recognizable partitions or files existed, maybe it's obfuscated or has some type of encryption.\n",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "firmware",
        "embedded"
    ],
    "user": "Gabe Bryk",
    "time": "Apr 18, 2019 at 8:31",
    "comments": [
        {
            "user": "Chris Stratton",
            "text": "What you have may be some sort of updater archive rather than the firmware in usable form.   One check would be that if the zip isn't much smaller than the contained image that indicates a high level of entropy compared to executable code meaning the image is probably compressed and/or encrypted.   Your best bet may to be physically open the product to see what sort of processor it uses, and see if there is a flash chip perhaps containing the executable version of the firmware in a more direct form.   But runtime decompression or decryption by a boot ROM or even hardware is possible....\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When performing firmware analysis, examination of an entropy plot should always be the first step, since this is the fastest way of determining whether the file is compressed or encrypted.\nIn this case, an entropy plot and the byte frequency distribution of the file indicate that it is encrypted. Hence, no signatures and nonsense strings.\nSpecifically:\n\nentropy level is very close to the maximum throughout the file.\nthe distribution of byte values is close to uniform, indicating that the file is more likely to be encrypted than compressed.\n\nEntropy plot produced via <pre><code>binwalk -E s1131_402ES.img</code></pre>:\n\nByte frequency distribution:\n\nThe code used to produce these plots as well as some discussion of the reasoning behind this choice of visualization can be found in this gist, and is included as a script here:\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [15, 5]\nimport seaborn as sns; sns.set()\n\ndef plot_relative_frequency_distribution(data, filename):\n\n    # unvariate\n    ax = sns.distplot(np.array(list(data)), \n                      bins=256, \n                      kde=False,\n                      hist_kws={'alpha':0.8},\n                      norm_hist=True, \n                      color='blue');\n    ax.set(xlabel='Byte Value (base 10)', \n            ylabel='Relative Frequency', \n            title='Relative Frequency Histogram of Byte Values')\n    # control x axis range\n    ax.set_xlim(-10, 260)\n    #ax.set_ylim(0, 0.10)\n    ax.set_title(filename)\n\n\ndef plot_cdf(data, filename):\n    ax = sns.distplot(np.array(list(data)), \n                      bins=256, \n                      kde=False,\n                      hist_kws={'histtype':'step', 'cumulative': True, 'linewidth':1, 'alpha':1}, \n                      kde_kws={'cumulative': True},\n                      norm_hist=True, \n                      color='red');\n\n    ax.set(xlabel='Byte Value (base 10)', \n           ylabel='Probability', \n           title='CDF of Byte Values')\n            # control x axis range\n    ax.set_xlim(-10, 260)\n    #ax.set_ylim(0, 0.10)\n\ndef create_plots(file):\n\n    with open(file, 'rb') as f:\n        data = f.read()\n\n    # control layout\n    grid = plt.GridSpec(1, 3, wspace=0.3, hspace=0.1)\n\n    # first plot\n    plt.subplot(grid[0, :2])\n    plot_relative_frequency_distribution(data, f.name)\n\n    # second plot\n    plt.subplot(grid[0, 2:])\n    plot_cdf(data, f.name)\n\n    plt.show()\n\ndef main():\n    create_plots('s1131_402ES.img')\n</code></pre>\n",
            "votes": "7",
            "user": "julian",
            "time": "Apr 24, 2019 at 8:12",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Seems to be an encrypted file, probably made with bootloader of device (the camera), would need to get access to bootloader for trying reverse it and get the software algorithm.\nThe firmware package has some known headers, like the total lenght of the file in Little Endian (0x03B0xxxx) needed for deflate process.\nSo probably the Panasonic Brand would apply software protection for their firmwares, would be easy to get all code (boot + firm + data) from nor or nand flash from device by desoldering and reading bga IC but I doubt they would use cryptoprocessor..\nRegards.\n",
            "votes": "0",
            "user": "numind",
            "time": "Apr 25, 2019 at 11:40",
            "is_accepted": false,
            "comments": []
        }
    ]
}