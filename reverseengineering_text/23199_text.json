{
    "title": "Can relative offsets in instructions like call and jmp change after recompiling the same code, or running it in another computer?",
    "link": "https://reverseengineering.stackexchange.com/questions/23199/can-relative-offsets-in-instructions-like-call-and-jmp-change-after-recompiling",
    "content": "So let's say we want to use some instructions as signature for a malware, and it includes some call instructions or jmp instructions. Now, as far as I have seen, they always contain relative offsets as address and don't contain absolute addresses of the destination.\nNow, can the relative offset between functions or instructions change if the binary is compiled again with the same compiler? How about with another compiler?\nDo you guys think using a call instruction as part of a signature is good?\n",
    "votes": "0",
    "answers": 1,
    "views": "133",
    "tags": [
        "assembly",
        "decompilation",
        "malware",
        "static-analysis",
        "operating-systems"
    ],
    "user": "OneAndOnly",
    "time": "Jul 8, 2020 at 21:28",
    "comments": [
        {
            "user": "perror",
            "text": "If you are speaking of aligned assembly, then why not. If this is not the case, it is already difficult to identify call instructions into the mess, so it won't work.\n",
            "time": null
        },
        {
            "user": "OneAndOnly",
            "text": "@perror why would the alignment change by recompiling the same program? and why would alignment affect the offsets between functions in the text section?\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "If instructions are not aligned, then disassembly is quite tedious. Because, you cannot tell if the instructions found by the disassembler are the ones that get really executed by the program. So, you might end up by making a signature based on some misconceptions issued from a broken analysis which may lead to an unpredictable behavior. Therefore, getting a signature on unaligned instruction sets might lead to an untrustable result.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If there are code changes, it will most likely change between versions. \nI would suggest you look at the implementation of FLIRT, in particular here, where they explain how they face this issue.\n",
            "votes": "0",
            "user": "macro_controller",
            "time": "Feb 6, 2020 at 16:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "OneAndOnly",
                    "text": "<span class=\"comment-copy\">but what about not changing the code and just recompiling the code again with the same or different compiler, or running the code in a different computer, will the offsets between functions change?</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">Recompiling the code with the same compiler at the same machine will probably yield the same results, but I believe it's not promised. Running the code on a different computer should not change it. Different compiler will most likely yield different results regarding distances between functions.</span>",
                    "time": null
                }
            ]
        }
    ]
}