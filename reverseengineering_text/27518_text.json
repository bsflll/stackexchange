{
    "title": "IDA Pro - How to remove multi-line bit definitions for register",
    "link": "https://reverseengineering.stackexchange.com/questions/27518/ida-pro-how-to-remove-multi-line-bit-definitions-for-register",
    "content": "I've just started reversing some microcontroller code and have the RAM, ROM, and SFR (Special Function Registers) segments set up.  I've selected my processor architecture and it has named most of the registers correctly automatically.  However, a few are incorrect (I assume this is due to variations between specific chips in the architecture family).\nThis is not a problem for most registers as I can simply rename and recomment them.  However, some of the registers have the specific bits labelled and I have tried absolutely everything I can to remove them.  I can rename the register itself and recomment it just fine, but I cannot modify or delete the bit specific fields.\nIn the image I have renamed the register at 002C to \"VW2C\" and added the correct comment.  The previous name was \"dm0con\".  As can be seen, the bit specific fields are still there and trying to rename or recomment them just edits the actual register itself.\nI have searched and searched online but it is hard to find the answer since I'm not even sure what the proper name for these fields are.  I have looked through all the toolbars and submenus but cannot get rid of these bit specific definitions.\n",
    "votes": "1",
    "answers": 1,
    "views": "231",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "tools",
        "register"
    ],
    "user": "canadaboy25",
    "time": "Apr 21, 2021 at 6:27",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "what processor is this?\n",
            "time": null
        },
        {
            "user": "canadaboy25",
            "text": "It is a Renesas M16C64A.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The I/O register names and bit layouts for processors that support them are stored in processor-specific <pre><code>.cfg</code></pre> files. For M16C, the files are <pre><code>m16c60.cfg</code></pre> and <pre><code>m16c80.cfg</code></pre>:\n<pre><code>dm0con                0x2c     DMA0 control register\ndm0con.dmbit_dm0con   0        Transfer unit bit select bit\ndm0con.dmasl_dm0con   1        Repeat transfer mode select bit\ndm0con.dmas_dm0con    2        DMA request bit\ndm0con.dmae_dm0con    3        DMA enable bit\ndm0con.dsd_dm0con     4        Source address direction select bit\ndm0con.dad_dm0con     5        Destination address direction select bit\n</code></pre>\nYou can either edit the default registers or make a copy of the default <pre><code>.m16c</code></pre> device section under a new name and select it at load time.\n",
            "votes": "0",
            "user": "Igor Skochinsky",
            "time": "Apr 23, 2021 at 23:11",
            "is_accepted": true,
            "comments": []
        }
    ]
}