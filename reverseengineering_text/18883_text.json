{
    "title": "What are these LOAD segments in an assembly ELF64?",
    "link": "https://reverseengineering.stackexchange.com/questions/18883/what-are-these-load-segments-in-an-assembly-elf64",
    "content": "I wrote the following (fasm) assembly program:\n<pre><code>format ELF64 executable\n\nsegment readable executable\n\n; sys_exit, sys_write, strlen and print are from io.inc and\n; unistd64.inc at: https://github.com/pbohun/fasm-tutorials\nsys_exit            =   60\nsys_write           =   1\nentry main\n\nstrlen:\n    push    rdi             ; push to stack\n    push    rcx             ; push to stack\n    sub     rcx, rcx        ; set rcx to 0\n    mov     rcx, -1         ; move -1 to rcx\n    sub     al, al          ; set al to 0\n    cld                     ; clear the direction flags\n    repne   scasb           ; repeat if not equal to al\n    neg     rcx             ; negate rcx\n    sub     rcx, 1          ; subtract 1 from rcx\n    mov     rax, rcx        ; move value from rcx to rax\n    pop     rcx             ; restore original rcx value\n    pop     rdi             ; restore original rdi value\n    ret\n\nprint:\n    call    strlen          ; get string length\n    mov     rdx, rax        ; move string length to rdx\n    mov     rsi, rdi        ; move address of string to rdi\n    mov     rdi, 1          ; stdout\n    mov     rax, sys_write\n    syscall\n    ret\n\nmain:\n    mov rdi, msg\n    call print\n    xor rdi, rdi\n    mov rax, sys_exit\n    syscall\n\nsegment readable\nmsg db \"This is a message.\", 0xA, 0\n</code></pre>\nWhen I disassemble with IDA Pro, under the segments I see this:\n\nMy question is, why are both segments called LOAD? What is the meaning behind this? I did not name the segments in my program.\n",
    "votes": "3",
    "answers": 2,
    "views": "890",
    "tags": [
        "ida",
        "assembly",
        "elf",
        "x86-64"
    ],
    "user": "Todd",
    "time": "Jan 19, 2023 at 9:02",
    "comments": [],
    "answers_data": [
        {
            "content": "The segments are called <pre><code>LOAD</code></pre> because that is the default name given to segments loaded from an ELF in IDA when they have no name.\nThe first segment is the equivalent of <pre><code>.text</code></pre>, it contains executable code.\nThe second segment is the equivalent of <pre><code>.rdata</code></pre>, it contains read-only data that is not executable.\n",
            "votes": "2",
            "user": "Avery3R",
            "time": "Jul 25, 2018 at 1:57",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "These two segments are used to map the content of ELF file to memory. In other word, the content of ELF is only and only will map to these two segments (a.k.a program header).\n",
            "votes": "0",
            "user": "husin alhaj ahmade",
            "time": "Jan 19, 2023 at 7:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Why are you claiming that those two segments <i>both</i> map to the file header? Clearly only the first one (lower virt. addr.) <i>does</i> as that's the one that contains the ELF header <i>and</i> the code, whereas the second one <i>doesn't</i> contain the ELF header, but contains the data string.</span>",
                    "time": null
                },
                {
                    "user": "husin alhaj ahmade",
                    "text": "<span class=\"comment-copy\">Usually a program header table has several segments in which two are LOAD segments. AFAIK, the 1st LOAD segment is mostly filled with executable instructions and unchangeable constants. The 2nd segment consists mostly of the global variables used in the executable binary. Therefore, only these two segments will capture the content of ELF file.</span>",
                    "time": null
                }
            ]
        }
    ]
}