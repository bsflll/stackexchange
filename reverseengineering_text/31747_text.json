{
    "title": "How can I find out which system functions are used in applications using dynamic loading?",
    "link": "https://reverseengineering.stackexchange.com/questions/31747/how-can-i-find-out-which-system-functions-are-used-in-applications-using-dynamic",
    "content": "I'm trying to make an application that tries to hook a specific function. but I realized something while working, I can't hook functions of applications that use dynamic loading using the detours method, how can I overcome this problem? I searched for an exe that uses dynamic loading via pe-bear and the import directory seems to be empty, I guess that's why my hooking process is not working. Is there any way to expose the export directory in applications that use dynamic loading?\nThank you in advance for your help...\n<pre><code>//implant.exe the code I mentioned above, which I reviewed with pe-bear\n#include <windows.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"helpers.h\"\n#include<stdio.h>\n\n#pragma comment(linker, \"/entry:WinMain\")\n\n\ntypedef BOOL (WINAPI * CreateProcessA_t)(\n  LPCSTR                lpApplicationName,\n  LPSTR                 lpCommandLine,\n  LPSECURITY_ATTRIBUTES lpProcessAttributes,\n  LPSECURITY_ATTRIBUTES lpThreadAttributes,\n  BOOL                  bInheritHandles,\n  DWORD                 dwCreationFlags,\n  LPVOID                lpEnvironment,\n  LPCSTR                lpCurrentDirectory,\n  LPSTARTUPINFOA        lpStartupInfo,\n  LPPROCESS_INFORMATION lpProcessInformation\n);\n\ntypedef DWORD (WINAPI * WaitForSingleObject_t)(\n  HANDLE hHandle,\n  DWORD  dwMilliseconds\n);\n\ntypedef BOOL (WINAPI * CloseHandle_t)(\n  HANDLE hObject\n);\n\n//int main(void) {\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, \n    LPSTR lpCmdLine, int nCmdShow) {\n\n    STARTUPINFO si;\n    PROCESS_INFORMATION pi;\n\n    ZeroMemory( &si, sizeof(si) );\n    si.cb = sizeof(si);\n    ZeroMemory( &pi, sizeof(pi) );\n  \n    CreateProcessA_t pCreateProcessA = (CreateProcessA_t) hlpGetProcAddress(hlpGetModuleHandle(L\"KERNEL32.DLL\"), \"CreateProcessA\");\n    WaitForSingleObject_t pWaitForSingleObject = (WaitForSingleObject_t) hlpGetProcAddress(hlpGetModuleHandle(L\"KERNEL32.DLL\"), \"WaitForSingleObject\");\n    CloseHandle_t pCloseHandle = (CloseHandle_t) hlpGetProcAddress(hlpGetModuleHandle(L\"KERNEL32.DLL\"), \"CloseHandle\");\n\n    if (!pCreateProcessA( NULL,   // No module name\n                    \"c:\\\\Windows\\\\System32\\\notepad.exe\",\n                    NULL,           // Process handle not inheritable\n                    NULL,           // Thread handle not inheritable\n                    FALSE,          // Set handle inheritance to FALSE\n                    0,              // No creation flags\n                    NULL,           // Use parent's environment block\n                    NULL,           // Use parent's starting directory \n                    &si,            // Pointer to STARTUPINFO structure\n                    &pi )           // Pointer to PROCESS_INFORMATION structure\n            ) {\n        //printf( \"CreateProcess failed (%d).\n\", GetLastError() );\n        return -1;\n    }\n\n    pWaitForSingleObject( pi.hProcess, INFINITE );\n    \n    // Close process and thread handles. \n    pCloseHandle( pi.hProcess );\n    pCloseHandle( pi.hThread );\n\n    return 0;\n}\n</code></pre>\n",
    "votes": "3",
    "answers": 0,
    "views": "132",
    "tags": [
        "windows",
        "function-hooking",
        "exe"
    ],
    "user": "DertliSelo",
    "time": "Apr 18, 2023 at 3:04",
    "comments": [
        {
            "user": "Robert",
            "text": "Have you checked for Frida performs hooking? In Frida you simply use the <pre><code>Module.findExportByName(..)</code></pre> function to get an address of an exported function and the you ca hook it.\n",
            "time": null
        },
        {
            "user": "DertliSelo",
            "text": "@Robert I tried this but without success, I will add the code above. I am able to catch the CreateProcessA, WaitForSingleObject, CloseHandle functions, but not the GetProcAddress and GetModuleHandle functions. I guess this is because both functions are imported from helpers.h.\n",
            "time": null
        }
    ],
    "answers_data": []
}