{
    "title": "Wrap-around MCU memory map definition with negative addresses",
    "link": "https://reverseengineering.stackexchange.com/questions/27089/wrap-around-mcu-memory-map-definition-with-negative-addresses",
    "content": "I figured it'd be more appropriate to ask this question here:\nhttps://github.com/NationalSecurityAgency/ghidra/issues/2530#issuecomment-785007613\nGiven this linear address space a particular MCU:\n\nIt's not easily definable as-is on the memory manager, see:\n<pre><code>memory = currentProgram.getMemory()\nfb = memory.getAllFileBytes()   \nblk = memory.getBlock(toAddr(0x0))\nmemory.removeBlock(blk, monitor)\n\nmemory.createUninitializedBlock(\"internal_ram\",toAddr(0x3ff8000),0x2fff,False)\nmemory.createUninitializedBlock(\"peripherals\", toAddr(0x3ffefff),0xfff, False)\nmemory.createInitializedBlock(\"rom\", toAddr(0x0), fb[0], 0, 0x1000000, False)\ndisassemble(toAddr(0x0))\n</code></pre>\nYields:\n<pre><code>Traceback (most recent call last):\n  File \"python\", line 1, in <module>\n    at ghidra.program.database.mem.MemoryMapDB.checkBlock(MemoryMapDB.java:1043)\n    at ghidra.program.database.mem.MemoryMapDB.removeBlock(MemoryMapDB.java:1850)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.base/java.lang.reflect.Method.invoke(Method.java:566)\njava.lang.IllegalArgumentException: java.lang.IllegalArgumentException: Blocks do not belong to this program\nghidra.program.database.mem.MemoryBlockDB@6f03ae13\nghidra.program.database.mem.MemoryBlockDB@38d5ac1c\nghidra.program.database.mem.MemoryBlockDB@6ad8b9ac\n</code></pre>\nWhat would be the correct sequence of arguments/flags/(instruction ordering?) to have a correct representation of a loaded V850 16MB firmware (size 0x1000000) on Ghidra? What am I doing wrong?\nHere's the MCU PDF address space section for reference\n",
    "votes": "0",
    "answers": 1,
    "views": "261",
    "tags": [
        "ghidra"
    ],
    "user": "brainstorm",
    "time": "Feb 24, 2021 at 12:09",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "If it's really Ghidra-specific it might be better handled over there. If you think it's a generic RE problem, please state it as such and provide the actual question instead of a link which may be wrong or dead in several years.\n",
            "time": null
        },
        {
            "user": "brainstorm",
            "text": "Oh, sorry about that, I thought that the <pre><code>ghidra</code></pre> tag was meant for specific Ghidra questions as I was directed here a while ago in  stackoverflow.com/questions/65314484/â€¦\n",
            "time": null
        },
        {
            "user": "Igor Skochinsky",
            "text": "sure we can (try to) answer RE questions in the context of Ghidra. But this is not an official support site for it.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Note to self, when running <pre><code>memory.removeBlock(blk, monitor)</code></pre> make sure that the memory map is not empty from previous wipes/redefinitions (iterations of the script).\nIn other words, opening a file creates a default memory map, but the script wasn't contemplating the case where the address map was empty to begin with.\n",
            "votes": "1",
            "user": "brainstorm",
            "time": "Feb 24, 2021 at 22:38",
            "is_accepted": true,
            "comments": []
        }
    ]
}