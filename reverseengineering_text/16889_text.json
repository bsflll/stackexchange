{
    "title": "Is it possible to use an xref on memory address in IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/16889/is-it-possible-to-use-an-xref-on-memory-address-in-ida-pro",
    "content": "Say, if I have the following disassembly:\n\nHow do I find out where else is that byte at <pre><code>[eax+0xFCA]</code></pre> is referenced? I can't seem to use the IDA's <pre><code>xref</code></pre> command on it, but doing <pre><code>xref</code></pre> on <pre><code>fs:18h</code></pre> gives me too many results.\nPS. I'm using IDA Pro as a disassembler, while stepping through <pre><code>kernel32.dll</code></pre> with <pre><code>WinDbg</code></pre> as a debugger in a user mode. In the screenshot above the <pre><code>EIP</code></pre> (breakpoint) is currently at the <pre><code>744E78D6</code></pre> opcode of interest.\n",
    "votes": "1",
    "answers": 1,
    "views": "548",
    "tags": [
        "ida",
        "windows",
        "windbg"
    ],
    "user": "c00000fd",
    "time": "Dec 2, 2017 at 8:17",
    "comments": [],
    "answers_data": [
        {
            "content": "IDA's xref functionality only works for static references. The references it detects by statically analyzing the code. It cannot find any dynamic or runtime references to addresses using the xref functionality.\nInstead, you'd need to use the memory breakpoint feature IDA's debugging interface has (or any other debugger, for that matter) to breakpoint any time a memory address is accessed. Be advised memory breakpoints has several caveats such as incurring a noticeable performance penalty and being detectable by anti-debugging techniques. Hardware breakpoints may also be used for the same purpose but are harder to detect by anti-debugging techniques.\n",
            "votes": "3",
            "user": "NirIzr",
            "time": "Dec 2, 2017 at 8:34",
            "is_accepted": false,
            "comments": []
        }
    ]
}