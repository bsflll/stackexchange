{
    "title": "split function argument from IDA's hints",
    "link": "https://reverseengineering.stackexchange.com/questions/32074/split-function-argument-from-idas-hints",
    "content": "Suppose I have a function, I know that the first 4 arguments come with fixed registers.\n<pre><code>_BYTE *__fastcall foo(__int64 a1, _QWORD *a2, unsigned int a3, char a4, _QWORD *a5)\n</code></pre>\nFor the fifth one, if I move my mouse on that argument, it displays a hint\n<pre><code>_QWORD *a5 // [rsp+120h] [rbp+28h] ISARG BYREF\n\nBYREF: address of this variable is taken somewhere in the current function (e.g. for passing to a function call);\nISARG: shown for function arguments (in mouse hint popups);\n</code></pre>\nAccording to documentation.The fist part of the comment is the variable location. However, rsp[0xffff940a1f436b48]+120h and rbp[0xffff940a1f436bf9]+28h are 2 different values. Does that mean the argument is stored in 2 locations? If it's stored separately, how do I know how many bytes are stored in those 2 locations?\nI just tried several times. It works fine now.\n<pre><code>1.\nrsp = 0xffff86817543df49\nrbp = 0xffff86817543de98\n\n2.\nrsp = 0xffff868175428b48\nrbp = 0xffff868175428bf9\n\n3.\nrsp = 0xffff868175692e18\nrbp = 0xffff868175692ee0\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "116",
    "tags": [
        "ida",
        "functions"
    ],
    "user": "anonymous bear",
    "time": "Jul 22, 2023 at 3:37",
    "comments": [
        {
            "user": "blabb",
            "text": "B49 is unaligned are you sure you dont have a typo.  Rsp + x can be equal to rbp +y\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "read b49 as bf9  this  rbp[0xffff940a1f436bf9] stack address will be aligned on qword boundaries\n",
            "time": null
        },
        {
            "user": "Rolf Rolles",
            "text": "Your question is not clear. Where are the numbers <pre><code>0xffff940a1f436b48</code></pre> and <pre><code>0xffff940a1f436bf9</code></pre> coming from? A live debugging session? If so, those values are going to depend on where within the function the instruction pointer is at the time you computed those values (e.g. both of them will differ before and after the function prolog).\n",
            "time": null
        },
        {
            "user": "anonymous bear",
            "text": "@blabb I just directly pasted from the dbg. If I want to view the fifth argument, which one should I use? Why IDA displays 2 hints here?\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "Your edit shows the values as inconsistent only one set seems to aligned and other two seems to be unaligned  i wont try to interpret them further as rolf rolles has provided a comprehensive but complicated answer\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You've stumbled into a complicated question. I'll try to answer it in detail, but for starters, the fact that there are two locations shown for a single stack variable does not mean that it is at two different locations. It means that Hex-Rays is using two different ways of referring to the same location on the the stack. Both shown offsets must be interpreted with care, can be highly misleading, and can also be outright wrong. I will explain all of those points below.\nFor the sake of discovering local variables on the stack and performing analyses that determine what memory may be overwritten by a given memory write, Hex-Rays needs a consistent way to refer to offsets on the stack. This is complicated because <pre><code>rsp</code></pre> can change throughout the function, and because not all functions use frame pointers like <pre><code>rbp</code></pre>. Thus, it has to do something else to keep track of stack offsets. So, Hex-Rays computes the lowest stack value at any point within the function, uses that as the \"bottom of the stack\", and performs all stack-based analysis relative to that point.\nWhen Hex-Rays prints local variables and displays strings off to the right like <pre><code>[rsp+30h]</code></pre>, that refers to Hex-Rays' internal computation of where the bottom of the stack is. Since <pre><code>rsp</code></pre> can change throughout a function, the location <pre><code>rsp+0x30</code></pre> might mean different things at different points in the function. On x64/Windows binaries that conform to the x64 ABI, <pre><code>rsp</code></pre> will have a consistent value after the function prolog and before the epilog, so the numbers should be reasonably safe to use after the prolog and before the epilog (though I've noticed that they are sometimes off by 8). Since the prolog and the epilog change <pre><code>rsp</code></pre>, those numbers won't be meaningful during the prolog or epilog. In particular, on the first line of the function before the prolog has executed, the <pre><code>rsp</code></pre> number is especially meaningless. On x86 binaries, <pre><code>esp</code></pre> changes often throughout a function, and so those numbers will be generally unreliable as a way to locate stack variables on <pre><code>x86</code></pre>.\nMeanwhile, when Hex-Rays prints a string like <pre><code>[rbp-38h]</code></pre>, the <pre><code>38h</code></pre> refers to offset within IDA's stack frame for the function. I.e., if you were to look at the top of the function, you might see something like:\n<pre><code>.text:000000006202C6F0     var_40= qword ptr -40h\n.text:000000006202C6F0     a1  = xmmword ptr -38h ; <--- HERE\n.text:000000006202C6F0     var_28= qword ptr -28h\n.text:000000006202C6F0     var_18= byte ptr -18h\n</code></pre>\nAlthough the offsets line up with what's in the stack view, Hex-Rays always prints <pre><code>rbp</code></pre>, whereas x64 functions can use other non-volatile registers as frame pointers. Therefore, you won't always be able to find the value at <pre><code>rbp-Offset</code></pre>, either; you would need to substitute whatever register is being used for the frame pointer (such as <pre><code>r11</code></pre>) in place of <pre><code>rbp</code></pre>. And note that, like <pre><code>rsp</code></pre>, <pre><code>rbp</code></pre> will also change values within the function (e.g. being set in the prolog and restored in the epilog), so even if a function is using <pre><code>rbp</code></pre> as a frame pointer, the <pre><code>rbp-N</code></pre> offsets will only make sense after the prolog and before the epilog.\nIf you'd like more technical details about this, you should take a look at <pre><code>hexrays.hpp</code></pre> in the IDA SDK. Specifically, there is a diagram showing what Hex-Rays thinks about the stack, and how the <pre><code>rsp</code></pre>-relative numbers are related to the <pre><code>rbp</code></pre>-relative numbers. You want to search that <pre><code>.hpp</code></pre> file for <pre><code>tmpstk_size</code></pre>. It's also available online. As of the time of writing, it begins on line 4596. I've reproduced it here:\n<pre><code>/*\n                     +-----------+ <- inargtop\n                     |   prmN    |\n                     |   ...     | <- minargref\n                     |   prm0    |\n                     +-----------+ <- inargoff\n                     |shadow_args|\n                     +-----------+\n                     |  retaddr  |\n     frsize+frregs   +-----------+ <- initial esp  |\n                     |  frregs   |                 |\n           +frsize   +-----------+ <- typical ebp  |\n                     |           |  |              |\n                     |           |  | fpd          |\n                     |           |  |              |\n                     |  frsize   | <- current ebp  |\n                     |           |                 |\n                     |           |                 |\n                     |           |                 | stacksize\n                     |           |                 |\n                     |           |                 |\n                     |           | <- minstkref    |\n stkvar base off 0   +---..      |                 |    | current\n                     |           |                 |    | stack\n                     |           |                 |    | pointer\n                     |           |                 |    | range\n                     |tmpstk_size|                 |    | (what getspd() returns)\n                     |           |                 |    |\n                     |           |                 |    |\n                     +-----------+ <- minimal sp   |    | offset 0 for the decompiler (vd)\n \n  There is a detail that may add confusion when working with stack variables.\n  The decompiler does not use the same stack offsets as IDA.\n  The picture above should explain the difference:\n  - IDA stkoffs are displayed on the left, decompiler stkoffs - on the right\n  - Decompiler stkoffs are always >= 0\n  - IDA stkoff==0 corresponds to stkoff==tmpstk_size in the decompiler\n  - See stkoff_vd2ida and stkoff_ida2vd below to convert IDA stkoffs to vd stkoff\n \n*/\n</code></pre>\nTL;DR the reason Hex-Rays shows you two different representations for where a variable is on the stack is because Hex-Rays itself, and IDA, use two different ways of representing the stack frame. The <pre><code>rbp-N</code></pre> numbers refer to the offsets you see in IDA's stack view, and the <pre><code>rsp+N</code></pre> numbers refer to displacements from what Hex-Rays thinks is the bottom of the stack.\nEspecially considering that <pre><code>rsp</code></pre> and <pre><code>rbp</code></pre> can change throughout a function, the addresses it shows won't be meaningful at every point within the function. Particularly, none of the numbers make sense before the prolog has finished executing, or after the epilog has begun executing. The <pre><code>esp</code></pre> numbers are particularly unreliable on 32-bit <pre><code>x86</code></pre>, and Hex-Rays will show frame-relative offsets using the <pre><code>rbp</code></pre> register even if the function uses a different register like <pre><code>r11</code></pre> for a frame pointer.\nSimple, right? ;-)\n",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Jul 22, 2023 at 18:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}