{
    "title": "How to identify code ran when clicking on an object in a game",
    "link": "https://reverseengineering.stackexchange.com/questions/10749/how-to-identify-code-ran-when-clicking-on-an-object-in-a-game",
    "content": "I've played with using software like cheat engine to modify memory, null out code and even inject some code of my own. However finding the right spot to modify is always a difficulty. I'd like to be able to identify the code that is run when I click my mouse on an object (eventually to simulate the entire process). Is there a tool or method for doing this that anyone could suggest?\nI've used ollydb and cheat engine a fair bit in the past.\n",
    "votes": "3",
    "answers": 2,
    "views": "1k",
    "tags": [
        "memory",
        "machine-code",
        "automation"
    ],
    "user": "FraserOfSmeg",
    "time": "Aug 30, 2015 at 0:26",
    "comments": [
        {
            "user": "0xec",
            "text": "This depends on the framework used to build the game. As an example, unity3d games are .net based, so .net tools(decompilers/debuggers/tracers/etc)  should be used. Using Olly or Cheat Engine is possible but difficult.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "See Highlight Executed Basic Blocks in IDA\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "On windows you can\nfind <pre><code>winproc</code></pre> function, search click messages within it and add breakpoint/trace from there...\n\nOn different OS\ntrace mouse handlers ...\n\nIf OpenGL is used\nThe Object selection is often done by it directly during rendering. You can trace calls to those functions used.\n\nIf any framework is used\nlearn what function for mouse it has and trace its calls ...\n",
            "votes": "5",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "An effective method in these cases (although not necessarily straightforward) is to use differential debugging.\nThe core principle is to run the application twice and record traces of the functions being executed, or even basic blocks if you need to get so granular. \nThe idea boils down to:\n\nThe first time you record a trace try to exercise as much functionality as possible, except what you are interested in (in your case, do not press that button!). \nThe second time you go directly for what you are interested in, press that button!\nNow you can filter the noise out of the second trace by looking for hits that appear exclusively in the second (and not in the first)\n\nThis is not a perfect method but it works pretty well to narrow the search in several scenarios.\nShameless plug:\nHere a link to my blog where I discuss a similar (in nature) problem. There is even some old code to get you started.\n",
            "votes": "2",
            "user": "Carlos Garcia",
            "time": "Aug 9, 2016 at 21:37",
            "is_accepted": false,
            "comments": []
        }
    ]
}