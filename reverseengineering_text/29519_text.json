{
    "title": "What is \"nullsub_XXX\" in vtable in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/29519/what-is-nullsub-xxx-in-vtable-in-ida",
    "content": "When I looking in a vtable structure in IDA pro, I know that <pre><code>___cxa_pure_virtual</code></pre> means that the function is virtual.\nBut what does <pre><code>nullsub_XXX</code></pre> mean in a vtable structure?\n",
    "votes": "3",
    "answers": 1,
    "views": "671",
    "tags": [
        "ida",
        "c++",
        "static-analysis",
        "vtables"
    ],
    "user": "vtable",
    "time": "Nov 9, 2021 at 10:06",
    "comments": [],
    "answers_data": [
        {
            "content": "Welcome to the Reverse engineering stack exchange Q&A site! Although you only asked about <pre><code>nullsub_</code></pre>, you described <pre><code>___cxa_pure_virtual</code></pre> slightly incorrectly so I'll describe it as well\nnullsub_X\nIDA makes a minimal effort of providing meaningful, yet general, names for functions according to their implementation by adding a prefix or name for certain types of functions.\nOne such case is <pre><code>nullsub</code></pre>, which is a name automatically given (during the analysis phase) to all empty functions. Meaning functions that simply return without doing anything.\nAdditionally, since names are unique in IDA, when an in-use name is set to a function IDA will postfix it with an underscore and then an auto-incremented number (starting with 1).\nIf you're wondering why such functions should exist in the first place, this post answers that question quite diligently.\n___cxa_pure_virtual\nThis is a function implemented by <pre><code>libstdc++</code></pre> (and a similar function is implemented by other C++ standard libraries) as a place-holder to pure virtual functions in virtual function tables.\nAlthough pure virtual functions have no implementation the compiler cannot eliminate the risk of pure virtual functions being called at run-time, and so a stub such as <pre><code>___cxa_pure_virtual</code></pre> is used as a place-holder for all pure virtual functions, so that if it ever happens that a pure virtual function would be called at runtime, there an explicit handling (termination of the program with a somewhat meaningful crash, often).\n",
            "votes": "6",
            "user": "NirIzr",
            "time": "Nov 11, 2021 at 12:59",
            "is_accepted": true,
            "comments": []
        }
    ]
}