{
    "title": "Why do I get different addresses for the printf function when I disassemble with otool?",
    "link": "https://reverseengineering.stackexchange.com/questions/15213/why-do-i-get-different-addresses-for-the-printf-function-when-i-disassemble-with",
    "content": "I'm using <pre><code>otool</code></pre> on macOS to disassemble some simple C programs I built in order to gain a better understanding of assembly language.  I disassembled three programs, all of which consist of a single <pre><code>printf</code></pre> statement.  One prints the string <pre><code>\"Hello, World!\n\"</code></pre>, one prints a single integer formatted as a decimal, and the other prints two integers formatted as decimals.\nMy question regards the instruction <pre><code>call _printf</code></pre>.  The disassembly doesn't show <pre><code>_printf</code></pre>; it shows the address of the <pre><code>_printf</code></pre> symbol.  I get a different address each time.  At first I thought this was because <pre><code>gcc</code></pre> converts any <pre><code>printf</code></pre> that doesn't use additional parameters to <pre><code>puts</code></pre>, but when I disassembled the third program I got still another address for printf.  The code looks like this:\nFirst program:\n<pre><code>0000000100000f76        callq   0x100000f82\n</code></pre>\nSecond program:\n<pre><code>0000000100000f7e        callq   0x100000f8a\n</code></pre>\nThird program:\n<pre><code>0000000100000f7a        callq   0x100000f86\n</code></pre>\nI would like to gain a better understanding of how the glibc symbols are laid out in the executable.  I am of course using the Mach-O format, but I have a feeling this variation in addresses is more universal.  Also, given that the address is more or less random, how can one tell from the disassembly what function is being called?\n",
    "votes": "0",
    "answers": 2,
    "views": "761",
    "tags": [
        "disassembly",
        "functions",
        "mach-o"
    ],
    "user": "Legend of Overfiend",
    "time": "Apr 24, 2017 at 14:50",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "how do you disassemble it? can you paste a bigger snippet around the call?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "the addresses are different because the binaries are not identical and differ in their layout. \nas for finding out which functions are being called:\neasy solution: use <pre><code>-V</code></pre> to have <pre><code>otool</code></pre> print hints about the symbols being called. \nhard solution: disassemble target addresses and figure out how the dynamic calls work in OS X and how <pre><code>dyld</code></pre> resolves symbols. it may be useful to use a debugger here and consult source code of <pre><code>dyld</code></pre> and <pre><code>ld</code></pre>(available at Apple 's open source website)\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Apr 26, 2017 at 15:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "This appears to be a relative call. In a relative call in 32-bit assembly, the operand is added to the address of the next instruction (instruction right after the call). Keep in mind the the operand would be signed in this case. \nUnfortunately, I don't know 64-bit assembly, but it seems to be similar.\nIf you look at the addresses for program one and program two, you can see that the difference is 8. This is the same with their operands, so it isn't random.\nHear is a link describing calls in more detail.\nI couldn't find as good of an example for 64-bit.\nTry searching around for relative calls if that doesn't clear it up.\n",
            "votes": "0",
            "user": "xXx_KittyKitty_xXx",
            "time": "Apr 26, 2017 at 1:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">I don't think that's the problem here. <code>otool</code> prints already resolved target addresses.</span>",
                    "time": null
                }
            ]
        }
    ]
}