{
    "title": "How can i get the address of a function in memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/30906/how-can-i-get-the-address-of-a-function-in-memory",
    "content": "I am currently completing a CTF exercise where i must attempt to overwrite a function pointer on the stack through a buffer overflow here is the code:\n<pre><code>#include <err.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\nchar *gets(char *);\n\nvoid complete_level() {\n  printf(\"Congratulations, you've finished :-) Well done!\n\");\n  exit(0);\n}\n\nint main(int argc, char **argv) {\n  struct {\n    char buffer[64];\n    volatile int (*fp)();\n  } locals;\n\n  locals.fp = NULL;\n  gets(locals.buffer);\n\n  if (locals.fp) {\n    printf(\"calling function pointer @ %p\n\", locals.fp);\n    fflush(stdout);\n    locals.fp();\n  } else {\n    printf(\"function pointer remains unmodified :~( better luck next time!\n\");\n  }\n\n  exit(0);\n}\n</code></pre>\nThe code will get input using the vulnerable <pre><code>gets()</code></pre> function and store it inside the buffer called <pre><code>buffer</code></pre>.\nSince <pre><code>buffer</code></pre> is the largest variable in the struct it will allow me to overwrite variables below it on the stack. The next variable is the function pointer called <pre><code>fp</code></pre>.\nIn order to overwrite <pre><code>fp</code></pre> i will need to find the address of the <pre><code>complete_level</code></pre> function in memory. Then write \"A\" 64 times, then write the functions address.\nThe problem i have is that i cannot find the address of the function.\nSo far i have tried <pre><code>objdump</code></pre> however that gives me a offset and not the full address:\n<pre><code>objdump -M intel -d 3 | grep complete_level\n    1184:   80 3d 8d 2e 00 00 00    cmp    BYTE PTR [rip+0x2e8d],0x0        # 4018 <completed.0>\n    11ac:   c6 05 65 2e 00 00 01    mov    BYTE PTR [rip+0x2e65],0x1        # 4018 <completed.0>\n00000000000011c9 <complete_level>:\n</code></pre>\nHere is an output of the executable under the <pre><code>file</code></pre> command:\n<pre><code>3: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV),\ndynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,\nBuildID[sha1]=11a5f76e0d40b7f4fdc53d4dd60faac9f9e405be, for GNU/Linux 3.2.0, not stripped\n</code></pre>\nWhy is it not showing the full address? Also how can i get the full address of the function <pre><code>complete_level</code></pre>?\n",
    "votes": "1",
    "answers": 0,
    "views": "2k",
    "tags": [
        "c",
        "elf",
        "stack",
        "objdump"
    ],
    "user": "professional pro",
    "time": "Sep 21, 2022 at 17:59",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "The full address will be when the program is loaded into the memory. You have PIE executable here\n",
            "time": null
        }
    ],
    "answers_data": []
}