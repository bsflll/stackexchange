{
    "title": "Detecting tracing in Linux",
    "link": "https://reverseengineering.stackexchange.com/questions/1930/detecting-tracing-in-linux",
    "content": "Under Linux it's possible to trace exactly the kernel system calls with <pre><code>strace</code></pre>.\n<pre><code>ltrace</code></pre> can be used also to trace library calls.\nI wonder if it's possible to detect if my executable is running under <pre><code>strace</code></pre> or <pre><code>ltrace</code></pre> ?\nHere's an example of the output of <pre><code>strace</code></pre> and <pre><code>ltrace</code></pre> for the <pre><code>diff</code></pre> executable.\nstrace \n<pre><code>$ strace diff\nexecve(\"/usr/bin/diff\", [\"diff\"], [/* 43 vars */]) = 0\nbrk(0)                                  = 0x110a000\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc13f6000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=122500, ...}) = 0\nmmap(NULL, 122500, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcbc13d8000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/x86_64-linux-gnu/librt.so.1\", O_RDONLY|O_CLOEXEC) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\340!\\0\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0644, st_size=31784, ...}) = 0\nmmap(NULL, 2129016, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbc0fce000\nmprotect(0x7fcbc0fd5000, 2093056, PROT_NONE) = 0\nmmap(0x7fcbc11d4000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x6000) = 0x7fcbc11d4000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\200\\30\\2\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=1811160, ...}) = 0\nmmap(NULL, 3925240, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbc0c0f000\nmprotect(0x7fcbc0dc4000, 2093056, PROT_NONE) = 0\nmmap(0x7fcbc0fc3000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1b4000) = 0x7fcbc0fc3000\nmmap(0x7fcbc0fc9000, 17656, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcbc0fc9000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/x86_64-linux-gnu/libpthread.so.0\", O_RDONLY|O_CLOEXEC) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\200l\\0\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=135398, ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc13d7000\nmmap(NULL, 2212936, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcbc09f2000\nmprotect(0x7fcbc0a0a000, 2093056, PROT_NONE) = 0\nmmap(0x7fcbc0c09000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x17000) = 0x7fcbc0c09000\nmmap(0x7fcbc0c0b000, 13384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcbc0c0b000\nclose(3)                                = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc09f1000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc09f0000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc09ef000\narch_prctl(ARCH_SET_FS, 0x7fcbc09f0700) = 0\nmprotect(0x7fcbc0fc3000, 16384, PROT_READ) = 0\nmprotect(0x7fcbc0c09000, 4096, PROT_READ) = 0\nmprotect(0x7fcbc11d4000, 4096, PROT_READ) = 0\nmprotect(0x61b000, 4096, PROT_READ)     = 0\nmprotect(0x7fcbc13f8000, 4096, PROT_READ) = 0\nmunmap(0x7fcbc13d8000, 122500)          = 0\nset_tid_address(0x7fcbc09f09d0)         = 32425\nset_robust_list(0x7fcbc09f09e0, 0x18)   = 0\nfutex(0x7fff27e5992c, FUTEX_WAIT_BITSET_PRIVATE|FUTEX_CLOCK_REALTIME, 1, NULL, 7fcbc09f0700) = -1 EAGAIN (Resource temporarily unavailable)\nrt_sigaction(SIGRTMIN, {0x7fcbc09f8750, [], SA_RESTORER|SA_SIGINFO, 0x7fcbc0a01cb0}, NULL, 8) = 0\nrt_sigaction(SIGRT_1, {0x7fcbc09f87e0, [], SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7fcbc0a01cb0}, NULL, 8) = 0\nrt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0\ngetrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM_INFINITY}) = 0\nbrk(0)                                  = 0x110a000\nbrk(0x112b000)                          = 0x112b000\nopen(\"/usr/lib/locale/locale-archive\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=7216624, ...}) = 0\nmmap(NULL, 7216624, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcbc030d000\nclose(3)                                = 0\nsigaltstack({ss_sp=0x61c5e0, ss_flags=0, ss_size=8192}, NULL) = 0\nopen(\"/usr/share/locale/locale.alias\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=2570, ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcbc13f5000\nread(3, \"# Locale name alias data base.\n#\"..., 4096) = 2570\nread(3, \"\", 4096)                       = 0\nclose(3)                                = 0\nmunmap(0x7fcbc13f5000, 4096)            = 0\nopen(\"/usr/share/locale/en_US/LC_MESSAGES/diffutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale/en/LC_MESSAGES/diffutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale-langpack/en_US/LC_MESSAGES/diffutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale-langpack/en/LC_MESSAGES/diffutils.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nrt_sigaction(SIGSEGV, {0x40b3c0, [], SA_RESTORER|SA_STACK|SA_NODEFER|SA_RESETHAND|SA_SIGINFO, 0x7fcbc0c454a0}, NULL, 8) = 0\nwrite(2, \"diff: \", 6diff: )                   = 6\nwrite(2, \"missing operand after `diff'\", 28missing operand after `diff') = 28\nwrite(2, \"\n\", 1\n)                       = 1\nwrite(2, \"diff: \", 6diff: )                   = 6\nwrite(2, \"Try `diff --help' for more infor\"..., 39Try `diff --help' for more information.) = 39\nwrite(2, \"\n\", 1\n)                       = 1\nexit_group(2)                           = ?\n</code></pre>\nltrace \n<pre><code>$ ltrace diff\n__libc_start_main(0x402310, 1, 0x7fff876fcf28, 0x4151d0, 0x415260 <unfinished ...>\nstrrchr(\"diff\", '/')                                             = NULL\nsetlocale(6, \"\")                                                 = \"en_US.UTF-8\"\nbindtextdomain(\"diffutils\", \"/usr/share/locale\")                 = \"/usr/share/locale\"\ntextdomain(\"diffutils\")                                          = \"diffutils\"\nsigaltstack(0x7fff876fccd0, 0, 1, 0x736c6974756666, 3)           = 0\ndcgettext(0, 0x4183d7, 5, -1, 3)                                 = 0x4183d7\ndcgettext(0, 0x4183e5, 5, 0, 1)                                  = 0x4183e5\nsigemptyset(0x7fff876fccf8)                                      = 0\nsigaction(11, 0x7fff876fccf0, NULL)                              = 0\nre_set_syntax(264966, 0x7fff876fcb88, 0, -1, 0)                  = 0\nmalloc(16)                                                       = 0x016e1160\nmemset(0x016e1160, '\\000', 16)                                   = 0x016e1160\ngetopt_long(1, 0x7fff876fcf28, \"0123456789abBcC:dD:eEfF:hHiI:lL:\"..., 0x00417360, NULL) = -1\nmalloc(1)                                                        = 0x016e1180\ndcgettext(0, 0x415598, 5, 8, 3)                                  = 0x415598\nerror(0, 0, 0x415598, 0x7fff876fd469, 1diff: missing operand after `diff'\n)                         = 0\ndcgettext(0, 0x415878, 5, 0, 0x7fad1793c700)                     = 0x415878\nerror(2, 0, 0x415878, 0x7fff876fd469, 1diff: Try `diff --help' for more information.\n <unfinished ...>\n+++ exited (status 2) +++\n</code></pre>\n",
    "votes": "22",
    "answers": 3,
    "views": "19k",
    "tags": [
        "linux",
        "anti-debugging"
    ],
    "user": "Mellowcandle",
    "time": "Apr 25, 2013 at 8:07",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>ptrace</code></pre> can be detected by the fact that a process can only call <pre><code>ptrace</code></pre> once.\nif <pre><code>ptrace()</code></pre> was already called by the <pre><code>strace</code></pre> executable or a debugger, we can detect it in runtime.\n<pre><code>#include <stdio.h>\n#include <sys/ptrace.h>\n\nint main()\n{\n    if (ptrace(PTRACE_TRACEME, 0, 1, 0) == -1) \n    {\n        printf(\"don't trace me !!\n\");\n        return 1;\n    }\n    // normal execution\n    return 0;\n}\n</code></pre>\nHowever, it's not hard to break this code. first, it's possible just to <pre><code>NOP</code></pre> the <pre><code>ptrace()</code></pre> call.\nSecond, it's possible to replace <pre><code>ptrace()</code></pre> call with our own <pre><code>ptrace()</code></pre> call using <pre><code>LD_PRELOAD</code></pre>\n",
            "votes": "28",
            "user": "0xC0000022L",
            "time": "Oct 23, 2018 at 7:49",
            "is_accepted": true,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Another way to work around with <code>gdb</code> is to step over the <code>ptrace</code> call (<code>next</code>) and to set the <code>%eax</code> to zero afterward (<code>set $eax = 0</code>).</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Another way is to <code>jump</code> over the code or <code>set $pc</code> to skip it.</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">Of course, you could just check for LD_PRELOAD. Or make it setuid.</span>",
                    "time": null
                },
                {
                    "user": "dlitz",
                    "text": "<span class=\"comment-copy\">This will cause the process to be stopped if it invokes execve(2).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Apart from the ptrace trick, you can check /proc/PID/cmdline, raise a SIGTRAP, use getppid, ...\nYou may want to check pangu (disclamer: I'm the author).\n\nPangu a a little toolset to mess around with debugging-related tools\n  from the GNU project, and especially on GNU/Linux x86.\n",
            "votes": "13",
            "user": "jvoisin",
            "time": "Jun 20, 2013 at 16:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "xDragonZ",
                    "text": "<span class=\"comment-copy\">Did you manage to compile the <b>asm</b> for Android ndk?  I'm getting bad instructions error</span>",
                    "time": null
                },
                {
                    "user": "jvoisin",
                    "text": "<span class=\"comment-copy\">Compile it for x86 and not arm</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "It is possible the ways the other commenters suggested. However, all of them are interceptable, if you read a file, it can be intercepted and your program will be given different result, if you check if LD_PRELOAD is set, it can be unset before you can reach out to it, etc. Suid is another story, though, but there may be different ways of exploiting it too.\n",
            "votes": "5",
            "user": "merinoff",
            "time": "Oct 9, 2014 at 15:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}