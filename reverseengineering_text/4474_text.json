{
    "title": "Understanding unknown in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/4474/understanding-unknown-in-ida",
    "content": "What is this instruction trying to do?\n<pre><code> .text:4044A5EC LDR     R5, =(unk_40885080 - 0x4044A5F8)\n</code></pre>\nLooking at the value of unk_40885080 it holds a value of 20 in the .data segment.\n",
    "votes": "3",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "allbabel",
    "time": "May 28, 2014 at 18:58",
    "comments": [],
    "answers_data": [
        {
            "content": "This seems to be ARM PIC (Position-Independent) code, where the address is given relative to the program counter. Ida detects this and shows the \"real\" address. \nUnfortunately, you didn't post any code around the your single statement, so i'm using one of my own disassemblies to show you:\n<pre><code>.text:00062454                 LDR             R3, [R4,#8]\n.text:00062458                 MOV             R0, #0x2C ; ','\n.text:0006245C                 LDR             R1, =(unk_218172 - 0x62474)  <--- a\n.text:00062460                 MOV             R5, #0\n.text:00062464                 MOV             R2, #4  ; n\n.text:00062468                 STRB            R0, [R3,#0x12]\n.text:0006246C                 ADD             R1, PC, R1                   <--- b\n.text:00062470                 LDR             R3, [R4,#8]\n.text:00062474                 ADD             R0, R3, #0x30 ; dest\n.text:00062478                 STR             R1, [R3,#8]\n.text:0006247C                 STR             R1, [R3,#0x14]\n</code></pre>\nThe code loads some value into R1 (a), then (b) adds PC to it. So, the value of the register is supposed to be a pointer into memory, but beause PC gets added later, the value that is loaded at 2645C wouldn't make any sense. Ida detects the ADD instruction, and shows the LDR instruction in a way that lets you see where it's supposed to point to.\nThe fact that the \"correcting offset\" of 0x62474 is not the address of the <pre><code>ADD</code></pre> instruction is because of pipelining within the processor; at the moment the <pre><code>ADD</code></pre> gets executed, the next instructions have already been read, so PC is two instructions \"behind\" where the <pre><code>ADD</code></pre> instruction is located.\n(The reason why the compiler produces this kind of code is, when the same code gets loaded at a different address later it stays valid, even without the relocation patching the linker/loader would have to do otherwise. That's called PIC, or Position-independent code.)\n",
            "votes": "4",
            "user": "Guntram Blohm",
            "time": "May 28, 2014 at 19:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "allbabel",
                    "text": "<span class=\"comment-copy\">I think I follow, so what the psuedo code be for your example?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">You can't really make meaningful pseudo code from my example, because it's just a few instructions from a larger function. But if you really want pseudocode, then the combined instructions <code>LDR R1, =(unk_218172 - 0x62474)</code> and <code>ADD R1, PC, R1</code> could be written in C as <code>r1=&amp;unk_218172</code> - the result is a pointer that points to that memory location, but these instructions don't access the memory itself; a following instruction that has <code>[R1]</code> in its operand would access the memory through the pointer.</span>",
                    "time": null
                },
                {
                    "user": "gandolf",
                    "text": "<span class=\"comment-copy\">It isn't related to code, rather its an implementation of the compiler toolchain to support the concept of position independent code due to the architecture its running on. You could however do this with compiler flags like -pie (gcc) which should generate the necessary asm code.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">@gandolf: -fPIC, not -pie.</span>",
                    "time": null
                },
                {
                    "user": "gandolf",
                    "text": "<span class=\"comment-copy\">Thanks @GuntramBlohm I was writing from memory, which can't be trusted.</span>",
                    "time": null
                }
            ]
        }
    ]
}