{
    "title": "Ghidra define c++ string",
    "link": "https://reverseengineering.stackexchange.com/questions/20819/ghidra-define-c-string",
    "content": "So I want to define a c++ string in ghidra struct. I noticed while reverse engineering a C++ binary, I found that, it defines a <pre><code>basic_string</code></pre> class in the symbol tree. \nNow I want to define a <pre><code>std::string</code></pre> (not a pointer to it) within a struct. Is there a way to do it automatically right now, or will I still need to manually define a <pre><code>basic_string</code></pre> struct and go from there? Is there currently a way to associate classes and structs together like so (currently I think classes only act as namespaces?\nI also tried just simply adding a field with the type <pre><code>basic_string</code></pre> in my struct, but it complains that <pre><code>basic_string</code></pre> is just a placeholder struct.\nHaven't yet tested how ghidra would handle a <pre><code>std::string</code></pre> local variable.\nEDIT: example code for what I described above:\n<pre><code>#include <string>\n#include <iostream>\n\nstruct Human {\n  int age;\n  bool is_male;\n  std::string name;\n\npublic:\n  Human(int age, bool is_male, const std::string &name) : age(age), is_male(is_male), \n    name(name) { }\n\n  void say_hello() {\n    std::cout << \"Hello, I am a \" << (is_male ? \"male \" : \"female \") << age << \n      \"-year old named \" << name << \"!\" << std::endl;\n  }\n};\n\nint main() {\n  Human *human = new Human(17, true, \"Adam\");\n  human->say_hello();\n}\n</code></pre>\nWhen you putting this into ghidra, and then do auto-fill struct fields, it will recognize the <pre><code>age</code></pre> and <pre><code>is_male</code></pre> fields, but not the <pre><code>name</code></pre> field, as this is an opaque <pre><code>std::string</code></pre> object.\nUp to this point, when I was reversing another (much larger) binary, I simply  manually created a new struct:\n<pre><code>struct basic_string {\n  char *ptr;\n  size_t len;\n  char buff[0x10]\n};\n</code></pre>\nIs there something that ghidra can do this automatically? Also I'm wondering would there be any portability issues if I just always assume the above struct?\n",
    "votes": "9",
    "answers": 1,
    "views": "6k",
    "tags": [
        "ghidra"
    ],
    "user": "theKidOfArcrania",
    "time": "Mar 8, 2019 at 16:45",
    "comments": [
        {
            "user": "camp0",
            "text": "is not clear your problem, would you mind to paste an example code?\n",
            "time": null
        },
        {
            "user": "theKidOfArcrania",
            "text": "Added an example code\n",
            "time": null
        },
        {
            "user": "Scott",
            "text": "Unable to add a comment, but here is a link to the GitHub Issue\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "EDIT: I misread the question. The solution I provided only shows how structures can be manually added. There does not appear to be a way in Ghidra to import a struct by text blob.\n\nYes.\nTo add a structure in Ghidra, you have to go to the Data Type Manager - for me it's the third frame on the left-most vertical pane.\n",
            "votes": "2",
            "user": "SW_user2953243",
            "time": "Mar 9, 2019 at 16:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "theKidOfArcrania",
                    "text": "<span class=\"comment-copy\">Hmm yeah I guess that's what I figure... do you think ghidra would be implementing something like this in the future for c++ structs?</span>",
                    "time": null
                }
            ]
        }
    ]
}