{
    "title": "Install Ghidra plugin without GUI",
    "link": "https://reverseengineering.stackexchange.com/questions/29152/install-ghidra-plugin-without-gui",
    "content": "I have a plugin that I want to install for <pre><code>Ghidra</code></pre>.\nThe current way to install the plugin is to go to the <pre><code>file->Install Extension</code></pre> in the project window, and add my plugin there. However, in my scenario, I don't have an access to the GUI and I want to deploy <pre><code>Ghidra</code></pre> for Headless Analysis.\nFor some reason, just copying the plugin files to <pre><code><ghidra_home>\\Ghidra\\Extensions</code></pre> doesn't do the trick, and it looks like it only partially installs the plugin, and only the GUI way does the complete job.\nAny idea how can I programmatically install plugins for Ghidra?\n",
    "votes": "6",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ghidra",
        "plugin"
    ],
    "user": "macro_controller",
    "time": "Aug 17, 2021 at 15:11",
    "comments": [
        {
            "user": "Florian Magin",
            "text": "According to the official documentation unzipping the extension <pre><code>.zip</code></pre> into  the <pre><code><GhidraInstallDir>/Ghidra/Extensions</code></pre> folder should be enough. And it explicitly states that this is the way to go for full headless installs. What do you mean by \"only partially installs the plugin\"?\n",
            "time": null
        },
        {
            "user": "macro_controller",
            "text": "I'm installing the following plugin: github.com/astrelsky/Ghidra-Cpp-Class-Analyzer . Upon copying the files to the described folder, I am able to access classes from the extension - for example <pre><code>from cppclassanalyzer.utils import CppClassAnalyzerUtils</code></pre> successes, but it is not fully initalized because <pre><code>CppClassAnalyzerUtils.getManager(currentProgram)</code></pre> returns None. Only a full isntallation by the GUI makes it return the class..\n",
            "time": null
        },
        {
            "user": "Florian Magin",
            "text": "I have vague memories of running into some issue like that too with this specific plugin. Turns out I Actually have a local branch of the repo called <pre><code>plugin_not_activated</code></pre>, but the changes in that branch aren't quite clear how this would fix it.\n",
            "time": null
        },
        {
            "user": "Florian Magin",
            "text": "This is most likely some issue with this specific plugin, that branch I had was for this PR github.com/astrelsky/Ghidra-Cpp-Class-Analyzer/pull/41. IIRC <pre><code>CppClassAnalyzerUtils.getManager(currentProgram)</code></pre> returns the Service and this Service is only available for within the GUI (specifically in a tool IIRC). I think this would be worth opening on issue about\n",
            "time": null
        },
        {
            "user": "Florian Magin",
            "text": "Ah, that might have been why I didn't dig into this further, I'll quickly dive into the code of <pre><code>GhidraTool.java</code></pre> to see if there is some obvious way to do this headless\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "According to the official documentation unzipping the extension <pre><code>.zip</code></pre> into  the <pre><code><GhidraInstallDir>/Ghidra/Extensions</code></pre> folder should be enough.\nAs you specified in the comments the specific plugin this is about is Ghidra C++ Class and Run Time Type Information Analyzer\n and it only works after going through the initial <pre><code>\"New extension plugins detected. Would you like to configure them?\"</code></pre> dialog on starting the Ghidra GUI.\nThis dialog is part of the method <pre><code>ghidra.framework.project.tool.GhidraTool#checkForNewExtensions</code></pre> and the actual install process happens <pre><code>ghidra.framework.project.tool.GhidraTool#addInstalledExtensions</code></pre>.\nThe problem is that during the headless processing there is no tool available, i.e. <pre><code>state.tool</code></pre> is <pre><code>null</code></pre> and these methods don't seem to be intended to be run in a headless context. I don't quite understand what specifically makes it work afterwards, but overall I am reasonably confident that this is an issue with the specific plugin, and the fact that it requires the <pre><code>ServiceManager</code></pre> to provide the service even for the analyzers (which should be available in headless mode after unzipping).\nSo this is an issue with this specific plugin which is somewhat hinted at in an already existing issue\n",
            "votes": "4",
            "user": "Florian Magin",
            "time": "Aug 19, 2021 at 8:38",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Instead of modifying the install directory, you can put the extension into your home directory.\nYou should manually unzip the extension <pre><code>.zip</code></pre> to <pre><code>~/.ghidra/.ghidra_10.1.1_PUBLIC/Extensions/</code></pre>. (Replace the Ghidra version with whichever you're using.)\ne.g.\n<pre><code>cd ~/.ghidra/.ghidra_10.1.1_PUBLIC/Extensions/\nunzip ~/Downloads/ghidra_10.1.1_PUBLIC_20220127_BinExport.zip \n</code></pre>\n",
            "votes": "0",
            "user": "Manouchehri",
            "time": "Jan 27, 2022 at 20:50",
            "is_accepted": false,
            "comments": []
        }
    ]
}