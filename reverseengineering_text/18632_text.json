{
    "title": "Import symbols containing strange characters",
    "link": "https://reverseengineering.stackexchange.com/questions/18632/import-symbols-containing-strange-characters",
    "content": "I am analyzing a macOS app with radare2, and the app depends on a number of Qt frameworks. When I printed out the import symbols of the app's main executable, the names of the frameworks' functions have strange characters in them. \nFor example, if a framework exports a function name: <pre><code>QLocalServer::listen(QStringconst&)</code></pre>, it becomes <pre><code>_sym.imp._ZN12QLocalServer6listenERK7QString</code></pre> in the main executable's imports.\nAnother example: \n<pre><code>QNetworkProxyFactory::setUseSystemConfiguration(bool)</code></pre> becomes\n<pre><code>sym.imp._ZN20QNetworkProxyFactory25setUseSystemConfigurationEb</code></pre>\nCan anyone explain why there are those characters? I don't see those characters when analyzing the export functions of the frameworks.\n",
    "votes": "5",
    "answers": 1,
    "views": "769",
    "tags": [
        "radare2",
        "macos"
    ],
    "user": "Thanh Bui",
    "time": "Jun 29, 2018 at 4:57",
    "comments": [],
    "answers_data": [
        {
            "content": "These \"weird\" names are produced by the compiler and are called Name Mangling or Name Decoration. These names are shown by radare2 but are not produced or generated by it.\nTo quote from MSDN:\n\nFunctions, data, and objects in C and C++ programs are represented\n  internally by their decorated names. A decorated name is an encoded\n  string created by the compiler during compilation of an object, data,\n  or function definition. It records calling conventions, types,\n  function parameters and other information together with the name. This\n  name decoration, also known as name mangling, helps the linker find\n  the correct functions and objects when linking an executable.\n\nThe Wikipedia article about Name Mangling has some great examples of Name Mangling of C++ produced by GCC. I suggest you read it thoroughly to understand the subject better. It explains how mangled names are produced and describes the structure of it.\n\nradare2, just as many different Disassemblers, knows to demangle the different names. There are several configuration variables that handle Name Mangling:\n<pre><code>asm.demangle: Show demangled symbols in disasm\nbin.demangle: Import demangled symbols from RBin\nbin.demanglecmd: run xcrun swift-demangle and similar if available (SLOW)\nbin.lang: Language for bin.demangle\n</code></pre>\nSo if you want radare2 to show you the demangled names on the assembly, use <pre><code>e asm.demangle = true</code></pre>. Make sure to tell radare2 to load the demangled symbols. You can do this by setting <pre><code>e bin.demangle</code></pre> to true. You might need to load the binary again - use <pre><code>oo</code></pre> for this.\nIf you just want to demangle a specific name, you can use <pre><code>iD <lang> <name></code></pre> which will demangle a symbol name for a specific language. Just use it like this: <pre><code>iD cxx <mangled name></code></pre> for C++ Name Mangling.\n",
            "votes": "10",
            "user": "Megabeets",
            "time": "Jun 29, 2018 at 6:28",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">The strangest thing is that its entire purpose is exactly the opposite of what OP is (bluntly) assuming: it is because all those \"strange\" characters that appear in the <i>original</i> declarations ('<code>(</code>, <code>)</code>, <code>:</code>, <code>&amp;</code>, <code>~</code>) are not allowed in linker symbols.</span>",
                    "time": null
                },
                {
                    "user": "Thanh Bui",
                    "text": "<span class=\"comment-copy\">Thanks Megabeets for a very detailed answer! It worked. I just want to note that Demangling does <i>not</i> work on import symbols (i.e. results of <code>ii</code> command)</span>",
                    "time": null
                }
            ]
        }
    ]
}