{
    "title": "Locating entry point in specific firmware .bin file using IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/14094/locating-entry-point-in-specific-firmware-bin-file-using-ida-pro",
    "content": "I am trying to become familiar with IDA by reversing a .bin file that I have compiled myself. The code is written in cpp and the open source code can be found here: https://github.com/openxc/vi-firmware\nTaking a look at the Makefile and linker files (in vi-firmware/src and vi-firmware/src/platform/lpc17xx/), you can see the Flash and RAM locations are called out in the comments. The microcontroller uses an LPC17xx (http://vi.openxcplatform.com/electrical/design/microcontroller.html) with and ARM 7 architecture.\nTherefore, when I load IDA, I select Binary file and set the Processor to ARM and Processor Options to ARM 7. \nIn the next menu I configure the RAM and ROM according to the comments in vi-firmware/src/platform/lpc17xx/LPC17xx-bootloader.ld and then, after pressing OK, get  the dialogue box telling me to \"Please move to what you think is an entry point\".\nI move 64KB (0x10000) into Flash (ROM) and hit 'C' to try to auto-analyse. Only a few lines translate to assembly.\nIs there anything else I can do here? I've combed the datasheet for the uC but haven't been able to find anything of use.\n",
    "votes": "3",
    "answers": 1,
    "views": "11k",
    "tags": [
        "ida",
        "binary-format"
    ],
    "user": "Kal",
    "time": "Dec 2, 2016 at 21:07",
    "comments": [],
    "answers_data": [
        {
            "content": "(Disclaimer: I do not know ARM, this could be totally wrong)\nI loaded <pre><code>vi-default-firmware-FORDBOARD-ctv7.2.0.bin</code></pre> (downloaded from the releases page) into IDA with these settings:\n\nThen, after putting the cursor at <pre><code>0x10000</code></pre>, you have to press C, then scroll to the undefined bytes, then press C again. Scroll to the top of the function and press P to make it a function, and have a nice graph view with Space:\n\nI don't have any experience with ARM, but this seems like a proper function graph to me:\n",
            "votes": "2",
            "user": "Martin",
            "time": "Dec 3, 2016 at 1:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kal",
                    "text": "<span class=\"comment-copy\">Brilliant! Thanks so much. Why did you choose the ROM and Input File Loading size the way you did? And how did you get your graph to be so expansive? Do you move to every undefined byte and press <b>C</b>?</span>",
                    "time": null
                },
                {
                    "user": "Martin",
                    "text": "<span class=\"comment-copy\">@Kal because the <a href=\"https://github.com/openxc/vi-firmware/blob/master/src/platform/lpc17xx/LPC17xx-bootloader.ld\" rel=\"nofollow noreferrer\">file you pointed us at</a> said so. \"Flash\" memory apparently is <code>RX</code>, i.e. read and execute, so no write. <code>ROM</code> = read-only memory, so it makes sense that flash = ROM. As for the size: IDA <a href=\"http://i.imgur.com/W58bu8j.png\" rel=\"nofollow noreferrer\">barfs at you</a> when you specify a wrong (default?) size, so I just tried the same value as the RAM and it worked. As for the graph - I really only did what you see in the GIF. Define unknown bytes with <code>C</code>, make a function with <code>P</code>, press <code>Space</code>, done. e.g.: <code>0x132E0</code></span>",
                    "time": null
                }
            ]
        }
    ]
}