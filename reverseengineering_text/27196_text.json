{
    "title": "what does an integer modulus 32 cast to (byte *) points to?",
    "link": "https://reverseengineering.stackexchange.com/questions/27196/what-does-an-integer-modulus-32-cast-to-byte-points-to",
    "content": "As part of a CTF challenge I have to understand the inner workings of a cryptlock type malware, and use it to decrypt a file containing the flag.\nI used GHIDRA to decompile the binary.\nThe encryption function seems pretty basic, it is just the following line inside a while loop repeated until all bytes of the file have been xored : <pre><code>local_111c[local_1120] = local_111c[local_1120] ^ *(byte *)(param_2 + local_1120 % 0x20);</code></pre>\nWhere <pre><code>local_1120</code></pre> is the loop counter, <pre><code>local_111c</code></pre> is a buffer where the file to encrypt is read into, and <pre><code>param_2</code></pre> is an integer that seems to be always 0, the function is called like the following <pre><code>FUN_00401000((LPCSTR)0x0,0)</code></pre>, with both parameters set to 0;\nWhat does <pre><code>*(byte *)(param_2 + local_1120 % 0x20</code></pre> refer to? As far as I understand it, it would be the value at the address pointed to by an integer cast to a byte pointer, but the modulo makes it so the adress can't be above 32?\nI need to understand what could the value pointed to could have been in order to xor back the file to its original state.\n",
    "votes": "1",
    "answers": 2,
    "views": "208",
    "tags": [
        "decompilation",
        "ghidra",
        "pointer"
    ],
    "user": "Balocre",
    "time": "Mar 9, 2021 at 10:17",
    "comments": [
        {
            "user": "mumbel",
            "text": "Are you following order of operations?\n",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "Are you sure <pre><code>param_2</code></pre> is 0? Because this looks like a typical cyclic xor to me with a key that's expected to be 32 bytes (hence the <pre><code>index 0x20</code></pre>). In that case param_2 would be a pointer to the the xor key.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "based on what is provided\n<pre><code>local_1120 % 0x20</code></pre> can range between 0x0 to 0x1f only\n<pre><code>:\\>python printmod.py 0x0 0x20\n00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n:\\>python printmod.py 0x80480040 0x80480060\n00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n:\\>python printmod.py 0xffffffe0 0x100000000\n00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n:\\>python printmod.py 0xffffffffffffffe0 0x10000000000000000\n00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n:\\>type printmod.py\nimport sys\n\ndef printmod(start,stop,step=1):\n    for i in range(start,stop,step):\n        print((\"%02x\" % (i%0x20)),end=\" \")\n\ndef main():\n    if( len(sys.argv) != 3):\n        sys.exit(\"provide 2 hex numbers as arguments like foo.py 4b 8c\")\n    printmod(int(sys.argv[1],16),int(sys.argv[2],16))\n\nif(__name__==\"__main__\"):\n    main()\n:\\>\n</code></pre>\nso if param2 is not a valid memory address but NULL as you indicate\nit will result in an access violation since you are dereferencing the pointer\nwith *(byte *)\nyou have to find out or force param2 to be a valid memory block\n",
            "votes": "1",
            "user": "blabb",
            "time": "Mar 9, 2021 at 16:46",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Let's see.\n<pre><code>*(byte *)(param_2 + local_1120 % 0x20)\n</code></pre>\nInside we take <pre><code>local_1120</code></pre> and mod it with 32, as you note.  Then we add an offset from <pre><code>param_2</code></pre>, and cast that new address to a pointer to a byte.  Finally, we dereference the pointer to obtain a byte at that address.\nTo my eye, we are using a 32-byte decryption key that we use over and over (thus the modular arithmetic).  We have to get a real address; we cannot dereference NULL without a problem, so <pre><code>param_2</code></pre> must be the address of the decryption key when you enter the loop.\n",
            "votes": "0",
            "user": "Stacy J",
            "time": "Mar 9, 2021 at 16:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}