{
    "title": "Find a instruction in a binary file (PE) based on a virtual address of a string reference",
    "link": "https://reverseengineering.stackexchange.com/questions/22236/find-a-instruction-in-a-binary-file-pe-based-on-a-virtual-address-of-a-string",
    "content": "English is not my first language, so I'm sorry if my text isn't so clear. \nI'm trying to program an automatic patcher for a PE binary that should work for multiple versions of this executable. For that to work, I need to find the bytes of the instruction which references a specific static string. I need to find the bytes in file for the LEA instruction highlighted in red below:\n\nI can't simply do a pattern search for \"48 8D 15 C8 50 DA 00\", because the last four bytes of the opcode change between executable versions, as the string address varies.\nFinding the string offset in the file is pretty easy with an hex editor, and translating that offset into a virtual address is also very straightforward and I got that working already (converting from file offset to VA is yielding the 0x140FDE580 correctly).\nThe problem is actually going from this virtual address into the binary opcode of the LEA address operand (C8 50 DA 00). Since this address is relative to the current instruction position, is there any more optimized way of searching for this instruction other than iterate between each instruction, calculate the distance between EIP and the string VA and see if the current instruction address this VA offset?\nThanks in advance!\n",
    "votes": "2",
    "answers": 2,
    "views": "692",
    "tags": [
        "disassembly",
        "windows",
        "executable",
        "x64dbg",
        "patching"
    ],
    "user": "Fergo",
    "time": "Oct 3, 2019 at 17:01",
    "comments": [
        {
            "user": "Anonymous Anonymous",
            "text": "What about doing a sig-scan on the 4-5 opcodes before and then adding an offset?\n",
            "time": null
        },
        {
            "user": "Fergo",
            "text": "Tried that, but that yielded more than 2 thousand possible references. I had to make a 20 byte signature for it to narrow down to the instruction I'm interested in, but that also made it incompatible with different versions of the executable.  I ended up scanning the whole executable for 48 8D 15 and checking if string offset - EIP matched the instruction operand\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Searching for RVA as bytes works for x86 code since RVA is encoded directly in the instruction. However, as you noticed, it does not work on x64 where you instead have a <pre><code>RIP</code></pre>-relative offset which obviously changes depending on the address of the instruction. \nI don't see any tricks you could use here but I think that unless your binary is multi-gigabyte, a simple brute-force of the <pre><code>.text</code></pre> section at every byte boundary should be fast enough. If it's still too slow in practice, post your code with explanation to Stack Overflow or Code Golf so other programmers can suggest you ideas on speeding it up.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Oct 3, 2019 at 19:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Biswapriyo",
                    "text": "<span class=\"comment-copy\">IDApython may help. But OP didn't mention it.</span>",
                    "time": null
                },
                {
                    "user": "Fergo",
                    "text": "<span class=\"comment-copy\">Ended up with this approach. It indeed takes less than 300ms to find the right instruction. Instead of searching for every byte, I started by pattern scanning for \"48 8D 15\" on <code>.text</code> , which narrows down to only ~15.000 checks on a 20MB executable.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Sure, just mask the dynamic bytes and increase the size of your pattern.   \n48 8D 15 C8 50 DA 00 [Original]\nC8 8D 15 ? ? ? ? ... [New]  \nObviously your pattern will have to be longer to remain unique, but it will stay consistent over most updates unless a compiler setting was changed for the most part. Simply have your pattern ignore dynamic offsets. Well, that's your pattern issue anyway.\nIn terms of your RIP Relative issue, it's pretty simple.\nTarget = (RIP + InstrLen + InstrImm). \nTarget is simply the next instruction (RIP + InstrLen) with offset being (NextInstr - ImmSize). All you need to know is instruction length and immediate size to follow the branch. Lots of libraries like DiStorm have macros to follow the current instruction as well, if you wanted to use one.\n",
            "votes": "1",
            "user": "Pickle Rick",
            "time": "Oct 11, 2019 at 3:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}