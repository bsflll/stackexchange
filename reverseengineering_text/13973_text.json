{
    "title": "Dynamic Analysis Detection",
    "link": "https://reverseengineering.stackexchange.com/questions/13973/dynamic-analysis-detection",
    "content": "Suppose you want to conceal an application's true purpose from analysts by reacting to dynamic analysis tools. How is it possible to detect running (in debugger mode) the application under a reverse engineering tool (e.g., IDA Pro) by the application itself? What code do you propose to use while preparing the application?\n",
    "votes": "0",
    "answers": 1,
    "views": "859",
    "tags": [
        "ida",
        "ida-plugin",
        "dynamic-analysis"
    ],
    "user": "Newbie",
    "time": "Nov 18, 2016 at 9:16",
    "comments": [],
    "answers_data": [
        {
            "content": "the easy answer:\nprobably a Sleep(random()*60000 + 10000) is more than enough to thwat most dynamic analysis systems. Or if((int)(random()*10) == 8) and so on\ncheck for debuggers:\nThe 'standard' way is to use IsDebuggerPresent. But analysis systems are aware of that and try to patch these calls. So there are similar approaches checking the field in the EPROCESS structure directly. I've also seen malware checking the result of OutputDebugString.\ncheck for analysis systems\nSome malware families employ checks for certain process names implying the system may be used for analysis, like the pcap driver or the names of debugger-processes. Also, the availability of certain libraries may prevent the program from exhibiting its real behavior.\ncheck for virtual environment\nThere are already lots of papers about this. Most dynamic analysis of potentially malicious programs happens in virtual environments. There are different approaches you can take here:\n\nTiming traps - virtualization is slower than bare metal machines\nUndefined behavior - often virtualization tools respond differently in error situations (e.g. invalid opcodes)\nSuspicious strings - e.g. 'VirtualBox Harddrive', ...\n\nAlso, there are some very advanced approaches, like checking the behavior of the TLB.\n",
            "votes": "1",
            "user": "Nordwald",
            "time": "Nov 18, 2016 at 9:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Martin",
                    "text": "<span class=\"comment-copy\">Could you clarify what TLB is?</span>",
                    "time": null
                },
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">@Nordwald I actually did find the IsDebuggerPresent() routine in the assembly working with the DLL on IDA Pro. Regarding the random() in your answer, you meant rand()?</span>",
                    "time": null
                },
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">@Martin This may be of help <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms680581(v=vs.85).aspx\" rel=\"nofollow noreferrer\">msdn.microsoft.com/en-us/library/windows/desktop/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">I found a few useful links. They had overlaps so I'll copy the major one here. <a href=\"https://www.symantec.com/connect/articles/windows-anti-debug-reference\" rel=\"nofollow noreferrer\">symantec.com/connect/articles/windows-anti-debug-reference</a></span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">@Martin TLB stands vor translation lookaside buffer and is an internal structure used by the CPU for caching physical addresses for virtual addresses</span>",
                    "time": null
                }
            ]
        }
    ]
}