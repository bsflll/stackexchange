{
    "title": "Is decompilation easier or generally more accurate for smaller ISAs?",
    "link": "https://reverseengineering.stackexchange.com/questions/25863/is-decompilation-easier-or-generally-more-accurate-for-smaller-isas",
    "content": "I am wondering if decompilation would be easier for an ISA with fewer instructions. For example, RISC-V vs x86.\n",
    "votes": "-1",
    "answers": 1,
    "views": "154",
    "tags": [
        "decompilation"
    ],
    "user": "JBraha",
    "time": "Sep 13, 2020 at 0:22",
    "comments": [],
    "answers_data": [
        {
            "content": "That depends entirely on your approach, if you do it all manually there are fewer instructions to remember, if there is a decompiler that does/tries it automatically it's obviously easier to implement with less instructions but once you want to go beyond purely translating the asm to c code that somehow works and want to make it readable a complex instruction set which would have asm instructions that match the c/c++ instructions are easier to translate and more readable.\nIf you look at the MOVfuscator, which is a compiler that (almost) only uses MOV-Instructions, then you will notice how unreadable and hard to decompile that actually is, and that's the fewest instructions you'll get.\nWhen you look at how often those special instructions in x86 are actually used you'll notice that it's not as often as you'd might think, so just because you have a huge instruction set that doesn't mean all instructions are used or it wouldn't run on a reduced instruction set aswell.\n",
            "votes": "2",
            "user": "Richi",
            "time": "Sep 13, 2020 at 21:18",
            "is_accepted": true,
            "comments": []
        }
    ]
}