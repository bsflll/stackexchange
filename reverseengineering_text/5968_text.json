{
    "title": "Command Injection in Windows ShellExecuteA()?",
    "link": "https://reverseengineering.stackexchange.com/questions/5968/command-injection-in-windows-shellexecutea",
    "content": "Imagine that we have the following pseudo-code in a Windows application:\n<pre><code>ShellExecuteA(0, \"open\", &File, &Parameters, &Directory, 1); \n</code></pre>\nAnd, imagine that you can gain control over the <pre><code>Parameters</code></pre> argument. Does that mean it is exploitable ? \nI know that <pre><code>ShellExecute()</code></pre> is vulnerable to command injection. But, in this case, is it also vulnerable in the same manner ?\n",
    "votes": "1",
    "answers": 2,
    "views": "3k",
    "tags": [
        "windows",
        "c",
        "winapi"
    ],
    "user": "osmund sadler",
    "time": "Jul 29, 2014 at 10:28",
    "comments": [],
    "answers_data": [
        {
            "content": "It depends on the <pre><code>lpFile</code></pre> argument. If <pre><code>lpFile</code></pre> is a command-line interpreter (such as <pre><code>cmd.exe</code></pre> or <pre><code>powershell.exe</code></pre>) or a program that can accept code as a command line argument (such as <pre><code>perl.exe</code></pre> or <pre><code>ruby.exe</code></pre>), then yes, you could supply arbitrary commands for a command injection attack.\nHowever, if the <pre><code>lpFile</code></pre> program doesn't execute command line arguments (for example, <pre><code>notepad.exe</code></pre>, <pre><code>pbrush.exe</code></pre>, etc.), then there is no command injection vulnerability. Note that even in these cases though, if the <pre><code>lpFile</code></pre> program tries to open the file path supplied in the command line, this could still be seen as a security issue.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Jul 29, 2014 at 14:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">There is obviously a potential issue regarding the length of the parameter field, but even data files can be vectors for exploitation - malformed graphics, too long configuration strings, ...</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Right, assuming this is a server application, even if you can't upload a malformed data file to a predictable file path, you may be able to feed the application a URI or a UNC path to a malformed data file.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "As Jason already mentioned, everything depends on file. But I want to say something more.\nYou said:\n\nAnd, imagine that you can gain control over the Parameters argument.\n  Does that mean it is exploitable ?\n\nIn the same manner control of other <pre><code>ShellExecute</code></pre> parameters might be gain... You probably understand why I said might, not can.\nYou didn't included info in question, but I think you meant that control of <pre><code>parameters</code></pre> is gained editing executable. If so there is such thing.\nImagine file is <pre><code>cmd.exe</code></pre> and you can control parameters, but in app parameter is <pre><code>C:\\file.txt</code></pre> it has 11 characters, so you could change it into some other up-to 11 characters parameter (if it is smaller then 11, you need to add <pre><code>NULL</code></pre>s).\nHowever in real situations <pre><code>ShellExecute</code></pre> parameters are partially hard-coded and are build dynamically during program flow. So answering to your question, <pre><code>ShellExecute</code></pre> is vulnerable to command injection, however, not every app that uses <pre><code>ShellExecute</code></pre> could be taken as a target and actual injecting could be not so easy task.\n",
            "votes": "0",
            "user": "ST3",
            "time": "Aug 7, 2014 at 9:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}