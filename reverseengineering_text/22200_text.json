{
    "title": "I'm trying to understand the SEH mechanism",
    "link": "https://reverseengineering.stackexchange.com/questions/22200/im-trying-to-understand-the-seh-mechanism",
    "content": "I'm trying to understand the mechanism of SEH (Structured Exception Handling). I understood how it was recorded and saved in FS: [0] on the previous three instructions. But why add interrupt 1 (step by step): I can not understand what the report is.\n<pre><code>push handler\npush FS:[0]\nmov  FS:[0], esp\nint  1\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "485",
    "tags": [
        "windows",
        "x86",
        "assembly",
        "pe32"
    ],
    "user": "jukebox",
    "time": "Sep 27, 2019 at 18:18",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "Where is this code from?\n",
            "time": null
        },
        {
            "user": "jukebox",
            "text": "@IgorSkochinsky It comes from a challenge crackme,  which contains a handler from SEH, which solves the challenge\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>int 1</code></pre> is not a part of the SEH setup, that's done by the third instruction. However, <pre><code>int</code></pre> is intercepted by Windows and is translated into an exception which is then dispatched to the handler that has been set up by the previous instructions. So basically here it serves as a sort of \"invoke handler\" macro. \nIn practice, any privileged instruction (e.g. <pre><code>hlt</code></pre> or <pre><code>out</code></pre>) could have been used as well, but the \"nice\" thing about <pre><code>int 1</code></pre> is that it produces a single step exception which is used by the debugging API to report single-step events to the debugger during normal debugging. If the debugger does not track its own actions properly, it may consider this exception as one originating from the debugging activity (single-stepping through the code), handle it as a normal single step and do not pass the exception to the debuggee. This means the handler code won't be executed and the debugger or tracer could be detected by the code.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 27, 2019 at 22:29",
            "is_accepted": true,
            "comments": []
        }
    ]
}