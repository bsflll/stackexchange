{
    "title": "Reversing encryption by analysing executable",
    "link": "https://reverseengineering.stackexchange.com/questions/9168/reversing-encryption-by-analysing-executable",
    "content": "I have a program that reads data from a file, parses/organizes it, and spits it out as an encrypted XML. The application can also take an encrypted XML and spit out the original file. My objective at this point would be to access the clear-text XML (I'm not interested in the clear text original file as it's not XML organized)\nI have no idea what the encryption is yet although one guy on a forum said it was AES-128 (not sure how he got to that conclusion).\nI ran PEiD with the KANAL plugin on the application, it doesn't detect any encryption signatures.\nBecause I have access to the program and some past some experience with exploiting BO on WinXP with some knowledge of ASM, I figured I could give it a try using a debugger.\nIn a nutshell, what are the general steps I should be following to figure this out? In this situation would it be best to start looking for the encryption key itself, or find a way to use the application's encrypt/decrypt functions to my advantage?\n",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "encryption"
    ],
    "user": "Juicy",
    "time": "Jun 17, 2015 at 22:03",
    "comments": [
        {
            "user": "Abr001am",
            "text": "we need to know more informations , that may help to trace AES process\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There are typically many ways to start, and which one you want to use depends on your experience. Also, what works for one target might fail on another, and vice versa. What i'd start with is:\n\nUse signsrch to check if the executable has a standard encryption algorithm linked in. Note that this might yield false positives (if the application links openssl, for example, you might find signatures of many algorithms even if only one or two of them get used)\nCheck for strings in the file that relate to encryption, and google for them. Maybe this helps to find which encryption library was used. For example, the string <pre><code>SHA-%d test #%d:</code></pre> quickly leads to the <pre><code>polarssl</code></pre> source code.\nTrace the application while running procmon. You will probably find a sequence of <pre><code>CreateFile</code></pre>, multiple <pre><code>WriteFile</code></pre> and a <pre><code>CloseFile</code></pre> call, when writing the encrypted file, and the same with <pre><code>ReadFile</code></pre> when reading the encrypted file. In some cases, the parameters of these calls give you a hint already; for example, if the first <pre><code>WriteFile</code></pre> has a byte count of 32, and every following call 4096, this could be a hint that the first 32 bytes are a 256-bit key.\nCheck the stack when a call to <pre><code>ReadFile</code></pre> or <pre><code>WriteFile</code></pre> happens, You can do this by placing a breakpoint there while running the application under a debugger, or (much easier imho) look at the stack for several of the <pre><code>procmon</code></pre> calls. This gives you a hint of which chain of functions encrypts the file and writes it.\nPay attention to the stack differences in the <pre><code>CreateFile</code></pre>, <pre><code>WriteFile</code></pre> on the encrypted file, and possibly <pre><code>WriteFile</code></pre> on something else. These might as well give you hint which is your encryption function. For example:\n\nThe <pre><code>CreateFile</code></pre> for the encrypted file has the stack <pre><code>ABCDEFGH</code></pre>\nThe <pre><code>WriteFile</code></pre> for the encrypted file has the stack <pre><code>ABCIJKLM</code></pre>\nThe <pre><code>WriteFile</code></pre> for something else has the stack <pre><code>ABNOPKLM</code></pre>\n\nwhere each letter is one stack entry. In this case, i'd assume <pre><code>KLM</code></pre> to be part of the runtime library (<pre><code>fwrite</code></pre>, <pre><code>write</code></pre>, ....), since unrelated <pre><code>WriteFile</code></pre>s share it, <pre><code>C</code></pre> to be the main writer function (as it's the last to call <pre><code>CreateFile</code></pre> and <pre><code>WriteFile</code></pre>), and <pre><code>I</code></pre> and <pre><code>J</code></pre> the functions that encrypt and write.\nLoad the file into IDA, or OllyDbg, and have a closer look at <pre><code>C</code></pre>, <pre><code>I</code></pre> and <pre><code>J</code></pre>. Which other functions do they call? Are some of these functions the same ones you identified with signsrch earlier?\nRun the file under the control of IDA, or OllyDbg, and place breakpoints on <pre><code>C</code></pre>, <pre><code>I</code></pre>, <pre><code>J</code></pre>, and maybe some of the functions you found with signsrch. Check the parameters on entry and exit from these functions. Do some of them ring a bell? Does one of the functions has a parameter that is a pointer to a buffer which looks like XML before the function is called, and garbage after it's called? Or vice versa when reading? Congrats, you've just found the function that does the encryption.\nWhen you found the function that does the encryption, instead of figuring out how it works, it might just be easier to replace the call to it with a series of <pre><code>NOP</code></pre>s (beware of return codes though, maybe you need to set <pre><code>eax</code></pre> to something). Bingo, you have a program that writes plain XML instead of encrypted XML now, without ever figuring out the details of the encryption and having to write one single line of code (unless you consider a series of <pre><code>NOP</code></pre>s code, that is).\n",
            "votes": "7",
            "user": "Guntram Blohm",
            "time": "Jun 18, 2015 at 7:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Abr001am",
                    "text": "<span class=\"comment-copy\">you forget to tell how to remove junk that obfuscates encryption stages</span>",
                    "time": null
                }
            ]
        }
    ]
}