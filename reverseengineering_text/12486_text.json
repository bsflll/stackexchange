{
    "title": "Offset Calculation for a Branch Instruction Thumb [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12486/offset-calculation-for-a-branch-instruction-thumb",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI did find this link: Offset calculation for branch instruction in ARM\nWhich was quite helpful but also confusing for me. I tried few ways to get it working with my offsets but failed.\nWhat I wanted to do, was create a BL instruction from 0x52F4D6 to 0x5BF368.\nAt 0x52F4D6 I wanted to write BL sub_5BF368 but how do I get the correct hex code (thumb) for it?\n",
    "votes": "1",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "arm"
    ],
    "user": "Anthony",
    "time": "9 years ago",
    "comments": [
        {
            "user": "Hilogic",
            "text": "Example of manipulating ARM conditional branch instruction to patch an Android Shared LIB Android lib patching\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can get this from the ARM manual; for example from the version linked at the link you found, https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf.\nFirst, a quick calculation <pre><code>5BF358-52F4D6</code></pre> yields <pre><code>8FE82</code></pre>, so you see you have more than 12 bits, and need to use the long branch format in 5.19, which splits your <pre><code>BL</code></pre> into two instructions. The section says \"The branch offset must take account of the prefetch operation, which causes the PC to be 1 word (4 bytes) ahead of the current instruction\", so the offset you need is from 4 bytes behind <pre><code>52F4D6</code></pre> - <pre><code>52F4DA</code></pre>, which means the offset for the instructions - the value you want to add to <pre><code>PC</code></pre> is <pre><code>8FE7E</code></pre>.\nThe first part of the instruction shifts its partial offset left by 12 bits, and adds this to PC. The instruction format is <pre><code>1111HXXXXXXXXXXX</code></pre> in binary, with <pre><code>H=0</code></pre>, so <pre><code>F000+XXXX</code></pre> in hex. What you want to add to PC in this step is <pre><code>8F000</code></pre>, so the opcode for this instruction is <pre><code>F0 8F</code></pre>.\nThe second part shifts its partial offset left by one bit (remember thumb instructions are aligned to 16 bit, so the last bit of an offset is always 0, so it doesn't have to be represented in the hex opcode), and it has <pre><code>H=1</code></pre>, so the opcode is <pre><code>F800+XXXX</code></pre>. What you want to add in this step is <pre><code>E7E</code></pre>. Shift that right by one bit to get <pre><code>73f</code></pre>, and add to your opcode to get <pre><code>FF 3F</code></pre>.\nSo, your BL instruction is <pre><code>F08F FF3F</code></pre>.\nTo confirm this, create an assembly program, assemble it, and check the result:\n<pre><code>.thumb\n.arch armv7a\n.syntax unified\n.align 2\n.org    0x52F4D6\nbl  sub_5BF368\n.org    0x5BF368\nsub_5BF368:\n</code></pre>\n\n<pre><code>arm-linux-gnueabi-as -o y.o y.s\narm-linux-gnueabi-objdump -s y.o | grep -v \"00000000 00000000 00000000 00000000\"\n.....\n 52f4d0 00000000 00008ff0 3fff0000 00000000  ........?.......\n....\n</code></pre>\nRemember words are byte-swapped due to little-endianness, and you'll find your <pre><code>F08F FF3F</code></pre> opcode there.\nEDIT: I just fixed the address of the second .org since it seemed miss-typed just to avoid confusion. Now it looks consistent I think :)\n",
            "votes": "3",
            "user": "VGe0rge",
            "time": "Jul 19, 2019 at 12:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Anthony",
                    "text": "<span class=\"comment-copy\">Awesome! Thank you!  I also wanted to ask if I can use BGT, BEQ, BNE, BLE, BGE, BLT inside the assembly program and then disassemble it?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Yes, this works for all instructions. Just remember that the offset part of the conditional branches is just 8 bit, so the target needs to be closer to the branch instruction than in the <code>bl</code> example above.</span>",
                    "time": null
                },
                {
                    "user": "Anthony",
                    "text": "<span class=\"comment-copy\">Sorry, I answered my own question. But another question, why can't I branch backwards a few offsets? Always get this error: attempt to move .org backwards</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">That because, well, you can't move .org backwards. For a back jump, you need to put the .org/sub declaration in front of the .org/branch.</span>",
                    "time": null
                },
                {
                    "user": "Anthony",
                    "text": "<span class=\"comment-copy\">Awesome! Would you happen to have the parts to add to the start of the program so we can get the x64 offset? :)</span>",
                    "time": null
                }
            ]
        }
    ]
}