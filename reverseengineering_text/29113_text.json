{
    "title": "TEST instruction and ZF flag",
    "link": "https://reverseengineering.stackexchange.com/questions/29113/test-instruction-and-zf-flag",
    "content": "In the part 07 of lena151 RE tutorial, we arrive to these instructions:\n<pre><code>AL = 0\nTEST AL,AL\nJNZ ...\n</code></pre>\n\nAnd notice:\n\nBecause of the JNZ, AL must be different from zero when arriving here to be registered.\n\nMy question is: Why the AL must be different from zero? If 2 value (0=0) are equal, the Z flag set to 1, because the result of comparison is true! Is this right?\n",
    "votes": "2",
    "answers": 3,
    "views": "2k",
    "tags": [
        "assembly",
        "register"
    ],
    "user": "Jason",
    "time": "Aug 11, 2021 at 10:31",
    "comments": [],
    "answers_data": [
        {
            "content": "Why the zero flag must be different from zero?\n\nIt is a little confusing, but the Zero Flag is set (i.e. its value is 1), if the last result IS zero:\n\nresult is <pre><code>0</code></pre> ⇒ ZF is not <pre><code>0</code></pre>\nresult is not <pre><code>0</code></pre> ⇒ ZF is <pre><code>0</code></pre>\n\nIn general, a flag is set to show that the appropriate condition is true, or the appropriate event arised. (We also say that the flag is on (<pre><code>1</code></pre>) or off (<pre><code>0</code></pre>)).\nBTW., this may be also a little counter-intuitive: <pre><code>JNZ</code></pre> (Jump if Not Zero) jumps if <pre><code>ZF</code></pre> is zero (because it means “not zero in the last result”, not “not zero in the Zero Flag”).\nIt's better to think only in terms of results, ignoring Zero Flag - flags are mainly technical tools for machines, not for us humans.\n\nif 2 value (0=0) equal , the Z flag set to 1, because the result of compare is true! Is this right?\n\nNot quite:\n\nIn the case of the <pre><code>CMP</code></pre> comparison, zero means “their difference is zero”, so they are the same, but\n\nin the case of the <pre><code>TEST AL,AL</code></pre>, zero means “<pre><code>AND AL,AL</code></pre> is zero”, i.e. <pre><code>AL</code></pre> itself is zero:\nThe instruction <pre><code>TEST AL,AL</code></pre> results in zero if and only if the value of AL itself is zero, too.\nThe explanation, why:\n\nif the value of <pre><code>AL</code></pre> is zero (all its bits are 0):\n<pre><code>     0 0 0 0 0 0 0 0   ← AL\nAND  0 0 0 0 0 0 0 0   ← AL\n--------------------\n     0 0 0 0 0 0 0 0   ← zero     (ZF is set to 1)\n</code></pre>\n\nthe value of <pre><code>AL</code></pre> is not zero (i.e. at least one of its bits is 1):\n<pre><code>     0 0 1 0 0 0 0 0   ← AL\nAND  0 0 1 0 0 0 0 0   ← AL\n--------------------\n   0 0 1 0 0 0 0 0     ← nonzero  (ZF is reset to 0)\n</code></pre>\nWhy (bit-wise) <pre><code>AND</code></pre>, and not <pre><code>TEST</code></pre>?\nBecause the <pre><code>TEST</code></pre> instruction does the same as the <pre><code>AND</code></pre> does — the only difference is that the result of the bit-wise <pre><code>AND</code></pre> operation is for the <pre><code>TEST</code></pre> instruction discarded, so only the Zero Flag (ZF) is set or reset.\n",
            "votes": "4",
            "user": "MarianD",
            "time": "Aug 11, 2021 at 0:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jason",
                    "text": "<span class=\"comment-copy\">Thank you very much. i edit my question. you help me alot. lena says the al must be different from 0. why? 0=0 is true and set the z flag! and jump . right? but in this case if AL is set to 1 again 1=1 and set the z flag and agin will jump. The Z flag will never be clean by any number. that's why i confused</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">@Jason, please don't change directly your question if it has already an answer, because it may the existing answer invalidate. It is better to append an <b>EDIT:</b> to it. So now I will answer your comment in the following one:</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">@Jason, if <code>AL</code> <b>is</b> zero, then <code>TEST AL,AL</code> is zero, too, and the next instruction <code>JNZ ...</code> will do nothing - and you <b>want</b> to jump over the bad boy, don't you? So the <b>zero</b> value in the <code>AL</code> is <b>not</b> what you want.</span>",
                    "time": null
                },
                {
                    "user": "Jason",
                    "text": "<span class=\"comment-copy\">Yes , i want to jump over the badboy. i know how do it. but i'm confusing in TEST AL,AL section. The value of AL=0 , TEST AL,AL will set the zero flag. and if AL=1 TEST AL,AL will clear the zero flag. and i confusing for this one!</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">@Jason, as I explained in my answer, it may be a little to counter-intuitive. My recipe is <b>not to concentrate on the <code>ZF</code> (it's only a flag)</b>, but only to the result. (OK, the <code>TEST</code> instruction only set or reset the Zero Flag, but we have no difficulty to pretend that it give the (discarded) result.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You seem to have the idea that ZF generally means that the operands were equal. This is wrong. It is not a property of the ZF that it shows whether the operands were equal. Instead, it is a property of <pre><code>CMP</code></pre> that it sets the zero flag if the operands are equal. This code snippet does not execute <pre><code>CMP</code></pre>.\nInstead, this code snippet executes <pre><code>TEST</code></pre>, which works differently. It says ZF exactly in those cases where no bit is set in both the first and the second operand. So if AL is nonzero, <pre><code>TEST AL,AL</code></pre> will find that some bits (all that are set in AL) are set in both the first and the second operand, and clear ZF. On the other hand, if AL is zero, no bit in AL is set, so there is no bit that is set in either the first or second operand, and ZF will be set.\nThe test for zero can be performed with the same effect using either <pre><code>TEST</code></pre>, <pre><code>AND</code></pre> or <pre><code>OR</code></pre>, where both operands are the same register. You will find all three variants in real-world code to test whether a register is zero.\n",
            "votes": "2",
            "user": "Michael Karcher",
            "time": "Aug 9, 2021 at 21:23",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Let's go into the important instructions in the reversed order.\n\n<pre><code>JNZ ...</code></pre>\nJump if Not Zero. You want to jump (over the \"bad boy\"), i.e. you want to obtain \"Not Zero\" in this (previous) instruction:\n\n<pre><code>TEST AL,AL</code></pre>\nTo obtain \"Not Zero\", the value in AL have to be \"Not Zero\", too.\nThe value of AL is set in this (previous) instruction:\n\n<pre><code>CALL ...</code></pre>\nThis instruction calls a function, and this function fills the EAX register with its return value (in concordance with the calling convention). The AL register is a part of EAX:\n\nSo you want from this function to return some \"Not Zero\", but it stubbornly returns 0 (meaning \"Not Registered\").\n\n\n\nYou have some natural possibilities to reach your desired behavior (jumping over the \"bad boy\"), but at first I remind the original order of instructions:\n<pre><code>CALL ...\nTEST AL,AL\nJNZ ...\n</code></pre>\n\nReplace the <pre><code>JNZ ...</code></pre> instruction with  <pre><code>JMP ...</code></pre>  or <pre><code>JZ ...</code></pre>.\nReplace the <pre><code>TEST AL,AL</code></pre> instruction with a such one which gives you a \"Not Zero\" result.\nReplace the <pre><code>CALL ...</code></pre> instruction with a such one which fills the AL register with a \"Not Zero\".\nDeep into the function in the <pre><code>CALL ...</code></pre> instruction and change it to return a \"Not Zero\" value.\n",
            "votes": "1",
            "user": "MarianD",
            "time": "Aug 10, 2021 at 1:14",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jason",
                    "text": "<span class=\"comment-copy\">Thank you very much. i'm lost in assembly code. JNZ mean : Jump if Not Zero Set (zf = 0) right? And it must have 0 value? am i right?</span>",
                    "time": null
                },
                {
                    "user": "Jason",
                    "text": "<span class=\"comment-copy\">JNZ is same JNE ? i saw that in CMP instruction like : (EAX = -1 )CMP EAX,-1 , JNE Short ... . So in this case we must see that the comparison is equal or not. right? or we should see result of EAX?</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">@Jason -  <i>\"JNZ mean : Jump if Not Zero Set (zf = 0) right?\"</i> - No. Forget about flags, they will confuse you. JNZ means: Jump if <b>the last result</b> was Not Zero.</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">@Jason - <i>\"JNZ is same JNE ?\"</i> - Yes, it is. One and the same machine instruction may have more than 1 mnemonics to help us, humans. - <i>\"CMP EAX,-1 , JNE Short ... . So in this case we must see that the comparison is equal or not. right? \"</i> - Yes, you're right. - <i>\"or we should see result of EAX?\"</i> - No. The CMP instruction internally makes the difference between the first and the second operand, set a flag (or more flags), and then discards the result. No operand is changed, so you will not see the result in EAX, because it keeps its original value.</span>",
                    "time": null
                },
                {
                    "user": "MarianD",
                    "text": "<span class=\"comment-copy\">@Jason - <i>\"I saw oldest post that someone said the JNZ mean, Jump if Not Zero Flag Set !\"</i> - it is <b>not</b> correct, of course... - All your other questions you answered yourself correctly. - May I recommend you <a href=\"https://sensepost.com/blogstatic/2014/01/SensePost_crash_course_in_x86_assembly-.pdf\" rel=\"nofollow noreferrer\">A Crash Course in x86 Assembly for Reverse Engineers</a>? (PDF, only 26 pages.)</span>",
                    "time": null
                }
            ]
        }
    ]
}