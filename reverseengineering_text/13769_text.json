{
    "title": "Why ida use redundant registers?",
    "link": "https://reverseengineering.stackexchange.com/questions/13769/why-ida-use-redundant-registers",
    "content": "I wrote a statement in visual studio.\n<pre><code>int sum(int a, int b){\n    return a + b;\n}  \nint main(){\n    tong(3,4);\n    return 0;\n}\n</code></pre>\nAnd aften i use ida pro Disassembly it. And my function tong has registers, such as: esi, edi, that i think them willn't be used, i think it use only registers: eax, ebp, esp. Why does ida use them? \n<pre><code>.text:004113C0 ; int __cdecl tong(int a, int b)\n.text:004113C0 ?tong@@YAHHH@Z  proc near               ; CODE XREF:     tong(int,int)j\n.text:004113C0\n.text:004113C0 var_C0          = byte ptr -0C0h\n.text:004113C0 a               = dword ptr  8\n.text:004113C0 b               = dword ptr  0Ch\n.text:004113C0\n.text:004113C0                 push    ebp\n.text:004113C1                 mov     ebp, esp\n.text:004113C3                 sub     esp, 0C0h\n.text:004113C9                 push    ebx\n.text:004113CA                 push    esi\n.text:004113CB                 push    edi\n.text:004113CC                 lea     edi, [ebp+var_C0]\n.text:004113D2                 mov     ecx, 30h\n.text:004113D7                 mov     eax, 0CCCCCCCCh\n.text:004113DC                 rep stosd\n.text:004113DE                 mov     eax, [ebp+a]\n.text:004113E1                 add     eax, [ebp+b]\n.text:004113E4                 pop     edi\n.text:004113E5                 pop     esi\n.text:004113E6                 pop     ebx\n.text:004113E7                 mov     esp, ebp\n.text:004113E9                 pop     ebp\n.text:004113EA                 retn\n.text:004113EA ?tong@@YAHHH@Z  endp\n</code></pre>\nCan anyone explain their meaning?\nUPDATE 1\n<pre><code>.text:00411400 ; int __cdecl main()\n.text:00411400 _main           proc near               ; CODE XREF: j__mainj\n.text:00411400\n.text:00411400 var_C0          = byte ptr -0C0h\n.text:00411400\n.text:00411400                 push    ebp\n.text:00411401                 mov     ebp, esp\n.text:00411403                 sub     esp, 0C0h\n.text:00411409                 push    ebx\n.text:0041140A                 push    esi\n.text:0041140B                 push    edi\n.text:0041140C                 lea     edi, [ebp+var_C0]\n.text:00411412                 mov     ecx, 30h\n.text:00411417                 mov     eax, 0CCCCCCCCh\n.text:0041141C                 rep stosd\n.text:0041141E                 push    4               ; b\n.text:00411420                 push    3               ; a\n.text:00411422                 call    j_?tong@@YAHHH@Z ; tong(int,int)\n.text:00411427                 add     esp, 8\n.text:0041142A                 xor     eax, eax\n.text:0041142C                 pop     edi\n.text:0041142D                 pop     esi\n.text:0041142E                 pop     ebx\n.text:0041142F                 add     esp, 0C0h\n.text:00411435                 cmp     ebp, esp\n.text:00411437                 call    j___RTC_CheckEsp\n.text:0041143C                 mov     esp, ebp\n.text:0041143E                 pop     ebp\n.text:0041143F                 retn\n.text:0041143F _main           endp\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "403",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "QChí Nguyễn",
    "time": "Oct 20, 2016 at 13:32",
    "comments": [
        {
            "user": "w s",
            "text": "I don't see tong function definition in the C code. Should it be so ? Which optimization level did you set for compiler ?\n",
            "time": null
        },
        {
            "user": "QChí Nguyễn",
            "text": "I use default ida. And i run good code C ???\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "Your assembly code contains only one function named \"tong\". TThe definition of this function is missing in the C code (there is only call to it). It is hard to answer your question without the code you are asking about.\n",
            "time": null
        },
        {
            "user": "QChí Nguyễn",
            "text": "OK i updated it\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Seems like you renamed the <pre><code>tong</code></pre> function to <pre><code>sum</code></pre> in your C code, but not in assembly, which is from where some of the confusion comes.\nWhy does IDA use those registers? Well, because that's the assembly that the compiler produced from your C code. IDA just uses what's there. So the better question would be: \nWhy did the compiler produce code that uses <pre><code>ebx</code></pre>, <pre><code>esi</code></pre>, <pre><code>edi</code></pre>, <pre><code>ecx</code></pre>, ... when only <pre><code>eax</code></pre> would need to be used?\nActually, the only lines from your <pre><code>tong</code></pre> function that are really neccesary are \n<pre><code>.text:004113C0                 push    ebp\n.text:004113C1                 mov     ebp, esp\n.text:004113DE                 mov     eax, [ebp+a]\n.text:004113E1                 add     eax, [ebp+b]\n.text:004113E9                 pop     ebp\n.text:004113EA                 retn\n</code></pre>\n(and in theory you don't even need to use <pre><code>ebp</code></pre>; you could just use <pre><code>esp</code></pre> do index the stack, saving you another two lines).\nThe rest is due to compiler flags - optimization level and stack checking level. These lines seem to check if the stack gets smashed somewhere:\n<pre><code>.text:00411403                 sub     esp, 0C0h\n.text:0041140C                 lea     edi, [ebp+var_C0]\n.text:00411412                 mov     ecx, 30h\n.text:00411417                 mov     eax, 0CCCCCCCCh\n.text:0041141C                 rep stosd\n.....\ntext:00411437                 call    j___RTC_CheckEsp\n</code></pre>\nwhich allocates 192 (hex C0) bytes on the stack, fills them with <pre><code>CC</code></pre>, and later calls a function that supposedly checks if those <pre><code>CC</code></pre> bytes are still there. This smashes <pre><code>eax</code></pre>, <pre><code>ecx</code></pre> and <pre><code>edi</code></pre>. If you disable stack checking somewhere in the compiler options, this part will be omitted.\nAlso, the compiler probably has a convention that functions should never change <pre><code>ebx</code></pre>, <pre><code>esi</code></pre> and <pre><code>edi</code></pre>. Which is why it produces <pre><code>push</code></pre> operations at the start, and <pre><code>pop</code></pre> and the end, for these registers, of the function. If optimization was turned higher, it would probably note that <pre><code>esi</code></pre> and <pre><code>ebx</code></pre> are never used in the function, so it'd optimize those lines out.\nSo to sum it up: in addition to your C code, the compiler does some internal housekeeping, which produces code that accesses more registers than your code alone would need. Messing with compiler options changes the amount of housekeeping that's needed. And IDA just displays what's there, it doesn't have a say in what the assembly, produced by the compiler, contains or doesn't contain.\n",
            "votes": "1",
            "user": "Guntram Blohm",
            "time": "Oct 20, 2016 at 14:49",
            "is_accepted": true,
            "comments": []
        }
    ]
}