{
    "title": "Reproduce compilation (ASM) output for library detection - identifying compiler, version & options used",
    "link": "https://reverseengineering.stackexchange.com/questions/21510/reproduce-compilation-asm-output-for-library-detection-identifying-compiler",
    "content": "I want to reverse a stripped x86 sample that uses a static library.\nSo far I could identify the library itself and narrow the version of the library used.\nNow I want to use Ghidra's Function ID plugin to identify all the library functions within the sample.\nThe function signatures depend on the instructions of the function - so for them to match, the instructions need to match.\nThe instructions of a function depend heavily on the compiler, its version & options that were used.\nI have compiled the library myself using gcc and compared the assembly output - and they differ.  \nDo you have some suggestions on what to try / things to look out for / clues that might lead to the original compiler used?\nI have tried compiling the source with some of the compilers listed on godbolt.org, but none of them seem similar to the original disassembly.\nFor example, here is one of the functions from the original sample and from one of my gcc-compiled version:\nFunction within the original sample:\n\nFunction within my gcc-compiled version of the library:\n\nRelevant source code of the function:\n<pre><code>#define MBEDTLS_SSL_TRANSPORT_DATAGRAM          1   /*!< DTLS     */\n#define MBEDTLS_SSL_MINOR_VERSION_0             0   /*!< SSL v3.0 */\n#define MBEDTLS_SSL_MINOR_VERSION_1             1   /*!< TLS v1.0 */\n#define MBEDTLS_SSL_MINOR_VERSION_2             2   /*!< TLS v1.1 */\n#define MBEDTLS_SSL_MINOR_VERSION_3             3   /*!< TLS v1.2 */\n#define MBEDTLS_SSL_PROTO_DTLS\n\n\n\nstruct mbedtls_ssl_config\n{\n    unsigned int transport : 1;\n};\n\nstruct mbedtls_ssl_context {\n    int minor_ver;\n    const mbedtls_ssl_config *conf;\n};\n\nconst char *mbedtls_ssl_get_version( const mbedtls_ssl_context *ssl )\n{\n#if defined(MBEDTLS_SSL_PROTO_DTLS)\n    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )\n    {\n        switch( ssl->minor_ver )\n        {\n            case MBEDTLS_SSL_MINOR_VERSION_2:\n                return( \"DTLSv1.0\" );\n\n            case MBEDTLS_SSL_MINOR_VERSION_3:\n                return( \"DTLSv1.2\" );\n\n            default:\n                return( \"unknown (DTLS)\" );\n        }\n    }\n#endif\n\n    switch( ssl->minor_ver )\n    {\n        case MBEDTLS_SSL_MINOR_VERSION_0:\n            return( \"SSLv3.0\" );\n\n        case MBEDTLS_SSL_MINOR_VERSION_1:\n            return( \"TLSv1.0\" );\n\n        case MBEDTLS_SSL_MINOR_VERSION_2:\n            return( \"TLSv1.1\" );\n\n        case MBEDTLS_SSL_MINOR_VERSION_3:\n            return( \"TLSv1.2\" );\n\n        default:\n            return( \"unknown\" );\n    }\n}\n</code></pre>\nAny hints and ideas are greatly appreciated, thank you!\n",
    "votes": "1",
    "answers": 0,
    "views": "278",
    "tags": [
        "disassembly",
        "assembly",
        "binary-analysis",
        "x86",
        "malware"
    ],
    "user": "Ghidra",
    "time": "Jun 18, 2019 at 19:22",
    "comments": [
        {
            "user": "julian",
            "text": "This type of problem is closely related to compiler toolchain provenance, which is an area of active research. You should read some of the relevant papers published about this topic.\n",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "I'm not aware of any tricks to solve this problem unfortunately. In practice I sometimes compile a dummy binary using all the functions I expect my target to use and then open both and look for similarities. There are just too many parameters you'd have to figure out to get matching binaries. IDA has FLIRT signatures which somewhat try to handle slight differences but compiler output can drastically change. A dummy binary and the source can be enough to spot patterns, but it's still a manual task.\n",
            "time": null
        }
    ],
    "answers_data": []
}