{
    "title": "How should I reach my shellcode?",
    "link": "https://reverseengineering.stackexchange.com/questions/4773/how-should-i-reach-my-shellcode",
    "content": "I am trying to exploit this little program I found on opensecuritytraining.info.\nBut, somehow, I am stuck at this point. What I did was to create a file which gets read from the program. Here is the code I am using for this:\n<pre><code>#!/usr/bin/env python\n\nimport struct\n\nmystring = b\"\\xCC\"*1096# junk\nnSEH = b\"\\xeb\\x06\\x90\\x90\"\nSEH  = struct.pack(\"<L\", 0x004011B6)\nopcode = \"\\xe9\\xdf\\xf6\\xff\\xff\"\n\nmystring += nSEH + SEH + (\"\\x90\"*16) + opcode\nfileName='C:\\hellothere.bin'\n\nwith open(fileName, 'wb') as fb:\n    fb.write(bytearray(mystring))\nfb.close()\n</code></pre>\nSo, I am stuck at this point where I am overriding the buffer with <pre><code>\\xCC</code></pre>, But my question is, when I am placing another jump code where the <pre><code>CC</code></pre>'s override the saved <pre><code>EIP</code></pre> register. Can I jump further backwards to where my shell code takes place ? \nI mean in principle this should be possible for some tweaking or adjusting  of the exploit code itself.\nAny idea ?\n",
    "votes": "2",
    "answers": 2,
    "views": "500",
    "tags": [
        "windows",
        "x86",
        "buffer-overflow"
    ],
    "user": "Dirk",
    "time": "Jul 3, 2014 at 7:45",
    "comments": [
        {
            "user": "schroeder",
            "text": "This is a pure programming question. Try the ReverseEngineering.stackexchange.com forum?\n",
            "time": null
        },
        {
            "user": "Dirk",
            "text": "@schroeder okay i will to that. But i was not shure if the RE is the right place for this question\n",
            "time": null
        },
        {
            "user": "Dirk",
            "text": "maybe some op could migrate this question to RE if this is the wrong place for this topic?\n",
            "time": null
        },
        {
            "user": "Dmitry Janushkevich",
            "text": "I'll just leave the Corelan tutorial link here for further reference.\n",
            "time": null
        },
        {
            "user": "Fewmitz",
            "text": "Are you gaining execution via an SEH overwrite? It already looks like you've done pretty much the whole thing. If you want to jump further you can change nSEH to \\xeb\\xff, change your opcode to a bigger jump back. You could also put a second jump in your shellcode but I don't know why you would do that.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As far as the screenshot depicts, I can say that you are on the right track. You have correctly, overwritten the Pointer to NextSEH and SE Handler.\nSome explanation:\nException Registration Record Structure\n<pre><code>typedef struct _EXCEPTION_REGISTRATION_RECORD\n{\n   struct _EXCEPTION_REGISTRATION_RECORD *Next;\n   PEXCEPTION_ROUTINE                     Handler;\n} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;\n</code></pre>\nWhenever a new function is called which has exception handling mechanism, the EXCEPTION_REGISTRATION_RECORD is added to the stack. Where *Next is the pointer to the Previous EXCEPTION_REGISTRATION_RECORD and Handler is the function pointer to the Exception handler.\nThe FS:0 register always points to the first EXCEPTION_REGISTRATION_RECORD. Once the EXCEPTION_REGISTRATION_RECORD is pushed on the stack, the FS:0 register will be set to point to the new EXCEPTION_REGISTRATION_RECORD and Next record will be set to point to the previous value of FS:0 register. This will maintain the link list of the SEH chains.\nExceptionHandler Structure\n<pre><code>typedef EXCEPTION_DISPOSITION (*ExceptionHandler) (\n    IN PEXCEPTION_RECORD ExceptionRecord,\n    IN ULONG64 EstablisherFrame,\n    IN OUT PCONTEXT ContextRecord,\n    IN OUT PDISPATCHER_CONTEXT DispatcherContext\n);\n</code></pre>\nWhen an exception occurs, System Exception Dispatcher routine kicks in and it's sets up it's own stack frame. The structure of the ExceptionHandler is pushed to the stack. \nIn SEH overwrite scenario, an attacker is lucky because, System Exception Dispatcher routine places the EstablisherFrame value on the stack at [ESP+8] before this ExceptionHandler function is called. \nEstablisherFrame is the pointer to the NextSEH record. An attacker is able to control it by overwriting NextSEH record with arbitrary memory address.\nNote: Attacker has not overwritten the EstablisherFrame. However, the attacker has overwritten NextSEH pointer which was there on the stack.\nOnce, you pass the exception System Exception Dispatcher passes the control to the SE handler and the exception handling code is executed.\nExploitation Tactics:\n\nAttacker will overwrite the NextSEH with Backward Jump and the SE Handler with the address of POP/POP/RET sequence.\nOnce the exception occurs, the address of NextSEH will be placed on the stack at [ESP+8] due to exception dispatch routine prologue.\nOnce the exception is passed, the exception dispatcher routine will pass the control to SE Handler.\nSE Handler will execute the POP/POP/RET sequence and will POP the address of NextSEH in EIP. Hence, gaining code execution.\n\nPlease accept my apologies if there are mistakes in the answer, and please help to improve the answer so that it's useful to the community members.\nThanks.\n",
            "votes": "8",
            "user": "john4tech",
            "time": "Jul 3, 2014 at 13:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dirk",
                    "text": "<span class=\"comment-copy\">As far as my knowledge is about SEH explotation, i would agree with your answer. Maybe there are some details i have overlooked, but to me it seems correct :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Yes, you can simply jump backwards. Control flow should reach your NOP pad, you can code your trampoline in there.\n",
            "votes": "3",
            "user": "Dmitry Janushkevich",
            "time": "Jul 3, 2014 at 7:47",
            "is_accepted": false,
            "comments": []
        }
    ]
}