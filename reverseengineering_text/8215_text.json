{
    "title": "Recovering .NET sources into full blown project",
    "link": "https://reverseengineering.stackexchange.com/questions/8215/recovering-net-sources-into-full-blown-project",
    "content": "I wonder if total decompilation of arbitrary non packed project .NET is possible? If no, what is the conditions that should be met to make it possible? If yes, is there tools that can automate this? I'm wondering not about basic decompilers, but about the ability of complete project recovery to compile result with VS again.\n\nUPD1\nYet tried to apply only dotPeek for my case. Unfortunately the output is not looks like ready-to-go project but all errors seems to be debugable. Disadvantage is the inability to export both dlls and exe into one project automatically(poor man's editing <pre><code>.sln</code></pre> file required)\nUPD2\nSeems like ILSpy has no option of export ready-to-go solutions for one/multiple .NET assemblies. Maybe there is some plugin/extension that should handle this? Will update this post if find one.\n",
    "votes": "13",
    "answers": 4,
    "views": "31k",
    "tags": [
        "decompilation",
        ".net"
    ],
    "user": "see ya",
    "time": "Feb 12, 2015 at 22:05",
    "comments": [
        {
            "user": "rev",
            "text": "tip: .NET reflector + reflexil\n",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "What's the end game for this? Are you trying to re-compile into a working .net binary after changes? If so, maybe there's a better way.\n",
            "time": null
        },
        {
            "user": "see ya",
            "text": "@baordog say I've working exe and bunch of dll written in .NET and I'd like to make a sort of fork of this project for personal use\n",
            "time": null
        },
        {
            "user": "MrSynAckSter",
            "text": "You might have an easier time just modifying the binary. The decompiled \"project\" will be quite hard to interpret as it is, and there's no guarantee it will build properly.\n",
            "time": null
        },
        {
            "user": "see ya",
            "text": "@baordog well, I believe that binary modification is not way of writing the code. My question is about conditions that allows to get properly recovered project and the obstacles that will not allow me to solve this task. In other words about opportunities and limitations of existing tools/techniques.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "JetBrains dotPeek is a free decompiler that has the option of decompiling whole assemblies into VS projects:\n",
            "votes": "14",
            "user": "svick",
            "time": "Feb 12, 2015 at 15:17",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">I've recently done this with dotPeek, which also decompiles submodules of the target project. After some tweaking I was able to recompile the project.</span>",
                    "time": null
                },
                {
                    "user": "Mark Twain",
                    "text": "<span class=\"comment-copy\">JustDecompile definitely generates better projects from my experience.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Update: dnSpy is now my go to tool for .net decompiling. It's open-source, it exports to Visual Studio projects and the debugger works like a charm.\nhttps://github.com/0xd4d/dnSpy\nOriginal answer: Telerik JustDecompile also can export to Visual Studio projects. I used it recently and it worked with very minor modifications to the code. It's a free tool.\nhttp://www.telerik.com/products/decompiler.aspx\n",
            "votes": "5",
            "user": "ekse",
            "time": "Oct 8, 2019 at 12:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sparkette",
                    "text": "<span class=\"comment-copy\">I tried it and it gave me all this weird uncompilable syntax, like <code>foo.&lt;Bar&gt;Baz</code>, <code>foo.$this</code>, etc, IIRC.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I wonder if total decompilation of arbitrary non packed project .NET\n  is possible?\n\nTools like ILSpy do a great job with decompilation of arbitrary non-packed .NET binaries.\n\nIf yes, is there tools that can automate this?\n\nILSpy is open-source, so you can write your own code to automate the decompilation process.\n",
            "votes": "2",
            "user": "Jason Geffner",
            "time": "Feb 12, 2015 at 13:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "see ya",
                    "text": "<span class=\"comment-copy\">Looks like the answer is actually \"no\" and this tool allows only write my own solution if needed.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Have you tried tools like:\nFor C#/VB \n\n.NET Reflector -\nhttp://www.red-gate.com/products/dotnet-development/reflector/ \nJustDecompile - http://www.telerik.com/products/decompiler.aspx\n",
            "votes": "2",
            "user": "Brett Salmiery",
            "time": "Feb 12, 2015 at 14:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}