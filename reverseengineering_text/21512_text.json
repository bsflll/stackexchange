{
    "title": "Is it possible to hijack a C++ DLL after it has been loaded into the memory space? How?",
    "link": "https://reverseengineering.stackexchange.com/questions/21512/is-it-possible-to-hijack-a-c-dll-after-it-has-been-loaded-into-the-memory-spac",
    "content": "I have a .Net application, in which a C++ DLL is embedded as a resource into the application.\nWhen the .Net application is running, I will extract the C++ DLL to a temporary folder, and after that, my .Net code will immediately load the C++ DLL into the memory and use it by calling a function on the C++ via interop.\nMy concern is that with scheme like this, is it possible for an attacker to somehow (still) hijack the C++ DLL and replace it with his own compromised version? Or is it possible to hijack a C++ DLL after it has been loaded into the memory space?\nIf yes, how?\n",
    "votes": "1",
    "answers": 1,
    "views": "381",
    "tags": [
        "c++",
        "c#",
        "dll-injection"
    ],
    "user": "Graviton",
    "time": "Jun 19, 2019 at 6:01",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "What is the attack scenario you want to defend against? If an attacker may inject code into your application at runtime, he can do pretty much whatever he wants, including forcing your application to read the DLL from another location instead of the temporary directory. Or he can modify the DLL in-memory after it's loaded, too.\n",
            "time": null
        },
        {
            "user": "Graviton",
            "text": "I want to ensure that my C++ dll is always the genuine copy, and not replaced by hacker\n",
            "time": null
        },
        {
            "user": "Graviton",
            "text": "If an attacker may inject code into your application at runtime-- how is it possible, given that my .Net application has anti-debugging feature\n",
            "time": null
        },
        {
            "user": "bart1e",
            "text": "Anti debugging features will not prevent a determined reverse engineer from debugging your application. An interesting article about breaking even sophisticated techniques: oklabs.net/skype-reverse-engineering-the-long-journey.\n",
            "time": null
        },
        {
            "user": "Johann Aydinbas",
            "text": "If your software is going to run in an uncontrolled environment (i.e. client PC somewhere) your solution is good enough I'd say. There is simply no way of guaranteeing anything more, that's the nature of computers. You are trying to achieve what multiple industries (AV, DRM, anti-cheat) have been unsuccessful at. An attacker would possibly have access to system-level code (via kernel drivers) while your application is user mode. You cannot win that battle.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It is possible for an attacker to replace the file on the disk by beating the race condition. When you write the file to disk, there is a delay until when the function you called which loads the DLL actually reads it from disk. An attacker can reverse your application and find out where you place the DLL, then in a no-sleep thread (maybe even multi-threaded) application can constantly spam to see if there is a new DLL placed, if there is, quickly replace it. \nAnother way to prevent you from reading it instead of just writing over it as fast as possible would be to get an operation lock on the file preventing you from reading it until the oplock handle is closed.\nSecond, if an attacker is at the same privilege level as your process, he can easily tamper with your process. You do not need to attach as a debugger or \"debug\" to inject code into your process. All an attacker needs to do is OpenProcess your process, WriteProcessMemory his shellcode, and then CreateRemoteThread the shellcode.\nThis is only one way of injecting code, there are SEVERAL more and you can't ever be 100% protected. Returning to your question whether or not an attacker can hijack your DLL, they most certainly can. They can overwrite portions of your DLL to hook or do another operation.\n",
            "votes": "1",
            "user": "Rob Gates",
            "time": "Jun 19, 2019 at 23:44",
            "is_accepted": false,
            "comments": []
        }
    ]
}