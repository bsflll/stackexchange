{
    "title": "Define new code section in assembly code to compile ELF binary",
    "link": "https://reverseengineering.stackexchange.com/questions/8196/define-new-code-section-in-assembly-code-to-compile-elf-binary",
    "content": "I defined a new code section in my assembly program, which is going to be compiled into 32-bit ELF binary, on x86.\nI use the linker scripts to assign a specified address for this new code section, it works. However, I noticed that this new section does not be loaded to the memory, after some debugging!\nI use <pre><code>readelf</code></pre> and figure out that there is no \"execution\" privilege of this new section:\n<pre><code>[15] .trampoline       PROGBITS        080483d0 004020 000117 00      0   0 16\n</code></pre>\nThen I did this:\n<pre><code>objcopy --set-section-flags .trampoline=alloc,code a.out\n</code></pre>\nHowever, I got this warning:\n<pre><code>BFD: stQWykoH: warning: allocated section `.trampoline' not in segment\n</code></pre>\nNow I realize that I didn't explicitly assign a <pre><code>segment</code></pre> information to my new section!!\nSo here is my question:\n\nHow to assign a <pre><code>segment</code></pre> information to a new code section I defined? I double-checked the linker script (follow instruction here to dump), and I have no idea how to modify the script... \nI just want to add a new executable section to my assembly program, and assign a fixed address to this new section. So am I on the right way now?\n",
    "votes": "1",
    "answers": 0,
    "views": "641",
    "tags": [
        "assembly",
        "c",
        "elf",
        "dynamic-linking"
    ],
    "user": "lllllllllllll",
    "time": "May 23, 2017 at 12:37",
    "comments": [],
    "answers_data": []
}