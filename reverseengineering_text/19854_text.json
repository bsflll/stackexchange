{
    "title": "What are the difference syscall and int 0x2E instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/19854/int-2eh-instead-of-syscall-sysenter",
    "content": "From this question: How does the Windows Native API communicate with the kernel?\nHere is an example of <pre><code>ZwClose(HANDLE Handle);</code></pre> system call in NTDLL.DLL in Windows 10 X86_64:\n<pre><code>NtClose         proc near\nmov     r10, rcx\nmov     eax, 0Fh\ntest    byte ptr ds:7FFE0308h, 1\njnz     short loc_a\nsyscall\nretn\n\nloc_a:\nint     2Eh\nretn\nNtClose         endp\n</code></pre>\nMy question is, why there is two different instruction <pre><code>syscall</code></pre> and <pre><code>int 0x2E</code></pre> in one subroutine? The <pre><code>0xF</code></pre> value in EAX is the ID of <pre><code>ZwClose()</code></pre> and/or <pre><code>NtCose()</code></pre>. While debugging, code execution never goes to <pre><code>int 0x2E</code></pre>, <pre><code>syscall</code></pre> instruction is always executed and <pre><code>ds:7FFE0308h</code></pre> becomes zero.\n",
    "votes": "10",
    "answers": 2,
    "views": "8k",
    "tags": [
        "windows",
        "x86",
        "kernel-mode",
        "system-call"
    ],
    "user": "MaleFUnction0",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>7FFE0308h</code></pre> is a pointer inside the <pre><code>KUSER_SHARED_DATA</code></pre> struct.\n\nThe pre-set address for access from kernel mode is defined symbolically in WDM.H as KI_USER_SHARED_DATA. It helps when debugging to remember that this is 0xFFDF0000 or 0xFFFFF780`00000000, respectively, in 32-bit and 64-bit Windows. Also defined is a convenient symbol, SharedUserData, which casts this constant address to a KUSER_SHARED_DATA pointer.\nThe read-only user-mode address for the shared data is 0x7FFE0000, both in 32-bit and 64-bit Windows.\n\nRef: https://www.geoffchappell.com/studies/windows/km/ntoskrnl/structs/kuser_shared_data.htm\nWe see from that ref above that SharedUserData+0x308 is\n\n0x0308 ULONG SystemCall\n\nfor Windows versions 1511 and higher.\nSo what does it do?\n<pre><code>//\n// On AMD64, this value is initialized to a nonzero value if the system\n// operates with an altered view of the system service call mechanism.\n//\n\nULONG SystemCall;\n</code></pre>\nfrom recent ntddk.h\n...not very helpful.\nSo what's the difference between int 2e and syscall in this context?\nRef: https://twitter.com/honorary_bot/status/966609444674162688\n\nMight be a clue: 'int 2e' instruction can be trapped by vmx, syscall not\n\nMore info here: https://www.amossys.fr/fr/ressources/blog-technique/windows10-th2-int2e-mystery/\n\nIn the context of your question the <pre><code>ntdll.dll</code></pre> <pre><code>int 0x2e</code></pre> system calls probably have something to do with Virtualization Based Security. They have been present in Windows 10 since version 1511, after having been removed as a syscall method since Windows 8.\n",
            "votes": "9",
            "user": "Gehock",
            "time": "Feb 14, 2023 at 14:28",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "<pre><code>int 2Eh</code></pre> is used on 32bit OS to enter the kernel mode. On 64-bit, the same is obtained by using <pre><code>syscall</code></pre>. The check done on memory address <pre><code>0x7ffe0300</code></pre> is one of the ways to detect the bitness.\n",
            "votes": "6",
            "user": "Paweł Łukasik",
            "time": "Sep 13, 2018 at 16:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}