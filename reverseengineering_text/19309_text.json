{
    "title": "I want to trace all instructions with pintool. Strange behaviour",
    "link": "https://reverseengineering.stackexchange.com/questions/19309/i-want-to-trace-all-instructions-with-pintool-strange-behaviour",
    "content": "Look at this very basic c program:\n<pre><code>int main()\n{\n    for (int i=0;i<0x42;i++)\n    {\n        asm(\"nop\");\n        asm(\"nop\");\n    }\n    return 0x42;\n}\n</code></pre>\nI have compiled it without any optimisations.\nYou can see this with radare2:\n<pre><code>|       ,=< 0x00001130      eb06           jmp 0x1138\n|       |   ; JMP XREF from 0x0000113c (main)\n|      .--> 0x00001132      90             nop\n|      :|   0x00001133      90             nop\n|      :|   0x00001134      8345fc01       add dword [local_4h], 1\n|      :|   ; JMP XREF from 0x00001130 (main)\n|      :`-> 0x00001138      837dfc41       cmp dword [local_4h], 0x41  ; [0x41:4]=0x4000000 ; 'A'\n|      `==< 0x0000113c      7ef4           jle 0x1132\n</code></pre>\nThe 2 nops instructions will be runned 0x42 times.\nWhat i want to do is to understand how i can log all program instructions with pin tool.\nI have wrote a very basic tool for pin:\n<pre><code>#include \"pin.H\"\n#include <stdio.h>\n\nVOID callback_instruction(INS ins, VOID *v)\n{\n    printf(\"%lx\\t%s\n\", INS_Address(ins),INS_Disassemble(ins).c_str());\n}\n\nint main(int argc, char *argv[])\n{\n    if (PIN_Init(argc,argv))\n    {\n        printf(\"Erreur\n\");\n        return 0;\n    }\n\n    INS_AddInstrumentFunction(callback_instruction, 0);\n    PIN_StartProgram();\n\n    return 0;\n}\n</code></pre>\nThere is something i do not understand. callback_instruction should be called before each instructions.\nSo i should see 0x42*2 times the nop instruction.\nOr i can see it only twice times.\nI do not understand why pintool just disassemble my program instead of running it instruction by instruction...\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "pintool"
    ],
    "user": "Bob5421",
    "time": "Sep 12, 2018 at 7:27",
    "comments": [
        {
            "user": "julian",
            "text": "Post the output of your trace\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I think you might have confused <pre><code>INS_AddInstrumentFunction</code></pre> with a tracing callback. In your case the callback supplied to <pre><code>INS_AddInstrumentFunction</code></pre> is <pre><code>callback_instruction</code></pre>. Pin calls <pre><code>callback_instruction</code></pre> every time a new instruction is encountered, not on every execution of an instruction.\nThis is probably not what you want to achieve. Here's the code that suits your case. You need to register a callback which is executed on every execution.\n<pre><code>#include \"pin.H\"\n#include <stdio.h>\n\nVOID dump_nop(UINT64 insAddr, std::string insDis) {\n  printf(\"%lx\\t%s\n\", insAddr, insDis.c_str());\n}\n\nVOID callback_instruction(INS ins, VOID *v) {\n\n  if (INS_IsNop(ins)) {\n    INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)dump_nop, IARG_ADDRINT,\n                   INS_Address(ins), IARG_PTR, new string(INS_Disassemble(ins)),\n                   IARG_END);\n  }\n}\n\nint main(int argc, char *argv[]) {\n  if (PIN_Init(argc, argv)) {\n    printf(\"Erreur\n\");\n    return 0;\n  }\n\n  INS_AddInstrumentFunction(callback_instruction, 0);\n  PIN_StartProgram();\n\n  return 0;\n}\n</code></pre>\n",
            "votes": "4",
            "user": "sudhackar",
            "time": "Sep 12, 2018 at 7:05",
            "is_accepted": true,
            "comments": []
        }
    ]
}