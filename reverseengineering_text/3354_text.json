{
    "title": "Decompiling Modem Firmware (firmware.bin) with unknown results on binwalk",
    "link": "https://reverseengineering.stackexchange.com/questions/3354/decompiling-modem-firmware-firmware-bin-with-unknown-results-on-binwalk",
    "content": "I'm just new to these field. So bare with me.\nThese is the result when I run binwalk.\n\nWhen I try to extract it using binwalk, it just give endless archives and files to analyse.\nAny ideas if it is a false positive?\nI just want to access one web file on the filesystem. Can anybody help?\nThis is the firmware file:\nhttps://www.mediafire.com/download/mc5as6tf357enxx/firmware.BIN\n",
    "votes": "7",
    "answers": 2,
    "views": "11k",
    "tags": [
        "disassembly"
    ],
    "user": "Thomson Bobby",
    "time": "Jan 3, 2014 at 17:35",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "It'd be cool if you could copy+paste the output into a terminal, as this would make it searchable by search engines.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Well, the files and archives aren't endless, but there are a lot of them. :)\nIf you run binwalk with just the -e option (no -M), it will only extract files from the firmware.BIN image and not scan any other files, or, as @user3119546 mentioned, you can limit the recursion depth.\nAll the gzip files that binwalk found appear to be valid (except for one). What you are seeing is not uncommon, mostly because two of the extracted gzip files (at offsets 0xC77C94 and 0x21CA97A) are uncompressed YAFFS file systems, thus when binwalk scans them, binwalk sees all the files in the YAFFS file systems (which in this case is a lot):\n<pre><code>$ binwalk C77C94 \n\nDECIMAL       HEX             DESCRIPTION\n------------------------------------------------------------------------------------------------------------------------------------------------------\n0             0x0             YAFFS filesystem\n4112          0x1010          YAFFS filesystem\n8224          0x2020          YAFFS filesystem\n16448         0x4040          YAFFS filesystem\n98688         0x18180         XML document, version: \"1.0\"\n98738         0x181B2         Copyright string: \" 2006, Google Inc.ed under the Apache License, Version 2.0 (the \"License\");\"\n111024        0x1B1B0         PEM RSA private key\n172704        0x2A2A0         XML document, version: \"1.0\"\n180928        0x2C2C0         XML document, version: \"1.0\"\n189152        0x2E2E0         XML document, version: \"1.0\"\n197376        0x30300         XML document, version: \"1.0\"\n209712        0x33330         XML document, version: \"1.0\"\n267280        0x41410         XML document, version: \"1.0\"\n275504        0x43430         XML document, version: \"1.0\"\n283728        0x45450         XML document, version: \"1.0\"\n291952        0x47470         XML document, version: \"1.0\"\n308400        0x4B4B0         XML document, version: \"1.0\"\n320736        0x4E4E0         XML document, version: \"1.0\"\n357744        0x57570         PEM RSA private key\n370080        0x5A5A0         gzip compressed data, maximum compression, from Unix, NULL date: Wed Dec 31 19:00:00 1969\n407088        0x63630         PEM RSA private key\n423536        0x67670         PEM RSA private key\n431790        0x696AE         LZMA compressed data, properties: 0x40, dictionary size: 16777216 bytes, uncompressed size: 6144 bytes\n464656        0x71710         PEM certificate\n505776        0x7B7B0         Zip archive data, at least v2.0 to extract, compressed size: 943, uncompressed size: 1675, name: \"testkey.x509.pem\"\n506879        0x7BBFF         End of Zip archive\n...\n</code></pre>\nThis is a situation where just extracting the original image then doing separate scans on each the extracted files is perhaps more informative.\nA cursory glance at strings / binwalk scans of the other uncompressed gzip files, this appears to be a Huawei device running VxWorks, but the HTML file you're looking for is probably in one of those two YAFFS file systems.\n",
            "votes": "6",
            "user": "devttys0",
            "time": "Jan 4, 2014 at 1:27",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can limit the amount of levels it will scan. BinWalk defaults at 8 levels but this can be modified by giving the following command line switch:\n<pre><code>-M, --matryoshka=[n]     Recursively scan extracted files, up to n levels deep (default: 8)\n</code></pre>\nFor further information on binwalk usage, as well as other extraction options try following up here.\n",
            "votes": "5",
            "user": "perror",
            "time": "Feb 3, 2014 at 12:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}