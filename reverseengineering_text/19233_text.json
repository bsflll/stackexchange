{
    "title": "Instruction counting anti-debug",
    "link": "https://reverseengineering.stackexchange.com/questions/19233/instruction-counting-anti-debug",
    "content": "I recently came across this anti-debug technique being used in the wild. \nIn The Ultimate Anti-Debugging Reference, the author wrote in the \"Instruction Counting\" section\n\nA debugger will interfere with the\n  single-stepping, resulting in a different count of\n  instructions compared to when a debugger is not\n  present.\n\nFrom experimenting with this technique a bit, it seems that when you set a hardware breakpoint in x64dbg, the debug registers of all threads are not only set, but also frozen - so that for example - if the program calls SetThreadContext to change these registers, x64dbg seems to change them back.\nGiven how x64dbg works, and that the technique relies on these debug registers, isn't this technique limited to detecting the presence or modification of hardware breakpoints?\n",
    "votes": "5",
    "answers": 0,
    "views": "401",
    "tags": [
        "debuggers",
        "anti-debugging"
    ],
    "user": "P. Private",
    "time": "Sep 3, 2018 at 0:44",
    "comments": [
        {
            "user": "mrexodia",
            "text": "About x64dbg, the debug registers aren’t written back if the debuggee modifies them. Probably the GUI wasn’t refreshed or something.\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "Detecting the presence of the breakpoints is more obvious than counting the instructions, and counting the instructions can be used to introduce side-effects if the count is wrong.\n",
            "time": null
        }
    ],
    "answers_data": []
}