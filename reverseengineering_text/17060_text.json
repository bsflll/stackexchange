{
    "title": "Linux x64 Disassembly: single movzwl operand question",
    "link": "https://reverseengineering.stackexchange.com/questions/17060/linux-x64-disassembly-single-movzwl-operand-question",
    "content": "A quick question regarding a <pre><code>movzwl</code></pre> instruction which do not behave as I expected. \nhere is the disassembled code:\n<pre><code>movzwl (%rax),%eax\n</code></pre>\nBefore the instruction, <pre><code>rax</code></pre> is <pre><code>0x7fffffffe410</code></pre> and point to <pre><code>0x5</code></pre>\nAfter the instruction, I would expect <pre><code>eax</code></pre> to be <pre><code>0x5</code></pre> (which is the case), but I would not expect that the upper bits of <pre><code>rax</code></pre> be cleared too... However, when debugging, <pre><code>rax</code></pre> values <pre><code>0x5</code></pre>...\nI thought that <pre><code>movzwl</code></pre> would only clear the upper bits of <pre><code>eax</code></pre>, but not the <pre><code>rax</code></pre> ones. Could you explain? \nThank you very very much for your help!\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "linux",
        "x86-64"
    ],
    "user": "David Labay",
    "time": "Dec 28, 2017 at 11:12",
    "comments": [
        {
            "user": "Jongware",
            "text": "\"I thought that ..\": Did you check the official Intel documentation?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a somewhat tricky part of the x64 instruction set and is not mentioned in descriptions of individual instructions but only as a sidenote in the general introduction section. Here's a good answer on it:\nhttps://stackoverflow.com/questions/11177137/why-do-x64-instructions-zero-the-upper-part-of-a-32-bit-register\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Dec 28, 2017 at 23:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}