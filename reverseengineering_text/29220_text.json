{
    "title": "Problem with analyzing malware",
    "link": "https://reverseengineering.stackexchange.com/questions/29220/problem-with-analyzing-malware",
    "content": "We have a malware that blocks all analytics software in real time.\nThis software has blacklisted a large list of software that performs analysis (x64dbg, ida, serialport monitor, etc.)\nThis software examines all items related to the software, including the following: package name,registry,driver\nAnd if there is this softwares, it closes them and avoids re-running.\nDeveloping proprietary software that they can not block is very time consuming and costly.\nwhat's the solution?How can we do our analysis in this situation?\n",
    "votes": "1",
    "answers": 1,
    "views": "161",
    "tags": [
        "malware",
        "program-analysis"
    ],
    "user": "ILYA20",
    "time": "Aug 28, 2021 at 7:58",
    "comments": [
        {
            "user": "BadSugar",
            "text": "The solution may be very simple, but... We need to know more about your setup! 1. Which analytics software is being used, version etc give all information? 2. Is it stop only on that malware? 3. where is the malware? Send here so we can make a better answer 4. how is the malware come?\n",
            "time": null
        },
        {
            "user": "ILYA20",
            "text": "We are not allowed to publish the software. When we debug, the malware detects what software is installed and what software is running, and if there is any analysis, monitoring and the like software, it stops immediately.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Not much information has been disclosed about the program to be analyzed or its execution environment, so it is difficult to provide specific recommendations or solutions.\nIf you are in possession of the binary executable you want to analyze then total control over its behavior should be possible. There should also not be any need to develop a bespoke tool just to deal with the anti-analysis techniques implemented by the program.\nThere are a variety of techniques and strategies one can employ to force a program to behave as one desires and many different tools available that can be used to accomplish this. Some are listed below.\nStatic binary rewriting\nStatic binary rewriting is a means by which changes can be made to an executable file on disk, prior to execution. Perhaps some anti-debugging mechanisms can be patched such that they always return a value you desire? Frameworks that offer this capability include syzygy (Windows) and e9patch (Linux).\nSyzygy examples:\n\nBinary rewriting with syzygy, Pt. I\nWinAFL: Statically instrument a binary via syzygy\n\ne9patch examples:\n\nproject readme\nE9AFL: uses E9Patch to insert the AFL instrumentation via static binary rewriting\n\nSystem call interception\nSystem call interception/hooking can grant significant control over process behavior at runtime without making any changes at all to the executable binary to be analyzed.\nOn Linux this can be achieved in a variety of ways, such as:\n\nuse of LD_PRELOAD to perform shared library injection/code interposition\nsystem call emulation via ptrace()\nusing an instrumented version of <pre><code>libc.so</code></pre> that intercepts all system calls\nvia a loadable kernel module\n\nI'm not very familiar with windows, but Windows' DLL and kernel APIs strike me as more permissive than their Linux analogues. Here are some tools that may be of use for your analysis:\n\nDetours: used to intercept Win32 APIs calls within an application, such as to add debugging instrumentation\nCheat Engine (?)\n\nDynamic Binary Instrumentation\nDynamic binary instrumentation is a method of changing process behavior by modifying its machine code at runtime. Tools such as Pin, Frida, QDBI and DynamoRIO provide this functionality.\nEmulation\nEmulation allows one to approximate process runtime behavior without directly executing it on the host. QEMU and Qiling are examples of emulators.\n",
            "votes": "1",
            "user": "julian",
            "time": "Aug 28, 2021 at 20:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ILYA20",
                    "text": "<span class=\"comment-copy\">Thanks to your useful information, we are using Windows, we will soon perform the necessary tests on what you wrote and report the output.</span>",
                    "time": null
                }
            ]
        }
    ]
}