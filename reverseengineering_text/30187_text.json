{
    "title": "Find DllMain using IDA Freeware",
    "link": "https://reverseengineering.stackexchange.com/questions/30187/find-dllmain-using-ida-freeware",
    "content": "I want to use the IDA Freeware Version 7.7 for finding the DllMain of a DLL file. The file is from the book Practical Malware Analysis. It is for Lab 05. Name of file is \"Lab05-01.dll\" and you can download that from here (use VM).\nSo as Practical Malware Analysis mentioned, when I load the DLL at IDA Freeware, then, the first line of instruction at the graph view should be the start of DllMain.\nBut when I load the DLL file at the IDA Freeware, the first line of graph view is NOT the <pre><code>DllMain</code></pre>. Because I checked from the solutions and my answer and book's answer were not the same.\nWays that I've Tested\n\nLooking at the first line of instruction at the graph view which the book described. (Explained above that didn't worked)\nSo I searched and found THIS ARTICLE.\nOne of the ways that was mentioned there was to go and find <pre><code>DllMain</code></pre> at the function windows. There was no function named <pre><code>DllMain</code></pre> (As you see in the picture)\n\nThe <pre><code>DllMain</code></pre> does NOT exist because if it did exist, then it would be above <pre><code>EnumProcessModules</code></pre> and below <pre><code>DllEntryPoint</code></pre>. (Note that I have sorted by name)\nSo next thing I did was to look at the answer and see what is the name of the function which starts at the exact same address which the book says DllMain starts.\nThe book says the answer is 1000D02E. I look at the function which had started from this location and that function had this name : sub_1000D02E , not <pre><code>DllMain</code></pre>.\nThe function highlighted is the DllMain (I know this because I have looked at the solutions and as you see the function's name is not <pre><code>DllMain</code></pre> and I was unable to find that by myself)\n\n\nWhat should I do to find the DllMain?\nThank you in advance.\n",
    "votes": "1",
    "answers": 1,
    "views": "856",
    "tags": [
        "ida",
        "dll"
    ],
    "user": "Hayeri",
    "time": "Mar 30, 2022 at 9:10",
    "comments": [],
    "answers_data": [
        {
            "content": "Hmm, so here's the rub. I installed IDA Freeware 7.7 in my Linux VM and tried in parallel in my named license IDA Pro 7.7.\nTurns out this seems to be a limitation of IDA Freeware, in all likelihood a conscious one. In particular I can see with the freeware version that <pre><code>DllEntryPoint</code></pre> was not deemed a library function (cyan color), but with the commercial license it was.\nFreeware: \nCommercial:\n\nIt appears that based on <pre><code>autoload.cfg</code></pre> my commercial IDA will load FLIRT signatures <pre><code>vc32rtf</code></pre> (Microsoft VisualC 2-14/net runtime), which the freeware version doesn't do on its own.\nIf you do that manually through File -> Load file -> FLIRT signature file your <pre><code>DllEntryPoint</code></pre> function should get collapsed and its color should indicate it's a library function (cyan). You can toggle collapsed/expanded mode with Ctrl+Num+ by default.\nNow, if you expand the function you will notice it has been recognized as a library function, but so have some of the callees called from this library function. What's more, if you use View -> Open subviews -> Function calls you can see the overview of calls from <pre><code>DllEntryPoint</code></pre>.\n\nAs you can now see, there are only two called \"entities\" which aren't themselves library functions (<pre><code>call eax ; dword_10092E58</code></pre> and <pre><code>call sub_1000D02E</code></pre>). And after a cursory look under which conditions the function pointer stored in <pre><code>dword_10092E58</code></pre> gets called, we can surmise that <pre><code>sub_1000D02E</code></pre> must be our <pre><code>DllMain</code></pre>.\nKnowing this, we can now jump to it and manually rename it to <pre><code>DllMain</code></pre>. Once done it should show up as:\n<pre><code>.text:1000D02E ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)\n.text:1000D02E DllMain         proc near               ; CODE XREF: DllEntryPoint+4B↓p\n.text:1000D02E                                         ; DATA XREF: sub_100110FF+2D↓o\n</code></pre>\n... in the \"IDA View-A\".\n",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Mar 28, 2022 at 11:38",
            "is_accepted": true,
            "comments": []
        }
    ]
}