{
    "title": "IDA: Two calls of a same function",
    "link": "https://reverseengineering.stackexchange.com/questions/16251/ida-two-calls-of-a-same-function",
    "content": "I was reversing some executable and came across to this code:\n\nAs I found out later, it's using function pointer to call function <pre><code>sub_4011C0</code></pre> and that could be the reason. \nMy question is why does dissambler show this kind of output? why doesn't it recognize the function pointer and call the function twice? thanks.\n",
    "votes": "0",
    "answers": 1,
    "views": "222",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "c++",
        "c"
    ],
    "user": "Ojs",
    "time": "Sep 3, 2017 at 8:42",
    "comments": [
        {
            "user": "conio",
            "text": "I don't understand the question. What's the problem?\n",
            "time": null
        },
        {
            "user": "Michael Pittino",
            "text": "What makes you think the output is wrong?\n",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "why is it calling two times? when the reference shows only one call?\n",
            "time": null
        },
        {
            "user": "Michael Pittino",
            "text": "Sorry I can't follow you. What do you mean by <pre><code>the reference</code></pre>? The application stores the address of the function in <pre><code>[ebp+var_4]</code></pre> and then calls whatever is at <pre><code>[ebp+var_4]</code></pre> 2 times. In this case it's the function it moved there. The original code could have been something like that: pastebin.com/0S83zEhp\n",
            "time": null
        },
        {
            "user": "Ojs",
            "text": "Thats the point, in original source code there is only one call to the function, even if you look at the picture above <pre><code>sub_4011C0 </code></pre> function has only one reference. In reference I mean IDA only recognizes one call to the function which is from <pre><code>DATA XREF: sub_4011D0+5o</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In assembly there is only one explicit reference to the target function, and that's where its address is moved to the variable at point 1 (you can see that the reference is marked 'o' (offset) and not 'p' ([procedure] call)). While IDA could in theory track stack var assignments and add xrefs also at the points the variable is used for an indirect call (2 and 3), this:\n\nwould increase analysis time for negligible benefit (an experienced user can easily see that <pre><code>var_4</code></pre> is called twice)\nis prone to false positives (e.g. if there's a function call before initialization and use of the variable, you can't be sure that it's not overwritten by the side-effects of the function)\nis easily defeatable (e.g. do some simple math on the pointer and IDA will be fooled).\n\nSo it's better to add only explicit cross-references and let the human decide if extra ones need to be added manually.\nThat said, IDA does some limited amount of register tracking to handle the most common situations, e.g.:\n<pre><code>mov     esi, ds:__imp__sprintf\npush    edi\nlea     edx, [esp+0BCh+szOffset]\npush    offset Format   ; \"%08X\"\npush    edx             ; Dest\ncall    esi ; __imp__sprintf\n</code></pre>\nYou can see that it added a comment at the <pre><code>call esi</code></pre> instruction with the actual destination loaded earlier into <pre><code>esi</code></pre>. (it also adds a call xref in such case).\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Sep 3, 2017 at 17:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}