{
    "title": "Suspicious breakpoint message in ollydbg",
    "link": "https://reverseengineering.stackexchange.com/questions/4812/suspicious-breakpoint-message-in-ollydbg",
    "content": "I want to set a breakpoint and suddenly the following message appears:\n\nYou want to place breakpoint outside the code section. INT3 breakpoint set on data will  not execute and may have disastrous influence on the debugged program. Do you really want to set breakpoint here?\nNote: you can permanently disable this warning in Options|Security.\n\nWithout knowing what that is, I would guess that is not allowed to set the breakpoint.\nSo my question would be:\nHow can I bypass the annoying message? Or better: what must I do to not see this?\n",
    "votes": "4",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ollydbg"
    ],
    "user": "user3097712",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "PE files have several sections like <pre><code>.code</code></pre> , <pre><code>.data</code></pre>, <pre><code>.bss</code></pre> etc. Each of the sections have a special purpose, such as the <pre><code>.code</code></pre> section usually contains the programs code i.e. the instructions, the <pre><code>.data</code></pre> sections houses the initialized variables etc.\nThe above rule is merely a convention followed by compilers. In a packed/obfuscated program, the convention may not always hold true. You can have instructions in data segment and vice-versa. This is done for various reasons like thwarting analysis ,disassembly etc.\nWhen in Ollydbg you try to set a <pre><code>INT3</code></pre> breakpoint on an instruction that happens to be in a section marked for data, Ollydbg would complain and that is the message you see. \nThe reason for this is suppose that the instruction you set a breakpoint on is actually data. In this case, when the program reads in the value at the address it would read <pre><code>0xCC</code></pre> (INT3 -> 0xCC) instead of the actual value. That can crash the program. Further since this is a read operation, the breakpoint will never be hit.\nIf you want, you may disable the message in Ollydbg options, however doing that is not always recommended. Instead if you are sure that it is an instruction, you may ignore the warning and set the breakpoint.\nThe other way is instead of using a <pre><code>INT3</code></pre> breakpoint, set a Hardware breakpoint (HWBP) on execution at the aforesaid address. This way the program would not crash, even if the hwbp was set on data. HWBP's are enforced my the CPU and does not modify the program in any way unlike <pre><code>INT3</code></pre> breakpoints\n",
            "votes": "6",
            "user": "0xec",
            "time": "Jul 9, 2014 at 3:30",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">thank you for your great answer. I have read about Hardware Breakpoints, so then I will try it. Again, thx.</span>",
                    "time": null
                },
                {
                    "user": "user3097712",
                    "text": "<span class=\"comment-copy\">EDIT: Hardware Breakpoint did not work because suddenly the process is terminated before the breakpoint comes. So, I try again a software breakpoint, ignore the message let run ollydbg and it helps</span>",
                    "time": null
                },
                {
                    "user": "0xec",
                    "text": "<span class=\"comment-copy\">@user3097712 It is possible to detect hardware breakpoints as an anti-debugging feature. <b><i><a href=\"http://www.codeproject.com/Articles/30815/An-Anti-Reverse-Engineering-Guide#BpHardware\" rel=\"nofollow noreferrer\">See this</a></i></b></span>",
                    "time": null
                }
            ]
        }
    ]
}