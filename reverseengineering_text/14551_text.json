{
    "title": "Assembly and C++",
    "link": "https://reverseengineering.stackexchange.com/questions/14551/assembly-and-c",
    "content": "I'm trying to learn Reverse Engineering, at this time I compile C++ code without any optimization and see the correspond assembly in IDA's disassembler, but there are some parts of the code, where I can not guess what happens.\nThere are some questions in the Assembly code below.\nC++ code:\n<pre><code>#include <stdio.h>\n#include <string>\n\nvoid fillarray(int is[11], int size)\n{\n    for (int i = 0; i < size; ++i)\n    {\n        is[i] = i;\n    }\n}\n\nint main()\n{\n    char* chr = \"First\";\n    std::string m = \"Secdond\";\n\n    static int arr[11];\n\n    std::string m1 = \"Third\";\n\n    auto size = sizeof(arr) / sizeof(arr[0]);\n\n    fillarray(arr, size);\n\n    int num = 11;\n\n    printf_s(\"%d\", num);\n\n\n    getchar();\n\n    return 0;\n}\n</code></pre>\nThe main function in IDA:\n<pre><code>.text:00401E20\n.text:00401E20\n.text:00401E20 ; Attributes: bp-based frame\n.text:00401E20\n.text:00401E20 ; int __cdecl main(int argc, const char **argv, const char **envp)\n.text:00401E20 main proc near\n.text:00401E20\n.text:00401E20 First_via_char= dword ptr -50h\n.text:00401E20 var_4C= dword ptr -4Ch\n.text:00401E20 var_eleven= dword ptr -48h\n.text:00401E20 size= dword ptr -44h\n.text:00401E20 Second_via_str= byte ptr -40h\n.text:00401E20 Third_via_str= byte ptr -28h\n.text:00401E20 CANARY= dword ptr -10h\n.text:00401E20 var_C= dword ptr -0Ch\n.text:00401E20 var_4= dword ptr -4\n.text:00401E20 argc= dword ptr  8\n.text:00401E20 argv= dword ptr  0Ch\n.text:00401E20 envp= dword ptr  10h\n.text:00401E20\n.text:00401E20 push    ebp\n.text:00401E21 mov     ebp, esp\n.text:00401E23 push    0FFFFFFFFh\n.text:00401E25 push    offset sub_402D20\n.text:00401E2A mov     eax, large fs:0         // what is this? I know that fs:0 is to access PEB, but why this code uses this? \n.text:00401E30 push    eax\n.text:00401E31 sub     esp, 44h\n.text:00401E34 mov     eax, ___security_cookie\n.text:00401E39 xor     eax, ebp\n.text:00401E3B mov     [ebp+CANARY], eax       // I thinks it's CANARY\n.text:00401E3E push    eax\n.text:00401E3F lea     eax, [ebp+var_C]       // what is var_C for?\n.text:00401E42 mov     large fs:0, eax        // At this moment, var_C is uninitialized. How and why programm need this?\n.text:00401E48 mov     [ebp+First_via_char], offset aFirst ; \"First\"\n.text:00401E4F push    offset aSecdond ; \"Secdond\"\n.text:00401E54 lea     ecx, [ebp+Second_via_str]\n.text:00401E57 call    basic_string\n.text:00401E5C mov     [ebp+var_4], 0\n.text:00401E63 push    offset aThird   ; \"Third\"\n.text:00401E68 lea     ecx, [ebp+Third_via_str]\n.text:00401E6B call    basic_string\n.text:00401E70 mov     byte ptr [ebp+var_4], 1      // what is var_4?\n.text:00401E74 mov     [ebp+size], 0Bh\n.text:00401E7B mov     eax, [ebp+size]\n.text:00401E7E push    eax\n.text:00401E7F push    offset unk_404098 ; address of arrary\n.text:00401E84 call    fill_array_function\n.text:00401E89 add     esp, 8\n.text:00401E8C mov     [ebp+var_eleven], 0Bh\n.text:00401E93 mov     ecx, [ebp+var_eleven]\n.text:00401E96 push    ecx\n.text:00401E97 push    offset aD       ; \"%d\"\n.text:00401E9C call    printf\n.text:00401EA1 add     esp, 8\n.text:00401EA4 call    ds:getchar\n.text:00401EAA mov     [ebp+var_4C], 0\n.text:00401EB1 mov     byte ptr [ebp+var_4], 0\n.text:00401EB5 lea     ecx, [ebp+Third_via_str]\n.text:00401EB8 call    sub_401270                    // What is this? I think it's destructor, but I'm not sure.\n.text:00401EBD mov     [ebp+var_4], 0FFFFFFFFh\n.text:00401EC4 lea     ecx, [ebp+Second_via_str]\n.text:00401EC7 call    sub_401270                    // Destructor?\n.text:00401ECC mov     eax, [ebp+var_4C]             // what is var_4C?\n.text:00401ECF mov     ecx, [ebp+var_C]              // var_C?\n.text:00401ED2 mov     large fs:0, ecx\n.text:00401ED9 pop     ecx\n.text:00401EDA mov     ecx, [ebp+CANARY]\n.text:00401EDD xor     ecx, ebp\n.text:00401EDF call    sub_401F68\n.text:00401EE4 mov     esp, ebp\n.text:00401EE6 pop     ebp\n.text:00401EE7 retn\n.text:00401EE7 main endp\n.text:004\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "968",
    "tags": [
        "disassembly",
        "assembly",
        "c++",
        "c",
        "patch-reversing"
    ],
    "user": "J. Doe",
    "time": "Feb 2, 2017 at 7:16",
    "comments": [
        {
            "user": "w s",
            "text": "Just for completeness - which compiler did you use ?\n",
            "time": null
        },
        {
            "user": "J. Doe",
            "text": "It's compiled using visual studio 2015\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The parts you've commented are mostly related to exception handling. The compiler has to guard for possible exceptions which may happen at any time, even if your program does not explicitly use exceptions. In particular, <pre><code>var_4</code></pre> is the so-called \"trylevel\" of the current execution point and <pre><code>var_C</code></pre> is the exception registration record for the SEH mechanism. <pre><code>CANARY</code></pre> is indeed the stack overflow protection canary (\"cookie\" in MSVC terminology).\nYou can find more details in my OpenRCE article on the topic.\nP.S. <pre><code>var_4C</code></pre> is just a temporary variable used to store the return value of the function (0). It is saved because the destruction of the strings has to happen  after the return statement but before the actual return from the function.\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Feb 2, 2017 at 8:59",
            "is_accepted": true,
            "comments": []
        }
    ]
}