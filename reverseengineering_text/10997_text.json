{
    "title": "In which language is the BIOS written?",
    "link": "https://reverseengineering.stackexchange.com/questions/10997/in-which-language-is-the-bios-written",
    "content": "As I understand, the BIOS code/bitstream that held in the ROM should be generic (work alongside with multiple CPU types or ISAs). In addition, I saw mentions in the web that claim to have the possibility to dump it's code (and to 'disassemble' it).\nSo, in which language, instruction set or machine code is it written? Doesn't it need any kind of processor to perform its operations? If so I guess that it will use the external CPU, then how does it knows the specific instruction set of the employed one?\nMaybe it has an internal processor?\n",
    "votes": "18",
    "answers": 2,
    "views": "5k",
    "tags": [
        "disassembly",
        "dumping",
        "bios"
    ],
    "user": "Reflection",
    "time": "Sep 30, 2015 at 19:05",
    "comments": [
        {
            "user": "pjc50",
            "text": "BIOS code is very much not generic, it will only work with a particular instruction set. This used to be (for PCs) the 16-bit x86 real mode instruction set. UEFI is either x86_32 or x86_64, one or the other.\n",
            "time": null
        },
        {
            "user": "Sam",
            "text": "I believer asking literally the same question on two stack exchange sites at the same time is frowned upon in general. Certainly I think its probably a bad idea.  programmers.stackexchange.com/questions/298628/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "So, in which language, instruction set or machine code is it written?\n\nIt's written in a language that can be compiled to machine code that can be executed by the processor (the CPU). Typically, it's a combination of C and assembly language.\n\nDoesn't it need any kind of processor to perform its operations?\n\nYes, the processor is what runs the BIOS code.\n\nIf so I guess that it will use the external CPU\n\nCorrect.\n\nthen how does it knows the specific instruction set of the employed one?\n\nIt doesn't. That's why when you purchase a motherboard, you need to make sure to buy one compatible with the CPU you plan to use with it. See, for example, ASUS's motherboard list. They have motherboards meant for Intel CPUs, motherboards meant for AMD CPUs, etc. And if you drill into the specs for a given motherboard, you'll see which specific CPUs it's meant to work with:\n",
            "votes": "15",
            "user": "Jason Geffner",
            "time": "Sep 30, 2015 at 13:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "hobbs",
                    "text": "<span class=\"comment-copy\">On the other hand, EFI bytecode.</span>",
                    "time": null
                },
                {
                    "user": "ErikE",
                    "text": "<span class=\"comment-copy\">Wait a minute. Could you give some supporting evidence that a BIOS can be written in C? It was my understanding that a hardware BIOS has to be pure assembler that can run natively on the machine, without compiling or translation. Perhaps there's some distinction between different kinds of BIOSes that you might go into if I am not understanding this correctly.</span>",
                    "time": null
                },
                {
                    "user": "bjb568",
                    "text": "<span class=\"comment-copy\">@Erik The BIOS that you run on your computer is in assembly and can be directly run, but it may be developed in any language that can compile to assembly.</span>",
                    "time": null
                },
                {
                    "user": "ErikE",
                    "text": "<span class=\"comment-copy\">Ah, you did say that, I just missed it, since I had a different concept of \"language a BIOS is written in\".</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">@bjb568: This is a bit pedantic, but... the BIOS code that you run on your computer is actually machine code, not assembly. <a href=\"http://stackoverflow.com/a/466811\">The former is \"binary\", whereas the latter is human-readable text.</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "As complementary answer, BIOS used to be written in assembler (now is mostly ANSI C code) which compiles to\na) Machine code for old architectures (in the past, like PC IBM; which was actually written in assembler according to https://sites.google.com/site/pcdosretro/ibmpcbios and an old book from Gottfried in Assembler for PC IBM).\nb) UEFI bytecode for EFI currently (BIOS replacement).\nAs evidence, have a look at https://en.wikipedia.org/wiki/Coreboot & http://review.coreboot.org/gitweb?p=coreboot.git;a=tree\n(Notice there are several other open source efforts on BIOS/EFI replacements).\nUEFI Is an spec of a framework with several several layers, exposing among other things services, a shell console and an interpreter layer (for EFI byte code), the idea of abstracting \"BIOS\" away from machine code was to facilitate portability to other non x86 architectures (Itanium, ARM, etc)\nThis is a good conceptual introduction on UEFI http://www.amazon.com/Beyond-Bios-Implementing-Extensible-Interface/dp/0974364908/ref=sr_1_2?ie=UTF8&qid=1452724127&sr=8-2&keywords=efi+bios\nPS. In one company I used to work, I actually had access to the BIOS/EFI code base.\n",
            "votes": "1",
            "user": "Fernando Gonzalez Sanchez",
            "time": "Jan 13, 2016 at 22:41",
            "is_accepted": false,
            "comments": []
        }
    ]
}