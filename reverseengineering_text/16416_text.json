{
    "title": "IDA pro 6.9, what does \"lambda\" in type notation mean in C++ reversed code",
    "link": "https://reverseengineering.stackexchange.com/questions/16416/ida-pro-6-9-what-does-lambda-in-type-notation-mean-in-c-reversed-code",
    "content": "I was looking into a C++ program compiled for aarch64 with ida pro 6.9 and came across something really weird:\n<pre><code>somescope::SomeClass<false>::some_name<somescope::SomeClass<false>::other_name(uint,uint,uint)::{lambda(void *,bool)#2}>::SOMETHING</code></pre>\nI'm really confused by this notation... Specifically:\n\nWhat does <pre><code>{lambda(void *,bool)#2}</code></pre> mean? Is it an indicator for lambda expression? Also, what is <pre><code>#2</code></pre>?\nIs <pre><code>other_name(uint,uint,uint)</code></pre> somewhat a scope? What could <pre><code>other_name</code></pre> possibly be if this is the case?\n\nI'm fairly new to reverse engineering and I've tried to google this for like an hour... Please hint me if you've got clue.\nThanks in advance!\n",
    "votes": "3",
    "answers": 1,
    "views": "521",
    "tags": [
        "ida",
        "c++"
    ],
    "user": "hpwsue",
    "time": "Sep 26, 2017 at 14:01",
    "comments": [],
    "answers_data": [
        {
            "content": "About your first question: <pre><code>what does ...lambda... mean</code></pre>: Yes, obviously, it refers to a lambda function.\nThe second part of your first question: <pre><code>What is #2</code></pre>: Some experimentation with lambda's shows that this is like a sequence number of lambda's within a function.\nNote that gcc and clang have different ways of encoding this.\n<pre><code>gcc</code></pre> uses the <pre><code>lambda()#2</code></pre> notation, while <pre><code>clang</code></pre> uses something like <pre><code>$_1</code></pre>.\nYour second question: <pre><code>what is other_name</code></pre>: I think that would be the function where the lambda is defined.\nAnd <pre><code>some_name</code></pre> being the function which is passed the lambda as a template parameter.\nThe lambda's themselves are passed as a struct containing either copies of values or pointers, or from a c++ point of view: references, to the closure defined by the lambda.\n\nExperimenting with how your compiler treats lambda's is quite easy.\nWrite some test code:\n<pre><code>#include <stdio.h>\n\ntemplate<typename FN>\nint test(FN f)\n{\n    return f();\n}\n\nint main(int, char**)\n{\n    int a, b;\n    auto f1 = [](int a, int b) { return a+b; };\n    int c = test([&a, b, &f1]() { return f1(a,b); });\n    auto f2 = [](int a, int b) { return a-b; };\n    int d = test([&a, b, &f2]() { return f2(a,b); });\n\n    printf(\"c=%d, d=%d\n\", c, d);\n    return 0;\n}\n</code></pre>\nThen compile with least optimization, and debug symbols:\n<pre><code>g++ -O0 -g yourfile.cpp\n</code></pre>\nAnd view the resulting binary in <pre><code>ida</code></pre>.\n",
            "votes": "3",
            "user": "Willem Hengeveld",
            "time": "Sep 26, 2017 at 19:23",
            "is_accepted": true,
            "comments": []
        }
    ]
}