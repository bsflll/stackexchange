{
    "title": "Ghidra wrong function arguments and returns",
    "link": "https://reverseengineering.stackexchange.com/questions/26577/ghidra-wrong-function-arguments-and-returns",
    "content": "I'm a newbie here but I'm stuck with this problem.\nI'm trying to decompile a function that in turns call another function (named      charTranslateToHex).\nThis is the charTranslateToHex assembly code\n<pre><code>                     *************************************************************\n                     *                           FUNCTION                          \n                     *************************************************************\n                     undefined  __stdcall  charTranslateToHex (uint  param_1 , ui\n     undefined         r0:1           <RETURN>\n     uint              r0:4           param_1\n     uint              r1:4           param_2\n     undefined4        r2:4           param_3\n     undefined2        Stack[-0xc]:2  local_c                                 XREF[2]:     000c1284 (W) , \n                                                                                           000c128c (W)   \n                     charTranslateToHex                              XREF[3]:     Entry Point (*) , \n                                                                                  charTranslateToHex:0002a230 (T) , \n                                                                                  charTranslateToHex:0002a238 (c) , \n                                                                                  000f389c (*)   \n000c1278 07  40  2d  e9    stmdb      sp!,{param_1  param_2  param_3  lr}\n000c127c 00  10  a0  e3    mov        param_2 ,#0x0\n000c1280 08  30  8d  e2    add        r3,sp,#0x8\n000c1284 b4  10  cd  e1    strh       param_2 ,[sp,#local_c ]\n000c1288 10  20  a0  e3    mov        param_3 ,#0x10\n000c128c 04  00  63  e5    strb       param_1 ,[r3,#local_c ]!\n000c1290 03  00  a0  e1    cpy        param_1 ,r3\n000c1294 25  a6  fd  eb    bl         strtoul                                          ulong strtoul(char * __nptr, cha\n000c1298 0e  80  bd  e8    ldmia      sp!,{param_2  param_3  r3 pc}\n</code></pre>\nand this is how Ghidra decompile it:\n<pre><code>void charTranslateToHex(uint param_1,uint param_2,undefined4 param_3)\n\n{\n  uint local_c;\n  undefined4 uStack8;\n  \n  local_c = param_2 & 0xffff0000;\n  local_c = local_c | param_1 & 0xff;\n  uStack8 = param_3;\n  strtoul((char *)&local_c,(char **)0x0,0x10);\n  return;\n}\n</code></pre>\nNow back to the main function:\n<pre><code>......\n                             LAB_000c1410                                    XREF[1]:     000c13c4 (j)   \n        000c1410 00  00  6a  e0    rsb        param_1 ,r10 ,param_1\n        000c1414 48  10  8d  e2    add        param_2 ,sp,#0x48\n        000c1418 00  30  81  e0    add        param_4 ,param_2 ,param_1\n        000c141c 08  00  8d  e5    str        param_1 ,[sp,#local_60 ]\n        000c1420 1d  00  53  e5    ldrb       param_1 ,[r3,#local_3d ]\n        000c1424 04  90  a0  e1    cpy        r9,r4\n        000c1428 80  a3  fd  eb    bl         charTranslateToHex                               undefined charTranslateToHex(uin\n        000c142c 24  31  9f  e5    ldr        param_4 ,[DAT_000c1558 ]                          = 0001529Dh\n        000c1430 00  60  a0  e3    mov        r6,#0x0\n        000c1434 10  00  8d  e5    str        param_1 ,[sp,#local_58 ]\n        000c1438 03  30  8f  e0    add        param_4 ,pc,param_4\n        000c143c 14  30  8d  e5    str        param_4 =>DAT_000d66dd ,[sp,#local_54 ]            = 25h    %\n......\n</code></pre>\nand this is the decompiled version:\n<pre><code>iVar3 = sVar5 - uVar8;\nuVar12 = charTranslateToHex((uint)local_3d[iVar3],(uint)&stack0xffffffe0,uVar10);\nuVar9 = (uint)uVar12;\nuVar11 = 0;\n__s = param_4;\n</code></pre>\nI'm not understanding why the charTranslateToHex requires three parameters and why it returns void despite the main function using it's return value.\nCan you help me please?\n",
    "votes": "1",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ghidra"
    ],
    "user": "Suxsem",
    "time": "Dec 18, 2020 at 12:53",
    "comments": [
        {
            "user": "multithr3at3d",
            "text": "Decompilation is not an exact science. Sometimes, you must manually assist with the process.\n",
            "time": null
        },
        {
            "user": "Suxsem",
            "text": "Hi @multithr3at3d thank you for your comment. I attached the code, can you help me understand how to assist the decompiler in this case?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Theory\nThe first important thing to understand is that the decompiler always decompiles only a single function at once and that the results of this analysis are not propagated by default. So the decompiler will happily analyse a function like <pre><code>charTranslateToHex</code></pre> and come to the conclusion that it uses 3 parameters and returns none, but decompile a function that calls <pre><code>charTranslateToHex</code></pre>, e.g. <pre><code>main</code></pre> and conclude that based on only the code in <pre><code>main</code></pre> that <pre><code>charTranslateToHex</code></pre> takes 3 argument and returns something. The important step now is deciding which interpretation to trust and \"commiting\" to it.\nCommit Parameter ID\nThis can be done manually via <pre><code>Commit Parameter ID</code></pre> in the context menu of the decompiler listing, or by using the analysis pass that does this for all functions.\nWhat changes after commiting?\nNow the decompiler will assume that <pre><code>charTranslateToHex</code></pre> has the function signature you commited, e.g. <pre><code>void charTranslateToHex(uint param_1,uint param_2,undefined4 param_3)</code></pre> instead of trying to infer it from the context in <pre><code>main</code></pre>. But in this case this would actually be wrong and lead to worse results!\nWhy is it wrong?\nBecause the decompiler doesn't know that call to <pre><code>strtoul</code></pre> inside <pre><code>charTranslateToHex</code></pre> actually returns something, that will then be automatically returned as the result of <pre><code>charTranslateToHex</code></pre>. This is the same problem as your question, now just with <pre><code>charTranslateToHex</code></pre> as the caller, and <pre><code>strtoul</code></pre> as the callee, instead of <pre><code>main</code></pre> as the caller and <pre><code>charTranslateToHex</code></pre>. There is no function signature available for <pre><code>strtoul</code></pre>, so it is unknown if it returns something.\nYou can either manually apply the correct signature <pre><code>unsigned long int strtoul (const char* str, char** endptr, int base);</code></pre> or look for the appropriate Ghidra Data Type Archive that includes this library function. Then the decompiler will correctly infer that <pre><code>charTranslateToHex</code></pre> returns something and change the signature of <pre><code>charTranslateToHex</code></pre>.\n",
            "votes": "3",
            "user": "Florian Magin",
            "time": "Dec 18, 2020 at 14:26",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Suxsem",
                    "text": "<span class=\"comment-copy\">wow this was gold! Just one point remaining: it seems that this function is trying to return more then one value (I think it has to do with the ldmia instruction). Just out of curiosity, how could a C program have been compiled to this instruction? Maybe this code was processed by some sort of code obfuscator?</span>",
                    "time": null
                },
                {
                    "user": "Suxsem",
                    "text": "<span class=\"comment-copy\">umh, actually the strtoul signature was correct (ulong strtoul (char * __nptr, char * * __endptr, int __base)). I still think it's something related to the ldmia instruction</span>",
                    "time": null
                },
                {
                    "user": "Florian Magin",
                    "text": "<span class=\"comment-copy\">is the <code>ldmia</code> really the last instruction of the function? The code doesn't look like it is obfuscated on purpose, probably just some optimization that Ghidra doesn't handle properly by default</span>",
                    "time": null
                },
                {
                    "user": "Suxsem",
                    "text": "<span class=\"comment-copy\">yes, it's really the last instruction...</span>",
                    "time": null
                }
            ]
        }
    ]
}