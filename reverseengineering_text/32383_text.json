{
    "title": "Objective-C stub functions on AARCH64",
    "link": "https://reverseengineering.stackexchange.com/questions/32383/objective-c-stub-functions-on-aarch64",
    "content": "I'm analyzing some functions I see in Machos binaries and I see that whenever there's <pre><code>bl</code></pre> instruction to an objective-c stub function that resides in the <pre><code>__objc_stubs</code></pre> section and in that function there's eventually a call with <pre><code>br</code></pre> instruction to the <pre><code>_objc_msgSend</code></pre> symbol that resides in the <pre><code>_got</code></pre> section that will eventually get resolved when the <pre><code>libobjc.dylib</code></pre> will get loaded by the <pre><code>dyld</code></pre>, for example:\n<pre><code>adrp x1, 0x24e000\nldr x1, [x1, #0x670] => some selector pointer\nadrp x16, 0x1fc000\nldr x16, [x16, #0xd48] => _objc_msgSend stub location\nbr x16\n</code></pre>\nNow I wonder why there isnt any <pre><code>ret</code></pre> instruction at the end of these stubs to return to the code flow of the original function that called this stub? Will the <pre><code>ret</code></pre> instruction just be present in the <pre><code>_objc_msgSend</code></pre> from <pre><code>libobjc.dylib</code></pre> and it will eventually call it by itself?\n",
    "votes": "1",
    "answers": 1,
    "views": "75",
    "tags": [
        "arm",
        "mach-o",
        "arm64"
    ],
    "user": "Jorayen",
    "time": "Oct 11, 2023 at 19:17",
    "comments": [],
    "answers_data": [
        {
            "content": "This is an example of optimizing a tail call - a call to another function which is done as the last statement of the current function. Because the LR (link register) has not been modified, the ret/blr of the destination function will directly return to the caller of the stub.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Oct 28, 2023 at 13:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jorayen",
                    "text": "<span class=\"comment-copy\">Can I ask what is a way to detect tail call compared to just a branch in a function? Is the presence of unconditional branch without any other flow paths in the function indicated a tail call 100%? Or are there edge cases where it's not true somehow? Maybe it can be identified by counting references to the branch target from other already identified functions and if it's more than 1 then we can conclude the branch target is a new function rather than just a label in some function?</span>",
                    "time": null
                }
            ]
        }
    ]
}