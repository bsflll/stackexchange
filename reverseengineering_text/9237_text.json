{
    "title": "Debug binary with GDB & disassembly: File format not recognized (elf headers corrupted)",
    "link": "https://reverseengineering.stackexchange.com/questions/9237/debug-binary-with-gdb-disassembly-file-format-not-recognized-elf-headers-cor",
    "content": "I'm trying to reverse engineer a binary file using GDB and objdump. I can execute the binary in my linux shell, however the file seems to be changed in a way that it can't be debugged / reverse engineered.\nThe <pre><code>file</code></pre> utility shows the following information:\n<pre><code>mybinary: ERROR: ELF 64-bit LSB executable, x86-64, invalid version (SYSV), dynamically linked (uses shared libs)error reading (Invalid argument)\n</code></pre>\nI get the follwing error in GDB:    \n<pre><code>gdb ./mybinary\nmybinary: not in executable format: File format not recognized\n</code></pre>\nand a similar error from objdump:\n<pre><code>objdump -S -l -C -F -t -w ./mybinary\nobjdump: ./mybinary: File format not recognized\n</code></pre>\nreadelf shows this at the end of the output:\n<pre><code>readelf -h ./mybinary\nreadelf: Error: Unable to seek to 0xffffff60e9000000 for string table\nreadelf: Error: Section 8 has invalid sh_entsize 6c2f343662696c2f (expected 18)\nreadelf: Error: Section 23 has invalid sh_entsize 0 (expected 10)\nreadelf: Error: no .dynamic section in the dynamic segment\n</code></pre>\nWhat can I do to debug / reverse engineer this binary?\nEdit: gdb and objdump show these error messages, because the elf header of the binary was corrupted on purpose. Still don't know how to fix elf headers or debug this file.\n",
    "votes": "3",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly",
        "gdb"
    ],
    "user": "lunfdxar",
    "time": "Jun 29, 2015 at 13:53",
    "comments": [
        {
            "user": "Jongware",
            "text": "Inspect the file with a hex editor. Is it actually a binary, or maybe something else, such as a bash script with the Executable flag set? The <pre><code>sh_entsize</code></pre> number actually contains a fragment of text: <pre><code>/lib64/l</code></pre> â€“ but not enough to decide what the entire file is.\n",
            "time": null
        },
        {
            "user": "lunfdxar",
            "text": "The binary is a C program compiled with GCC. It has probably been altered after compilation.\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "Are you free to post the binary on a public server for others to take a look at it?\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "...yeahh ... can't you find another server that does not require login/registering? Wherever I click I get a popup for media player 'updates'/online casino's/etc. The button \"DATEI HERUNTERLADEN\" doesn't really do what it is supposed to do.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I was not able to run the crackme here, but I did run \"strings\" on it:\n<pre><code>$ strings crackme\n/lib64/ld-linux-x86-64.so.2\nlibc.so.6\nsrand\nputs\ntime\nclock\nstdin\ncalloc\nmalloc\nsystem\ngetline\nstrcmp\n__libc_start_main\n__gmon_start__\nGLIBC_2.2.5\n%z   \n%r   \n%j   \nAWAVAUE1\nATE1\n[]A\\A]A^A_\nt7\"Hc\n[]A\\A]A^A_\n$&463847345GeF387\npkill -f gdb > /dev/null 2>&1\npkill -f ddt > /dev/null 2>&1\npkill -f ddd > /dev/null 2>&1\nAxj54?_\nPassword check failed!\nCongratulations, password check successful!\n;*3$\"\nGCC: (Ubuntu 4.8.2-19ubuntu1) 4.8.2\n.shstrtab\n.interp\n.note.ABI-tag\n.note.gnu.build-id\n.gnu.hash\n.dynsym\n.dynstr\n.gnu.version\n.gnu.version_r\n.rela.dyn\n.rela.plt\n.init\n.text\n.fini\n.rodata\n.eh_frame_hdr\n.eh_frame\n.init_array\n.fini_array\n.jcr\n.dynamic\n.got\n.got.plt\n.data\n.bss\n.comment\n</code></pre>\nAnd I have a couple of suggestions:\n\nJust above to the \"Password check failed!\" and \"Congratulations, password check successful!\" messages, you will find a \"Axj54?_\" string.  You should try it as a solution to the crackme.\nAs there is a reference to \"strcmp\" you can try the LD_PRELOAD trick to replace strcmp() for your own function.  Here is an example code which will print the strings being compared and will also force them to be equal:\n\nSave this file as \"mystrcmp.c\":\n<pre><code>#include <stdio.h>\nint strcmp ( const char * str1, const char * str2 ) {\n    printf(\"strcmp intercepted: str1=%s, str2=%s\n\", str1, str2);\n    return 0;\n}\n</code></pre>\nCompile it as:\n<pre><code>$ gcc -shared -ldl mystrcmp.c -o mystrcmp.so\n</code></pre>\nAnd run the crackme as:\n<pre><code>$ LD_PRELOAD=./mystrcmp.so ./crackme\n</code></pre>\nIt should accept any answer as valid but it should also show you the real answer in one of the intercepted parameters.\n",
            "votes": "2",
            "user": "Maurice",
            "time": "Jun 29, 2015 at 6:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">I would be surprised if the crackme is sophisticated enough to alter the executable, and kill debuggers (see the pkill strings), but dumb enough to store the password as a plain string. But the <code>LD_PRELOAD</code> is a good idea to try. Upvoted.</span>",
                    "time": null
                },
                {
                    "user": "lunfdxar",
                    "text": "<span class=\"comment-copy\">Thanks for the suggestion.  The strcmp compares the user input with \"Axj54?_\", if the input has a length &gt;= 7. That is not the correct password though, the strcmp and the hard coded string are probably just for confusion.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Could be that your GNU Debugger (<pre><code>gdb</code></pre>) doesn't support x86_64 architecture.\nSo try under x86_64 version of it or try LLDB Debugger (<pre><code>lldb</code></pre>) which aims to replace it. It's possible that it could better handle the headers.\nSee: gdb to lldb command map page for more info.\n",
            "votes": "0",
            "user": "kenorb",
            "time": "Aug 5, 2015 at 10:33",
            "is_accepted": false,
            "comments": []
        }
    ]
}