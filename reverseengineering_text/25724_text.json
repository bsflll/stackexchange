{
    "title": "Ghidra is mishandling a field access",
    "link": "https://reverseengineering.stackexchange.com/questions/25724/ghidra-is-mishandling-a-field-access",
    "content": "I have a program which decompiles in Ghidra to include the line\n<pre><code>temp_5f2f2f81bc = *(CPedIntelligence **)(&DAT_000010c0 + (longlong)pCVar2);\n</code></pre>\n<pre><code>temp_5f2f2f81bc</code></pre> is a <pre><code>CPedIntelligence*</code></pre>. <pre><code>pCVar2</code></pre> is a <pre><code>CPed*</code></pre>, and <pre><code>CPed</code></pre> has a <pre><code>CPedIntelligence*</code></pre> located at offset <pre><code>0x10c0</code></pre>. So this should decompile as <pre><code>temp_5f2f2f81bc = pCVar2->intelligence;</code></pre>. Is there a way to tell Ghidra \"no, <pre><code>pCVar2</code></pre> should not be cast to longlong?\"\nI've noticed this occurring other times as well, and it generally seems to be associated with a structure stored in a register (here, <pre><code>pCVar2</code></pre> is stored in <pre><code>R13</code></pre>). In the function's local variables, though, <pre><code>pCVar2</code></pre> is listed as being stored in <pre><code>HASH:5f32eb8...</code></pre> The register is never used in the function except as the storage for this <pre><code>CPed*</code></pre>, so if I could forcibly tell the decompiler \"this register has this type throughout the entire function\" then that'd help. I tried using scripting to create a local variable stored in <pre><code>R13</code></pre>, but the decompiler didn't pick up on it.\n",
    "votes": "2",
    "answers": 0,
    "views": "244",
    "tags": [
        "windows",
        "decompilation",
        "ghidra"
    ],
    "user": "cpast",
    "time": "Aug 22, 2020 at 18:06",
    "comments": [],
    "answers_data": []
}