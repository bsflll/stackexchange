{
    "title": "Significance of link address 2000 8000 7C00;",
    "link": "https://reverseengineering.stackexchange.com/questions/20525/significance-of-link-address-2000-8000-7c00",
    "content": "Can you explain to me the significance of link address 2000 8000 7C00? It's  in a MACRO from the GRUB configure script, which checks whether OBJCOPY works for absolute addresses.\nHere's the snippet of the code:\n<pre><code>AC_DEFUN([grub_PROG_OBJCOPY_ABSOLUTE],\n[AC_MSG_CHECKING([whether ${OBJCOPY} works for absolute addresses])\nAC_CACHE_VAL(grub_cv_prog_objcopy_absolute,\n[cat > conftest.c <<\\EOF\nvoid\ncmain (void)\n{\n   *((int *) 0x1000) = 2;\n}\nEOF\n\nif AC_TRY_EVAL(ac_compile) && test -s conftest.o; then :\nelse\n  AC_MSG_ERROR([${CC-cc} cannot compile C source code])\nfi\ngrub_cv_prog_objcopy_absolute=yes\nfor link_addr in 2000 8000 7C00; do\n  if AC_TRY_COMMAND([${CC-cc} ${CFLAGS} -nostdlib -Wl,-N -Wl,-Ttext -Wl,$link_addr conftest.o -o conftest.exec]); then :\n  else\n    AC_MSG_ERROR([${CC-cc} cannot link at address $link_addr])\n  fi\n  if AC_TRY_COMMAND([${OBJCOPY-objcopy} -O binary conftest.exec conftest]); then :\n  else\n    AC_MSG_ERROR([${OBJCOPY-objcopy} cannot create binary files])\n  fi\n  if test ! -f conftest.old || AC_TRY_COMMAND([cmp -s conftest.old conftest]); then\n    mv -f conftest conftest.old\n  else\n    grub_cv_prog_objcopy_absolute=no\n    break\n  fi\ndone\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "135",
    "tags": [
        "linux"
    ],
    "user": "supmethods",
    "time": "Jan 31, 2019 at 21:54",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "I can't help you with 2000 and 8000, but <pre><code>0x7C00</code></pre> is the address where the BIOS loads the Master Boot Record to. Google \"7C00 mbr\" will produce more reading and better explanations. I couldn't find anything for <pre><code>0x2000</code></pre> and <pre><code>0x8000</code></pre> right away.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Taken from gnu.org - Hacking GRUB\n\nGRUB consists of two distinct components, called stages, which are\n  loaded at different times in the boot process. Because they run\n  mutual-exclusively, sometimes a memory area overlaps with another\n  memory area. And, even in one stage, a single memory area can be used\n  for various purposes, because their usages are mutually exclusive.\n\n<pre><code>0x7C00</code></pre> Stage 1 is loaded here by BIOS or another boot loader\n<pre><code>0x2000</code></pre> The optional Stage 1.5 is loaded here / Command-line buffer for Multiboot kernels and modules\n<pre><code>0x8000</code></pre> Stage2 is loaded here\n",
            "votes": "3",
            "user": "Nordwald",
            "time": "Feb 1, 2019 at 8:06",
            "is_accepted": true,
            "comments": []
        }
    ]
}