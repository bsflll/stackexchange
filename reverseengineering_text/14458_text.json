{
    "title": "Removing randomness from program execution",
    "link": "https://reverseengineering.stackexchange.com/questions/14458/removing-randomness-from-program-execution",
    "content": "So I have a program which is highly obfuscated and generates a unique output every time. For ease of reversing I want to make it so that the output is the same for every run (following the logic that if the output is the same, the logic executed will be the same, roughly..)\nAt one point <pre><code>strace</code></pre> shows that the program does a number of calls to <pre><code>clock_gettime</code></pre> just before it generates an id. So I created a kernel module that makes <pre><code>clock_gettime</code></pre> return exactly the same time. Yet the program is still able to produce a unique output.\nIn my opinion all programs must make system calls to get unique entropy for seeding random functions and without making any system calls (or if all system calls they did make were made to return non-unique entropy) the program can't produce unique (random) data.\nAre there any ways I'm missing that the program can get unique entropy without showing up on <pre><code>strace</code></pre> (i.e. without making a system call)?\n",
    "votes": "1",
    "answers": 1,
    "views": "131",
    "tags": [
        "system-call",
        "entropy"
    ],
    "user": "scruffy",
    "time": "Jan 20, 2017 at 8:36",
    "comments": [
        {
            "user": "sherlock",
            "text": "Can you please upload the program?\n",
            "time": null
        },
        {
            "user": "scruffy",
            "text": "Unfortunately that's not possible in this case. Though I'm looking for a technique I can apply to any program anyway.\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "Does it read from something like /dev/rand ?\n",
            "time": null
        },
        {
            "user": "scruffy",
            "text": "<pre><code>rt_sigaction</code></pre> is the only other syscall called before generating the id. No file opens.\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "In addition if it is Intel processor reseed and rdrand instructions may be used, it does not require system call.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Generally speaking, yes, there are a lot of ways to generate entropy without system calls (this can be weak entropy, but anyway).\nHere is a small (but obviously not even close to pretend to be full) list:\n\nrdrand, rdseed instructions from intel random generator(btw, supported by AMD since 2015).\nrdtsc instruction - which gives you a tick count since power up\nuninitialized memory\ninternal program addresses generated as a result of ASLR\n",
            "votes": "2",
            "user": "w s",
            "time": "Jan 20, 2017 at 10:43",
            "is_accepted": true,
            "comments": []
        }
    ]
}