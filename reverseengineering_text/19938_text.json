{
    "title": "How to disassemble a packed .NET executable?",
    "link": "https://reverseengineering.stackexchange.com/questions/19938/how-to-disassemble-a-packed-net-executable",
    "content": "I'm trying to reverse a Windows executable that shows as having been packed with <pre><code>ENIGMA(5.X)</code></pre>:\n\nIf I later check the class name for one of its UI elements, when the process is unpacked and running, it shows as a .NET class <pre><code>WindowsForms10.BUTTON.app.0.378734a</code></pre>:\n\nBut if I then attach to that process with dnSpy, I can pause that .NET executable somewhere in <pre><code>System.Windows.Forms.dll</code></pre> in <pre><code>Application</code></pre> - <pre><code>UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop()</code></pre> function but there seems to be no info on the .NET assemblies from the target process itself:\n\nMy goal was to see the .NET code after the <pre><code>Start</code></pre> button click in that app. Any idea how should I proceed?\n",
    "votes": "4",
    "answers": 2,
    "views": "8k",
    "tags": [
        "disassembly",
        ".net",
        "packers"
    ],
    "user": "c00000fd",
    "time": "Nov 21, 2018 at 8:58",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "Can you add the real packed binary?\n",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "@Biswapriyo: I'm not sure what the policy is for posting this link here. (Moderator: I'll remove it if it's not allowed.) Here's it is, direct link to a 7-Zip file. The author put a password on it: kahusecurity -- A word of caution: once you unzip it, it will be reported as malware by your AV.\n",
            "time": null
        },
        {
            "user": "Uprooted",
            "text": "Sorry for offtop, what is the first program you use, the one that told you about ENIGMA(5.X)?\n",
            "time": null
        },
        {
            "user": "c00000fd",
            "text": "@Uprooted: Detect It Easy\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "OK, I think I got it. The tool I needed was <pre><code>MegaDumper</code></pre>. (I couldn't find the executable on its Github, so I had to build it myself.)\nThen here's the steps how I used it:\n\n(I'm obviously doing all this in a VM.) Start up packed executable and let it unpack itself. (In my case it was a GUI app so it continued running.)\nStart up MegaDumper and locate the .NET process in the list (at this point it is already unpacked in memory).\nRight-click it and pick <pre><code>.NET dump</code></pre>, wait for a little bit and it will create a folder in the same location with the dumped .NET files.\n\nThen simply open the .exe from the dumped folder in <pre><code>dnSpy</code></pre> and it will be able to disassemble it as normal, so you can place breakpoints and debug it:\n\n\n\nLastly, just want to say that, from a quick glance, the packed .NET executable in question does not appear to be malicious. The reports by multiple AVs were probably caused by the use of the Russian packer. So, this might be a clue to developers who decide to pack their legitimate software. (Just saying...)\n",
            "votes": "5",
            "user": "c00000fd",
            "time": "Mar 23, 2019 at 23:41",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "After you press 'Pause' you will end you in the message loop - that's ok. Go to the call-stack window and you should see your binary in on of the previous frames. Double click on one of them and dnSpy should load it and analyse. \nBut since the binary is packed (and probably obfuscated) I think you need to first unpack it and run this version in order to correctly map instructions to lines.\n",
            "votes": "1",
            "user": "Paweł Łukasik",
            "time": "Nov 21, 2018 at 20:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Yeah, the callstack has the reference to some location in the Main() function from the target .NET process but clicking it in dnSpy does nothing. TBH, I've never unpacked a .NET executable. What's the process for that? Is it just a manual process by dumping memory in the native debugger first.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">try <a href=\"https://github.com/0xd4d/de4dot\" rel=\"nofollow noreferrer\">de4dot</a></span>",
                    "time": null
                },
                {
                    "user": "c00000fd",
                    "text": "<span class=\"comment-copy\">Can de4dot access files from memory though? I'm getting <code>The file isn't a .NET PE file</code> if I just run the original exe thru it.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">No, not really. It looks like the original exe is not a .net assembly and only after unpacking it becomes one.</span>",
                    "time": null
                }
            ]
        }
    ]
}