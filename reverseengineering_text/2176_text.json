{
    "title": "How to find arrays of objects (entities, enemies) in a game I'm reversing with Cheat Engine?",
    "link": "https://reverseengineering.stackexchange.com/questions/2176/how-to-find-arrays-of-objects-entities-enemies-in-a-game-im-reversing-with-c",
    "content": "I am reversing a game using Cheat Engine and OllyDBG, through this memory addresses within an FPS game  are read and monitored, these addresses will contain the coordinates(xyz) of enemies.\nMy Objective is to find an address or a pattern that will allow me to loop through up to 32 enemies in order to read all their coordinates, in order to do this I have been attempting to find a pattern between each of their addresses with no luck. I have been able to collect 3 different enemy addresses, this information is useful but searching through 32 addresses is a task which requires more effort than I believe is necessary.\nAs stated I have access to the first 3 enemy addresses and if from that information it is possible to trace back to the base either through Cheat Engine or other reverse engineering software the process would be appreciated.\nUltimately my question is, is there a way to detect a pointer array in memory from one of its addresses, for example if if I have 3 enemy coordinates can I somehow trace the memory location back to an address that accesses all 32 enemy addresses whether it is by using cheat engine or another reversing tool.\n",
    "votes": "12",
    "answers": 2,
    "views": "17k",
    "tags": [
        "disassembly",
        "ollydbg",
        "debugging",
        "debuggers",
        "struct"
    ],
    "user": "Daniel Filipe",
    "time": "Oct 30, 2016 at 6:12",
    "comments": [
        {
            "user": "NirIzr",
            "text": "Can you specify what you already know about the structures? Simple coordinate arrays? Complex datatypes? Do you know the language used?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "(OP didn't specify if he knows how structures are laid out. Looks like he assumes they aren't complex. I'll answer a more general question to avoid locality issues by assuming the structures are somewhat complex)\nFew ways to find the other structures come to mind:\nScanning memory for signatures\nOnce you have a few examples of the structures, maybe the easiest way to find the other structure instances is to find matching constants in all three structures. Some values may be constant, represent properties that apply to all the enemy entities in a more high-level class inherited.\nPros:\n\nThis is easy to implement, can be done this Cheat Engine.\nin the general case it should survive program restarts, you won't need to find the three structures every time you run the game.\n\nCons:\n\nnot so robust. stuff might change between versions, data you think is constant may actually change in some cases you haven't looked at. \n\nPointer searching\nThere might be a pointer to each entity somewhere. you can just as easily search the memory for the addresses of the structures you found, and detect the array/structure that holds all of the entities. you could also walk trough arrays you find in the structures themselves, you might be looking at a linked list.\nPros:\n\neasy to implement.\nwill be a bit more robust than the previous method.\n\nCons:\n\nyou will still need to somehow find the first entities.\n\nFinding the Constructor/constructor-like function\nEither Object Oriented language like C++ or ObjC, or a procedural language like C, there must be a function that initiates the structure. usually it's easy to find - the first function called after the object is allocated, pretty distinctive assembly - mostly initialization code.\nIf we're talking about OO code, finding the virtual function table or a similar construct will let you easily find the construction functions, walk trough inheritance and find at least a portion of the manipulating functions.\nAfter you get the Constructors you can easily get all the allocations, and see where pointers are being kept.\nPros:\n\nquite robust\nbetter understanding of how entities are saved in memory.\n\nCons:\n\nStatic RE. usually harder to do (Get a good dis-assembler)\n\nReversing the structure\nThis one requires a bit more reversing work, but will let you find the best ways to search for the entities. Using Cheat Engine and IDA, manually map the structure, the elements/members, the functions that manipulate the structure.\nIf there're any pointers involved, follow them and reverse other structures you encounter.\nPros:\n\nRobust\nThe right way to do what you want. Really understand what's going on. facilitate future abilities/features.\n\nCons:\n\nmore work, and harder to do. A lot of RE.\n\nNote\nfor at-least some of the methods I mentioned finding the pointers to all entities while analyzing the program might only be the first step. You can search for references to the list itself and get a better way to automatically find the entities on each program restart. This eliminates some of the Cons.\n",
            "votes": "19",
            "user": "NirIzr",
            "time": "Sep 12, 2016 at 23:02",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "First Find the address you are looking for. Then cycle this:\n\nFind the base (the beginning of the record).\nDissect the memory around this to recognize array or linked list.\nSearch the memory for pointer to that base.\n\nExample:\nScan for parameter finding the address <pre><code>30000032</code></pre>.\nFind out the base of this record is <pre><code>30000000</code></pre>.\nChecking memory - nothing fancy around.\nFinding pointer to the base at <pre><code>20000004</code></pre>.\nFind out the base of the record is <pre><code>20000000</code></pre>.\nChecking memory - still nothing...\nFinding pointer to the base at <pre><code>10000008</code></pre>.\nFinding out the base is <pre><code>10000000</code></pre>.\nChecking memory - all pointers to objects I am looking for are 12 bytes away from each other. (Obviously this is some sort of collection.)\nLast memory scan for pointer to make sure I am not wrong at <pre><code>0000040</code></pre>.\nFind pointer to that collection, and right after it: count of the objects in the collection.\nRestart the game/computer few times to find a consistent pointer to that address.\nReward myself with a beer for the good work.\nHow to find the base: I like to use the \"pointer scan\", and check the last offset. The smallest from the most commonly found, is usually the correct one.\nSometimes, I am trying to find a record, at the beginning of allocated memory, and in this case I am sure something is base.\nAnother trick is to find two one after another in memory, determine their \"max size\", and this means the base must be no further than this number back in the memory.\nHow to recognize collections: Most of them are EXTREMELY organized, with specific offset, or have pointers to same type of objects.\nLike if you have:\n<pre><code>Pointer to Player 1 data,\n4 Bytes\n4 Bytes\nPointer to Player 2 data,\n4 Bytes\n4 Bytes\nPointer to Player 3 data\n</code></pre>\nIt should ring a bell.\nKeep in mind that such alignment may randomly happen in the source, so try to search for: Player 3 data, Player 3 data +/- 4, Player 3 data +/- 8. \nAnyway, if you find something like this, you are most likely really close.\nThis works for me, hope it works for you guys too.\n",
            "votes": "3",
            "user": "dsasmblr",
            "time": "Sep 10, 2018 at 13:30",
            "is_accepted": false,
            "comments": []
        }
    ]
}