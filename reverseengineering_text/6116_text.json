{
    "title": "Why ELF headers are included in the process memory",
    "link": "https://reverseengineering.stackexchange.com/questions/6116/why-elf-headers-are-included-in-the-process-memory",
    "content": "The running process has nothing to do with the program headers but when we print the address(<pre><code>0x08048000</code></pre>) we can see the ELF header starting with <pre><code>\"\\x7fELF..\"</code></pre>. It looks like so much of page memory is wasted. Why program headers are stored along with the text, data segments in process memory? \n<pre><code>#include <stdio.h>\n\nint main() {\n  write(1, (void*)0x8048000,100);\n  return 0;\n}\n</code></pre>\nOutput (x86)\n<pre><code>ELF 4L4         (44  TTT\n</code></pre>\n",
    "votes": "0",
    "answers": 1,
    "views": "3k",
    "tags": [
        "x86",
        "c",
        "memory",
        "elf"
    ],
    "user": "Adarsh Dinesh",
    "time": "Aug 23, 2014 at 11:58",
    "comments": [
        {
            "user": "JamalS",
            "text": "My guess: For an operating system to load an executable it must know certain information abou it such as the arrangement of data and instructions to, for example, know how to properly set write/read/exec permissions and also to know how to set the EIP so on. So why should the OS keep it anywhere in RAM but right next to the executable? As I said, that's my guess. If you asked, why not chuck the header later, my guess would be because the information may be needed again.\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "As long as we are guessing, then also \"because memory is cheaper than paying programmers to avoid using it\".\n",
            "time": null
        },
        {
            "user": "user45891",
            "text": "The headers of the shared libraries need to stay at least until the primary executable is fully loaded - so one can't just free them as soon as that lib is done initalizing but needs to keep track of that. More importantly the information in the header is useful for debugging (Maybe I want to look up something about a section and for that I need e_shoff & e_shnum).\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "@user45891: an interesting point, that last one. To do something like that, you need a solid guarantee that headers remain in memory. Would it then be mentioned in the OS' executable loader specifications? (Which, incidentally, the OP did not mention. Is \"ELF\" per definition 'Linux et cousins'?)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "ELF headers are included in the process memory because the program asked for them.\nThe ELF file contains a number of \"program headers\" which specify how the program is to be loaded. The ELF loader on your computer (typically in the kernel or dynamic linker) will load the program into memory as specified by the program headers (with allowances for extra pieces due to page size limitations).\nTherefore, if the program headers include the start of the executable file in any LOAD command, then the ELF header will be loaded into memory. It is definitely possible to create functional ELF files that don't load the ELF headers into the program memory; the ELF loader will usually load the headers into a temporary (scratch) area in order to figure out how to load the program.\nSample program headers from an Android executable (using <pre><code>readelf</code></pre>):\n<pre><code>Program Headers:\n  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\n  PHDR           0x000034 0x00008034 0x00008034 0x00100 0x00100 R   0x4\n  INTERP         0x000134 0x00008134 0x00008134 0x00013 0x00013 R   0x1\n      [Requesting program interpreter: /system/bin/linker]\n  LOAD           0x000000 0x00008000 0x00008000 0x00320 0x00320 R E 0x1000\n  LOAD           0x000ee8 0x00009ee8 0x00009ee8 0x00118 0x0011c RW  0x1000\n  DYNAMIC        0x000f08 0x00009f08 0x00009f08 0x000d0 0x000d0 RW  0x4\n  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0\n  EXIDX          0x000318 0x00008318 0x00008318 0x00008 0x00008 R   0x4\n  GNU_RELRO      0x000ee8 0x00009ee8 0x00009ee8 0x00118 0x00118 RW  0x4\n</code></pre>\nThe first LOAD command starts at an offset of 0x0 from the start of the file and extends for 0x320 bytes, so it will include the ELF headers at address 0x8000 (assuming the executable isn't relocated due to ASLR).\n",
            "votes": "2",
            "user": "nneonneo",
            "time": "Sep 7, 2014 at 21:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}