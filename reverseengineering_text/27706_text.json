{
    "title": "Identifying/debugging code parts responsible for features in Windows",
    "link": "https://reverseengineering.stackexchange.com/questions/27706/identifying-debugging-code-parts-responsible-for-features-in-windows",
    "content": "New to the area, i am trying to identify the code responsible for example for the search functionality in Windows when you start typing in the start menu.\nWhat are some generic ways of identifying the file/code where that functionality is implemented?\nSome ideas i had are:\n\nCheck out procmon to identify whether your action is causing any events and identify the process, then one can go from there using potentially the corresponding symbols to find the appropriate functions.\n\nOnce we have the appropriate functions, see if possible to set a hardware breakpoint in kernel debugging in the address where the associate code is mapped. (easy when the code resides in kernel space, for userspace functionalities we may be lucky in case of system libraries mapped in the same virtual address for all processes)\n\n\nNot sure whether the above is the most optimal/effective methodology, any other ideas are welcome\n",
    "votes": "1",
    "answers": 1,
    "views": "75",
    "tags": [
        "windows"
    ],
    "user": "tturbox",
    "time": "May 22, 2021 at 21:01",
    "comments": [],
    "answers_data": [
        {
            "content": "procmon can help in locating an entry point or a point of ingress\nstart procmon\nremove all filters\nenable capturing\ntry typing something like \"turbox the t\" in the start menu\nstop capturing\ngo to tools->file summary->extension tab and expand the wildcard (*) entry\nyou may notice this file has been searched on the PATH paths\nclick one entry and you may see the relevant searches over the\nwhole  time period between  capture enable and capture disable\n\nas you can see in the image above the 6 captures that pertain to search in\nc:\\windows\\system32 folder\ndouble clicking the entry will yield the searches that span 2 seconds of interval\nas below\n\nyou can then click anyone of these capture to look at the call stack\nas below\n",
            "votes": "2",
            "user": "blabb",
            "time": "May 23, 2021 at 16:00",
            "is_accepted": true,
            "comments": []
        }
    ]
}