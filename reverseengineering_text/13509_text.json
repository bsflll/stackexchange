{
    "title": "Changes on threads and threading system, in new Windows OS",
    "link": "https://reverseengineering.stackexchange.com/questions/13509/changes-on-threads-and-threading-system-in-new-windows-os",
    "content": "I looked up the source code of the functions like <pre><code>CreateProcess</code></pre> and <pre><code>CreateThreade</code></pre> from <pre><code>kernel32</code></pre>. For example, <pre><code>CreateThread@kernel32</code></pre> leads into <pre><code>kernelbase.dll</code></pre> and ends with a call to <pre><code>NtCreateThreadEx</code></pre>.\nI cannot see any calls to <pre><code>CsrClientCallServer</code></pre> in that function, There are only few checks and a call to <pre><code>RtlActivateActivationContextEx</code></pre>. I wonder if those calls are necessary for a process to function\nI looked up in the <pre><code>ntdll</code></pre> there is no function with the name <pre><code>CsrClientCallServer</code></pre>. However there are functions like <pre><code>NtConnectPort</code></pre> and so on, to use the LPC mechanism. \nI assume <pre><code>CsrClientCallServer</code></pre> was built on top of the functions like <pre><code>NtConnectPort</code></pre>, <pre><code>NtReplyPort</code></pre> with some specific parameters.\nMy question is: is it necessary to notify csrss about the created thread from user mode?\nIt is unclear to me from wininternals and other books should this be done or not, for the thread of the existing process. I tried to create the thread using old <pre><code>NtCreateThread</code></pre> on win10 and it works fine, without any notifications via LPC But will the same code work on xp for example?\n",
    "votes": "2",
    "answers": 1,
    "views": "333",
    "tags": [
        "ida",
        "winapi",
        "thread",
        "process"
    ],
    "user": "Vlad",
    "time": "Sep 15, 2016 at 10:35",
    "comments": [],
    "answers_data": [
        {
            "content": "No. It is not necessary to create a connection with the <pre><code>CSRSS</code></pre> service in order for a process to function. The <pre><code>CSRSS</code></pre> server provides a few functionalities that are not needed for most processes, and therefore can be ignored unless it is requried in that specific process for any reason.\nSince NT4, the main functionalities of <pre><code>CSRSS</code></pre> remained mostly the Windows Console GUI and other GUI related services Windows provides to GUI applications. If your process does not require those services it can silently ignore the existance of <pre><code>CSRSS</code></pre>.\nAlthough I'm aware of it independently, this is also stated in wikipedia:\n\nClient/Server Runtime Subsystem, or csrss.exe, is a component of the Windows NT family of operating systems that provides the user mode side of the Win32 subsystem and is included in Windows NT 4 and later. Because most of the Win32 subsystem operations have been moved to kernel mode drivers in Windows NT 4 and later, CSRSS is mainly responsible for Win32 console handling and GUI shutdown.\n\nAdditonally, there's a decent (see page 38) amount of documentation about CSRSS online.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Sep 15, 2016 at 11:01",
            "is_accepted": true,
            "comments": []
        }
    ]
}