{
    "title": "How are processes assigned a virtual base address",
    "link": "https://reverseengineering.stackexchange.com/questions/25755/how-are-processes-assigned-a-virtual-base-address",
    "content": "So I'm trying to understand how a process is assigned a base address once its loaded into memory. If I understand correctly each process has its own virtual address space, and each virtual address is mapped to physical memory locations by the mmu and each process believes they have the virtual range 0x00000000 through 0x7FFFFFFF for themselves in the x86 architechture.\nLets say I have program 1 .exe that is loaded at the virtual address 0x121000\n\nand lets say I have another program called program 2.exe that is loaded in the virtual address 0xF71000\n\nIf both programs have their own virtual address space why aren't they loaded at the same virtual address by default? and is it possible for the programs to load at a different virtual address if they are executed again or will program 1.exe always be loaded at address 0x121000 every time its executed?\n",
    "votes": "0",
    "answers": 1,
    "views": "621",
    "tags": [
        "windows",
        "virtual-memory"
    ],
    "user": "Nice",
    "time": "Aug 27, 2020 at 1:57",
    "comments": [],
    "answers_data": [
        {
            "content": "I believe what makes the difference is <pre><code>ASLR - Adress Space Layout Randomization</code></pre> - Read about it here - so basically it's just a layer of security protection.\nIt's indeed possible to load two different processes to the same virtual address base - the virtual address abstraction makes it possible.\nThe loading base address of a process will most likely be kept the same until your next reboot.\n",
            "votes": "1",
            "user": "macro_controller",
            "time": "Aug 27, 2020 at 7:15",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nice",
                    "text": "<span class=\"comment-copy\">So only the stack, heap, and load address are randomly selected? Does that mean that if I find a pointer in the text segment to a structure that's allocated in the heap I will be able to access that structure by calculating the offset between the base address and the pointer?</span>",
                    "time": null
                },
                {
                    "user": "macro_controller",
                    "text": "<span class=\"comment-copy\">Also, the loading address of different libraries, that have ASLR enabled will be randomized. You can find a pointer only at run-time - at the binary level, there will be nothing that accesses the heap directly (by address).</span>",
                    "time": null
                }
            ]
        }
    ]
}