{
    "title": "Data placement in memory",
    "link": "https://reverseengineering.stackexchange.com/questions/31111/data-placement-in-memory",
    "content": "I am playing with buffer overflow attacks in C. I have the following code:\n<pre><code>int foo(void*, void*);        // Calculates the distance (in bytes) between two addresses in memory\n\nint main(int argc, char** argv) {\n   int a = 15;\n   int b = 16;\n   int c = 90;\n\n   char buffer[4];\n   \n   /* Memory layout */\n   printf(\"[LAYOUT]\n\");\n   printf(\"foo(&a, &b) is %d\n\", foo(&a, &b));\n   printf(\"foo(&a, &c) is %d\n\", foo(&a, &c));\n   printf(\"foo(&c, &string) is %d\n\", foo(&c, &string));\n   printf(\"foo(&a, &string) is %d\n\n\", foo(&a, &string));\n\n   /* Memory content before copying into the buffer */\n   printf(\"[BEFORE]\n\");\n   printf(\"a is at %p and is %d (0x%08x)\n\", &a, a, a);\n   printf(\"b is at %p and is %d (0x%08x)\n\", &b, b, b);\n   printf(\"c is at %p and is %d (0x%08x)\n\", &c, c, c);\n   printf(\"string is at %p and is %s\n\n\", &string, string);\n\n   strcpy(buffer, \"aaaaaaaaa\");\n\n   /* Memory content after copying into the buffer */\n   printf(\"[AFTER]\n\");\n   printf(\"a is at %p and is %d (0x%08x)\n\", &a, a, a);\n   printf(\"b is at %p and is %d (0x%08x)\n\", &b, b, b);\n   printf(\"c is at %p and is %d (0x%08x)\n\", &c, c, c);\n   printf(\"string is at %p and is %s\n\", &string, string);\n\n   return EXIT_SUCCESS;\n}\n\nint foo(void* addr_1, void* addr_2) {\n   return (addr_1 - addr_2);\n}\n</code></pre>\nAfter the compilation with <pre><code>gcc main.c -o main -O0 -g -fno-stack-protector -D_FORTIFY_SOURCE=0</code></pre> flags with optimization turned off, the output is following (on my machine):\n<pre><code>[LAYOUT]\nfoo(&a, &b) is 4\nfoo(&a, &c) is 8\nfoo(&c, &string) is 4\nfoo(&a, &string) is 12\n\n[BEFORE]\na is at 0x7ffee13d5b68 and is 16 (0x00000010)\nb is at 0x7ffee13d5b64 and is 15 (0x0000000f)\nc is at 0x7ffee13d5b60 and is 90 (0x0000005a)\nstring is at 0x7ffee13d5b5c and is \n\n[AFTER]\na is at 0x7ffee13d5b68 and is 16 (0x00000010)\nb is at 0x7ffee13d5b64 and is 97 (0x00000061)\nc is at 0x7ffee13d5b60 and is 1633771873 (0x61616161)\nstring is at 0x7ffee13d5b5c and is aaaaaaaaa\n</code></pre>\nObviously, the buffer is located at the leftmost position, before integer variables. I can think of it as:\n\n\n\n\n0x5c\n0x5d\n0x5e\n0x5f\n0x60\n0x61\n0x62\n0x63\n0x64\n\n\n\n\n0x61\n0x61\n0x61\n0x61\n0x61\n0x61\n0x61\n0x61\n0x61\n\n\n\n\nIt completely overwrites <pre><code>c</code></pre>'s data (all four bytes) and the one byte of <pre><code>b</code></pre>'s data (little-endian machine).\nAfter compiling the same program with the optimization turned on, <pre><code>-O1</code></pre> for example, it produces the output:\n<pre><code>[LAYOUT]\nfoo(&a, &b) is -4\nfoo(&a, &c) is -8\nfoo(&c, &string) is 12\nfoo(&a, &string) is 4\n\n[BEFORE]\na is at 0x7ffee056db3c and is 16 (0x00000010)\nb is at 0x7ffee056db40 and is 15 (0x0000000f)\nc is at 0x7ffee056db44 and is 90 (0x0000005a)\nstring is at 0x7ffee056db38 and is \n\n[AFTER]\na is at 0x7ffee056db3c and is 1633771873 (0x61616161)\nb is at 0x7ffee056db40 and is 97 (0x00000061)\nc is at 0x7ffee056db44 and is 90 (0x0000005a)\nstring is at 0x7ffee056db38 and is aaaaaaaaa\n</code></pre>\nIt seems to me that integer variables are placed in memory in reversed order.\nThe questions are:\n\nHow does a variable declaration and/or initialization in C affect its placement in memory?\nDoes the optimization affect on variable placement in memory? If so, then how?\n\nThe working environment is <pre><code>macOS Mojave 10.14.6</code></pre>, <pre><code>Apple LLVM version 10.0.1 (clang-1001.0.46.4)</code></pre>\n",
    "votes": "3",
    "answers": 0,
    "views": "47",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "memory",
        "buffer-overflow"
    ],
    "user": "Stone Paul",
    "time": "Nov 9, 2022 at 1:42",
    "comments": [
        {
            "user": "Mega Tonnage",
            "text": "You might find that this is compiler dependent.. this is not part of the C standard.\n",
            "time": null
        }
    ],
    "answers_data": []
}