{
    "title": "What does the function do while it returns 0?",
    "link": "https://reverseengineering.stackexchange.com/questions/8770/what-does-the-function-do-while-it-returns-0",
    "content": "I wrote a simple C++ code and compiled it in VS 2013. I am trying to understand what happen after return 0.\n<pre><code>int main(){\n...\n    return 0;\n...\n}\n</code></pre>\nThe assembly code of return 0, translates to the xor eax, eax\n<pre><code>011F1B19  xor         eax,eax  \n}\n011F1B1B  pop         ebp  \n011F1B1C  ret  \n</code></pre>\nAfter ret, it jumps to 011F121A\n<pre><code>011F1203  push        dword ptr ds:[11F3034h]  \n011F1209  push        dword ptr ds:[11F3030h]  \n011F120F  push        dword ptr ds:[11F302Ch]  \n011F1215  call        main (011F1B00h)  \n011F121A  add         esp,0Ch  \n011F121D  mov         dword ptr ds:[011F3024h],eax  \n011F1222  cmp         dword ptr ds:[11F3028h],0\n011F1229  jne         __tmainCRTStartup+144h (011F1261h)\n#ifndef _CRT_APP\n                exit(mainret);\n011F122B  push        eax  \n011F122C  call        dword ptr ds:[11F2078h]  \n</code></pre>\nI have two questions:\n\nWhy does the return translates to xor eax, eax?\nWhy does the function dereference ptr in ds segments at 011F121D and 011F1222 and 011F122C?\n",
    "votes": "2",
    "answers": 2,
    "views": "1k",
    "tags": [
        "windows",
        "c++"
    ],
    "user": "drdot",
    "time": "Apr 27, 2015 at 8:31",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "Your questions were answered below. But as an aside, if you want to remove the C runtime code from your executable, you can set the entry point to your <pre><code>main</code></pre> function (assuming you're not using any functions from the C runtime in your code).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "<pre><code>xor eax, eax\n</code></pre>\nIs the fastest way to zero a register. You will see this everywhere on x86. All x86 ABIs specify that an integer return value is placed in the <pre><code>eax</code></pre> register.\n<pre><code>ds</code></pre> is the default segment for most memory accesses. Your disassembler is just being explicit.\nI'm not familiar with the specifics on Windows, but basically the C runtime stub compiled into your program will take the return value from main, and pass it to a system call to exit the process. (Returning from <pre><code>main</code></pre> is equivalent to calling <pre><code>exit</code></pre>.)\n",
            "votes": "6",
            "user": "Jonathon Reinhart",
            "time": "Apr 27, 2015 at 10:03",
            "is_accepted": false,
            "comments": [
                {
                    "user": "David Hoelzer",
                    "text": "<span class=\"comment-copy\">Incidentally, this is the proper way to exit under UNIX style environments as well.  A syscall with the return code set either on the stack or in a register.</span>",
                    "time": null
                },
                {
                    "user": "Jonathon Reinhart",
                    "text": "<span class=\"comment-copy\">@DavidHoelzer syscall arguments on x86 are always in registers.</span>",
                    "time": null
                },
                {
                    "user": "David Hoelzer",
                    "text": "<span class=\"comment-copy\">Yes, you are correct.  I had the differences between cdecl, pascal and fastcall and functions in my head, but all user mode calls for system calls on x86 will be in registers.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The xor reason is obvious. the return value.\nwhen using c++ in x86/64 land the return value of functions stores in EAX register before return.\nbecause you wrote \"return 0\" the value of eax must be 0:\n<pre><code>opcode: b8 00 00 00 00</code></pre>\n<pre><code>asm:mov eax, 0*</code></pre>\nthe optimizer make better choice:\n<pre><code>opcode: 31 c0</code></pre>\n<pre><code>asm: xor eax, eax</code></pre>\nso the result is equal eax = 0 with optimization.\nabout the \"011F3024h\", since OS must take care of return value of each program, it must save your return address for later use. this is it ( for simple answer )\nfor more detailed answer read RE of __tmainCRTStartup\n",
            "votes": "2",
            "user": "diener_k",
            "time": "Apr 27, 2015 at 10:05",
            "is_accepted": false,
            "comments": []
        }
    ]
}