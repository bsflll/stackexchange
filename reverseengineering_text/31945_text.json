{
    "title": "In the IDA xrefs window, can I filter by unique addresses? Or is there an alternative view providing that?",
    "link": "https://reverseengineering.stackexchange.com/questions/31945/in-the-ida-xrefs-window-can-i-filter-by-unique-addresses-or-is-there-an-altern",
    "content": "Consider the following screenshot:\n\nHere, the <pre><code>r</code></pre> and <pre><code>p</code></pre> Type entries appear in pairs. We have ten entries, but five pairs.\nIs there a way to filter this list down to unique Address values, rather than having those duplicates shown for each respective Type?\n",
    "votes": "0",
    "answers": 0,
    "views": "62",
    "tags": [
        "ida"
    ],
    "user": "0xC0000022L",
    "time": "Jun 6, 2023 at 21:53",
    "comments": [
        {
            "user": "mimak",
            "text": "I don't think filtering by type is a feature for the UI (absolutely doable with IDAPython), but you can click the 'Type' column label to sort by type\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@mimak it's a fair point, but there doesn't seem to be a sorting hierarchy. And sorting by address currently is the best short I have at inspecting each xref. If I sort by another metric, I will go all over the place when navigating, usually.\n",
            "time": null
        },
        {
            "user": "Ali Rizvi-Santiago",
            "text": "if you're willing to idapython it as mimak said, it's significantly easer to sort them by their flag (<pre><code>dr_R</code></pre>) & type. i'm the maintainer of ida-minsc over at github.com/arizvisa/ida-minsc which exposes those types for refs and can easily sort/group/fit them to a ui thing (if cared). there's a future branch over at github.com/arizvisa/ida-minsc/tree/persistence-refactor which returns a ref as an int-compat tuple with the \"access\" bit being a <pre><code>set</code></pre> of \"&rwx\" to distinguish loads/stores from data refs and regular code refs (as it's an import, you'd prolly use <pre><code>db.xref.up</code></pre> or <pre><code>func.up</code></pre> in minsc).\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@AliRizvi-Santiago thanks so much for chiming in. I came across <pre><code>ida-minsc</code></pre>, didn't give it a try yet, however. But the remark about this flag is very valuable!\n",
            "time": null
        }
    ],
    "answers_data": []
}