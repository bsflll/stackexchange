{
    "title": "PE - IAT resolve mechanism",
    "link": "https://reverseengineering.stackexchange.com/questions/26211/pe-iat-resolve-mechanism",
    "content": "I'm trying to understand how Windows is resolving functions with the IAT.\nI have noticed that when a call is made to a Win API function, the structure of that call is not always the same (it's still consistent inside a binary, but not between two differents binary).\nSometime, if i follow the target address of that call, i find a jump to the resolved Win API function.\nAnd sometime, it's directly a call to the resolved function.\nFor instance:\n\nthe binary A is using call like :\n<pre><code>call    ds:GetSystemDirectoryW</code></pre>\n\nthe binary B is calling like that:\n<pre><code>call  GetSystemDirectoryW  -> jmp ds:__imp_GetSystemDirectoryW </code></pre>\n\n\nCan someone explain me the this difference in the calling procedure ?\n",
    "votes": "2",
    "answers": 1,
    "views": "181",
    "tags": [
        "pe",
        "iat"
    ],
    "user": "Guillaume",
    "time": "Nov 1, 2020 at 20:13",
    "comments": [],
    "answers_data": [
        {
            "content": "The direct call can be generated by the compiler when it knows that the function comes from a DLL at compile time, or whole program optimization is used. If the target function is not marked as dllimport, the compiler generates a simple call to an external symbol and at link time this external symbol is  resolved to a stub which actually jumps to the DLL import.\nFor more info:\n Importing function calls using __declspec(dllimport)\nWhat is DLL import binding?\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Nov 9, 2020 at 11:44",
            "is_accepted": true,
            "comments": []
        }
    ]
}