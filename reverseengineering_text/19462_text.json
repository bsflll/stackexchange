{
    "title": "Working with 16bit offsets and segments in Radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/19462/working-with-16bit-offsets-and-segments-in-radare2",
    "content": "I have a simple DOS COM program which I want to analyse using Radare2:\n<pre><code>  USE16\n  ORG 100h\n\n  mov ax, cs\n  dec ax\n  mov ds, ax\n\n  mov dx, message+10h\n  mov ah, 9\n  int 21h\n  ret\n\nmessage:   db \"Hello there!$\"\n</code></pre>\n(Use <pre><code>yasm</code></pre> or <pre><code>echo \"jMhIjti6HQG0Cc0hw0hlbGxvIHRoZXJlISQ=\" | base64 -d > test.com</code></pre> to compile it to a binary.)\nWhen I load the binary using <pre><code>r2 -b16 test.com</code></pre> radare shows that I'm at <pre><code>0000:0000</code></pre>.\nHow can I tell radare that the actual program address should be <pre><code>0000:0100</code></pre>?\nAlso how can I tell radare that the offset loaded into the <pre><code>dx</code></pre> register points to <pre><code>message</code></pre>? In other words, can I tell radare that <pre><code>dx</code></pre> is an offset using a segment that starts at <pre><code>0000:0100 - 0x10</code></pre>?\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "radare2",
        "dos"
    ],
    "user": "zxxc",
    "time": "Sep 26, 2018 at 18:15",
    "comments": [],
    "answers_data": [
        {
            "content": "You can use <pre><code>-m 0x100</code></pre> to load the binary at a specific address, as can be seen in <pre><code>r2 -h</code></pre> output:\n\n-m [addr]    map file at given address (loadaddr)\n\nSo you can do something like this:\n<pre><code>$ r2 -m 0x100 -b 16 test.com\n\n[0000:0100]> aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0000:0100]> pdf\n╭ (fcn) fcn.00000100 13\n│   fcn.00000100 ();\n│           0000:0100      8cc8           mov ax, cs\n│           0000:0102      48             dec ax\n│           0000:0103      8ed8           mov ds, ax\n│           0000:0105      ba1d01         mov dx, 0x11d                ; 285\n│           0000:0108      b409           mov ah, 9\n│           0000:010a      cd21           int 0x21                     ; '!'\n╰           0000:010c      c3             ret\n</code></pre>\nRegarding your second question, the bytes that interpreted as <pre><code>mov dx, 0x11d</code></pre> are <pre><code>ba1d01</code></pre>. As you can see, 0x01d1 is hard coded so r2 won't add <pre><code>message +</code></pre> to it.\nYou can create a flag using <pre><code>f str.message 13 @ 0x10d</code></pre> but it would probably not  be helpful in your case.\n",
            "votes": "3",
            "user": "Megabeets",
            "time": "Sep 26, 2018 at 18:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "zxxc",
                    "text": "<span class=\"comment-copy\">Thanks. I tried <code>-m</code> before but it felt a bit hacky. I thought there is a way of manually defining sections/segments where I could specify what is the base address of the section and then instruct <code>r2</code> to use that section after <code>0000:0103</code>.</span>",
                    "time": null
                },
                {
                    "user": "zxxc",
                    "text": "<span class=\"comment-copy\">Interestingly, when I do <code>r2 -m 0x110 -b 16 test.com</code>, then <code>f str.message 13 @ 0x11d</code> and then <code>aa</code>, the message will be displayed in the comment and the disassembly becomes <code>mov dx, str.message</code>. Not a solution since code offsets are wrong but it feels so close. :)</span>",
                    "time": null
                },
                {
                    "user": "zxxc",
                    "text": "<span class=\"comment-copy\">Thanks, I accepted the answer since I think you covered everything and nobody seems to know better. Looks like <code>radare2</code> in its current version is not the right tool to disassemble old 16-bit DOS executables.</span>",
                    "time": null
                }
            ]
        }
    ]
}