{
    "title": "How to print disassembly code with IDAPython when IDA doesn’t detect it as code",
    "link": "https://reverseengineering.stackexchange.com/questions/30132/how-to-print-disassembly-code-with-idapython-when-ida-doesn-t-detect-it-as-code",
    "content": "I have a piece of malware for windows / x64 which is packed, so IDA only recognizes the unpacker routine as data. This is the aspect of the zone just after loading the binary in IDA:\n\nI want to print the disassembly instruction in that zone, so I use this piece of IDAPython code:\n<pre><code>cur_addr = 0x75014F\nend_addr = cur_addr + 0x28\nwhile cur_addr <= end_addr:     #For 0x28 bytes print instructions\n    instr = idc.generate_disasm_line(cur_addr, idc.GENDSM_FORCE_CODE)\n    print (f'\\t+ {hex(cur_addr)} :\\t {instr}')\n    cur_addr = idc.next_head(cur_addr)\n</code></pre>\nI have identified that <pre><code>0x75014F</code></pre> has the unpacker. Then, for <pre><code>0x28</code></pre> bytes I want to print the pseudocode from this position. After executing that, the output is…\n<pre><code>    + 0x75014f :     pop     r13\n</code></pre>\nSo, only one instruction is decoded. The reason is <pre><code>idc.next_head</code></pre> is pointing much farther than 0x28 form my interesting zone. I suppose that at the end of all the <pre><code>dq</code></pre> definitions.\nThen, in IDA, I press “C” to convert the zone to code. This is the aspect in IDA now:\n\nAfter that, the script works as expected and this is the real result:\n<pre><code>    + 0x75014f :     pop     r13\n    + 0x750151 :     jmp     short loc_750155\n    + 0x750155 :     push    rbx\n    + 0x750156 :     cmovb   ebx, [rsp+8Ch]\n    + 0x75015e :     pop     rbx\n    + 0x75015f :     rol     dword ptr [r13+4], 66h\n    + 0x750164 :     jmp     short loc_750168\n    + 0x750168 :     ror     dword ptr [r13+8], 0FDh\n    + 0x75016d :     cmova   rsi, rsi\n    + 0x750171 :     xor     dword ptr [r13+0Ch], 8A6B7B58h\n</code></pre>\nMy question is, how to force (with IDAPython) convert a data zone to code? It seems that <pre><code>idc.generate_disasm_line</code></pre> is not enough.\nThanks.\nNote: This is part of a reverse me challenge. I needed to find all the call instructions and see the code at which they pointed. Knowing the disassembled code, I could discard irrelevant code (in, out, muls, divs…). Then, by visual inspection of the non-discarded code, I could find out the unpacker. As my IDAPython code was not working I needed to press \"C\" in IDA to check all the undiscarded routines. If it were working my job would have been easier.\n",
    "votes": "2",
    "answers": 1,
    "views": "833",
    "tags": [
        "ida",
        "idapython",
        "unpacking"
    ],
    "user": "Chirrin Dul",
    "time": "Mar 10, 2022 at 18:13",
    "comments": [],
    "answers_data": [
        {
            "content": "Something like this should work:\n<pre><code>import ida_auto\nimport ida_bytes\n\ndef EnsureCode(ea):\n    if ida_bytes.is_data(ida_bytes.get_flags(ea)):\n        ida_bytes.del_items(ea,ida_bytes.DELIT_EXPAND)\n    ida_auto.auto_wait()\n    if not ida_bytes.is_code(ida_bytes.get_flags(ea)):\n        ida_auto.auto_make_code(ea)\n    ida_auto.auto_wait()\n</code></pre>\n",
            "votes": "2",
            "user": "Rolf Rolles",
            "time": "Mar 10, 2022 at 20:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Chirrin Dul",
                    "text": "<span class=\"comment-copy\">Dear @Rolf Rolles. Your code helped me, but I wanted to elaborate a well informed comment.</span>",
                    "time": null
                }
            ]
        }
    ]
}