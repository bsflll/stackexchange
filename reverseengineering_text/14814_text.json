{
    "title": "How does this local var get assigned?",
    "link": "https://reverseengineering.stackexchange.com/questions/14814/how-does-this-local-var-get-assigned",
    "content": "I'm using IDA PRO to disassemble a function, which produces a control flow that looks like this:\n<pre><code>start_IE proc near\n\nBuffer= dword ptr -230h\nvar_22C= byte ptr -22Ch\nhFile= dword ptr -30h\nhInternet= dword ptr -2Ch\nszAgent= byte ptr -28h\ndwNumberOfBytesRead= dword ptr -8\nvar_4= dword ptr -4\narg_0= dword ptr  8\n\n;Do stuff that has nothing to do with ebp+var22C\n\nmov     al, [ebp+var_22C]\njmp     short return\n\nreturn:\nmov     esp, ebp\npop     ebp\nretn\nstart_IE endp\n</code></pre>\nI've cut out a lot of irrelevant code, but the only 2 times that var_22C appears in this procedure has been shown above.\nI'm having a difficult time finding out what value the data pointed to by var_22C will be since it's given no obvious assignment here.\nCode before/after the function call in the caller:\n<pre><code>mov     ecx, [ebp+var_C]\npush    ecx             ; command char\ncall    start_IE\nadd     esp, 4\nmov     [ebp+var_8], al\nmovsx   edx, [ebp+var_8]\ntest    edx, edx\njnz     short success\n</code></pre>\nIt only has 1 argument passed to it, which should be <pre><code>arg_0</code></pre>... We see that the return value from Var_22C is placed into <pre><code>[ebp+var_8]</code></pre> back in the caller afterwards.\n",
    "votes": "0",
    "answers": 2,
    "views": "1k",
    "tags": [
        "ida",
        "stack-variables",
        "local-variables"
    ],
    "user": "the_endian",
    "time": "Mar 3, 2017 at 18:48",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "show the code referencing <pre><code>Buffer</code></pre>.\n",
            "time": null
        },
        {
            "user": "NirIzr",
            "text": "Is it possible that there's a return value variable and it's simply uninitialized? What you're describing is producible from valid C code.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "probably the <pre><code>Buffer</code></pre> variable is accessed indirectly by one of the called functions and <pre><code>var_22C</code></pre> is actually part of the buffer.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Mar 6, 2017 at 20:18",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "As far as I can see this <pre><code>mov     al, [ebp+var_22C]</code></pre> command works with 8 bit data (according to name <pre><code>al</code></pre>), and there is a possibility that this <pre><code>var_22C</code></pre> variable is assigned as a part of bigger entity, for example as dword, which will require different offset.\nI'd suggest to watch to stack accesses around this offset, specifically ,as @Igor Skochinsky says in comment, in a code related to <pre><code>Buffer</code></pre>.\n",
            "votes": "1",
            "user": "w s",
            "time": "Mar 6, 2017 at 9:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Usually when thats the case, IDA will identify the byte is also accessed as a dword and will make all references to a dword.</span>",
                    "time": null
                }
            ]
        }
    ]
}