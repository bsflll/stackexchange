{
    "title": "Binwalk alternative",
    "link": "https://reverseengineering.stackexchange.com/questions/17262/binwalk-alternative",
    "content": "When examining <pre><code>bin</code></pre> firmware files Binwalk is an extremely helpful tool. There are times though that Binwalk comes up empty and a lot more digging is required to make sense of the data.\nAre there any alternatives to Binwalk that might work better in certain cases, or possibly a commercial version of such a tool?\n",
    "votes": "13",
    "answers": 4,
    "views": "28k",
    "tags": [
        "firmware"
    ],
    "user": "pzirkind",
    "time": "Jan 23, 2018 at 17:35",
    "comments": [
        {
            "user": "julian",
            "text": "Binwalk's weakness is that it is signature based. What kind of functionality do you seek? Code segment detection? Visualization? ISA identification? One needs to utilize a combination of tools to make sense of an unknown binary. There is no single tool that does everything, and sometimes there is so little information available in the binary that not much can be done with any tool.\n",
            "time": null
        },
        {
            "user": "pzirkind",
            "text": "@SYS_V thanks for bringing up those different stages, if you would elaborate on them and mention tools that can be used to help in those stages i would select that as a correct answer\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "this showed up in my twitter feed today: github.com/attify/firmware-analysis-toolkit\n",
            "time": null
        },
        {
            "user": "user22363",
            "text": "@SYS_V  <pre><code>Binwalk's weakness is that it is signature based. </code></pre> out of curiosity if you want to re-write binwalk what features you think that binwalk lacking and would implement it, and what the opposite of <pre><code>signature based</code></pre> method?\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "@user22363 To answer your question, I designed a tool called centrifuge that performs analysis using statistics and machine learning algorithms rather than scanning for signatures.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "2020-08: For more up-to-date information, see the answer below discussing ISAdetect and Centrifuge\n\n2024-06:\n\nIt appears that ReFirmLabs' Binwalk repository is no longer being maintained (#671 Dead Project - Parent Company Killed by Microsoft).\ncommunity fork at https://github.com/OSPG/binwalk\nNew open source extraction suite developed by OneKey: unblob\n\n<pre><code>unblob</code></pre> usage guide\n\n\n\n\n2024-10-23:\nBinwalk master branch updated to v3, re-written in Rust.\n\nThe tools themselves are less important than the approach to the analysis. Instead of looking for better or more tools, seek to develop a sound methodology to employ when analyzing binaries.\nI'm an amateur (a student) and can't claim to know much, having started experimenting with firmware analysis around March 2017, so take what I write here with a grain of salt. But by basing the way I approach firmware analysis challenges on how professionals do it and drawing on methods employed in data science when analyzing new and unfamiliar data sets, the results have generally been good, even with simple tools. You don't have to take my word for it; feel free to look at the firmware analyses contributed here and make your own determination.\nHere are 2 exemplars:\n\nlzma: File format not recognized [Details enclosed]\nApproach to extract useful information from binary file\n\nHere is a summary of a possible approach:\n1. Visualization\nVisualization is the fastest way to determine if a binary is compressed or encrypted. If a binary is compressed or encrypted, not much else can be done until it is decompressed/decrypted. See this question for an example of how someone reasonably skilled and experienced wasted time analyzing an encrypted binary and getting nowhere, simply because they did not realize that the binary was in fact encrypted: Disassembling VxWorks Firmware\nUse binvis.io and <pre><code>binwalk -E</code></pre> to visualize the structure of the binary and its entropy levels. This alone will reveal how the binary is organized, and whether it is compressed/encrypted. Areas containing code typically have higher entropy than areas not containing code and this will show up in an entropy scan. Data is often repetitive and has low entropy. Entropy level visualization is very useful because it can reveal if there is no object code in a binary whatsoever.\n2. Exploration\nIn general, it is only after it has been established that there is at least some accessible information available in a binary that it makes sense to go further. How long is it reasonable to stare at an encrypted blob? Anyway, at this juncture several things can be done:\n\nPerform signature scan using <pre><code>binwalk</code></pre>\n\nPerform an opcode scan using <pre><code>binwalk -A</code></pre>. Most malware target x86 or x86-64 architectures, but most firmware binaries target MIPS or ARM CPUs as far as I can tell. There are many different architectures out there for embedded devices such as PowerPC, AVR, Xtensa, s390, sh4, Sparc, and so on. In addition to all of these different architectures that object code in firmware may target, it may be the case that there is no object code present at all, so an opcode scan will only get you so far, since <pre><code>binwalk</code></pre> only scans for a handful of architectures.\nNote that no publicly available tool currently exists that can, with a high level of accuracy, not only identify the presence of object code within a binary and contiguous regions of code but also identify the instruction set architecture (ISA) of the code. This is the subject of research and part of the Praetorian Machine Learning Challenge. In lieu of such a tool, <pre><code>binwalk -A</code></pre> is just about it.\n\n<pre><code>strings</code></pre> will often turn up interesting data that a signature scan will not.\n\nIf I have reason to believe that the firmware was developed by developers whose machines use a Unicode-encoded character set, I supplement <pre><code>strings</code></pre> with <pre><code>radare2</code></pre>'s search functionality.\n\n<pre><code>hexdump -C</code></pre> can be used to quickly explore a header structure, if present, as well as seek to interesting structures elsewhere in the binary\n\n\n3. Analysis\nAt this point it has been established that the binary contains accessible information that merits analysis. This can include interesting data structures such as headers as well as extracted data such as kernels and file systems and/or object code that can be disassembled.\nFor situations in which there is a clear-text header structure followed by a compressed block for which <pre><code>binwalk</code></pre> does not detect a signature, a hex editor such as wxHexEditor can be very useful. Good examples of how a hex editor can aid in analysis are provided by @ebux, a professional security researcher:\n\nUnpack IpCam firmware - Binwalk extraction issue\ndecoding blob into original file\n\nIf it is believed that object code is present but the CPU/architecture of the device is not known, the architecture will need to be identified before the code can be disassembled. While not very exciting, if the developer provides technical documentation, it is at this point which it will need to be read, not just to identify the CPU but also to discover the base address of the firmware image so that when the ISA is identified the image can be correctly disassembled using IDA or radare2.\nApproaches to identifying binary ISAs range from simple statistical methods, such as examining byte n-gram frequencies to more sophisticated machine learning-based methods that are discussed in detail here:\n\nTowards Automated Classification of Firmware\nImages and Identification of Embedded Devices\nAutomatic classification of object code using machine\nlearning\n\nSummary\nArsenal:\n\n<pre><code>binwalk</code></pre> + plugins\n<pre><code>binvis.io</code></pre>\n<pre><code>strings</code></pre>\n<pre><code>hexdump</code></pre>\n<pre><code>wxHexEditor</code></pre>\n<pre><code>radare2</code></pre>\n<pre><code>IDA</code></pre>\ntechnical reference manuals\nstatistics and machine learning\n",
            "votes": "20",
            "user": "julian",
            "time": "Oct 23, 2024 at 15:09",
            "is_accepted": true,
            "comments": [
                {
                    "user": "pzirkind",
                    "text": "<span class=\"comment-copy\">thank you! i hope this helps lots of people that are starting out</span>",
                    "time": null
                },
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">@pzirkind no problem, I hope so too. The fastest way to develop is through hands on experience. Good luck.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can try binaryanalysis maybe it can help\n",
            "votes": "3",
            "user": "Vido",
            "time": "Jan 23, 2018 at 18:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">How can it 'maybe' help? What are the advantages over <code>binwalk</code>?</span>",
                    "time": null
                },
                {
                    "user": "Vido",
                    "text": "<span class=\"comment-copy\">Advantage is that it has own \"magic bytes\" list</span>",
                    "time": null
                },
                {
                    "user": "Adam",
                    "text": "<span class=\"comment-copy\">Dead as of 2023-11-05. Some checking via the Internet Archive says that the work continues in <a href=\"https://github.com/armijnhemel/binaryanalysis-ng\" rel=\"nofollow noreferrer\">github.com/armijnhemel/binaryanalysis-ng</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The original answer I posted in 2018 is somewhat out of date now. There are 2 tools that have been released in the meantime that can help with understanding what is in a binary file. One tool, ISAdetect, focuses specifically on identifying the CPU the code in an executable binary targets. It accomplishes this using machine learning.\nAnother tool, Centrifuge, also uses machine learning, but does not focus on machine code specifically. Rather, this tool was designed to help an analyst identify what kinds of data are encoded in binary files (full disclosure, I am the creator of this tool). To that end, it provides many functions for visualizing the data in a binary file using Python plotting libraries, and finds clusters of statistically-similar data by using scikit-learn's implementation of the DBSCAN algorithm. Centrifuge also uses ISAdetect's web API to identify any machine code found in a binary file.\nHere are some examples of visualizations Centrifuge can create from data in a binary file:\n\n\n\nAs you can see from these images, the approach taken by the tool is statistical. It is through statistical analysis of the data in a file that Centrifuge is able to identify what types of data may be present. At time of writing, 3 different data types can be identified: machine code, UTF-english, and compression/encryption.\nAs an example of this, here is the output for a firmware binary analyzed by Centrifuge:\n<pre><code>Searching for machine code\n--------------------------------------------------------------------\n\n[+] Checking Cluster 0 for possible match\n[+] Closely matching CPU architecture reference(s) found for Cluster 0\n[+] Sending sample to https://isadetect.com/\n[+] response:\n\n{\n    \"prediction\": {\n        \"architecture\": \"mips\",\n        \"endianness\": \"little\",\n        \"wordsize\": 32\n    },\n    \"prediction_probability\": 0.93\n}\n\n\nSearching for utf8-english data\n-------------------------------------------------------------------\n\n[+] UTF-8 (english) detected in Cluster 1\n    Wasserstein distance to reference: 7.861589780632858\n\n\nSearching for high entropy data\n-------------------------------------------------------------------\n\n[+] High entropy data found in Cluster 2\n    Wasserstein distance to reference: 0.4625352842771307\n[*] This distance suggests the data in this cluster could be\n    a) encrypted\n    b) compressed via LZMA with maximum compression level\n    c) something else that is random or close to random.\n</code></pre>\nFor context, here is a visualization of the information of the same binary:\n\nFor those who are interested, here is a notebook explaining how to use it: Introduction to Centrifuge.\n",
            "votes": "3",
            "user": "julian",
            "time": "Aug 18, 2020 at 23:55",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pzirkind",
                    "text": "<span class=\"comment-copy\">appreciate the updates to this question, this is very useful</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There's a cloud version of binwalk (binwalk pro) where you just upload the firmware and it unpacks. Supports more file systems than the open source version. Less buggy too. Developed by Craig Heffner, creator of binwalk.\n",
            "votes": "2",
            "user": "Terry",
            "time": "Aug 2, 2019 at 14:42",
            "is_accepted": false,
            "comments": []
        }
    ]
}