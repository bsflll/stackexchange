{
    "title": "Problem with analyzing a JFFS2 Filesystem",
    "link": "https://reverseengineering.stackexchange.com/questions/22388/problem-with-analyzing-a-jffs2-filesystem",
    "content": "I extracted the content of a NAND Flash and analyzed it with binwalk.\nBinwalk showed me that the dump contains a big endian JFFS2 filesystem. My next step was extracting the files into a directory. To do so I simply used binwalk. \n\nbinwalk -Me Dump\n\nThe problem is that binwalk usually creates an other directory that should contain all the folders and files of the filesystem and this is not working. \nBinwalk creates the directory but it is empty. I have Jefferson installed as well as everything that is important for it to work and I tried to do the same thing with an other Dump that I found in the internet and it worked without any problem.\nLater I found out that the byte order of my CPU is little endian. I don't know if that is causing the issue and to be honest I do not know if there is a way to change the byte order of the jffs2 file to try it out. Maybe someone knows more about that. \nAn other thing that keeps bothering me is the fact that when I use the file command to check the jffs2 file it simply returns \"data\". \nAgain I don't know if the endianness is causing this issue. What I can tell is when I checked the other dump that I found in the internet the jffs2 fs was in little endian and binwalk could create the directory with all the files and the file command also returned \"jffs2 little endian\" instead of just \"data\". \nIs it possible that the endianness is causing the issue and is there a way to change the byte order of the filesystem?\n",
    "votes": "2",
    "answers": 1,
    "views": "4k",
    "tags": [
        "firmware",
        "binwalk"
    ],
    "user": "Ramazuri",
    "time": "Oct 25, 2019 at 5:52",
    "comments": [
        {
            "user": "Ilya Zagorodnyuk",
            "text": "What I did wrong? I receive error message \"can't read superblock\"\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "you can mount jffs2 file system directly \nfo rmount jffs2 file system on linux \nOne method of mounting JFFS2 images uses the mtdram module to emulate an MTD device using system RAM. This works well for JFFS2 images that are less than approximately 32 MB but will not work for larger images since it requires allocating a large amount of system RAM. The basic steps of this process are as follows:\nLoad mtdram and mtdblock modules.\nUse the dd command to copy the JFFS2 image to /dev/mtdblock0.\nMount /dev/mtdblock0 as a JFFS2 filesytem.\nIn order to simplify this process, EMAC has created a script which takes the JFFS2 image, mount point, and the erase block size of the image as parameters. The default erase block size for this script is 128 KiB, which is the correct value for most NOR flashes used on EMAC products and some NAND flashes. The eraseblock size can be determined from the contents of /proc/mtd from the system that the image was copied from or created for. For example, if the value of the \"erasesize\" parameter is 00040000, the erase block size for the device is 256 KiB (0x40000 = 262144 bytes, 262144 / 1024 = 256 KiB). The jffs2_mount_mtdram.sh script is shown below.\n<pre><code>#!/bin/bash\n\n## Script to mount jffs2 filesystem using mtd kernel modules.\n## EMAC, Inc. 2009\n\nif [[ $# -lt 2 ]]\nthen\n    echo \"Usage: $0 FSNAME.JFFS2 MOUNTPOINT [ERASEBLOCK_SIZE]\"\n    exit 1\nfi\n\nif [ \"$(whoami)\" != \"root\" ]\nthen\n    echo \"$0 must be run as root!\"\n    exit 1\nfi\n\nif [[ ! -e $1 ]]\nthen\n    echo \"$1 does not exist\"\n    exit 1\nfi\n\nif [[ ! -d $2 ]]\nthen\n    echo \"$2 is not a valid mount point\"\n    exit 1\nfi\n\nif [[ \"$3\" == \"\" ]]\nthen\n    esize=\"128\"\nelse\n    esize=\"$3\"\nfi\n\n# cleanup if necessary\numount /dev/mtdblock0 &>/dev/null\nmodprobe -r mtdram &>/dev/null\nmodprobe -r mtdblock &>/dev/null\n\nmodprobe mtdram total_size=32768 erase_size=$esize || exit 1\nmodprobe mtdblock || exit 1\ndd if=\"$1\" of=/dev/mtdblock0 || exit 1\nmount -t jffs2 /dev/mtdblock0 $2 || exit 1\n\necho \"Successfully mounted $1 on $2\"\nexit 0\n</code></pre>\n-\n<pre><code>**developer@ldc:~$ sudo ./jffs2_mount_mtdram.sh rootfs.jffs2 /mnt/jffs2 256**\n</code></pre>\nTo mount an image with 256 KiB erase block size named rootfs.jffs2 on /mnt/jffs2 using jffs2_mount_mtdram.sh\n",
            "votes": "1",
            "user": "julian",
            "time": "Oct 31, 2019 at 11:29",
            "is_accepted": false,
            "comments": []
        }
    ]
}