{
    "title": "Simplify two 32 bit expressions into one 64 bit expression in decompilation",
    "link": "https://reverseengineering.stackexchange.com/questions/21259/simplify-two-32-bit-expressions-into-one-64-bit-expression-in-decompilation",
    "content": "I am getting started with Ghidra, and am decompiling a simple program of mine. The platform is Linux (ELF) on ARM. I found in the decompiled code things like:\n<pre><code>gTime._0_4_ = (undefined4)(time1 >> 0x20);\ngTime._4_4_ = (undefined4)time1;\n</code></pre>\nHere, <pre><code>gTime</code></pre> is a global and <pre><code>time1</code></pre> a local. Both should be 64 bit integers (<pre><code>uint64_t</code></pre>). I've alreads set the types accordingly. This code is setting the high bits of <pre><code>gTime</code></pre> to the high bits of <pre><code>time1</code></pre> and the same for the low bits. Is there any way I could transform this to:\n<pre><code>gTime = time1\n</code></pre>\nOr is there e.g. an endianness issue here? At some places, it also has the similarly redundant:\n<pre><code>uVar1 = CONCAT44(gTime, gTime._4_4)\n</code></pre>\nI was expecting to be able to select the code and \"refactor\" it to an equivalent form. The only thing that I could find was the \"retype\" function, with works great, but not here. Any ideas how to clean up this code a bit?\n",
    "votes": "2",
    "answers": 0,
    "views": "631",
    "tags": [
        "arm",
        "ghidra"
    ],
    "user": "jdm",
    "time": "May 2, 2019 at 8:21",
    "comments": [
        {
            "user": "NotGI",
            "text": "Can you post the disassembly? It seems like it sets the higher part of time to the lower part of gTime and the lower part of time to the higher part of gTime\n",
            "time": null
        }
    ],
    "answers_data": []
}