{
    "title": "Automated Branch Input Generation",
    "link": "https://reverseengineering.stackexchange.com/questions/13645/automated-branch-input-generation",
    "content": "Theoretically it should be possible for a binary analysis tool such as IDA to generate an input that will trigger a specific branch patch. So for example an executable that takes in a command line parameter, analyses the input and ventures down a specific branch path. \nIs anyone aware of any tools/plugins that will generate me an input necessary to venture down a specific path? Inputs may be from a command line argument, network IO (I guess this is the most difficult, as it may require lots of protocol handshaking before interesting communication takes place), DLL export call parameters, file on disk.\nIt does seem like a difficult problem as lots of graph traversing would be necessary, but totally possible for an automated tool?\n",
    "votes": "1",
    "answers": 2,
    "views": "165",
    "tags": [
        "ida",
        "disassembly",
        "static-analysis"
    ],
    "user": "Jamie",
    "time": "Oct 5, 2016 at 20:14",
    "comments": [],
    "answers_data": [
        {
            "content": "there are some projects working on it. The most prominent one may be angr. Please note that each of this projects (as of now) is not to be used in production, since they are mostly unstable, work only for corner cases (most SMT implementation) or take ages to return anything (dynamic symbolic execution).\nSadly, the use case you describe is not awfully trivial. Finding these inputs requires data flow analysis, which relies on semantic architecture information and a correctly recovered Control Flow Graph.\nA program doing this needs to support most calling conventions and know the registers accessed by library functions (or analyse them as well). Graph traversal is not the issue here, but there are problems with handling loops etc.\n",
            "votes": "3",
            "user": "Nordwald",
            "time": "Oct 6, 2016 at 7:47",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Vitaly Osipov",
                    "text": "<span class=\"comment-copy\">Yup, an SMT solver is what you are looking for. And it's a slow, limited and unstable piece of software :) If you're interested in its internals, this guy knows what he is talking about <a href=\"https://sean.heelan.io/category/smt-solving/\" rel=\"nofollow noreferrer\">sean.heelan.io/category/smt-solving</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Check Out Ponce, winner of this year's Hex-Rays plugin context:\nhttp://research.trust.salesforce.com/Introducing-Ponce-One-click-symbolic-execution/\nIt's not quite \"one-click\" (you need to at least mark the inputs manually) but it does seem to work quite well. It uses Triton (with Z3) to do the heavy lifting.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Oct 6, 2016 at 7:53",
            "is_accepted": false,
            "comments": []
        }
    ]
}