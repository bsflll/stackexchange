{
    "title": "x86 disassembly confusion regarding VESA functions",
    "link": "https://reverseengineering.stackexchange.com/questions/22732/x86-disassembly-confusion-regarding-vesa-functions",
    "content": "I'm trying to disassemble an old DOS application and got stuck at some point of the VESA graphics handling.\nThe VESA function to be called will be stored in a global variable, e.g. <pre><code>vesa_fct_dword_749C8 = 0x4f00</code></pre>, <pre><code>0x4f01</code></pre>, etc.\nAfter checking the return value, the application will do some additional magic, which I, frankly, don't understand. My guess is that it will check for a specific error return value (<pre><code>0x01</code></pre>, in particular), but I'm really not quite sure about it and how it's actually done.\nHere's the relevant snippet:\n<pre><code>cseg01:000159D8 loc_159D8:                              ; CODE XREF: checkForVesa+D4â†‘j\ncseg01:000159D8                 mov     eax, vesa_fct_dword_749C8\ncseg01:000159DD                 mov     edx, vesa_fct_dword_749C8\ncseg01:000159E3                 sar     edx, 1Fh\ncseg01:000159E6                 shl     edx, 8\ncseg01:000159E9                 sbb     eax, edx\ncseg01:000159EB                 sar     eax, 8\ncseg01:000159EE                 and     eax, 0FFh\ncseg01:000159F3                 cmp     eax, 1\ncseg01:000159F6                 jnz     short loc_15A01\ncseg01:000159F8                 mov     [ebp+var_4], 0\ncseg01:000159FF                 jmp     short loc_15A29\n</code></pre>\nMaybe someone knows what's up with that part, that would be really appreciated!\n",
    "votes": "3",
    "answers": 1,
    "views": "81",
    "tags": [
        "ida",
        "disassemblers",
        "dos"
    ],
    "user": "Mentulatus",
    "time": "Dec 13, 2019 at 20:05",
    "comments": [],
    "answers_data": [
        {
            "content": "This code takes the most significant bit of <pre><code>EAX</code></pre> (<pre><code>msb(EAX)</code></pre>) and then, it subtracts it from <pre><code>AH</code></pre> and compares the result to <pre><code>1</code></pre>. According to this specification (\"VBE Return Status\" section):\n\n<pre><code>AX = 014F</code></pre> => <pre><code>AH = 1</code></pre> means \"Function call failed \"\n<pre><code>AX = 024F</code></pre> => <pre><code>AH = 2</code></pre> means \"Function is not supported in current hardware configuration\n\"\n\nAnd the <pre><code>jnz</code></pre> instruction will be executed if <pre><code>msb(EAX) = 1</code></pre> and <pre><code>AH = 2</code></pre>, or when <pre><code>msb(EAX) = 0</code></pre> and <pre><code>AH = 1</code></pre>. Unfortunately, I don't know what information is stored in <pre><code>msb(EAX)</code></pre> (maybe something related to VBE version?).\n",
            "votes": "1",
            "user": "bart1e",
            "time": "Dec 14, 2019 at 15:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}