{
    "title": "INT 2D Anti-Forensic Method",
    "link": "https://reverseengineering.stackexchange.com/questions/1541/int-2d-anti-forensic-method",
    "content": "Inclusion of an <pre><code>INT 2D</code></pre> instruction appears to be a fairly common anti-debugging tactic used by Windows malware authors. From what I understand, it causes a process to act differently when a debugger is attached from when it is not attached.\nI have read that this is due in part to an asynchronous (not part of normal program flow) increment to the instruction pointer. This increment can be made to lead to instruction scission.\nCould someone explain this anti-debugging tactic, specifically why this increment to the instruction pointer occurs, and what happens when a debugger is and is not attached.\n",
    "votes": "16",
    "answers": 4,
    "views": "7k",
    "tags": [
        "windows",
        "static-analysis",
        "malware",
        "anti-debugging"
    ],
    "user": "lynks",
    "time": "Apr 3, 2013 at 14:42",
    "comments": [
        {
            "user": "user3840170",
            "text": "Does this answer your question? What is the reason for INT 0x2D byte scission?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "From my \"Ultimate\" Anti-Debugging reference (see pferrie.host22.com):\nThe interrupt 0x2D is a special case.  When it is executed, Windows uses the current EIP register value as the exception address, and then it increments by one the EIP register value.  However, Windows also examines the value in the EAX register to determine how to adjust the exception address.  If the EAX register has the value of 1, 3, or 4 on all versions of Windows, or the value 5 on Windows Vista and later, then Windows will increase by one the exception address.  Finally, it issues an EXCEPTION_BREAKPOINT (0x80000003) exception if a debugger is present.  The interrupt 0x2D behaviour can cause trouble for debuggers.  The problem is that some debuggers might use the EIP register value as the address from which to resume, while other debuggers might use the exception address as the address from which to resume.  This can result in a single-byte instruction being skipped, or the execution of a completely different instruction because the first byte is missing.  These behaviours can be used to infer the presence of the debugger.  The check can be made using this code (identical for 32-bit and 64-bit) to examine either the 32-bit or 64-bit Windows environment:\n<pre><code>xor  eax, eax ;set Z flag\nint  2dh\ninc  eax ;debugger might skip\nje   being_debugged\n</code></pre>\n[end]\nSo you can see that there's nothing asynchronous happening here.  The change occurs immediately when the exception occurs.\nAs far as why it occurs, the skipped byte is intended to be used to pass one byte of additional information at the time of the exception.\n",
            "votes": "19",
            "user": "peter ferrie",
            "time": "Apr 3, 2013 at 15:29",
            "is_accepted": true,
            "comments": [
                {
                    "user": "cb88",
                    "text": "<span class=\"comment-copy\">Indeed it was pretty obvious that there wasn't any \"asyncronousness\" check going on when I started reading about it. I would imagine the UD2 instruction might do something similar?</span>",
                    "time": null
                },
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">UD2 does not have the same effect.  That one behaves like any other invalid instruction.  It exists solely for the purpose of seeing what a definitely invalid instruction looks like (as opposed to a random opcode combination that's invalid today but becomes valid in a new CPU tomorrow).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "An Anti-Reverse Engineering Guide\nAnd the primary explanatory comment from the code presented there.\n<pre><code>// The Int2DCheck function will check to see if a debugger\n// is attached to the current process. It does this by setting up\n// SEH and using the Int 2D instruction which will only cause an\n// exception if there is no debugger. Also when used in OllyDBG\n// it will skip a byte in the disassembly and will create\n// some havoc.\n</code></pre>\nNote here is a bit on SEH.\n",
            "votes": "6",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "For some good examples of usage of INT2d in Malware, check out Dr. Fu's blog:\nhttp://fumalwareanalysis.blogspot.com/p/malware-analysis-tutorials-reverse.html\nThere are 3 different examples and explanations, one is with Max++ which gives a good idea of what to expect in your own Malware samples.\n",
            "votes": "3",
            "user": "Brandon  Young",
            "time": "Apr 17, 2013 at 15:45",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The interrupt 0x2D is a special case. When it is executed, Windows\n  uses the current EIP register value as the exception address, and then\n  it increments by one the EIP register value. However, Windows also\n  examines the value in the EAX register to determine how to adjust the\n  exception address. If the EAX register has the value of 1, 3, or 4 on\n  all versions of Windows, or the value 5 on Windows Vista and later,\n  then Windows will increase by one the exception address. Finally, it\n  issues an EXCEPTION_BREAKPOINT (0x80000003) exception if a debugger is\n  present. The interrupt 0x2D behaviour can cause trouble for debuggers.\n  The problem is that some debuggers might use the EIP register value as\n  the address from which to resume, while other debuggers might use the\n  exception address as the address from which to resume. This can result\n  in a single-byte instruction being skipped, or the execution of a\n  completely different instruction because the first byte is missing.\n  These behaviours can be used to infer the presence of the debugger.\n  The check can be made using this code (identical for 32-bit and\n  64-bit) to examine either the 32-bit or 64-bit Windows environment:\n\nAt first, I didn't understand the meaning of the \"exception address\" and I think I'm not the only one. Fortunately, the Dr. Fu's blog have a better explanation about it.\nFrom Dr Fu's blog:\n\nHere the \"exception address\" is the \"EIP value of the context\" (which\n  to be copied back to user process), and the \"EIP register value\" is\n  the real EIP value of the user process when the exception occurs.\n",
            "votes": "3",
            "user": "Gagou",
            "time": "Apr 21, 2015 at 14:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}