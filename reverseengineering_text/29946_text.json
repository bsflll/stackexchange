{
    "title": "Identifying the logic in remote control data packets",
    "link": "https://reverseengineering.stackexchange.com/questions/29946/identifying-the-logic-in-remote-control-data-packets",
    "content": "I have a set of 4 power sockets that can be turned on and off with an RF remote.\nThat remote has 4 pairs of on/off buttons along with a master pair that can control all sockets at once.\nInitially, the power sockets do not know about the remote, one needs to \"program\" the socket by pressing the desired \"ON\" button while the socket is in learning mode.\nSniffing the 433MHz signal is quite easily done and repeating captured signals works just fine, so there does not appear to be any kind of security here.\nOut of curiosity, I wanted to understand the structure of data sent to these sockets and have figured out that it's made of 24 bits with the following structure:\n\n\n\n\nNibble\nUsage\n\n\n\n\n5\nRemote Id\n\n\n1-4\nAction code\n\n\n0\nButton Id\n\n\n\n\nSo for instance, if I receive <pre><code>5ae940</code></pre>, the Remote Id is <pre><code>5</code></pre>, the Button Id is <pre><code>0</code></pre> and the action code is <pre><code>ae94</code></pre>\nRecording multiple button presses, I discovered that the same button, On for A channel for instance, rolls between 4 possible action codes. And using a second set of power sockets bought 3 years ago shows that they are cross compatible with the newer one, with a different set of 4 possible action codes.\nWhen placing the power socket in learning mode, there is only one button press needed, so the socket itself has a way to identify any of the four possible action codes as equivalent to the one it has learnt.\nWhat I have a hard time figuring out is what makes those 4 possible action codes related to each other.\nHere are the captured packets and their associated action:\n\n\n\n\nSet year\nAOn\nAOff\nBOn\nBOff\nCOn\nCOff\nDOn\nDOff\nMasterOn\nMasterOff\n\n\n\n\n2019\n<pre><code>bf756c</code></pre><pre><code>b7441c</code></pre><pre><code>bd9c5c</code></pre><pre><code>be3aac</code></pre>\n<pre><code>b20e7c</code></pre><pre><code>b5212c</code></pre><pre><code>b9d88c</code></pre><pre><code>b8c0bc</code></pre>\n<pre><code>b6af35</code></pre><pre><code>b453f5</code></pre><pre><code>b0f6e5</code></pre><pre><code>bc1705</code></pre>\n<pre><code>b16bc5</code></pre><pre><code>b3b995</code></pre><pre><code>bb8dd5</code></pre><pre><code>bae245</code></pre>\n<pre><code>b20e7e</code></pre><pre><code>b5212e</code></pre><pre><code>b9d88e</code></pre><pre><code>b8c0be</code></pre>\n<pre><code>bf756e</code></pre><pre><code>b7441e</code></pre><pre><code>bd9c5e</code></pre><pre><code>be3aaz</code></pre>\n<pre><code>b16bc7</code></pre><pre><code>b3b997</code></pre><pre><code>bb8dd7</code></pre><pre><code>bae247</code></pre>\n<pre><code>b6af37</code></pre><pre><code>b453f7</code></pre><pre><code>b0f6e7</code></pre><pre><code>bc1707</code></pre>\n<pre><code>b20e72</code></pre><pre><code>b52122</code></pre><pre><code>b9d882</code></pre><pre><code>b8c0b2</code></pre>\n<pre><code>bf7562</code></pre><pre><code>b74412</code></pre><pre><code>bd9c52</code></pre><pre><code>be3aa2</code></pre>\n\n\n2022\n<pre><code>5ae940</code></pre><pre><code>592870</code></pre><pre><code>52acb0</code></pre><pre><code>530d30</code></pre>\n<pre><code>5814a0</code></pre><pre><code>5d5b20</code></pre><pre><code>54cf10</code></pre><pre><code>559090</code></pre>\n<pre><code>5ae944</code></pre><pre><code>592874</code></pre><pre><code>52acb4</code></pre><pre><code>530d34</code></pre>\n<pre><code>5814a4</code></pre><pre><code>5d5b24</code></pre><pre><code>54cf14</code></pre><pre><code>559094</code></pre>\n<pre><code>5ae94c</code></pre><pre><code>59287c</code></pre><pre><code>52acbc</code></pre><pre><code>530d3c</code></pre>\n<pre><code>5814ac</code></pre><pre><code>5d5b2c</code></pre><pre><code>54cf1c</code></pre><pre><code>55909c</code></pre>\n<pre><code>5814a2</code></pre><pre><code>5d5b22</code></pre><pre><code>54cf12</code></pre><pre><code>559092</code></pre>\n<pre><code>5ae942</code></pre><pre><code>592872</code></pre><pre><code>52acb2</code></pre><pre><code>530d32</code></pre>\n<pre><code>5814aa</code></pre><pre><code>5d5b2a</code></pre><pre><code>54cf1a</code></pre><pre><code>55909a</code></pre>\n<pre><code>5ae94a</code></pre><pre><code>59287a</code></pre><pre><code>52acba</code></pre><pre><code>530d3a</code></pre>\n\n\n\n\nSo in 2019, I bought remote with Id <pre><code>b</code></pre> and in 2002 the new remote has Id <pre><code>5</code></pre>\nWhat can be seen is that if bit 1 of the button Id is set, then the meaning of the action code is reversed.\nWhat I could not figure out yet is how to detect that a given button Id is the \"Master\" one for the remote. For remote <pre><code>5</code></pre>, it could be because <pre><code>a</code></pre> is the binary complement of the remote Id, but this does not work for remote Id <pre><code>b</code></pre>\nAnd as already mentioned above, I cannot figure out the logic that connects together any given set of 4 action codes. As a reference, here are the 6 sets I have so far:\n\n\n\n\nSet 1\nSet 2\nSet 3\nSet 4\nSet 5\nSet 6\n\n\n\n\n<pre><code>f756</code></pre><pre><code>7441</code></pre><pre><code>d9c5</code></pre><pre><code>e3aa</code></pre>\n<pre><code>20e7</code></pre><pre><code>5212</code></pre><pre><code>9d88</code></pre><pre><code>8c0b</code></pre>\n<pre><code>6af3</code></pre><pre><code>453f</code></pre><pre><code>0f6e</code></pre><pre><code>c170</code></pre>\n<pre><code>16bc</code></pre><pre><code>3b99</code></pre><pre><code>b8dd</code></pre><pre><code>ae24</code></pre>\n<pre><code>ae94</code></pre><pre><code>9287</code></pre><pre><code>2acb</code></pre><pre><code>30d3</code></pre>\n<pre><code>814a</code></pre><pre><code>d5b2</code></pre><pre><code>4cf1</code></pre><pre><code>5909</code></pre>\n\n\n\n\nI have tried various things like xor-ing, and-ing, or-ing values in a group, comparing bits set to 1 in any given values but I could not figure out what makes those group of 4 values related to each other.\nI understand that this is quite a lengthy message, but I wanted to make sure that I share all the discoveries I made into this endeavor.\nI totally admit that I can store the above 6 sets of values in a constant array and be done with it, but this would leave an itch in my brain...\nMany thanks in advance for any suggestions, things to try, hints...\n\nEDIT 2002 02 05\nThe remote appears to have a global value indicated which of the next four possible values is to be used.\nIf we consider the 2022 remote, On button A is in the <pre><code>ae94</code></pre>, <pre><code>9287</code></pre>, <pre><code>2acb</code></pre>, <pre><code>30d3</code></pre> group and On button D is in the <pre><code>814a</code></pre>, <pre><code>d5b2</code></pre>, <pre><code>4cf1</code></pre>, <pre><code>5909</code></pre> group.\nHere are the codes used following the button presses in that sequence:\n\n\n\n\nButton\nCode used\n\n\n\n\nOn A\n<pre><code>ae94</code></pre>\n\n\nOn D\n<pre><code>d5b2</code></pre>\n\n\nOn A\n<pre><code>2acb</code></pre>\n\n\nOn A\n<pre><code>30d3</code></pre>\n\n\nOn D\n<pre><code>814a</code></pre>\n\n\n\n\nAs you can see, some values are \"skipped\" because another button was pressed.\nTaking the battery off for a while and placing it back on does not change the codes that are sent by the remote.\nBoth sets are sold by LIDL under the Silvercrest brand, the one from 2019 having those references:\nIAN 284705\nArticle# 1 04772 1706\nWhile the one from 2022 has those:\nReference 36626_2101\nModel 8 50 50 00066\nBoth remotes look like this:\n\nThe whole point of this research is to be able to make the plugin for the RFLink32 project much more flexible. Indeed, it currently uses the \"truth table\" approach which only works with my own set of sockets.\n",
    "votes": "2",
    "answers": 1,
    "views": "98",
    "tags": [
        "radio-interception"
    ],
    "user": "OBones",
    "time": "Feb 5, 2022 at 14:58",
    "comments": [],
    "answers_data": [
        {
            "content": "is the next step in a sequence of on action like\n<pre><code>f756\n7441\nd9c5\ne3aa\n</code></pre>\nthe same, also when another action comes in between?\nDid you tried if action code is generated in some way by remote id, button id, 1-4 (0-3)?\nI think in learning mode it needs only to learn remote id, and other are known by algorithm used.\nEdit 220205\nso there is a counter# 0-3 to consider. Just an idea to work out: you have input remote id, button id, counter# and action will be calculated by CRC-16 (because of variability of codes) or whatever.\nTo be clear: I'm not expert in that matter, just sharing my ideas as I'm working on similar issue.\nEdit 220212\nLooking over the dataset again, I think it is possible just to do some assumptions for the algorithm behind, some of them can be tested, some not, just because of lack of data.\n\nI agree that remoteID is nibble#1, maybe hardcoded or as per DIP switch in remote\nnibble#5 is switchID as you said, and I think its generated by algorithm. All sockets need to know independent from remote  what switchID the master is, depending on send remoteID, specifically a \"2\" could be code for socket \"D\" or master.\nAssumption could be, that switchID for master is \"<pre><code>remoteID ^ F</code></pre>\" and \"<pre><code>remoteID ^ 9</code></pre>\" depending on bit1 at remoteIDs is set or not. The same works similar with bit2 set or not set for remoteID. Several other methods are possible, but cannot be verified due to lack of data with other remoteIDs. Maybe there is also a method that works for all remoteID, without any \"if-clause\".\nI think, for actionCode there is not any roting code needed for proper work. When \"A\"-On is pressed, then pressing 3 other buttons, and again \"A\"-on it will send the same message again. For me the 4 options seems just obfuscation. At least for \"2022\" remote it's worth to try with only one code for \"On\" and \"off\" each. And if that is true, why not also for \"2019\" remote?\nThis theory can be easily verified: switch on \"A\", press 3 times a button and remote is far away from socket, then again \"A\" off. When this repeated key is accepted, no rotating code is needed.\nHowever, this doesn't give any clue at the moment how action code is generated.\n\nEdit 220213\nIn some articles on this remote I have found my assumption confirmed that no rolling code is needed to switch on/off. A single action code per remoteID should suffice.\nHowever the method to generate the action code is unknown, since almost 10 years now. Best information seems to be a semi-encryption method using table substitution here, \"AnBan\". Sometimes it is called Quigg GT-1000 protocol, details also unknown. As it comes to the point that a 14Pin chip inside generates the codes all discussions ends without better result.\nMaybe someone else being more clever will find out the details.\n",
            "votes": "3",
            "user": "dieter reichl",
            "time": "Mar 7, 2022 at 12:59",
            "is_accepted": false,
            "comments": []
        }
    ]
}