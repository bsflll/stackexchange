{
    "title": "far jump do not point to instruction?",
    "link": "https://reverseengineering.stackexchange.com/questions/26825/far-jump-do-not-point-to-instruction",
    "content": "My title is kind of ambiguous and not sure if it is true, Hence the question mark at the end.\nBasically, I was trying to trace windows <pre><code>printf</code></pre> in NASM to identify \"what is the last call/function that outputs the sting\". Long story short after a bunch of break points and etc. I found below:\n<pre><code>[EIP] debug034:77126000 jmp     far ptr 33h:77126009h\n</code></pre>\n\nAs soon as my EIP step over this line, the console outputs my string.\nMy work doesn't work end here. So, I tried to trace the jmp and see what it points to:\n\nAs you can see in the image, the jmp above to point to this location/<pre><code>unk_77126339</code></pre>(after pressing <pre><code>d</code></pre> the location changed from unk_ to byte_) which is empty data (not sure, just saying because of the <pre><code>db</code></pre>)\nI also tried to jump to <pre><code>f8a7ff41</code></pre> below the jump, but that still points to emptiness.\nWould you know what is going on here? or how do I jump to the next instruction of printf here?\n",
    "votes": "2",
    "answers": 1,
    "views": "261",
    "tags": [
        "windows",
        "nasm"
    ],
    "user": "neehack",
    "time": "Jan 20, 2021 at 0:48",
    "comments": [
        {
            "user": "Ian Cook",
            "text": "Does this answer your question? How to investigate Windows 32/64bit (WOW64) transition\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "first of all you have a 32bit binary and you are debugging it on a 64 bit system\nsee the wow64 symbol\nit means you are looking at some kind of in-between\nit means the far jump is pointing to a different code segment (see the present code segment 0x43 versus the codes segment of 0x33\nplease get yourself familiarised with code segments and privilege levels\nbasically printf reaches Ntdll!NtWriteFile before transitioning into kernel  via a syscall\nthe far jump you are seeing is layer a glue between 32bit syscall and 64bit execution\ngoogle for words like wow64 ,heavensgate etc and skim them\nhere is a summary of x86 compiled binary debugged on a x64 windbg with code as shown below\n<pre><code>:\\>ls -lg\ntotal 1\n-rw-r--r-- 1 197121 82 Jan 20 09:03 printf.cpp\n\n:\\>cat printf.cpp\n#include <stdio.h>\nint main (void) {\n        printf (\"hello jmp far\n\");\n        return 0;\n}\n:\\>cl /Zi /W4 /analyze /Od /EHsc /nologo printf.cpp /link /release\nprintf.cpp\n\n:\\>ls -lg\ntotal 6794\n-rw-r--r-- 1 197121      82 Jan 20 09:03 printf.cpp\n-rwxr-xr-x 1 197121  301568 Jan 20 09:05 printf.exe\n-rw-r--r-- 1 197121      59 Jan 20 09:05 printf.nativecodeanalysis.xml\n-rw-r--r-- 1 197121    5283 Jan 20 09:05 printf.obj\n-rw-r--r-- 1 197121 6574080 Jan 20 09:05 printf.pdb\n-rw-r--r-- 1 197121   69632 Jan 20 09:05 vc140.pdb\n\n:\\>printf.exe\nhello jmp far\n</code></pre>\nhere is a simple trace entering and executing all the calls until the string is printed\nscroll to  the end to see the transition\n<pre><code>:\\>cdb printf.exe\n\nMicrosoft (R) Windows Debugger Version 10.0.17763.132 AMD64\n\n(1674.4d4): Break instruction exception - code 80000003 (first chance)\nntdll!LdrpDoDebuggerBreak+0x30:\n00007ffa`ac6f0fcc cc              int     3\n0:000> g printf!main\nModLoad: 00000000`77070000 00000000`77079000   C:\\WINDOWS\\System32\\wow64cpu.dll\nModLoad: 00000000`74eb0000 00000000`74f90000   C:\\WINDOWS\\SysWOW64\\KERNEL32.DLL\nModLoad: 00000000`76e50000 00000000`7704f000   C:\\WINDOWS\\SysWOW64\\KERNELBASE.dll\n(1674.4d4): WOW64 breakpoint - code 4000001f (first chance)\nFirst chance exceptions are reported before any exception handling.\nThis exception may be expected and handled.\nntdll_77080000!LdrpDoDebuggerBreak+0x2b:\n7712ecc2 cc              int     3\n0:000:x86> g printf!main\nprintf!main:\n00181000 55              push    ebp\n0:000:x86> uf .\nprintf!main:\n00181000 55              push    ebp\n00181001 8bec            mov     ebp,esp\n00181003 6890011c00      push    offset printf!__xt_z+0x8 (001c0190)\n00181008 e853000000      call    printf!printf (00181060)\n0018100d 83c404          add     esp,4\n00181010 33c0            xor     eax,eax\n00181012 5d              pop     ebp\n00181013 c3              ret\n\n0:000:x86> pc\nprintf!main+0x8:\n00181008 e853000000      call    printf!printf (00181060)\n0:000:x86> t\nprintf!printf:\n00181060 55              push    ebp\n0:000:x86> pc\nprintf!printf+0x18:\n00181078 e82ea10000      call    printf!__acrt_iob_func (0018b1ab)\n0:000:x86> t\nprintf!__acrt_iob_func:\n0018b1ab 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!printf+0x21:\n00181081 e8aaffffff      call    printf!_vfprintf_l (00181030)\n0:000:x86> t\nprintf!_vfprintf_l:\n00181030 55              push    ebp\n0:000:x86> pc\nprintf!_vfprintf_l+0x13:\n00181043 e8d8ffffff      call    printf!__local_stdio_printf_options (00181020)\n0:000:x86> t\nprintf!__local_stdio_printf_options:\n00181020 55              push    ebp\n0:000:x86> pc\nprintf!_vfprintf_l+0x1f:\n0018104f e884b70100      call    printf!__stdio_common_vfprintf (0019c7d8)\n0:000:x86> t\nprintf!__stdio_common_vfprintf:\n0019c7d8 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__acrt_lock_stream_and_call+0x30 [inlined in printf!__stdio_common_vfprintf+0x7c]:\n0019c854 e83eedfeff      call    printf!__crt_seh_guarded_callxxxlambdaing\n0:000:x86> t\nprintf!__crt_seh_guarded_call<int>::operator()<<lambdaing\n0018b597 6a0c            push    0Ch\n0:000:x86> pc\nprintf!__crt_seh_guarded_call<int>::operator()<<lambda_ing\n0018b59e e80d65ffff      call    printf!__SEH_prolog4 (00181ab0)\n0:000:x86> t\nprintf!__SEH_prolog4:\n00181ab0 6890201800      push    offset printf!_except_handler4 (00182090)\n0:000:x86> pc\nprintf!__acrt_lock_stream_and_call::__l2::<lambda_8ing\n0018b5ac e89cfcffff      call    printf!_lock_file (0018b24d)\n0:000:x86> t\nprintf!_lock_file:\n0018b24d 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!_lock_file+0xc:\n0018b259 ff154c001c00    call    dword ptr [printf!_imp__EnterCriticalSection\n0:000:x86> t\nntdll_77080000!RtlEnterCriticalSection:\n770cadc0 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__crt_seh_guarded_call<int>::operator()<<lambda_8\n0018b5b9 e880520000      call    printf!<lambda_df\n0:000:x86> t\nprintf!<lambda_df52180bf14694d51fdefd82613e8f07>::operator():\n0019083e 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__acrt_stdio_temporary_buffering_guard::{ctor}+0x1 [inl\n0019085c e84e750100      call    printf!__acrt_stdio_begin\n0:000:x86> t\nprintf!__acrt_stdio_begin_temporary_buffering_nolock:\n001a7daf 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__acrt_stdio_begin_temporary_buffering_nolock+0xc:\n001a7dbb e80afeffff      call    printf!_fileno (001a7bca)\n0:000:x86> t\nprintf!_fileno:\n001a7bca 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__acrt_stdio_begin_temporary_buffering_nolock+0x12:\n001a7dc1 e85ed90000      call    printf!_isatty (001b5724)\n0:000:x86> t\nprintf!_isatty:\n001b5724 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__acrt_stdio_begin_temporary_buffering_nolock+0x23:\n001a7dd2 e8d433feff      call    printf!__acrt_iob_func (0018b1ab)\n0:000:x86> t\nprintf!__acrt_iob_func:\n0018b1ab 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__acrt_stdio_begin_temporary_buffering_nolock+0x6d:\n001a7e1c e88ed0ffff      call    printf!_malloc_base (001a4eaf)\n0:000:x86> t\nprintf!_malloc_base:\n001a4eaf 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!_malloc_base+0x32:\n001a4ee1 ff159c001c00    call    dword ptr [printf!_imp__HeapAlloc\n0:000:x86> t\nntdll_77080000!RtlAllocateHeap:\n770cf910 8bff            mov     edi,edi\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx cut off spew\nntdll_77080000!RtlLeaveCriticalSection:\n770ba180 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__crt_internal_free_policy::operator()+0x4 [inli\n001a7e25 e8e5acffff      call    printf!_free_base (001a2b0f)\n0:000:x86> t\nprintf!_free_base:\n001a2b0f 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!<lambda_df52180bf14694d51fdefd82613e8f07>::operator()+0x35:\n00190873 e8f3f9ffff      call    printf!_LocaleUpdate::_LocaleUpdate (0019026b)\n0:000:x86> t\nprintf!_LocaleUpdate::_LocaleUpdate:\n0019026b 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__crt_stdio_output::standard_base<char,__crt_stdio_output::stream_output_adapter\n001908a8 e88af6ffff      call    printf!__crt_stdio_output::output_adapter_data\n0:000:x86> t\nprintf!__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_ou\n0018ff37 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__crt_stdio_output::output_adapter_data<char,__crt_stdio_output::stream_output_ad\n0018ff3f e860ffffff      call    printf!__crt_stdio_output::common_data<char>::common_data<char> (0018fea4)\n0:000:x86> t\nprintf!__crt_stdio_output::common_data<char>::common_data<char>:\n0018fea4 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!<lambda_df52180bf14694d51fdefd82613e8f07>::operator()+0x79:\n001908b7 e88c150000      call    printf!__crt_stdio_output::output_pro\n0:000:x86> t\nprintf!__crt_stdio_output::output_processor<char,__crt_stdio_ou\n00191e48 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__crt_stdio_output::output_processor<char,__crt_stdio_outp\n00191e54 e881930000      call    printf!__crt_stdio_output::stre\n0:000:x86> t\nprintf!__crt_stdio_stream::valid [inlined in printf!__crt_stdio_output::stream_o\n0019b1da 8b01            mov     eax,dword ptr [ecx]  ds:002b:009ef804=001c9078\n0:000:x86> pc\nprintf!__crt_stdio_output::stream_output_adapter<char>::validate+0x1a:\n0019b1f4 e8a5090000      call    printf!__acrt_stdio_char_traits<char>::va\n0:000:x86> t\nprintf!__acrt_stdio_char_traits<char>::validate_stream_is_ansi_if_required:\n0019bb9e 8bff            mov     edi,edi\n0:000:x86> pc\nprintf!__acrt_stdio_char_traits<char>::validate_stream_is_ansi_if_required+0x16:\n0019bbb4 e811c00000      call    printf!_fileno (001a7bca)\n0:000:x86> t\nprintf!_fileno:\n001a7bca 8bff            mov     edi,edi\n0:000:x86> pc\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz cut off spew\n0:000:x86>\nprintf!<lambda_df52180bf14694d51fdefd82613e8f07>::operator()+0x86:\n001908c4 e892fbffff      call    printf!__crt_stdio_output::format\n0:000:x86>\nprintf!__crt_internal_free_policy::operator()+0x9 [inlined in pr\n00190466 e8a4260100      call    printf!_free_base (001a2b0f)\n0:000:x86>\nprintf!__acrt_stdio_temporary_buffering_guard::{dtor}+0x7 \n001908e6 e877750100      call    printf!__acrt_stdio_end_tempo\n0:000:x86>\nprintf!__acrt_stdio_end_temporary_buffering_nolock+0x1e:\n001a7e80 e827c3ffff      call    printf!__acrt_stdio_flush_nolock (001a41ac)\n0:000:x86>\nprintf!__acrt_stdio_flush_nolock+0x31:\n001a41dd e8e8390000      call    printf!_fileno (001a7bca)\n0:000:x86>\nprintf!__acrt_stdio_flush_nolock+0x38:\n001a41e4 e849c90000      call    printf!_write (001b0b32)\n0:000:x86>\nprintf!_write+0x7:\n001b0b39 e8720ffdff      call    printf!__SEH_prolog4 (00181ab0)\n0:000:x86>\nprintf!_write+0x5f:\n001b0b91 e818a9ffff      call    printf!__acrt_lowio_lock_fh (001ab4ae)\n0:000:x86>\nprintf!__acrt_lowio_lock_fh+0x1b:\n001ab4c9 ff154c001c00    call    dword ptr [printf!_imp__EnterCrit\n0:000:x86>\nprintf!_write+0x9c:\n001b0bce e847000000      call    printf!_write_nolock (001b0c1a)\n0:000:x86>\nprintf!_write_nolock+0x95:\n001b0caf e8fefaffff      call    printf!write_requires_double_translation_nolock (001b07b2)\n0:000:x86>\nprintf!write_requires_double_translation_nolock+0xc:\n001b07be e8614f0000      call    printf!_isatty (001b5724)\n0:000:x86>\nprintf!write_requires_double_translation_nolock+0x2f:\n001b07e1 e80065ffff      call    printf!__acrt_getptd (001a6ce6)\n0:000:x86>\nprintf!__crt_scoped_get_last_error_reset::{ctor} [inlined in printf!__acrt_getptd+0x5]:\n001a6ceb ff1544001c00    call    dword ptr [printf!_imp__GetLastError \n0:000:x86>\nprintf!try_get_ptd_head+0xb [inlined in printf!__acrt_getptd+0x18]:\n001a6cfe e8edc7ffff      call    printf!__acrt_FlsGetValue (001a34f0)\n0:000:x86> t;pc\nprintf!try_get_FlsGetValue+0x11 [inlined in printf!__acrt_FlsGetValue+0x17]:\n001a3507 e834fcffff      call    printf!try_get_function (001a3140)\n0:000:x86>\nprintf!__acrt_FlsGetValue+0x2a:\n001a351a ff1544011c00    call    dword ptr [printf!__guard_check_icall_fptr \n0:000:x86>\nprintf!__acrt_FlsGetValue+0x30:\n001a3520 ffd6            call    esi {KERNELBASE!FlsGetValue (76f3fc60)}\n0:000:x86>\nKERNELBASE!FlsGetValue+0x15:\n76f3fc75 ff1508a90177    call    dword ptr [KERNELBASE!_imp__RtlFlsGetValue \n0:000:x86>\nprintf!__acrt_getptd+0xa3:\n001a6d89 ff1548001c00    call    dword ptr [printf!_imp__SetLastError \n0:000:x86>\nntdll_77080000!RtlSetLastWin32Error+0x34:\n770df8b4 e897570100      call    ntdll_77080000!__security_check_cookie (770f5050)\n0:000:x86>\nprintf!_write_nolock+0x130:\n001b0d4a e8d6faffff      call    printf!write_text_ansi_nolock (001b0825)\n0:000:x86>\nprintf!write_text_ansi_nolock+0xa:\n001b082f e8fcc30000      call    printf!_chkstk (001bcc30)\n0:000:x86>\nprintf!write_text_ansi_nolock+0x9c:\n001b08c1 ff1584001c00    call    dword ptr [printf!_imp__WriteFile \n0:000:x86>\nKERNELBASE!WriteFile+0x7:\n76f41877 e858920400      call    KERNELBASE!_SEH_prolog4 (76f8aad4)\n0:000:x86>\nKERNELBASE!WriteFile+0x52:\n76f418c2 ff15c0a70177    call    dword ptr [KERNELBASE!_imp__NtWriteFile \n0:000:x86>\nntdll_77080000!NtWriteFile+0xa:\n770f2f7a ffd2            call    edx {ntdll_77080000!Wow64SystemServiceCall (77109ef0)}\n0:000:x86>\nwow64cpu!ReadWriteFileFault+0x2c:\n00000000`77071995 e816030000      call    wow64cpu!CpupSyscallStub (00000000`77071cb0)\n0:000>\nwow64cpu!CpupSyscallStub+0xa:\n00000000`77071cba 0f05            syscall \n0:000>\nhello jmp far        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< string printed \nprintf!write_text_ansi_nolock+0xd4:\n001b08f9 e8d713fdff      call    printf!__security_check_cookie (00181cd5)\n0:000:x86>\n</code></pre>\nyou can see the same jmp far in the concise single execution\n<pre><code>:\\>cdb -c \"bp KERNELBASE!WriteFile;g;g;pc;pc;t;pc;t;r;t;r;t;r;t;g;q\" printf.exe  | awk /\"Reading/,/quit/\"\n\n0:000> cdb: Reading initial command 'bp KERNELBASE!WriteFile;g;g;pc;pc;t;pc;t;r;t;r;t;r;t;g;q'\n\nBp expression 'KERNELBASE!WriteFile' could not be resolved, adding deferred bp\n\n\n(1b10.1678): WOW64 breakpoint - code 4000001f (first chance)\n\nBreakpoint 0 hit\neax=001a0008 ebx=00000000 ecx=00000000 edx=77109ef0 esi=0135e2e8 edi=00000054\neip=77109ef0 esp=0135e258 ebp=0135e2bc iopl=0         nv up ei pl zr na pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246\nntdll_77080000!Wow64SystemServiceCall:\n77109ef0 ff2528121a77    jmp     dword ptr [ntdll_77080000!Wow64Transition (771a1228)] \neax=001a0008 ebx=00000000 ecx=00000000 edx=77109ef0 esi=0135e2e8 edi=00000054\neip=77076000 esp=0135e258 ebp=0135e2bc iopl=0         nv up ei pl zr na pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246\nwow64cpu!KiFastSystemCall:\n77076000 ea096007773300  jmp     0033:77076009 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nrax=00000000001a0008 rbx=0000000000000000 rcx=0000000000000000\nrdx=0000000077109ef0 rsi=000000000135e2e8 rdi=0000000000000054\nrip=0000000077076009 rsp=000000000135e258 rbp=000000000135e2bc\n r8=000000000000002b  r9=00000000770f314c r10=0000000000000000\nr11=000000000125def0 r12=0000000001052000 r13=000000000125fda0\nr14=000000000125e7e0 r15=0000000077073620\niopl=0         nv up ei pl zr na po nc\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246\nwow64cpu!KiFastSystemCall+0x9:\n00000000`77076009 41ffa7f8000000  jmp     qword ptr [r15+0F8h] ds:00000000`77073718={wow64cpu!CpupRe\nhello jmp far\n\nquit:\n\n:\\>\n</code></pre>\n",
            "votes": "3",
            "user": "blabb",
            "time": "Jan 20, 2021 at 4:20",
            "is_accepted": false,
            "comments": []
        }
    ]
}