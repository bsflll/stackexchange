{
    "title": "Decrypt SSL/TLS traffic from a Java web applet",
    "link": "https://reverseengineering.stackexchange.com/questions/11112/decrypt-ssl-tls-traffic-from-a-java-web-applet",
    "content": "I am trying to reverse engineer the protocol of a chat written in java to implement my own client. The official client is a java applet embedded in the website so I thought it might use just https but I found using wireshark that it uses a generic protocol and an arbitrary port. My first approach was to use the java proxy settings and proxifier to force the traffic through fiddler in hope it might give me some more information about the protocols structure but with no success - fiddler did not even recognize the traffic but I guess thats because it was developed for http/s traffic only.\nSo my question is: How can I reverse engineer the protocol used? I thought that there has to be something similar to fiddler using a socket proxy or a network bridge (similar to what a lot of VPN clients use) but I could not find anything working under windows. Another approach would be to decompile the java binaries but I am not really interested in the code itself only in the protocol. Any suggestions how to proceed from here?\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "decryption",
        "java",
        "protocol"
    ],
    "user": "Ganymed_",
    "time": "Oct 15, 2015 at 11:54",
    "comments": [],
    "answers_data": [
        {
            "content": "You don't really need another tool if you know how to use wireshark. Wireshark will let you extract the TCP part of a stream, which is exactly what you'll get using any kind of proxy or network bridge as well.\nFrom your description, i assume the protocol isn't just some kind of plain text, like your chat being encapsulated into SOAP in XML - it'd be easy to analyze this. The problem with binary data is that you can make some guesses, but if they don't fit, you can't really do much more than analyze the applet.\nWhat i'd do if i were you is:\n\nForce wireshark to treat the connection as SSL (right-click a packet, \"Decode as\", then select SSL). If the communication is SSL-encrypted, wireshark should at least find a decodable client hello / server hello packet exchange at the start. If that packet exchange makes sense, you could proceed with fiddling with DNS to redirect the client's request, and set up fiddler, stunnel, or mitmproxy to receive, decode, and forward those requests.\nCapture a few dozen KB of traffic, and save the resulting TCP stream to a file. Try to compress this file with gzip. If it compresses well, then the TCP stream probably isn't compressed, just encrypted with a weak, XOR like, algorithm. Type 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' into the chat. Then type 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' into the chat. Check what happens with the data on the wire. Maybe this will give you a hunch how the data is encoded and an idea of how to proceed.\nIf the TCP stream doesn't compress, it's either precompressed, or encrypted with an algorithm that adds a lot of entropy. Comparing the size of the chat text with the size of the TCP stream might give you an idea which it is. If it's compressed, check the first few bytes of each packet, if they're similar, it might be that each packet has its individual compression. Check these first few bytes, or the first bytes of the stream, against signatures of well-known compression algorithms.\nIf all this doesn't help, you best guess is running the whole thing through a java decompiler (there's a nice collection at http://www.javadecompilers.com/), as there's not really a good way to guess an encryption algorithm and/or key from the output byte stream alone.\n\nBy the way, it can't hurt to mention on which web site you found the chat (even if it's something embarassing like littlenudegirls.com, as you're not using your real name here); maybe someone else is reading this and has more detailed information to share about your particular web site, or maybe someone will google for that in the future and contact you to work on it together.\n",
            "votes": "3",
            "user": "Guntram Blohm",
            "time": "Oct 15, 2015 at 13:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ganymed_",
                    "text": "<span class=\"comment-copy\">Hey, thanks for the answer and sorry for the late reply - I tried all of your suggestions (took me a while), maybe I am not experienced enough but I think there are different clients depending on the date you created your account, some seem to use just a gzip compression others use an SSL connection. I will try to decompile at least one client and hopefully get some answers. Will post here again as soon as I know more.</span>",
                    "time": null
                }
            ]
        }
    ]
}