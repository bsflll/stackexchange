{
    "title": "Strange memory allocation behaviour",
    "link": "https://reverseengineering.stackexchange.com/questions/25911/strange-memory-allocation-behaviour",
    "content": "I'm currently working on a modding library for a particular game, and I have come across a part of the menu system that I can't figure out the purpose of.\nThe expression in question is this:\n<pre><code>unsigned num = ((n + 1) * 4) / 3 + 3;\n</code></pre>\nThe game then goes on to use the value to allocate space for menu item structures:\n<pre><code>void *newItemStorage = allocate(num * 0x18);\n\n// 0x18 = sizeof(menu item structure)\n</code></pre>\n<pre><code>n</code></pre> is the number of menu item structures there are currently, and the code containing this maths is used to allocate space for more structures when there is not currently enough (the old array is copied into the new space with <pre><code>memcpy</code></pre>).\nFrom what I can tell, this system must be allocating more space than it needs so that fewer reallocations need to happen in the future. However, I don't see why this particular formula must be used to work out the space. The game stores <pre><code>num</code></pre> and only reallocates again when <pre><code>num < n + 1</code></pre>.\nI actually graphed the formula when I was working out what it did, so here is that graph. (I used <pre><code>floor</code></pre> to try to simulate integer division.) One of the parts I find most confusing is the fact that <pre><code>num</code></pre> is in groups of three:\nStarting at <pre><code>n = 0</code></pre> and increasing by 1 yields:\n<pre><code>4, 5,  7, 8, 9,  11, 12, 13</code></pre>.\nIf this is some system for preallocating memory, why is it being done like this? If not, what is the system doing?\n",
    "votes": "1",
    "answers": 0,
    "views": "45",
    "tags": [
        "memory",
        "static-analysis"
    ],
    "user": "squ1dd13",
    "time": "Sep 16, 2020 at 16:36",
    "comments": [],
    "answers_data": []
}