{
    "title": "Debug a windows service entry without windbg",
    "link": "https://reverseengineering.stackexchange.com/questions/19230/debug-a-windows-service-entry-without-windbg",
    "content": "An answer to a similar question here mentions that the entry of a windows service can be patched to allow attaching a debugger (in my case x64dbg). Google searches on the topic are all related to setting a breakpoint in the source.\nI'd like to know how exactly this is done when only a binary is available.\nI'm trying to port a windows service to Linux. I'm not very familiar with the windows OS. While I can step through normal routines, the service probes the hardware and sets up a few global values. For this reason I need to know exactly what is being sent/received during its initialization.\nI did try <pre><code>windbg</code></pre> but found it to be very difficult to use when no source code is present.\n",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "kernel-mode",
        "x64dbg",
        "windows-10"
    ],
    "user": "Twifty",
    "time": "Sep 2, 2018 at 17:25",
    "comments": [
        {
            "user": "Devender Singh Rana",
            "text": "Does x64dbg support kernel level debugging like windbg?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I'll post my own answer here so I can find this again in the future.\n\nUsing CFF Explorer open the service binary.\nFind the <pre><code>AddressOfEntryPoint</code></pre> in the <pre><code>Optional Header</code></pre>.\nFind the <pre><code>.text</code></pre> entry in <pre><code>Section Headers</code></pre>.\nCalculate <pre><code>raw_offset = raw_address - virtual_address + AddressOfEntryPoint</code></pre>.\nWithin the built-in hex editor, navigate to <pre><code>raw_address</code></pre>.\nChange the two bytes there to <pre><code>EB FE</code></pre>.\nSave and exit.\nModify <pre><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ServicesPipeTimeout</code></pre> to <pre><code>0xFFFFFFFF</code></pre> (requires reboot).\nReplace service with patched version and start (its status should become 'starting').\nIn <pre><code>x64dbg</code></pre> check <pre><code>Enable Debug Privilege</code></pre>, restart <pre><code>x64dbg</code></pre>.\nAttach to the service.\nReplace the <pre><code>EB FE</code></pre> bytes with their original values.\nThe entry point can now be debugged.\n\nOther notes - <pre><code>x64dbg</code></pre> will not stop at the entry point of a running service. Use the command <pre><code>:EntryPoint</code></pre> to display its address and scroll into view.\n",
            "votes": "7",
            "user": "ProGM",
            "time": "Oct 9, 2018 at 15:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}