{
    "title": "bypassing anti-VM inside protected samples",
    "link": "https://reverseengineering.stackexchange.com/questions/18195/bypassing-anti-vm-inside-protected-samples",
    "content": "This  is a good starting point.\nAs you know:\nSandboxes and virtual environments (hypervisors) are full of artifacts that betray their analysis environment. Malware can protect itself against these by running some checks to detect such environments before performing any malicious actions.\nI'm looking for ways for a malware analyst to bypass these protections to overcome this anti-VM (anti-hypervisor) stuff?\n",
    "votes": "1",
    "answers": 1,
    "views": "906",
    "tags": [
        "binary-analysis",
        "malware",
        "pe",
        "unpacking",
        "dynamic-analysis"
    ],
    "user": "zerocool",
    "time": "Jul 12, 2018 at 7:45",
    "comments": [
        {
            "user": "Anton Kukoba",
            "text": "there's no generic bypass solution AFAIK, so you'll have to learn how this exact malware detects the VM, and implement your own bypass.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "This is a bit of a broad question, but it may attract some high quality answers nevertheless. There are a myriad of anti-hypervisor and anti-anti-hypervisor techniques. Example: a search for <pre><code>CXPInspector</code></pre> will give you a number of papers (from 5 years ago) that were made into a commercial product. The idea there was to provide introspection into hypervisor guests using shadow page tables (CPU feature!) and knowledge about the system running as guest. No artifacts need to be inside a sandbox created this way. The papers provide a good starting point for own projects.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is no exact way to bypass them but when I have to deal with them, I first try to figure out all those places where anti techniques have been present in assembly code by generally looking at imports and api calls. Then the best way to bypass them is to patch them with some other instructions, so when you run the program there code doesn't get executed.\n",
            "votes": "2",
            "user": "shubham0d",
            "time": "May 12, 2018 at 7:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}