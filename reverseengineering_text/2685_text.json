{
    "title": "Debugging Shellcode with Bochs and IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/2685/debugging-shellcode-with-bochs-and-ida-pro",
    "content": "I am using the Local Bochs Debugger along with IDA Pro to debug a shellcode. This shellcode disassembles properly in IDA Pro, however, now I want to debug it.\nI tried debugging but since the configuration of Bochs is bare metal, it will not be able to execute some code properly, for instance:\n<pre><code>xor eax, eax\nmov eax, dword ptr fs:[eax+0x30] // PEB\n</code></pre>\nSince PEB is a structure defined in the Windows Operating System, Bochs does not execute this code properly (does not load the PEB address in eax).\nSimiarly, other sections of code which parse the kernel32.dll structure to find various API addresses also does not work.\nHow can I debug the shellcode with IDA Pro and Bochs Debugger?\nI also have the following:\n<pre><code>Windows XP SP3 Guest OS running in VMWare workstation.\nIDA Pro running on the host OS.\n</code></pre>\nIs it possible to place the shellcode.txt file inside the Guest OS and then debug it using IDA Pro on the host OS? I think in this case, the Windows Debugger, windbg's engine can be used.\nWhat will be the configuration? In the following article:\nhttps://www.hex-rays.com/products/ida/support/tutorials/debugging_windbg.pdf\nIt describes how to debug a remote process running on Windows. But in my case, it is not a process but a shellcode loaded from a text file.\n",
    "votes": "6",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida"
    ],
    "user": "Neon Flash",
    "time": "Aug 24, 2013 at 20:46",
    "comments": [
        {
            "user": "j0ker",
            "text": "If it does not have to be Bochs, an easy way ro debug shellcode by injecting it into a running process with OllyDbg is described here: blackc0.de/2014/06/shellcode-debugging-ollydbg\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For testing shellcode on windows and in general, it's good idea to wrap it in a small program that executes it. \nWhat you could do is write a small program that would read the shellcode, say , from a file into malloc()-ed buffer and then jump to it. \nOn windows, you'd probably want to use VirtualProtect to set PAGE_EXECUTE_READWRITE permissions on that memory area before jumping to it. \nAfter reading shellcode into malloced memory and setting the execute permissions, you can simply use function pointer to call/jump to it. \nThis will produce the executable binary which you can run in any debugger, set the breakpoint just before the function pointer call and then debug the shellcode as you wish.\nEDIT:\nA quick search reveals just a program like that in an article about Windows x64 Shellcode. The same code can be applied on 32bit Windows.\n",
            "votes": "6",
            "user": "0xea",
            "time": "Aug 24, 2013 at 22:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}