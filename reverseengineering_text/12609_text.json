{
    "title": "Whats going on in this Class Constructor?",
    "link": "https://reverseengineering.stackexchange.com/questions/12609/whats-going-on-in-this-class-constructor",
    "content": "meanwhile, I am learning more and more how to reverse engineer. Ive figured out tons of stuff already, but I came to the point, where I just need some little explanation whats going on in the constructor of a specific class.\nI know, that this specific class (Class A) inherits 3 other Classes (lets say: class B, class C, class D).\nClass A calls the constructors of B,C,D. Everything up to here is clear for me. \nBut:\nClass D has a method \"addListener\" which points to an attribute (this + 0x34).\n(this + 0x34) is assigned in the constructor to a address..\n<pre><code>int A::A(void *someObject) {\n    B::B();\n    C::C();\n\n    *this = 0x1f18e8;\n    *(this + 0x28) = 0x1f190c;         // whats going here?\n    *(this + 0x34) = 0x1f193c;         // and here?\n\n    // Ive seen, that those addressees are inside of the vtable of Class A\n    // \n    //     __ZTV12A:        // vtable for A\n    // ...\n    // 001f18e8         db  0xc6\n    // 001f193c         db  0xb0\n    // 001f190c         db  0xba\n    // ...\n\n    D::D();\n\n    // Some other attributes, but these are clear for me (just \n    // have to name them right, by figuring out where these attributes are used):\n\n    *(this + 0x38) = someObject;\n    *(this + 0x3c) = 0x0;\n    *(this + 0x50) = 0x0;\n    *(this + 0x54) = 0x0;\n    *(this + 0x40) = 0xffffffff;\n    *(this + 0x44) = 0xffffffff;\n    *(this + 0x48) = 0xffffffff;\n    *(this + 0x4c) = 0x0;\n\n    D::addListener(this + 0x34);\n}\n</code></pre>\nAm I right with my conclusion, that D::addListener() adds the class it self to the listener?\nIn fact I just want to figure out what kind of object is added to the \"listener\":\n<pre><code>    D::addListener(this + 0x34);\n</code></pre>\nI hope my question is clear enough :)\n",
    "votes": "0",
    "answers": 1,
    "views": "302",
    "tags": [
        "disassembly",
        "x86",
        "c++",
        "address",
        "pointer"
    ],
    "user": "Vertices",
    "time": "May 9, 2016 at 5:51",
    "comments": [
        {
            "user": "w s",
            "text": "Is is the whole constructor ? If not, can you post it ?\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "This may be an artifact of multiple inheritance. I found an article which may be useful for understanding this phpcompiler.org/articles/virtualinheritance.html\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Your question is a bit unclear as you first say \"Class C has a method \"addListerner\" which points to an attribute (this + 0x34).\", then <pre><code>D::addListener(this + 0x34);</code></pre>. Typo?\nAlso, you should read about (typical) implementations of multiple inheritance. Assume your classes B, C, D have methods <pre><code>b</code></pre>, <pre><code>c</code></pre>, <pre><code>d</code></pre> respectively. A will inherit all of them. Now, if A does not override these methods, and anything calls them, they have to be delegated to the correct superclass - the original methods. But these original methods will expect a class layout that corresponds to the original classes. Which means, A needs to \"embed\" all 3 classes into itself.\nWhich means A will be laid out like this:\n<pre><code>+-----+-------------------+\n|  00 | vtable of A       |\n+-----+-------------------+\n|  04 | member 1 of A     |\n|  08 | member 2 of A     |\n|     | ...               |\n+-----+-------------------+\n|  28 | vtable of B       |\n+-----+-------------------+\n|  2c | member 1 of B     |\n|  30 | member 2 of B     |\n|     | ...               |\n+-----+-------------------+\n|  34 | vtable of C       |\n+-----+-------------------+\n|  38 | member 1 of C     |\n|  3c | member 2 of C     |\n|     | ...               |\n+-----+-------------------+\n|  ?? | vtable of D       |\n+-----+-------------------+\n|  ?? | member 1 of D     |\n|  ?? | member 2 of D     |\n|     | ...               |\n+-----+-------------------+\n</code></pre>\nSo, yes, your conclusion is correct: <pre><code>D::addListener()</code></pre> adds the class itself to the listener. But because <pre><code>D::addListener()</code></pre> expects a <pre><code>D</code></pre>, not an <pre><code>A</code></pre>, the thing that's passed isn't the complete <pre><code>A</code></pre>, it's just the part of <pre><code>A</code></pre> that makes <pre><code>D</code></pre>. To make this look exactly like a <pre><code>D</code></pre>, it needs its own vtable that looks like a <pre><code>D</code></pre> vtable.\nBut of course, parts of these vtables can be shared. <pre><code>A</code></pre> needs all methods in its vtable, so the vtable pointers of the partial classes <pre><code>B</code></pre>, <pre><code>C</code></pre> and <pre><code>D</code></pre> can point to the appropriate part of the <pre><code>A</code></pre>s vtable, they don't need their complete own copies.\nAs to your \"what's going on here\" questions - these initialize the vtables of the partial classes. (In your assembly listing, you should treat those addresses as arrays of words, not bytes). What i wonder is why there's only 3 of them, there should be 4 for <pre><code>A</code></pre>, <pre><code>B</code></pre>, <pre><code>C</code></pre> and <pre><code>D</code></pre>. Something seems to be confused or omitted here, just like you said \"Class C has\" first, then used <pre><code>D::addListener</code></pre>.\n",
            "votes": "2",
            "user": "Guntram Blohm",
            "time": "May 9, 2016 at 5:53",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Vertices",
                    "text": "<span class=\"comment-copy\">Ive edited my post, of course it should be D::addListener() instead of C::addListener()</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Something's still wrong as there should be 4 vtables, not 3. Unless one of your classes is really a struct, not a class, that has no methods, not even a constructor. So maybe the offsets, or class names, in my example do not match yours, but the principle still applies.</span>",
                    "time": null
                },
                {
                    "user": "Vertices",
                    "text": "<span class=\"comment-copy\">What makes me so confused is, I see that addListener accepts an argument of type *Listener... But I can´t see any of the classes inherits *Listener... I am asking where it comes from.  D::addListener(*Listener);  I am expecting that A inherits *Listener.... But Ive checked the *Listener class, which don´t have a constructor, only a destructor.</span>",
                    "time": null
                },
                {
                    "user": "Vertices",
                    "text": "<span class=\"comment-copy\">I see, B, C, D has constructors.       *(arg_0 + 0x34) = 0x1f193c;  seems to be an object of type *Listener, which don´t have a constructor. Makes the things more confusing for me.</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">A doesn't have to (explicitly) inherit from Listener if A inherits from D, and D inherits from Listener. And of course, D may have a constructor even if Listener doesn't. And this would explain why the D part of A is the argument, not A itself.</span>",
                    "time": null
                }
            ]
        }
    ]
}