{
    "title": "I have an application that views an encrypted document and stored it as an (encrypted) pdf",
    "link": "https://reverseengineering.stackexchange.com/questions/30910/i-have-an-application-that-views-an-encrypted-document-and-stored-it-as-an-encr",
    "content": "When I load this application with lldb, surprisingly no anti-debugger techniques scuttle it. I've even managed to find an interesting breakpoint to set...\n<pre><code>break set -r AES_decrypt -s /usr/lib/libcrypto.0.9.8.dylib\n</code></pre>\nThis catches shortly after loading the encrypted document. Can I recover the key used to decrypt the document from this point? Which commands would I need for this?\nMy understanding is that the four arguments to AES_decrypt() are the key, the init vector, the cypher text, and the recovered text (these last two as pointers somewhere on the heap?). On this architecture (32bit executable, MacOS), arguments to the functions are passed in on the stack (rather than the registers). But when I do <pre><code>expr ((char *) 0xdeadbeef)</code></pre> for the pointers on the stack, I'm just seeing garbage. For the first 3, that's probably to be expected, but the 4th object doesn't look like what pdf file guts should look like.\nAlso, and I don't know if this is important, but if I <pre><code>continue</code></pre> past the breakpoint, it seems to catch exactly 30 times. This doesn't fit anything I know about the file contents (it's not the number of pages or anything like that).\n",
    "votes": "1",
    "answers": 0,
    "views": "35",
    "tags": [
        "decryption",
        "lldb"
    ],
    "user": "John O",
    "time": "Sep 22, 2022 at 6:35",
    "comments": [
        {
            "user": "w s",
            "text": "Did you try to dump all the memory of the process when the document is already decrypted and search for the content there ?\n",
            "time": null
        },
        {
            "user": "John O",
            "text": "@ws I have, but the application has the content strings in a dozen places that aren't the actual pdf (a hover feature where you can this click, and view/print out excerpts). Also, not entirely sure which tools to search through 900meg mem dumps. Right now, I just realized that this would be a hell of a lot easier if I actually get the libcrypto source code and hook that up to lldb, trying to figure out how to do that now (I'm pretty new to all of this).\n",
            "time": null
        },
        {
            "user": "w s",
            "text": "You can just set breakpoints to all libcrypto functions with something like this <code>break set -r . -s /usr/lib/libcrypto.0.9.8.dylib</code>. This will shed some light on the encryption scheme.\n",
            "time": null
        }
    ],
    "answers_data": []
}