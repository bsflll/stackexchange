{
    "title": "Adding a hook to the end of a function",
    "link": "https://reverseengineering.stackexchange.com/questions/27820/adding-a-hook-to-the-end-of-a-function",
    "content": "I have a (so-called) function with multiple entry points but only one <pre><code>ret</code></pre>.\nI am trying to understand how to add a hook to the function.\nThe main problem I'm facing is the code that is placed right after this function - it can be executed at any time so I need to make sure that it won't crash the program.\nMy idea was to replace the <pre><code>ret</code></pre> instruction with a <pre><code>nop</code></pre> instruction, and then jump to my hook. At this point I'll check whether the return address matches a call to the said function, or to the function that occurs after the <pre><code>ret</code></pre>.\nI am not satisfied with this because I can't be sure that the code after <pre><code>ret</code></pre> is the prologue of a function - it may be any code, and I have no idea how the stack will look at this point - meaning that maybe the data that was pushed into it matches a call to the function I am trying to hook.\nDoes anyone here have a better idea?\nEdit: Forgot to mention that I can't add more than 2 jumps.\n",
    "votes": "2",
    "answers": 2,
    "views": "348",
    "tags": [
        "function-hooking"
    ],
    "user": "EL_9",
    "time": "Jun 8, 2021 at 22:19",
    "comments": [
        {
            "user": "R4444",
            "text": "is this a dynamic hook or a static hook? what tool are you using? You should look at how <pre><code>shadow stack</code></pre> works as it is used to protect backward paths.\n",
            "time": null
        },
        {
            "user": "Orwellophile",
            "text": "Are you sure all the entry points aren't just part of the same \"bigger than you realised\" function? I know this is a common problem when reverse engineering obfuscated code, perhaps no so much otherwise.  You can hook the middle (or the near-end) of a function, assuming certain conditions.  I wouldn't go so far as to say it was a general rule, but it is certainly possible in some situations where you don't have to deal with stack variables.  You can also use a 2 byte jump to somewhere close (127 bytes +/-) the end of your function, if you can find some unused space.  Elsewise, what Rolf said.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Hook all of the entrypoints and divert the return address to something you control. If you're doing this for compiler-generated code on x64, you'll need to be careful to preserve exceptions thrown across function boundaries -- but it doesn't seem like compiler-generated code, if you're talking about a \"function with multiple entrypoints\".\n",
            "votes": "1",
            "user": "Rolf Rolles",
            "time": "Jun 8, 2021 at 22:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "EL_9",
                    "text": "<span class=\"comment-copy\">I'm sorry I should have mentioned that I can add 2 hooks maximum</span>",
                    "time": null
                },
                {
                    "user": "Rolf Rolles",
                    "text": "<span class=\"comment-copy\">Why? Where does that constraint come from?</span>",
                    "time": null
                },
                {
                    "user": "EL_9",
                    "text": "<span class=\"comment-copy\">My instructor added this constraint to make it more complicated basically.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "If there is a single RET then all entrypoints must eventually converge on the path that reaches it.  The first few instructions of the common path would be the ideal location to place your single hook.  If you need the function to complete execution in order to produce the proper side-effects or whatever, then you can run the replaced instructions from a local buffer in your code, then call the remaining instructions in the function, and finally return to the caller.\nIf the common path is simply the RET instruction itself (because the multiple entrypoints branch or jump to the RET), then you can redirect them all to your single JMP instruction, thereby achieving the hook without using multiple jumps, only multiple modifications.\n",
            "votes": "0",
            "user": "peter ferrie",
            "time": "Jun 11, 2021 at 21:07",
            "is_accepted": false,
            "comments": []
        }
    ]
}