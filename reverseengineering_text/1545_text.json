{
    "title": "Linux protectors: any good one out there?",
    "link": "https://reverseengineering.stackexchange.com/questions/1545/linux-protectors-any-good-one-out-there",
    "content": "I know no one that works as of today (i.e., kernels not way too old) and I wonder if anybody found or knows any protector for Linux either commercial, open source, used in malware, etc...\n",
    "votes": "6",
    "answers": 3,
    "views": "1k",
    "tags": [
        "linux",
        "unpacking"
    ],
    "user": "joxeankoret",
    "time": "Apr 3, 2013 at 16:28",
    "comments": [
        {
            "user": "Denis Laskov",
            "text": "You also may look on this thread of security.stackexchange.com : Any comprehensive solutions for binary code protection and anti-reverse-engineering? It include both links to external articles and some valuable input. Bit outdated(2010-2011), but still relevant.\n",
            "time": null
        },
        {
            "user": "jvoisin",
            "text": "This is also related to this question.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is a nice article on Linux binary code protection at http://www.intel-assembler.it/portale/5/linux-binary-code-protection/linux-binary-code-protection.asp. \nIf your target is to protect your binary Sentinel HASP supports Linux. \nAs for the old ones as you mention most of them don't work anymore, elf-encrypter Shiva, Burneye etc. IF I had to guess what will be the most common in Linux malware it will be  the most common packer that's is used in windows too, UPX.\n",
            "votes": "5",
            "user": "Nicolas",
            "time": "Apr 3, 2013 at 19:06",
            "is_accepted": true,
            "comments": [
                {
                    "user": "julian",
                    "text": "<span class=\"comment-copy\">the link is dead</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "ZVrba's Phrack article on cryptexec: Next-generation runtime binary encryption is a good read and it doesn't rely on additional kernel functionality:\n\nThis article describes a\n  method to control the target program that doesn't does not rely on\n  any assistance from the OS kernel or processor hardware. The method\n  is implemented in x86-32 GNU AS (AT&T syntax). Once the controlling\n  method is devised, it is relatively trivial to include on-the-fly\n  code decryption.\n",
            "votes": "5",
            "user": "0xea",
            "time": "Apr 3, 2013 at 16:53",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The majority of modern ELF binaries are protected using UPX or a variant thereof. 1,2 However, custom packers have been observed in the wild, including both UPX based- and non-UPX based-custom packers.\n\nThe simplest variation of the UPX packer used out in the wild is the 'LSD' packer, in which the string 'UPX' is changed to 'LSD'. An example of this was a XMR coin miner written in Go which targeted systems running Jenkins. \n\n\n\n<pre><code>mumblehard</code></pre> custom protector - not based on UPX\n\nThe whole packer actually consists of about 200 assembly instructions.\n  Another notable observation: system calls are made directly by using <pre><code>int 80h</code></pre> instructions. Another hint that it was written in assembly is that functions do not have the usual prologue to manage the stack. By doing system calls with interrupts, Mumblehard ELF binaries avoid any external dependency.\n  Furthermore, the packer works on both Linux and BSD systems. 1\n\nsamples:\n\n20b567084bcc6bd5ac47b2ab450bbe838ec88fc726070eb6e61032753734d233\n78c19897d08e35c0e50155c87f501e20f2d1dbfd38607fc8e12711d086d52204\n84dfe2ac489ba41dfb25166a983ee2d664022bbcc01058c56a1b1de82f785a43\n747d985d4bd302e974474dc9ab44cb1f60cb06206f3639c5d603db94395b877b\n9512cd72e901d7df95ddbcdfc42cdb16141ff155e0cb0f8321069212e0cd67a8\na5915c3060f5891242514b7899975393ef3d3cb87b33b6a767cffce4feac215f\n\n\n\n\na variant of <pre><code>tiny XMR mooner</code></pre> uses a custom packer according to the r2con 2018 presentation Unpacking the Non-Unpackable. \n\n8a0d9c84cfb86dd1f8c9acab87738d2cb82106aee0d88396f6fa86265ff252dd \nmd5sum from presentation: <pre><code>4f1fdacaee8e3c612c9ffbbe162042b2</code></pre>\nNote this particular file was the subject of The “Tiny XMR mooner” Linux cryptominer malware (the sha256 sum is identical) but no mention is made in this analysis of packing or any other form of binary protection.\n\n\n\n\n<pre><code>Tsunami</code></pre> with custom packer\n\n\nMalshare sample\nf22ffc07e0cc907f00fd6a4ecee09fe8411225badb2289c1bffa867a2a3bd863 (Virustotal)\nthere used to be an analysis available at pwning.fun but it looks like its been taken down.\n\n\nReferences\n\nUnderstanding Linux Malware\nModern Linux Malware Exposed\nUnboxing Linux/Mumblehard (2015) - ESET\n",
            "votes": "1",
            "user": "julian",
            "time": "Jul 5, 2019 at 7:21",
            "is_accepted": false,
            "comments": []
        }
    ]
}