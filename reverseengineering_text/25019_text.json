{
    "title": "Format String Direct Parameter Behavior",
    "link": "https://reverseengineering.stackexchange.com/questions/25019/format-string-direct-parameter-behavior",
    "content": "I am investigating a format string vulnerability on arm64 (linked against musl libc), and am encountering some odd behavior while debugging the output.\nFrom the decompilation, the program has a classic format string vulnerability that boils down to:\n<pre><code>fprintf(stdout, user_controlled_data);\n</code></pre>\nUsing repetitive format specifiers (e.g. <pre><code>%p%p%p%p</code></pre>), I can dump massive swaths of memory by including thousands of these characters. That works as expected.\nThe problem arises when I try direct parameter access. For some reason, <pre><code>%1$p</code></pre> works but not <pre><code>%2$p</code></pre>, but 3 up to about 12 works, and everything I've tried after that fails. By \"fails\", I mean no values are printed, except the newline automatically added to my string earlier in code is eaten somehow. In the debugger, <pre><code>fprintf</code></pre> returns -1, and <pre><code>errno</code></pre> is set to 0x16, which I believe is EINVAL.\nFor this particular scenario, I need the ability to read/write a particular stack offset in the thousands. But I cannot print it to confirm since direct parameter access does not work. I can see the target parameter by using repeated characters, but I need direct parameters to work going forward due to other constraints.\nNow, I understand this is in \"undefined behavior\" territory, but I compiled a vulnerable test binary (statically linked against Glibc, I should probably try against musl) on the system that works as expected with no issues (e.g. <pre><code>%9000$p</code></pre> prints something).\nIs there something that would cause this behavior, or something I am missing? I can provide further information if needed.\n",
    "votes": "2",
    "answers": 1,
    "views": "381",
    "tags": [
        "exploit",
        "arm64"
    ],
    "user": "multithr3at3d",
    "time": "May 15, 2020 at 13:12",
    "comments": [],
    "answers_data": [
        {
            "content": "After posting the question, I started to think about the difference in the libc I was using. I compiled the basic test binary again but with musl, and also saw the unexpected behavior there. This seems to be due to the <pre><code>printf</code></pre> implementation in musl:\n<pre><code>        if (isdigit(s[1]) && s[2]=='$') {\n            l10n=1;\n            argpos = s[1]-'0';\n            s+=3;\n        }\n</code></pre>\nIt only uses direct parameters if there is exactly one digit following the <pre><code>%</code></pre>, followed by a <pre><code>$</code></pre>. This explains why I was unable to print any larger stack offsets.\nEdit: This seems standard-compliant:\n\n\"%n$\", where n is a decimal integer in the range [1,{NL_ARGMAX}], giving the\n  position of the argument in the argument list.\n\nThen, looking at the definition of NL_ARGMAX:\n\nNL_ARGMAX \nMaximum value of digit in calls to the printf() and scanf()\n  functions. Minimum Acceptable Value: 9\n\nSo it appears that the implementation is indeed following the standard by allowing the minimum value of 9, which is certainly inconvenient for writing compact format string exploits.\n",
            "votes": "1",
            "user": "multithr3at3d",
            "time": "May 31, 2020 at 19:52",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">The author of musl makes a point of sticking to the word of the standards, so perhaps you should consult those. It's also possible you found a defect in the code, though.</span>",
                    "time": null
                }
            ]
        }
    ]
}