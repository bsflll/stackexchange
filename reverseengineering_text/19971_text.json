{
    "title": "How to see all functions that called with debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/19971/how-to-see-all-functions-that-called-with-debugger",
    "content": "I debugging with IDA, and I want to see/print all the functions that get called.\nIn the functions window I see over than 1000 functions.\nSo I want to see which functions are called when I press enter or press on buttons and actions like that.\nI use IDA, but if I can do it with another debugger, that's also okay.\n",
    "votes": "3",
    "answers": 3,
    "views": "5k",
    "tags": [
        "ida",
        "debugging",
        "functions"
    ],
    "user": "Keystone",
    "time": "Nov 27, 2018 at 20:40",
    "comments": [],
    "answers_data": [
        {
            "content": "Although you can use several tools, I would suggest you to use GDB if possible, since it has a built-in feature of breaking at each function call.\nNow, what you can do, is to run your program two times - first, without pressing buttons, and second, with doing so. I'm attatching a python script that will print each function call with a number of calls to it, to the file named output. Feel free to use it for your purposes:\n<pre><code>#!/usr/bin/env python3\nimport gdb\nimport re\n\nbreakpoints = []\ngdb.execute('rbreak', to_string=True)\ngdb.execute('run', to_string=True)\ntry:\n    while True:\n        a = gdb.execute('continue', to_string=True)\n        reg = gdb.execute('info registers rip', to_string=True)\n        b = reg.split()[1][2:]\n        f = reg.split()[3]\n        c = gdb.execute('info breakpoints', to_string=True).split('\n')\n        d = [s for s in c if b in s]\n        if len(d) > 1:\n            sys.exit(1)\n        e = d[0].split()[0].split('.')[0]\n        gdb.execute('disable breakpoints ' + e)\n        breakpoints.append(e)\n        breakpoints.append(f)\nexcept:\n    f = open(\"output\", \"w+\")\n    [f.write(b + '\n') for b in breakpoints]\n    f.close()\n</code></pre>\nYou can invoke it by running <pre><code>gdb name_of_your_program</code></pre> and then <pre><code>source gdb.py</code></pre> assuming that the script name is gdb.py.\nAfter doing this two times, you will get two files: one containing all function calls, while not pressing buttons, and the other one containing function calls when buttons are being pressed. Simply running <pre><code>diff</code></pre> on this files will reveal which functions are responsible for button press handling.\nIf, for some reason you cannot use GDB, this answer shows the way it can be done in radare2.\n",
            "votes": "3",
            "user": "bart1e",
            "time": "Dec 23, 2019 at 14:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Usually, debuggers (IDA included) provide tracing functionality. This is logging debugee's actions at a predefined granularity level. That could be logging all individual instructions, or as you desire, function calls. Using function tracing (<pre><code>Debugger -> Tracing -> Function Tracing</code></pre>) a user is able to view all functions called throughout the tracing duration. Keep in mind this may generate a big trace, and logging it to a file may be recommended.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Nov 27, 2018 at 21:14",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "In addition to Nirlzr's answer, you can go to the function Imports window in the debugger (IDA, OllyDbg and x64Dbg for example), and set a breakpoint on the functions you are curious about. Then, simply run the program and the debugger will stop the execution of the program at the time each function is called.\nFor example, if you want to see when a program calls CreateProcessInternalW, you can go into the function import table (sometimes called \"symbols\") and set breakpoints on the function listed there. Now, when a program creates a new process, the debugger will break execution at that point so you can see the arguments passed and return value. For convenience, I've attached a screenshot of this in IDA Pro - pay attention to the right side of the screen where I have the function list of <pre><code>apphelp.dll</code></pre> which I got to by finding it in the \"Modules\" window and then double-clicking the DLL file name. Now we can right-click on a specific function like I've shown and click \"Add Breakpoint\", then run the program. This is only available in the IDA Debugger once the debugger has been started.\nNOTE: Sometimes the imports are not fully resolved at the beginning of the program, so as you continue through the program, more of these functions will become available to break on.\n",
            "votes": "1",
            "user": "the_endian",
            "time": "Dec 23, 2019 at 7:38",
            "is_accepted": false,
            "comments": []
        }
    ]
}