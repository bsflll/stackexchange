{
    "title": "How do you reverse engineer an EXE \"compiled\" with PyInstaller",
    "link": "https://reverseengineering.stackexchange.com/questions/160/how-do-you-reverse-engineer-an-exe-compiled-with-pyinstaller",
    "content": "Having recently watched/read a presentation given by Dave Kennedy at DEF CON 20 [PDF], I'd like to know how to decompile a Python script compiled with PyInstaller.\nIn his presentation, he is creating a basic reverse shell script in Python, and converts it to an EXE with PyInstaller.\nMy question is how do you take a PyInstaller created EXE and either completely, or generally, retrieve the logic/source code from the original Python script(s)?\n",
    "votes": "41",
    "answers": 5,
    "views": "138k",
    "tags": [
        "python",
        "pe"
    ],
    "user": "Mick",
    "time": "Apr 2, 2013 at 21:21",
    "comments": [
        {
            "user": "Mick",
            "text": "The purpose of generating an EXE with PyInstaller is so that the systems you run it on do not require the existence of a Python interpreter or any 3rd party modules you may be using. It makes your Python script more portable, but does not hide the code / logic from a reverse engineer.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "extract EXE's appended data (block starting with PYZ, until the end of the file)\nextract wanted files with PyInstaller's archive viewer\ndecompyle .PYCs - I personally recommend Uncompyle2 for that.\n",
            "votes": "37",
            "user": "Ange",
            "time": "Mar 22, 2013 at 15:39",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Peanut",
                    "text": "<span class=\"comment-copy\">More up to date Uncompyle is at <a href=\"https://pypi.python.org/pypi/uncompyle6\" rel=\"nofollow noreferrer\">pypi.python.org/pypi/uncompyle6</a></span>",
                    "time": null
                },
                {
                    "user": "E235",
                    "text": "<span class=\"comment-copy\">There is also help in this post: <a href=\"https://stackoverflow.com/questions/18303122/how-to-decompile-files-from-pyinstaller-pyz-file\" title=\"how to decompile files from pyinstaller pyz file\">stackoverflow.com/questions/18303122/â€¦</a>  You can use this script to extract the files: <a href=\"https://sourceforge.net/projects/pyinstallerextractor/\" rel=\"nofollow noreferrer\">sourceforge.net/projects/pyinstallerextractor</a>  Version 1.8 is also in pastebin: <a href=\"https://pastebin.com/fnMw9AuL\" rel=\"nofollow noreferrer\">pastebin.com/fnMw9AuL</a>  * Make sure to have pyinstaller installed (<code>pip install pyinstaller</code>)  After extracting the file you can use also this tool: <a href=\"https://sourceforge.net/projects/easypythondecompiler/files/\" rel=\"nofollow noreferrer\">sourceforge.net/projects/easypythondecompiler/files</a></span>",
                    "time": null
                },
                {
                    "user": "Hakaishin",
                    "text": "<span class=\"comment-copy\">How do you do number 1?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The presentation at hack.lu 2012 titled \"A Critical Analysis of Dropbox Software Security\" discussed reversing of the Dropbox desktop client which used a similar implementation but with an added twist of customized Python interpreter with changed bytecode.\nPresentation review: http://blog.csnc.ch/2012/12/asfws-a-critical-analysis-of-dropbox-software-security/\nLink to the slides: http://archive.hack.lu/2012/Dropbox%20security.pdf\n",
            "votes": "10",
            "user": "Igor Skochinsky",
            "time": "Mar 22, 2013 at 14:56",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "PyInstaller publishes it's source so you see exactly how it packs the python code in the executable... \nA more general approach would be to use a tool like binwalk on the exe as a first step.\n",
            "votes": "10",
            "user": "Remko",
            "time": "Mar 23, 2013 at 9:59",
            "is_accepted": false,
            "comments": [
                {
                    "user": "mrduclaw",
                    "text": "<span class=\"comment-copy\">I'm not sure binwalk is the right tool for this job.  It'd show you to the compressed sections of the executable, but the output would likely have a lot other false positives as well unless you point it to look for only compressed sections... which defeats the purpose of using it on this type of file, IMHO.</span>",
                    "time": null
                },
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">@mrduclaw: my experience with binwalk is that it's a good tool to do a highlevel scan on unknown, binary, files to see what might be in there. Especially if we know what we're looking for but don't know in which file it is. I didn't mean to propose binwalk as a complete solution (modified my answer to indicate it's a first step)</span>",
                    "time": null
                },
                {
                    "user": "Karsun",
                    "text": "<span class=\"comment-copy\">FYI, the link to binwalk seems flag as malicious website as of June 2020.</span>",
                    "time": null
                },
                {
                    "user": "Remko",
                    "text": "<span class=\"comment-copy\">@Karsun false positive on a binary on my website, I've reported this to google and it seems to be ok again now (thanks for letting me know)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "This process should get you as close to the original source as possible.\nBasically what tools like pyinstaller and py2exe do is package libraries and dependencies all together so you can run the 'stand-alone' EXE without having to download them or prepare the machine with a python interpreter.\nWhen you launch the EXE - it is unpackaged in memory. This includes the .pyc files (python code that is converted to bytecode). pyREtic is a tool that allows you to grab those from memory and convert it back to source.\nhttps://github.com/MyNameIsMeerkat/pyREtic\n\npyREtic\nReverse Engineer Obfuscated Python Bytecode This toolkit\nallows you to take a object in memory back to source code, without\nneeding access to the bytecode directly on disk. This can be useful if\nthe applictions pyc's on disk are obfuscated in one of many ways.\n",
            "votes": "8",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "The one stop solution for all pyinstaller exe things. Use this program to reverse engineer a pyinstaller generated exe file. \nhttps://sourceforge.net/projects/pyinstallerexerebuilder/\n",
            "votes": "4",
            "user": "0xec",
            "time": "Feb 15, 2014 at 16:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}