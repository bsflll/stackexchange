{
    "title": "Viewing memory permissions in Ollydbg for memory segments",
    "link": "https://reverseengineering.stackexchange.com/questions/2123/viewing-memory-permissions-in-ollydbg-for-memory-segments",
    "content": "I'm looking for a way to view memory permissions on a specific section of memory using OllyDbg (technically I'm using Immunity but I'm assuming if it exists in Olly it'll be the same there).\nThe program I'm looking at is calling VirtualProtect to make a block of code go RW->RWE, but the result looks like the protection is extending to 4 bytes before the address passed in as a parameter. I checked the MSDN and it said that there is a rounding/boundary extension with t VirtualProtect with respect to the size, but it doesn't say specifically how the extensions get propagated across pages.\nI'm confident that's what's happening but I wanted to look at the memory permissions for the specific segment to confirm. It doesn't look like the Memory map refreshes after the call to VP and I couldn't find another place to show the memory permissions. On WinDbg I can do something like !vprot so I was curious if there was something similar here.\n",
    "votes": "5",
    "answers": 2,
    "views": "2k",
    "tags": [
        "windows",
        "ollydbg"
    ],
    "user": "Fewmitz",
    "time": "May 28, 2013 at 14:52",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>ollydbg 1.10</code></pre> automatically refreshes the memory window when protection attributes are changed if the address that is passed on to VirtualProtect lies in the first allocated page\nif subsequent page's attributes were changed using Virtualprotect ollydbg's memory window wont reflect them as it shows the complete allocated Size as one contiguous dump  \nwindbg <pre><code>!vprot</code></pre> will show the modified protection attributes only if you traverse page by page\nin <pre><code>ollydbg 2.01</code></pre> memory window will show attribute changes page by page automatically\nan example\n<pre><code>int _tmain(int argc, _TCHAR* argv[])\n{\n    printf(\"lets valloc \n\");\n    PCHAR foo;\n    foo = (PCHAR)VirtualAlloc(0,0x1004,MEM_COMMIT,PAGE_READONLY);\n    printf(\"we valloced lets vprot\n\");\n    DWORD oldprot;\n    if (  (VirtualProtect(foo+0x1000,1,PAGE_EXECUTE_READWRITE,&oldprot) == FALSE) )\n    {\n        printf(\"our vprot failed\n\");\n        return FALSE;\n    }\n    if (  (VirtualProtect(foo+0xfff,1,PAGE_EXECUTE_READWRITE,&oldprot) == FALSE) )\n    {\n        printf(\"our vprot failed\n\");\n        return FALSE;\n    }\n    printf(\"we vprotted fine \n\");\n    return 0;\n}\n</code></pre>\nollydbg 1.10 memory window Display will be same after VirtualAlloc and after first Virtualprotect\ndisplay will change only after second VirtualProtect\n<pre><code>Memory map, item 19\n Address=003A0000\n Size=00002000 (8192.)\n Owner=         003A0000 (itself)\n Section=\n Type=Priv 00021002\n Access=R\n Initial access=R\n</code></pre>\nafter second Virtualprotect\n<pre><code>Memory map, item 19\n Address=003A0000\n Size=00002000 (8192.)\n Owner=         003A0000 (itself)\n Section=\n Type=Priv 00021040\n **Access=RWE**\n Initial access=R\n</code></pre>\nwindbg will show changed attribute only if traversed page by page\n<pre><code>0:000> g\nModLoad: 5cb70000 5cb96000   C:\\WINDOWS\\system32\\ShimEng.dll\nBreakpoint 0 hit\n>    8: {\n0:000> p\n>    9:     printf(\"lets valloc \n\");\n0:000> p\n>   11:     foo = (PCHAR)VirtualAlloc(0,0x1004,MEM_COMMIT,PAGE_READONLY);\n0:000> p\n>   12:     printf(\"we valloced lets vprot\n\");\n0:000> ?? foo\nchar * 0x003a0000\n \"\"\n0:000> !vprot @@c++(foo)\nBaseAddress:       003a0000\nAllocationBase:    003a0000\nAllocationProtect: 00000002  PAGE_READONLY\nRegionSize:        00002000\nState:             00001000  MEM_COMMIT\nProtect:           00000002  PAGE_READONLY\nType:              00020000  MEM_PRIVATE\n0:000> p\n>   14:     if (  (VirtualProtect(foo+0x1000,1,PAGE_EXECUTE_READWRITE,&oldprot) == FALSE) )\n0:000> p\n>   19:     if (  (VirtualProtect(foo+0xfff,1,PAGE_EXECUTE_READWRITE,&oldprot) == FALSE) )\n0:000> !vprot @@c++(foo)\nBaseAddress:       003a0000\nAllocationBase:    003a0000\nAllocationProtect: 00000002  PAGE_READONLY\nRegionSize:        00001000\nState:             00001000  MEM_COMMIT\nProtect:           00000002  PAGE_READONLY\nType:              00020000  MEM_PRIVATE\n\n0:000> !vprot (@@c++(foo)+1000)\nBaseAddress:       003a1000\nAllocationBase:    003a0000\nAllocationProtect: 00000002  PAGE_READONLY\nRegionSize:        00001000\nState:             00001000  MEM_COMMIT\nProtect:           00000040  PAGE_EXECUTE_READWRITE\nType:              00020000  MEM_PRIVATE\n</code></pre>\nollydbg 2.01 will show  any changes instantly note memory map item no and address \n<pre><code>Memory map, item 19\n  Address = 003A0000\n  Size = 00002000 (8192.)\n  Owner =                 003A0000 (self)\n  Section =\n  Contains =\n  Type = Priv 00021002\n  Access = R\n  Initial access = R\n  Mapped as =\n</code></pre>\nafter first Virtualprotect\n<pre><code>Memory map, item 20\n  Address = 003A1000\n  Size = 00001000 (4096.)\n  Owner =                 003A0000\n  Section =\n  Contains =\n  Type = Priv 00021040\n  Access = RWE\n  Initial access = R\n  Mapped as =\n</code></pre>\n",
            "votes": "4",
            "user": "blabb",
            "time": "May 30, 2013 at 18:06",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "I don't think there's another way to do it in Olly (barring plugins) but you can refresh the map using \"Actualize\" in the context menu.\nYou can also use another program like VMMap, or possibly even WinDbg in non-intrusive mode.\nThe permissions only apply to whole pages, so any address you pass will be rounded down and the size will be rounded up to a page boundary (1000 hex).\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "May 28, 2013 at 15:27",
            "is_accepted": false,
            "comments": []
        }
    ]
}