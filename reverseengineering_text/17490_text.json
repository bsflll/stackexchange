{
    "title": "Tools to translate x86-64 ELF to PPC (or i386 decompilation)",
    "link": "https://reverseengineering.stackexchange.com/questions/17490/tools-to-translate-x86-64-elf-to-ppc-or-i386-decompilation",
    "content": "I've been working on a project on an IBM POWER8 system. I'd like to translate some very simple binaries from x86-64 to PPC.\nIs there a tool that can either:\n\nTranslate the binary from x86-64 to PPC (similar to how Apple Rosetta did PPC to x86-64)\nDecompile the x86-64 binary into C code (doesn't need to be human readable) so that I can recompile it on a PPC system\n\nI'd love to know if there's any other way to get that done as well.\nEDIT: Also, I'm not comfortable using commercial software, but am okay with closed-source.\nThanks!\n",
    "votes": "1",
    "answers": 1,
    "views": "883",
    "tags": [
        "disassembly",
        "decompilation",
        "disassemblers",
        "decompiler"
    ],
    "user": "TajyMany",
    "time": "Feb 18, 2018 at 22:38",
    "comments": [
        {
            "user": "TajyMany",
            "text": "To the person who downvoted, I'd love to know why and learn from that. Thanks.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "For 1, there is QEMU which can be built for PPC and supports i386 and x86-64 emulation. If you run Linux, there may already be a precompiled package available for your distro.\nFor 2, there are some decompilers which can produce C pseudocode from x86-64 binaries. Alternatively, tools like McSema can perform lifting to LLVM bitcode which can then be recompiled to PPC (in theory).\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Feb 18, 2018 at 21:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "TajyMany",
                    "text": "<span class=\"comment-copy\">Thanks for your answer! With QEMU, I can see that User-Mode Emulation would allow me to run that binary on PPC. However, is there software that actually \"translates\" the binary itself to run natively on PPC? Also, sorry I didn't state this in the answer, but McSema uses commercial software, which I can't use. Are there any alternatives to this? Thanks again!</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">if you want to have completely independent native PPC binaries you'll have to go with option 2. Note that Rosetta worked like QEMU - it ran unmodified binaries via emulation.</span>",
                    "time": null
                },
                {
                    "user": "TajyMany",
                    "text": "<span class=\"comment-copy\">Alright, thanks! Do you know any resources that would help me get that emulation setup? Again, I don’t want to install an operating system emulating PowerPC, but I want to run an emulated PowerPC program. I can’t find too many resources online for that.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">wait, first you ask  about emulating x86 on PPC and now the other way around? Ask on superuser.com or something, this does not seem related to RE.</span>",
                    "time": null
                },
                {
                    "user": "TajyMany",
                    "text": "<span class=\"comment-copy\">Sorry was confused, was leaving for a flight; meant I don’t want an OS emulating x86, but instead emulating an x86 program on PPC</span>",
                    "time": null
                }
            ]
        }
    ]
}