{
    "title": "Disassembly call function offset from RIP",
    "link": "https://reverseengineering.stackexchange.com/questions/27437/disassembly-call-function-offset-from-rip",
    "content": "I am writing a program where I map an <pre><code>.exe</code></pre> PE file in memory and I \"dissect\" it.\nI am disassembling the <pre><code>.text</code></pre> section of the target executable, using the distorm disassembler.\n<pre><code>CALL</code></pre> instructions in the disassembly have an offset relative to the <pre><code>RIP</code></pre> register, e.g.: <pre><code>CALL QWORD [RIP+0xf8e]</code></pre>.\nI am also reading the <pre><code>Import Descriptor Table</code></pre> and I can see all the function calls from various .dlls there.\nWhen using dumpbin.exe with <pre><code>/section:.text /disasm</code></pre> to disassemble the same target <pre><code>.exe</code></pre>, although it shows the same opcodes <pre><code>ff 15 8e 0f 00 00</code></pre>, it somehow translates this RIP offset to the proper (and correct) Win32 function being called (in my program <pre><code>GetCurrentProcessId()</code></pre>), <pre><code>call qword ptr [__imp_GetCurrentProcessId]</code></pre>.\nMy question is how to \"map\"/resolve each <pre><code>CALL</code></pre> instruction that I see in my disassembly to a specific Win32 API call, like dumpbin does, since I don't run this program inside the debugger and therefore the IAT is not overwritten by the Windows loader to show the proper <pre><code>jmp</code></pre> instruction calling the Windows API. Is it a disassembler issue? Can I deduct this somehow using the various PE structures?\n",
    "votes": "1",
    "answers": 1,
    "views": "858",
    "tags": [
        "disassembly",
        "windows",
        "pe",
        "x86-64"
    ],
    "user": "servo",
    "time": "Apr 11, 2021 at 14:49",
    "comments": [
        {
            "user": "servo",
            "text": "As I understand so far, is that the RIP offset is actually an offset from the current instruction location \"somewhere\" (in memory? in file?), to another location \"somewhere\". Opening the target exe IDA disassembler and calculating the offset from the resolved memory location back to the call instruction, results in the RIP offset, <pre><code>0xf8e</code></pre> in my case.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I found a solution and gonna leave it here for future reference.\nFirst, you need to calculate the linear address (the one the binary will have in run-time) from the RIP offset of the jump. Let's say the RIP offset is <pre><code>0x8fe</code></pre>. You add this, and the offset of the instruction itself (offset from start of .text section) plus the instruction size and you get a number. You then have to add this number to the start of the .text section, but this time, you need to include the <pre><code>SectionAlignment</code></pre> in your calculation. If the RVA of the <pre><code>.text</code></pre> is <pre><code>0x400</code></pre> and the <pre><code>SectionAlignment</code></pre> is <pre><code>0x1000</code></pre>, then the start of the <pre><code>.text</code></pre> will be at Image Base + <pre><code>0x1000</code></pre>.\nThen you get the imported function names from the ILT Import Directory Table. You do this by reading the <pre><code>OriginalFirstThunk</code></pre> pointer to <pre><code>u1.Ordinal</code></pre> and then to <pre><code>Name</code></pre>. For more details look here.\nWhen doing this, you know the order that the imported functions are imported, per dll.\nNow, you need to get the <pre><code>FirstThunk</code></pre> RVA, which will point to a NULL location when the file isn't loaded. However, this RVA is the start of the IAT (in run-time). The size of each import is 8 bytes.\nFor example, if you see that a <pre><code>CALL QWORD PTR [RIP+0xf8e]</code></pre>, you calculate this number and you get (say) <pre><code>0x0000022D932D2008</code></pre> which is 8 bytes from the start of the IAT, you know that this call calls the second imported function. Since you know the order, you know which function it is.\n",
            "votes": "1",
            "user": "servo",
            "time": "Apr 14, 2021 at 21:02",
            "is_accepted": true,
            "comments": []
        }
    ]
}