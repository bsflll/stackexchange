{
    "title": "Why does TOTP secret change every second?",
    "link": "https://reverseengineering.stackexchange.com/questions/13744/why-does-totp-secret-change-every-second",
    "content": "Lately I've been inspecting a key generator program in IDA Pro. I believe the thread here discusses a similar key generator. Therefore, it may be referred to for certain details. The key generator takes a device serial number as input and generates a 32 byte (character) master key along with a OTPAUTH URI of the form in the link aforementioned.\n\nThe master key is only a function of the current time (in seconds from epoch). Therefore changes every second regardless of different serial numbers.\n\nSince the key changes every second, so does the OTPAUTH URI. I wonder how is the server supposed to verify a TOTP once a client enters it under this situation?\nEdit:\nSo now there are some new questions:\n\nHow do I authenticate to a server with this keygen knowing that the keygen is using <pre><code>srand(time(NULL))</code></pre> for the seed while calling <pre><code>rand()</code></pre> 8 consecutive times to generate a 32-byte random sequence.\nIs it logical to say the time step for the OTP codes is still 30 seconds while we know that the key and consequently secret are changing every second? Does this translate to the fact that the OTP validity is 1 seconds now?\n\nVulnerability: Isn't the server susceptible to creating TOTPs of the future and saving them in a repository by an adversary? While I'm writing this section 1476946414 seconds have passed since epoch. Assume creating a TOTP for the time equivalent to 1476947000 seconds passed from epoch. The keygen may be modified such that 1476947000 is passed to <pre><code>srand()</code></pre> instead of <pre><code>time(NULL)</code></pre>. Presumably there will also be enough time to derive the TOTP from the OTPAUTH URI.\nPatching using IDA Pro 6.8:\nSo I thought its better to continue in a hands on fashion. Scrolling through the disassembly, I changed the call to <pre><code>time(NULL)</code></pre> to a mov instruction, assigning my favorite time to eax. In order to check my patch I ran the original keygen on the favorite time. The results were equivalent. Three things still bother me:\n\nMay the validation process the server carries out be concealed in the keygen or the keygen is what its only expected to be, a keygen?!\nThe disassembly has a bunch of strings resembling openssl subroutines I presume. For instance digest.c, pmeth_gn.c, pmeth_lib.c, etc. The codes are available on the web. However, I found no lucid documentation for a layman. I suspect if the server's validation parameters are defined here. I've also been able to detect SHA256 and SHA512 cryptographic constants in the disassembly using findcrypt2.\nI've been cautioned that the keys are generated using Linux. What effect may this have? I'm still on the Windows track!\n\nSwitching to Linux:\n\nSo I installed Ubuntu 16.04 and ran the patched linux binary keygen. The key file and the secret were completely different from the ones generated by Windows for the same time. Before reaching the specified time, I created the HMAC and derived the TOTP codes for that specific time and entered them exactly on the specific time. However, I was not able to authenticate. It may seem that the server is not expecting TOTPs for the current time. I have no idea TOTPs for what time should I feed to the server!\nWhile findcrypt2 did not find any sign of AES in Windows keygen binary, it did notice multiple Rijndael 's in the Linux keygen binary (just adding as additional info).\nI have been able to receive the server binary. I think the authentication procedure must be outlined there. But where should I look?\n\nHere is the Final Problem:\nThe key generator program is used to produce device specific keys. There is a weakness in how these keys are generated which should be exploited to generate valid one-time codes for any device.\n\nThe serial number may be any 9-digit number. I personally have been working with 381151134.\nUsage: keygen [-g OR -m master_key_file] -k serial -o master_output_file\nTo download the keygen Linux binary click here. The Windows binary is found here.\n",
    "votes": "2",
    "answers": 1,
    "views": "733",
    "tags": [
        "ida",
        "disassembly"
    ],
    "user": "Newbie",
    "time": "Mar 17, 2017 at 13:14",
    "comments": [
        {
            "user": "NirIzr",
            "text": "The question is a bit confusing to me. Can you perhaps edit it and add some order and clarifications? From what i can tell i think digest is related to the actual hash generation and if i'd have to guess i'd say the rand() values are fed into the hash's digest function.\n",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "@NirIzr I just modified the question. In case more info is needed, please let me know. I was trying to keep it short though!\n",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "@NirIzr I cut the question into pieces. It's easier to proceed step by steps!\n",
            "time": null
        },
        {
            "user": "kennytm",
            "text": "That's easy, the server could just generate 300 master keys to allow the password generated last 5 minutes be valid.\n",
            "time": null
        },
        {
            "user": "Newbie",
            "text": "@kennytm Won't the server be under risk then? Let me ask another way. What should a client do to authenticate to the server, assuming the server will simply generate one TOTP having no database? I want to know why on earth should the server care about a clients authentication, holding a bunch of master keys? Shouldn't the client sort out the way to properly authenticate to the server once the rules are on ground?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Since the key changes every second, so does the OTPAUTH URI. I wonder how is the server supposed to verify a TOTP once a client enters it under this situation?\n\nThe server must be aware of previously generated keys to provide usability. Either by generating previous keys on the fly (I can imagine an algorithm that tries <pre><code>t-0</code></pre> and if that fails <pre><code>t-1</code></pre> and if that fails <pre><code>t-2</code></pre> for a predefined range to allow users to input a value some time after moving to the next.\nOtherwise the entire generate-insert-send-validate process is limited to a short window. Accepting more than one valid key at a time is acceptable because the range remains short, values are still hard to predict, brute-forcing remains impossible (this can be further mitigated by limiting the accepted key's range after several incorrect attempts). \n\nHow do I authenticate to a server with this keygen knowing that the keygen is using srand(time(NULL)) for the seed while calling rand() 8 consecutive times to generate a 32-byte random sequence.\n\nWithout reverse engineering the entire key generation algorithm and actual generation process it is impossible to know. You'll need to reverse engineer the function calling <pre><code>rand()</code></pre> and build a simulator for the key generation process.\nIf what you described is the entire process, You're left with figuring out how are those <pre><code>rand()</code></pre> values are joined together (are they concatenated? xored to each other? How is the final value encoded?)\nEDIT: Answer additional question presented under 'Vulnerability'\n\nIsn't the server susceptible to creating TOTPs of the future and saving them in a repository by an adversary?\n\nIt is, but as I mentioned in this answer in response to you're first question that does not necessarily happens. The validation code can generate the TOTP keys it considered reasonable/potential every time it needs to execute a validation.\nAdditionally, this requires an adversary to hack gain access to that secure storage however if an adversary gained access to that secure storage to steal the TOTP keys, he might as well steal the master key used to generate those keys and gain the ability to generate TOTP keys as he wishes. For this reason storing the keys in the same place the master key is stored does not increase risk.\nObviously, the server has the ability to generate keys in order to validate them, and must be made sure to be trustworthy for the mechanism to function securely. This is a common requirement for most cryptographic protocols that certain points are to be trusted. After all, in order for the server to validate the user, it is reasonable to assume the server is protected.\nOne could consider some kind of asymmetric key protocol instead of a symmetric key. However since this protocol is designed to validate a user by the server, it becomes moot whenever the server becomes untrusted.\nIf an adversary hacks into a server to generate future keys, once this is detected replacing the master key (and all future TOTP keys accordingly) is a requirement.\n\nMay the validation process the server carries out be concealed in the keygen or the keygen is what its only expected to be, a keygen?!\n\nThe keygen and the server carry out the same basic process. Once as a way to provide proof of knowledge (the keygen), and one to verify it (server).\nThe keygen is able to execute perform validations and the server is able to crete proofs, but that shouldn't happen (although it might, and that can ge risky and expose the protocol to vulnerabilities). \n\nThe disassembly has a bunch of strings resembling openssl subroutines I presume. For instance digest.c, pmeth_gn.c, pmeth_lib.c, etc. The codes are available on the web. However, I found no lucid documentation for a layman. I suspect if the server's validation parameters are defined here. I've also been able to detect SHA256 and SHA512 cryptographic constants in the disassembly using findcrypt2.\n\nI'm not really sure what's the question here. I don't think any SSH functionality is directly related to the key generation, but I might be wrong.\n\nI've been cautioned that the keys are generated using Linux. What effect may this have? I'm still on the Windows track!\n\nWindows and Linux implement <pre><code>srand</code></pre> and <pre><code>rand</code></pre> differently. Specifically, they're using different constants or a different number of iterations and combinations between iterations. The basic block for common rand functions is this:\n<pre><code>int myrand(void) {\n    next = next * 1103515245 + 12345;\n    return((unsigned)(next/65536) % 32768);\n}\n</code></pre>\nWhere 1103515245 and 12345 are two constant values that often change between implementations.\nThis is glibc's version. You can see it's more complicated. Reverse engineering the specific implementation is probably the safest way.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Oct 21, 2016 at 1:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">I am convinced by the first section of your answer. As for the second part however, I proposed a much simpler scheme than an entire reverse engineering. It's been added to the main question as 'vulnerability'. I'll appreciate your opinion on it!</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">@Newbie I updated my answer to address your new question. It feels as if another question is supposed to exist under the vulnerability title, but i couldn't figure what it should be. You're encouraged to edit your question again to highlight that additional question.</span>",
                    "time": null
                },
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">I appreciate your additional explanation. Actually questions are upcoming quite frequently but I will keep the step by step fashion if you dont mind. I implemented the vulnerability scenario I proposed myself in the question by modifying the <i>srand</i> (<i>time</i> (NULL)) to simply <i>srand</i> (preferred epoch time). In doing so I used IDA Pro 6.8 to modify a function call to <i>time_(NULL) to _mov eax, preferred time in hex</i> The patch works. Both the key &amp; OTPAUTH URI generated by the patched program equal the results of the initial keygen ran on that specific time.</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">step-by-step questions are perfectly fine, but if you don't mind, can you add additional details to the original question instead of in comments? Once you do that I'll edit my answer again with any needed clarifications.</span>",
                    "time": null
                },
                {
                    "user": "Newbie",
                    "text": "<span class=\"comment-copy\">Sorry for making it hard for you. Its one huge question now!</span>",
                    "time": null
                }
            ]
        }
    ]
}