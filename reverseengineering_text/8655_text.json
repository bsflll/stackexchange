{
    "title": "Understanding pseudocode containing a math operation in a variable assignment [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/8655/understanding-pseudocode-containing-a-math-operation-in-a-variable-assignment",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions on software development are off-topic here, but can be asked on Stack Overflow.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nSo I'm trying to reverse engineer a LFSR encryption scheme using IDA, and am (hopefully) pretty close to cracking it. \nThe code in particular iterates through every byte of the encrypted file, decrypts it and stores it in memory (var v22). What stumps me however, is the way the pseudocode seems to do some operations on the variable before declaring it â€“ which I have no idea how to \"translate\" into something a bit less cryptic.\nI've included the code below:\n<pre><code>file = fopen((const char *)&bin_filename, \"rb\");\nfseek(file, 0, 0);\n\nmemset(&v22, 0, 0x80000u);\ni = 0;\nwhile ( feof(file) == 0 ){\n    fread(&byte, 1u, 1u, file);\n\n    if ( i % 4 ){\n        decryptedByte = DecryptByte(byte);\n\n        // What happens here on the left hand side of the bitwise OR assignment?\n        *(&v22 + i / 4) |= decryptedByte << 8 * (i - ((i + ((unsigned int)(i >> 31) >> 30)) & 0x1C));\n    }\n    else {\n        decryptedByte = DecryptByte(byte);\n        *(&v22 + i / 4) = decryptedByte;\n    }\n\n    ++i;\n}\n</code></pre>\nAs indicated by my comment above, what I don't understand is the meaning of <pre><code>*(&v22 + i / 4) =</code></pre> in the context of a variable assignment. \nHow does <pre><code>decryptedByte</code></pre> get assigned to a math equation?\n",
    "votes": "0",
    "answers": 1,
    "views": "113",
    "tags": [
        "decompilation",
        "deobfuscation",
        "decryption"
    ],
    "user": "Bjarke",
    "time": "10 years ago",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>v22</code></pre> is the first byte of an 0x80000-byte buffer.\n<pre><code>&v22</code></pre> is a pointer to that buffer.\n<pre><code>&v22 + i / 4</code></pre> is a pointer to the <pre><code>i/4</code></pre>'th byte in that buffer.\n<pre><code>*(&v22 + i / 4) |= ...</code></pre> ORs the <pre><code>i/4</code></pre>'th byte in that buffer with <pre><code>decryptedByte << 8 * (i - ((i + ((unsigned int)(i >> 31) >> 30))</code></pre>.\n",
            "votes": "1",
            "user": "Jason Geffner",
            "time": "Apr 8, 2015 at 0:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Bjarke",
                    "text": "<span class=\"comment-copy\">That makes sense! But since <code>i</code> is an integer, won't <code>i/4</code> mean only 25% of the file will get decrypted?</span>",
                    "time": null
                },
                {
                    "user": "Guntram Blohm",
                    "text": "<span class=\"comment-copy\">Note that your <code>*(&amp;v22 + i / 4)</code> would be better written as <code>v22[i/4]</code>. You're omitting the declaration of <code>v22</code>, but it seems to me that <code>v22</code> was declared <code>int *</code> where it should better have been declared <code>char *</code> so every array index is multiplied by 4 implicitly (thus divided by 4 explicitly by the decompiler). Also, how much of the file gets decrypted is based on <code>feof</code> and doesn't have anything to do with the buffer size at all. (And the code makes the common mistake of using <code>feof</code>  instead of checking the return value of <code>fread</code>).</span>",
                    "time": null
                }
            ]
        }
    ]
}