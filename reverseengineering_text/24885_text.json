{
    "title": "How to detect which shared libraries a binary is actually using?",
    "link": "https://reverseengineering.stackexchange.com/questions/24885/how-to-detect-which-shared-libraries-a-binary-is-actually-using",
    "content": "I have a stripped-down Linux-based embedded system where a closed-source program(32-bit <pre><code>ELF</code></pre> binary for MIPS) depends on several shared libraries. Two of those libraries are actually the same <pre><code>libcurl</code></pre> library, but compiled differently. I need to know which one the program is actually using.\nI can't install anything on that embedded system and the file system is read-only. Fortunately, there is a <pre><code>gdb</code></pre> available. When I execute the program and attach to it with <pre><code>gdb</code></pre> and print the loaded shared libraries with <pre><code>info sharedlibrary</code></pre>, then both libraries seem to be loaded:\n<pre><code>(gdb) info sharedlibrary\nFrom        To          Syms Read   Shared Object Library\n/* output removed for brevity */\n0x28c6a8b0  0x28caf770  Yes         /usr/lib//libcurl-jke.so.1\n0x28d81150  0x28d86260  Yes         /usr/lib//libcurl-kkw.so.3\n/* output removed for brevity */\n</code></pre>\nAlso, when I check the functions or variables with <pre><code>info functions</code></pre> or <pre><code>info variables</code></pre>, then I see items from <pre><code>libcurl</code></pre> under <pre><code>Non-debugging symbols</code></pre>. However, I don't know if those are from <pre><code>libcurl-jke.so.1</code></pre> or from <pre><code>libcurl-kkw.so.3</code></pre>.\nWhen I <pre><code>step</code></pre> through the program the debugger never shows that those libraries are used, but I know that they are because I see a HTTP GET request from this embedded system. What might cause this? Is there a way to see all the functions the program executes and files where those functions originate from using <pre><code>gdb</code></pre>?\nAlso, I could download this program and analyze it with <pre><code>radare2</code></pre> if this helps.\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "radare2",
        "gdb"
    ],
    "user": "Martin",
    "time": "May 2, 2020 at 0:12",
    "comments": [],
    "answers_data": [
        {
            "content": "ELF model doesn’t bind symbols to a specific library, so the first module providing a specific symbol is used. You can try to check into which address range the symbol’s value falls. \nNote, however, that at the beginning most symbols point into the executable’s PLT (program linkage table) so you might need to wait until they’re actually called to get the resolved addresses. Another option is to put a breakpoint on a symbol and then step into it to see what library you end up in.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "May 2, 2020 at 12:21",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Martin",
                    "text": "<span class=\"comment-copy\">Thanks! Did you mean if the <code>curl</code> related functions addresses(seen in the first column of the <code>info functions</code> command) fall into range of <code>0x28c6a8b0  - 0x28caf770</code> then they are from <code>libcurl-jke.so.1</code> library or if they fall into range of <code>0x28d81150 - 0x28d86260</code>, then they are from <code>libcurl-kkw.so.3</code>?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Martin yes, unless the address is in the main binary (PLT), then you’ll have to step through it  to get to the actual library.</span>",
                    "time": null
                }
            ]
        }
    ]
}