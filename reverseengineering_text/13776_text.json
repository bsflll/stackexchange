{
    "title": "Dylib can run without code sign in iOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/13776/dylib-can-run-without-code-sign-in-ios",
    "content": "I learn from somewhere <pre><code>dylib</code></pre> should be signed in iOS, otherwise <pre><code>dyld</code></pre> will refuse to execute it.\nBut when I test the example of this post. The <pre><code>dylib</code></pre> is not signed by default in this project, but it just running well when try to open it. I have verified the <pre><code>dylib</code></pre>'s binary doesn't contain <pre><code>lc_code_signature</code></pre>.\nAnyone can explain this? \n\nI test on a jailbreak device with 3 cases for a <pre><code>dylib</code></pre> without <pre><code>lc_code_signature</code></pre>. \n\nDynamic linked with the binary, so the <pre><code>dylib</code></pre> is list in <pre><code>LOAD COMMAND</code></pre>.\nCopy to the main bundle, and <pre><code>dlopen</code></pre> it.\nCopy to the <pre><code>Document</code></pre> dir and open it.\n\nThey all succeed.\n",
    "votes": "2",
    "answers": 1,
    "views": "5k",
    "tags": [
        "ios",
        "dynamic-linking"
    ],
    "user": "Karl",
    "time": "Oct 24, 2016 at 8:35",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "well, jailbreaks usually disable signature checking completely so no wonder it works.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "EDIT: The below applies only to non-jailbroken devices. Jailbreaks usually disable signature checking completely to allow unsigned homebrew software to run.\n\nApparently only libraries which are listed as dependencies of the executable in the header (<pre><code>LC_LOAD_DYLIB</code></pre> and similar commands) are checked, and those loaded with <pre><code>dlopen</code></pre> are not.\nThis is mentioned indirectly in the Code Signing Guide:\n\nAs with other Gatekeeper functions, this check is performed the first\n  time the app is run. It does not apply to libraries that the app loads\n  itself using the <pre><code>dlopen</code></pre> function, although those libraries are still\n  potentially subject to library validation, as described in Using\n  Library Validation.\n\nFollowing the link, we see this passage:\n\nStarting in iOS 8 and macOS 10.10, the system offers library\n  validation as a policy for the dynamic libraries that a process links\n  against. \nThe policy is simple: A program may link against any library\n  with the same team identifier in its code signature as the main\n  executable, or with any Apple system library. Requests to link against\n  other libraries are denied. \nIn iOS, an Apple system library is a\n  library that Apple mastered into the OS image. In macOS, an Apple\n  system library is a library shipped in /System/Library. The team\n  identifier is the 10-character alphanumeric string, such as\n  YH9SZ5LKR4, associated with your developer account, and recorded in\n  your Apple-issued signing certificate. \n  In iOS, library validation is\n  always enabled for all apps. There is nothing you need to do to opt\n  in.\n\nSo it would seem that <pre><code>dlopen</code></pre> should not be able to load unsigned libraries in iOS 8 and higher, though I have not checked this.\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Nov 23, 2016 at 19:08",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Karl",
                    "text": "<span class=\"comment-copy\">Thanks for you detail explain. I use iOS9 to test, and still can load unsigned binary.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Karl: and you're not using a jailbroken device? In that case it seems either the doc is wrong, or there is a bug.</span>",
                    "time": null
                }
            ]
        }
    ]
}