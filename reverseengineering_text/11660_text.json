{
    "title": "Is there a way to import debug/symbol information of a C++ DOS executable to IDA?",
    "link": "https://reverseengineering.stackexchange.com/questions/11660/is-there-a-way-to-import-debug-symbol-information-of-a-c-dos-executable-to-ida",
    "content": "I have an old DOS program compiled using Borland C++ (1991 version)\nThe end of the executable contains many strings preceded by an underscore which looks like debug/symbol information :\neg:  <pre><code>_HandleMemory</code></pre>, <pre><code>_AddKey</code></pre>, <pre><code>_SetPalette</code></pre>, ...\nMost of these strings seems to be functions or variables names.\nHowever once the exe is opened in IDA, that information is not used, most functions are simply named this way (except some known C functions like <pre><code>_qsort</code></pre>) :\n<pre><code>sub_XXXXX\n</code></pre>\nIs there a way to import that info back to IDA ?\n",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "debugging",
        "c++",
        "dos"
    ],
    "user": "tigrou",
    "time": "Dec 31, 2015 at 6:06",
    "comments": [
        {
            "user": "Jongware",
            "text": "Are you sure it's not actually a list of DLL imported symbols?\n",
            "time": null
        },
        {
            "user": "tigrou",
            "text": "By DLL, do you mean an external library ? (since AFAIK, DLL are windows only). I don't think so because these strings are referenced in any other of the program files.\n",
            "time": null
        },
        {
            "user": "Jongware",
            "text": "DLL is a Windows term, but Microsoft did not invent importing libraries from scratch. I assume you mean \"not referenced\" elsewhere. But: Just a list of symbols is practically useless. Are there any references to it inside the same executable? Can you upload this file and provide a link to it, so others can check?\n",
            "time": null
        },
        {
            "user": "tigrou",
            "text": "Yes you are right, I mean \"not referenced\". The program in question is a game (Alone in the Dark 1). It is freely downloadable on many abandonware sites, but i am not sure if it's OK to put a link to the executable here ?\n",
            "time": null
        },
        {
            "user": "DarthGizka",
            "text": "The year 1991 pegs this as Turbo C++ 1.0 or thereabouts, and it is indeed very likely that the tail data in question is Borland-style debug info (16-bit TDS format). Experiments show that the available IDA freewares - 3.7 through 5.0 - do not recognise the 16-bit Borland debug info. If the debug info is stripped into a separate TDS file (via tdstrip.exe) then you get a rejection message in the output window for those versions that can deal with TDS in principle but expect the newer 32-bit format (as of BOA 4.0 and beyond). Same for the 'Load TDS' menu item, if present.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In case anyone has same question, here is how I solved it : \n1) I exported all debug symbol information to a text file, using TDUMP.\n<pre><code>TDUMP somefile.exe > 1.txt\n</code></pre>\n2) I cleaned the txt file to keep only useful information : \n<pre><code>[Function name] + [Address]\n</code></pre>\n3) I imported the file back to IDA using a python script : see here\n",
            "votes": "4",
            "user": "Community",
            "time": "Apr 13, 2017 at 12:49",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "I've written an IDAPython script which parses the debug information and then performs the corresponding renamings, all from within IDA.\nThe script, along with simple usage instructions, are available on GitHub.\n",
            "votes": "0",
            "user": "ramikg",
            "time": "Oct 22, 2020 at 19:23",
            "is_accepted": false,
            "comments": []
        }
    ]
}