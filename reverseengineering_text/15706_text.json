{
    "title": "IDA Pro - Applying function signatures",
    "link": "https://reverseengineering.stackexchange.com/questions/15706/ida-pro-applying-function-signatures",
    "content": "I have three files:\n\nELF executable,\nELF dynamically linked library (<pre><code>.so</code></pre>),\nC headers file (<pre><code>.h</code></pre>) with function signatures and related structures for that library.\n\n#1 imports a number of functions from #2.\nIs there a way for me to leverage #3 to automatically apply signatures from #3 to:\n\nImports in #1 in one instance of IDA?\nExports in #2 in another instance of IDA?\n",
    "votes": "1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida",
        "linux",
        "c",
        "elf"
    ],
    "user": "pandasauce",
    "time": "Jun 28, 2017 at 9:07",
    "comments": [],
    "answers_data": [
        {
            "content": "There are several functions in the SDK, in <pre><code>typeinf.hpp</code></pre> or <pre><code>ida_typeinf.py</code></pre> that could be of use here, with the python API being much easier to use.\n\n<pre><code>parse_decls</code></pre> - for converting a header file to a til_t type library.\n\n\nthis function seems to skip plain function declarations.\nbut does store typedefs by name.\n\n<pre><code>parse_decl</code></pre> - for converting a single declaration to a <pre><code>tinfo_t</code></pre> object.\n\n\nthis does work for function declarations, but loses the function name.\n\n<pre><code>get_named_type</code></pre> - for looking up a type in the til_t.\n<pre><code>apply_type</code></pre> - for applying a type to a function.\n\nSo you could either parse the name from the function declaration yourself, and then use <pre><code>parse_decl</code></pre> to parse each declaration seperately.\nOr you could add <pre><code>typedef</code></pre> to the start of each declaration, so ida will store all your declarations, by name in a type libary.\n",
            "votes": "1",
            "user": "Willem Hengeveld",
            "time": "Sep 26, 2017 at 22:13",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Try using File -> Load File -> Parse C Header File (Ctrl+F9). You might need to tweak some things in the header file.\n",
            "votes": "0",
            "user": "joxeankoret",
            "time": "Jun 28, 2017 at 9:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pandasauce",
                    "text": "<span class=\"comment-copy\">Thank you for your response. I have tried this and it did not work. IDA successfully parses the file. I can manually fix function signatures by telling IDA what the arguments are, including custom structure pointers. However, this is very time consuming and feels unnecessary. Is there a way for it to automatically or semi-automatically apply signatures from the header file to functions matched by name?</span>",
                    "time": null
                },
                {
                    "user": "NirIzr",
                    "text": "<span class=\"comment-copy\">Yes. that way is the feature described above. It does not parse complicated C constructs and as mentioned you may need to tweak the file to make it usable by IDA. You can write a script to do that.</span>",
                    "time": null
                },
                {
                    "user": "pandasauce",
                    "text": "<span class=\"comment-copy\">I managed to get first scenario to work using <code>tilib</code>. What changes would I need to make to the header file to get the second scenario to work, i.e. apply function signatures to the library file?</span>",
                    "time": null
                }
            ]
        }
    ]
}