{
    "title": "How to decompile a C# .exe on macOS?",
    "link": "https://reverseengineering.stackexchange.com/questions/15351/how-to-decompile-a-c-exe-on-macos",
    "content": "It this even possible? Are there any free tools?\n",
    "votes": "11",
    "answers": 4,
    "views": "20k",
    "tags": [
        "decompilation",
        "c#"
    ],
    "user": "ttt",
    "time": "May 15, 2017 at 15:26",
    "comments": [
        {
            "user": "PhoeniX",
            "text": "Did you try those github.com/aerror2/ILSpy-For-MacOSX or tirania.org/blog/archive/2011/Feb-04.html.\n",
            "time": null
        },
        {
            "user": "ttt",
            "text": "I did, but after i build the project and run the .exe with mono, i get an error. I get this: <pre><code>Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object</code></pre>. I may debug the project in the future to find the issue if no easier solution will arise till then. :)\n",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "It depends on the complexity of the original executable, but in general debugger is the way to solve the problem.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Visual Studio for Mac can do the job. Just hit <pre><code>File / Open</code></pre> and then choose the <pre><code>executable or library</code></pre> you want. It'll open the <pre><code>Assembly Browser</code></pre> window.\nIf you need more detailed code change the <pre><code>Visibility</code></pre> to <pre><code>All members</code></pre> and the Language to <pre><code>C#</code></pre>.\n",
            "votes": "13",
            "user": "gandarez",
            "time": "Feb 14, 2019 at 22:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">but this way doesn't give you the code. Only the signatures of the methods.</span>",
                    "time": null
                },
                {
                    "user": "gandarez",
                    "text": "<span class=\"comment-copy\">@PawełŁukasik yes you can do, just take a look at my updated post.</span>",
                    "time": null
                },
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">Yup. My mistake.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Best free tool for the job is ILSpy, but it runs on Windows. This gives you a limited list of options:\n\ncreate a windows virtual machine (with virtualbox or vmware player) and run it in there\ninstall WINE on mac, to allow you run .exe files.\nget visual studio for mac and use ikdasm\nif you feel hardcore, open it in a disassembler ;)\n\nBeing an IT guy myself, I would go for the first solution. Check them all out briefly and go for one!\n",
            "votes": "5",
            "user": "Chris Tsiakoulas",
            "time": "May 21, 2017 at 8:22",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">for point 3, there's no tool called ildasm. The tools that are included VS for Mac are called ikdasm or monodis</span>",
                    "time": null
                },
                {
                    "user": "Chris Tsiakoulas",
                    "text": "<span class=\"comment-copy\">Thnks for the notice! I corected it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can use Jetbrains' Rider. It has a 30 day free trial period.\n\nOpen Rider and open or create a C# project\nAdd a dependency to the .exe file (naturally, this also works for .dll). \n\n\n\nIn a class in your project, import the package and type the class you want to inspect. \n\n\n\nDo Command+click or Command+B on the class name to trigger Rider's decompile option. Confirm if necessary. \n\nThe disadvantage is that we have to repeat step 4 for each class we want to decompile.\n",
            "votes": "2",
            "user": "jbarrameda",
            "time": "Mar 15, 2018 at 12:41",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Paweł Łukasik",
                    "text": "<span class=\"comment-copy\">it looks like you were too fast. Point 4 is incomplete and 5 is missing.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Is this even possible?\n\nGenerally yes, with a couple of exceptions:\n\nStarting with .NET Core and now .NET the <pre><code>.exe</code></pre> files produced by the compilation of applications are not CLR assemblies but native assemblies. CLR assemblies contain IL and are decompilable to C# while native assemblies contain machine code and cannot be decompiled to C#.\n\nHint: in that scenario one should decompile the <pre><code>.dll</code></pre> with the same name. That's the file that contains the compiled C# code.\n\nAhead-of-Time compiled <pre><code>.exe</code></pre> files are also not CLR assemblies and cannot be decompiled to C#\n\n\nAre there any free tools?\n\nYes, there are. One such tool is CodemerxDecompile - the spiritual successor of the popular JustDecompile. While JustDecompile is Windows only, CodemerxDecompile is a multi-platform decompiler that runs on Windows, Linux and MacOS.\nDisclosure: I'm part of the team behind CodemerxDecompile.\n",
            "votes": "0",
            "user": "Alexander Dimitrov",
            "time": "Mar 22, 2024 at 14:57",
            "is_accepted": false,
            "comments": []
        }
    ]
}