{
    "title": "Making operand an offset in IDA Python",
    "link": "https://reverseengineering.stackexchange.com/questions/6384/making-operand-an-offset-in-ida-python",
    "content": "I working with ARM executable.\nSometimes I have something like this <pre><code>MOV</code></pre> instruction:\n<pre><code>MOV R0, #0xCD548A40\n</code></pre>\nwhere the number <pre><code>#0xCD548A40</code></pre> is a valid offset but IDA doesn't recognize it as such automatically.\nI tried to reanalyze the executable with enabled option \"Automatically convert data to offsets\" without of any suitable result.\nI also tried to write IDAPython script to fix this, but the only possibility of conversion to offset that I found was:\n<pre><code>idaapi.jumpto(address)\nidaapi.process_ui_action(\"OpOffset\", 0)\n</code></pre>\nWhich is not too much convenient to use.\nQuestion\n\nGiven an instruction at specific address and one of its operands in a valid offset range is it possible to convert such numbers to offsets using IDA Python ?\nWhich IDAPython API should I use for it ?\n",
    "votes": "3",
    "answers": 2,
    "views": "6k",
    "tags": [
        "idapython"
    ],
    "user": "w s",
    "time": "Jun 17, 2020 at 9:54",
    "comments": [],
    "answers_data": [
        {
            "content": "I've been using the Ida <pre><code>OpOff</code></pre> function for that. That was <pre><code>idc</code></pre>, not <pre><code>idapython</code></pre>, but https://www.hex-rays.com/products/ida/support/idapython_docs/idc-module.html#OpOff says there's <pre><code>OpOff</code></pre> in <pre><code>idapython</code></pre> as well. In addition, there's another function, <pre><code>OpOffEx</code></pre>, that lets you specify more details. I think one of those is what you need.\n",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "Oct 5, 2014 at 20:23",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "I happen to just run into this exact issue.\nHere's what I did. Replace the <pre><code>for</code></pre> bits with the <pre><code>if</code></pre> bits to just test it on a small bit.\n<pre><code>from idautils import *\nfrom idaapi import *\nfrom idc import *\n\n#if True:\n#    if True:\n#        if True:\n#            startea = 0x0F9109DC\n#            endea = 0x0F9109F\nfor segea in Segments():\n    for funcea in Functions(segea, SegEnd(segea)):\n        functionName = GetFunctionName(funcea)\n        for (startea, endea) in Chunks(funcea):\n            for ea in Heads(startea, endea):\n                if idc.GetMnem(ea) != \"MOV\" or idc.get_operand_type(ea, 1) != 5 or  idc.get_str_type(idc.get_operand_value(ea, 1)) != 0:\n                    continue\n                print \"0x%08x\"%(ea), \":\", idc.GetOpnd(ea, 1), idc.get_operand_type(ea, 1)\n                idc.op_plain_offset(ea,1,0)\n</code></pre>\n```\n",
            "votes": "2",
            "user": "Erik Smit",
            "time": "Feb 23, 2018 at 15:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}