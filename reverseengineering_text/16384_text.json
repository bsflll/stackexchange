{
    "title": "What kind of assembly language construct is this?",
    "link": "https://reverseengineering.stackexchange.com/questions/16384/what-kind-of-assembly-language-construct-is-this",
    "content": "I am reversing an ELF64 executable created on AMD X86-64. I encountered this line near the end of the file and am puzzled to its meaning:\n<pre><code>nop    WORD PTR cs:[rax+rax*1+0x0]\n</code></pre>\nIn this case <pre><code>rax</code></pre> contains <pre><code>0x2329</code></pre>.  However, <pre><code>nop</code></pre> means 'do nothing', so I am puzzled as to why there are arguments included on the line.  The code is loaded with <pre><code>libc</code></pre> function calls so I am assuming the source code is C/C++ and not GAS.\nThis post has good content but perror's explanation is more apropos and contains more \"why\" than a mere recital of the Intel docs.\n",
    "votes": "3",
    "answers": 1,
    "views": "539",
    "tags": [
        "disassembly",
        "assembly"
    ],
    "user": "Not a machine",
    "time": "Sep 22, 2017 at 14:27",
    "comments": [
        {
            "user": "TkTech",
            "text": "Possible duplicate of nop with argument in x86_64\n",
            "time": null
        },
        {
            "user": "Not a machine",
            "text": "Thank you.  I missed that posting somehow.    It is similar however I believe the response \"The one-byte NOP instruction is an alias mnemonic for the XCHG (E)AX, (E)AX instruction\" is not valid on IA-32 and 64 processors.  At least according to the Intel documents.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There are mainly two usage of the <pre><code>nop</code></pre> instructions:\n\nThey are quite often used as padding at the end of assembly procedures or in-between procedures. And, in this case one may want to pad with \"more than one byte at the time\", this is why they added extra arguments (that are just ignored most of the time).\nSee: NOP instruction (Wikipedia) and NOPâ€”No Operation (x86 Instruction Set Reference).\n\nThey can also be used to delay a bit the ALU in between two memory fetches in order to give the pipeline a chance to get a correct prediction of the data values. And, this is probably your case because this instruction perform a small arithmetic computation when computing <pre><code>rax+rax*1+0x0</code></pre>, therefore the ALU has is really delayed because of this operation.\nSee: Delay Slot (Wikipedia).\n",
            "votes": "3",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Not a machine",
                    "text": "<span class=\"comment-copy\">Thank you.  Looking at the surrounding code the delay slot answer makes complete sense.  It very much resembles the   <code>NOP DWORD ptr [EAX + EAX *1 +  0x0</code>   8 byte eample in the Intel docs.</span>",
                    "time": null
                }
            ]
        }
    ]
}