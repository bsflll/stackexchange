{
    "title": "Use OllyDbg to identify what happens when a button is pressed",
    "link": "https://reverseengineering.stackexchange.com/questions/8929/use-ollydbg-to-identify-what-happens-when-a-button-is-pressed",
    "content": "I am entirely new to reverse engineering, but nonetheless I have been given the challenge by a friend to crack a computer program he wrote. Having never done this before, my research online suggested that I use OllyDbg to search for an error message given when I try to give an invalid code. The problem is that if the code is invalid, the button to submit it is never enabled. Could I use OllyDbg to find what would happen if I were to click the button and then somehow override it?\nHere's all I know about the program:\n\nI do not have access to the source code, nor do I know what language it was written in.\nThe program can be activated as was proven to me by my friend has he typed in a key to activate it, yet covering it so I could not see it.\n\nGiven that I have never dabbled in reverse engineering before, what would be my best plan of attack and how would I go about it?\n",
    "votes": "5",
    "answers": 4,
    "views": "6k",
    "tags": [
        "ollydbg",
        "crackme"
    ],
    "user": "DaveTheMinion",
    "time": "May 19, 2015 at 12:38",
    "comments": [
        {
            "user": "Dominik Antal",
            "text": "I suggest you to go trough Lena's tutorials to get familiar with the basics.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you have very little experience in binary RE I would suggest to start with preparing for a lot of unknown information that would be \"thrown\" on you, time and patience :-). \nNow to the subject. To do the work your are talking about, you'll need tools and you need to know them well:\n\nOlly - to do the dynamic analysis of the binary. The one you already have and I hope opened it already to get now the tool.\nIDA - to do the static analysis. It will help you navigate the binary. You can download from the supplied link the free version which will be sufficient for your task.\nCFF explorer - to understand the type of the binary and poke around with its dependencies, resources.\n\nNext, supposedly the binary is not obfuscated:\n\nTry to execute the binary and study a little bit its behaviour and take notes - strings (titles, messages), button names. Give it some input and look for the results.\nBased on binary type: \n\n\n.Net \n\n\ncheck with ILSpy to get the sources if possible.\n\nNative\n\n\nLoad it into IDA and check if you can find/verify from notes the data inside the binary.\nAs this is the GUI application, I would check with MSDN in the area of <pre><code>GetMessage</code></pre> and <pre><code>TranslateMessage</code></pre>, <pre><code>CreateWindow</code></pre> and look for Window proc which is responsible for processing window messages.\n\n\n\nAfter the above, I would also suggest, as @Dominik did, go over the fist Lena's tutorials, to cover all the needed info for your type of binary.\nI think the above can pretty much get you to the key you are looking for.\nAdd more info from the ongoing analysis and we will try to provide another help.\nGood luck!\n",
            "votes": "6",
            "user": "DaveTheMinion",
            "time": "Oct 5, 2016 at 17:32",
            "is_accepted": false,
            "comments": [
                {
                    "user": "DaveTheMinion",
                    "text": "<span class=\"comment-copy\">Thank you for your explanation. This is likely going to take me some time since not only do I not know anything about reverse engineering, but I have no past experience with using OllyDbg either, so I have two learning curves here.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I assume your friend did not utilize tricks like anti-debugging and packing the binary, as your first challenge. Assuming is not right for an answer, so you should provide more details next time :) How I would approach this:\n\nGo trough Lena's tutorials.\nIdentify what is the application was written in.\nThere are multiple tools for this, such as :\n\nPEID or ProtectionID. \nMore can be found here. Play with them :)\n\nSo, from the sounds of it your friend has something like this in place:\n<pre><code>void onEachKeyPress() // meaning each time you type a character into\n                      // the text box, this function will be called\n{\n   if(txtBoxInput == \"secretKey123#\")\n   {\n     EnableButton();\n     MessageBox(\"You did it!\");\n   }\n}\n</code></pre>\nSo, we know that the button will be activated if the textbox contains the right key. Also there is probably a gratulation message after entering the right key and pressing the button. From this you can assume that there will be a function for enabling the button, or s a MessageBox window. \nEventually there will be a condition somewhere in the application, which decides if you have the right key or not, if there is no trickery involved the key itself will be in the application somewhere.\nOlly will show you machine language, and conditions (<pre><code>if</code></pre>) will translate to jump operands (<pre><code>je</code></pre>, <pre><code>jz</code></pre>, <pre><code>jne</code></pre>, ...). \n\n(the action in this case would be enabling the button and showing a message)\nSo now you know all these, it is time to look round. Run the app, attach Olly, or you can start your app from olly, and set it to break on the main function. This can be handy, because from there you can step by step follow the execution flow of the application. You now know what functions to look for. Put some breakpoints and observe. List all strings in the binary. See if any looks like a hardcoded password.\nIf you find the piece of code that decides if your input is right or not, you could patch it, or just simply find the hardcoded password and enter it without modifying (patching) the binary.\nIf you run out of things to crack, and want to move on to more advanced challenges, head over to crackmes.de.\n",
            "votes": "3",
            "user": "perror",
            "time": "Jun 9, 2015 at 7:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "DaveTheMinion",
                    "text": "<span class=\"comment-copy\">Thank you for your explanation. This is likely going to take me some time since not only do I not know anything about reverse engineering, but I have no past experience with using OllyDbg either, so I have two learning curves here.</span>",
                    "time": null
                },
                {
                    "user": "Dominik Antal",
                    "text": "<span class=\"comment-copy\">If you listen to me you start with Lena's tutorials, that's really the best I've found so far, and explains everything from the beginning. Also it focuses exactly on these kind of applications that your friend made for you.</span>",
                    "time": null
                },
                {
                    "user": "DaveTheMinion",
                    "text": "<span class=\"comment-copy\">I am checking out Lena's tutorials right now.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The explanation below goes only for native apps:\nIf you want to understand how to find out where buttons' events occur, I advice you to learn coding in these languages: ASM, C++, and Delphi (at least get a general approach about them). Then, try to find where the event occurs of your code in the compiled file.\nUse google translation for this page, I wrote about this stuff once:\nhttp://www.at4re.com/f/showthread.php?11276\n",
            "votes": "2",
            "user": "Yaser Alnajjar",
            "time": "May 22, 2015 at 9:51",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">\"Delphi\" is not a language, it's an IDE. The <i>language</i> is an object-oriented dialect of Pascal.</span>",
                    "time": null
                },
                {
                    "user": "Yaser Alnajjar",
                    "text": "<span class=\"comment-copy\">\"Delphi\" is a language...  wiki: <a href=\"http://en.wikipedia.org/wiki/Delphi_(programming_language)\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Delphi_(programming_language)</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Set a breakpoint on the beginning of that function, hit that breakpoint, and step through to see what happens. That's the most cut and dry answer there is really.\n",
            "votes": "1",
            "user": "nrocboc",
            "time": "Oct 6, 2016 at 4:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}