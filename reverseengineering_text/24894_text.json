{
    "title": "Patching memory",
    "link": "https://reverseengineering.stackexchange.com/questions/24894/patching-memory",
    "content": "I've successfully reversed and patched an application on windows, but patching the executable on disk triggers a CRC check and prevents it from loading. I've used x64dbg and have the addresses I need (they are static and don't change on reruns). However, if the unmodified executable is already loaded and running, and then the patches are applied, everything will work fine. My question is how can I write a simple loader to patch those memory addresses after execution? I've been searching for this all over the Internet and can't get my head around it. The boiler plate codes I've found are giving me headaches as fixing the c++ code errors is so confusing.\nHere is my code:\n<pre><code>#include <windows.h>\n#include <stdio.h>\n#include <tchar.h>\n#include <iostream>\n\nusing namespace std;\n\n\n\nint main()\n{\n    int newValue = 0x24;\n    uint8_t readTest;\n    byte num_char[16];\n\n    HWND hwnd = FindWindowA(NULL, \"Playback password authentication\");\n    if (hwnd == NULL)\n    {\n        cout << \"Cannot find window\" << endl;\n        Sleep(3000);\n        exit(-1);\n    }\n    else\n    {\n        DWORD procID;\n        GetWindowThreadProcessId(hwnd, &procID);\n        HANDLE handle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);\n        if (procID == NULL)\n        {\n            cout << \"Cannot obtain process.\" << endl;\n            Sleep(3000);\n            exit(-1);\n        }\n        else \n        {\n            ReadProcessMemory(handle, (PBYTE*)0x0052BD7E, &num_char, sizeof(num_char), 0);\n//          WriteProcessMemory(handle, (LPVOID)0x0052BD7E, &newValue, sizeof(newValue), 0);\n            cout << num_char << endl;\n            Sleep(10000);\n        }\n    }\n}\n</code></pre>\nFirst I need the code to actually read and print the hex bytes at those addresses so I can make sure the addresses and their values are actually correct. If this returns the correct values, then I think I using WriteProcessMemory won't be that hard. But the problem is the values returned for my addresses are not those I expect and see in x64dbg.\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "c++",
        "x64dbg",
        "patch-reversing"
    ],
    "user": "Seyed Amin",
    "time": "May 2, 2020 at 19:23",
    "comments": [],
    "answers_data": [
        {
            "content": "A Process Has N Number of Modules\nAnd these Modules can Load At Different Base Address\nso using Addresses Like 0x0052BD7E may yield Wrong Results   \nEnumerate The Modules\nFind The Correct Base Address\nAdd The Relative Virtual Address\nRead From Those Address   \nhere is a small python code that reads the first 10 bytes of Calculator Metro app's    ApplicationFrameHost.exe in windows 10 try adapting the concept\n<pre><code>from ctypes import *\nimport win32con\nimport win32process\nimport win32api\n\ncalwnd = windll.user32.FindWindowW(None,\"Calculator\")\nif(calwnd != None):\n    calpid = c_uint32(0)  \n    windll.user32.GetWindowThreadProcessId(calwnd,byref(calpid))\n    if(calpid.value != 0):\n        process_handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS,False,calpid.value)\n        if(process_handle != None):\n            module_handles = win32process.EnumProcessModules(process_handle)\n            print(\"Total No of Module = %d\" % len(module_handles))\n            print(\"base Address Of First Module = %x\" % module_handles[0])\n            print(\"Mod1=%s\" % win32process.GetModuleFileNameEx(process_handle, module_handles[0]))\n            buf = create_string_buffer(16)\n            tmp = c_void_p(module_handles[0])\n            bread = c_int()\n            windll.kernel32.ReadProcessMemory(process_handle.handle,tmp,byref(buf),16,byref(bread))\n            for i in range(0,16,1):\n                print(buf[i],end=\" \") \n</code></pre>\nexecuting \n<pre><code>D:\\pyt>python writeproc.py\nTotal No of Module = 65\nbase Address Of First Module = 7ff728780000\nMod1 = C:\\WINDOWS\\system32\\ApplicationFrameHost.exe\nb'M' b'Z' b'\\x90' b'\\x00' b'\\x03' b'\\x00' b'\\x00' b'\\x00' b'\\x04' b'\\x00' b'\\x00' b'\\x00' b'\\xff' b'\\xff' b'\\x00' b'\\x00\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "May 2, 2020 at 22:01",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Seyed Amin",
                    "text": "<span class=\"comment-copy\">Thank you. I ultimately got it to work based on your code and explanations.</span>",
                    "time": null
                }
            ]
        }
    ]
}