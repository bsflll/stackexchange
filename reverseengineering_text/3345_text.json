{
    "title": "Inverting functions HOWTO",
    "link": "https://reverseengineering.stackexchange.com/questions/3345/inverting-functions-howto",
    "content": "I just read some code that applies a series of transformations to a 4 byte integer. I'm curious to know if the following function is invertible.\n<pre><code>f(y) = y^(y>>11)\n</code></pre>\nA general doubt I have, is the thought process involved when trying to find the inverse functions whenever a series of instructions are given. Do you have a methodology for approaching these kinds of problems?\n",
    "votes": "13",
    "answers": 4,
    "views": "651",
    "tags": [
        "functions",
        "crackme"
    ],
    "user": null,
    "time": "Jul 4, 2014 at 21:11",
    "comments": [
        {
            "user": "Ta Thanh Dinh",
            "text": "Your function is mathematically invertible (in the sense that its left-inversion exists) because it is a monotonic function, but I do not know that the left-inversion is computable or not. In a more strict case, if y is stored in 4 bytes and f(y) is stored in less than 4 bytes then this function is not invertible because of the pigeon-hole principle.\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "In general, the computation of an arbitrary sequence of instructions is not invertible because much information is lost along the execution of these instructions.\n",
            "time": null
        },
        {
            "user": "Antimony",
            "text": "@tathanhdinh In general perhaps, but many functions are specifically designed to be invertible, such as the type blah is asking about here.\n",
            "time": null
        },
        {
            "user": "toasted_flakes",
            "text": "At worst, since the <pre><code>y</code></pre> space is limited (4 byte int) you can do an exhaustive search on f(y)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "A good way to quickly find if a function <pre><code>f()</code></pre> has an inverse or not, is trying to find two elements of the initial domain <pre><code>x</code></pre> and <pre><code>y</code></pre> such that <pre><code>x!=y</code></pre> and <pre><code>f(x)==f(y)</code></pre>.\nIf such couple of elements exist, you cannot distinguish them in the target domain of <pre><code>f</code></pre> and, thus, a reverse function cannot be built.\nLooking at your example: <pre><code>f(x) = x^(x>>11)</code></pre>, we can split the resulting bit vector into three parts (a first clear part from <pre><code>b31</code></pre> to <pre><code>b21</code></pre>, a second Xored part with the first part (and thus that can be recovered) from <pre><code>b20</code></pre> to <pre><code>b10</code></pre>, and a last third part that can be recovered with the clear text of the second part from <pre><code>b9</code></pre> to <pre><code>b0</code></pre>):\n<pre><code>x = (b31, ..., b0)\n\nf(x) = (b31, ..., b21, b20^b31, b19^b30, ..., b10^b21, b9^b20, ..., b0^b11) \n         clear part   |      xored with clear part    | xored with previous part\n</code></pre>\nSo, in fact, no information is lost and a reversed function can be built from this. Here is a pseudo code explaining the principle of this reverse function:\n<pre><code>g(x)\n{\n   /* Get the clear part */\n   y = (x >> 20);\n\n   /* Unmask the second part */\n   z = ((x << 11) >> 21) ^ y;\n\n   /* Unmask the third part */\n   t = ((x << 22) >> 22) ^ z;\n\n   /* Reassembling the whole thing */\n   return (y << 20 + z << 11 + t);\n  }\n</code></pre>\n",
            "votes": "14",
            "user": "perror",
            "time": "Jan 3, 2014 at 14:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I am far from being sure of what I say... So, critics and raising contradiction in my reasoning are more than welcome.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Argh, I think we miss one or two bits of information as the first clear text part is only 10-bits long and the second and third parts are 11-bits long... Be careful with this solution I might have been wrong when building bit's index.</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">The only problem I can see is if the integer is signed and not unsigned. It isn't specified in the question. If it is signed the resulting b31 will be 0 independently of the original value of b31 which leads to data loss. For the unsigned case this method can be generalized all the way up to a shift of 1 bit, which is actually easier to illustrate. If you formulate your each of your bitvector elements as an equation system it becomes quite easy to see why this works. Unless I'm missing something. I haven't verified your code.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">Thanks for looking at it ! (the pseudo-code is only here to give an idea of the decoding method, it shouldn't be trusted).</span>",
                    "time": null
                },
                {
                    "user": "Peter Andersson",
                    "text": "<span class=\"comment-copy\">No problem, I think your approach of reformulating as a bitvector, trying to formulate equations for each bit and then inverting the equation system is generally the way to go about solving these types of things.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Perror already covered this particular case, but here are some general principles for inverting similar functions.\nNote: all of this assumes the integer is either unsigned, or it is signed using two's complement and using unsigned shifts. In Java, two's complement is guaranteed. In C/C++, it is not guaranteed, but it's almost always the case in practice, and you can check the compiled assembly to be sure.\nA sequence of transformations involving xor and bitshifts can be thought of as a linear (or affine if there are constants) transformation on a vector in (GF2)^32. Essentially, you have a 32 element vector of numbers mod 2, and since xor is addition mod 2, and you are multiplying it by a matrix.\nSo the transformation is invertible iff the matrix is invertible. Luckily this is usually the case. A function of the form <pre><code>x ^ (x >>> n)</code></pre> with n > 0 is a lower triangular matrix and hence invertible. Likewise, <pre><code>x ^ (x << n)</code></pre> is an upper triangular matrix and so also invertible. Since the product of invertible matrices is invertible, any sequence of such transformations will also be invertible. \nNote that a signed shift (>> in Java) is not necessarily invertible.\nAs for actually inverting it, the easiest way (though not necessary the fastest) is to simply calculate the transformation matrix entries, then perform Guassian elimination (no rounding errors in a finite field).  \nYou'll often see other operations mixed in as well. Addition and multiplication can be thought of as operations in the ring modulo 2^32. With two's complement, it doesn't matter whether you're using signed or unsigned numbers. Addition by a constant is simple: just subtract the constant. Multiplication by any odd constant is also invertible: just multiply by the multiplicative modular inverse. You can find code to calculate this online, or just take <pre><code>pow(c, (2**31)-1, 2**32)</code></pre> if you're doing Python.\nMultiplication by an even constant loses information, so it cannot be fully inverted. Likewise, a combination of additions with the same effect won't be either. For example <pre><code>x + x</code></pre> is not invertible, since it's equivalent to <pre><code>x * 2</code></pre>. <pre><code>x + (x<<4)</code></pre> is invertible, because it is equivalent to <pre><code>x * 17</code></pre>.\nDue to the fact that the composition of affine transformation is also affine, you can save time by just multiplying through all such operations and then inverting it in a single step. \nBitwise ands and ors always lose information except in the trivial case, so they won't be invertible. But usually they are used to select part of the information for combination in a lossless manner, so the overall expression is still invertible. For example <pre><code>x ^ ((x & 555) * 4)</code></pre> is invertible even though two of the individual components of the expression are noninvertible operations.\nA couple other things you might see. Operations in GF(2^32) are basically the same as regular addition and multiplication except there's no carry. This is typically used in CRCs. Addition (which is just xor) and multiplication by any nonzero number are invertible, using the same technique as before.\nSubstitution boxes (or sboxes) - these are designed to be invertible, but normally don't have any particular structure. Typically these are expressed as a table lookup, with a precomputed table for the inverse as well. If not, you can always make your own inverse table, assuming the inputs aren't too big.\n",
            "votes": "8",
            "user": "Antimony",
            "time": "Jan 4, 2014 at 2:13",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Till",
                    "text": "<span class=\"comment-copy\">I like this answer - if only you had left out that last comment ;)</span>",
                    "time": null
                },
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">@Till Sorry, I'll remove it.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "I try to give a very superficial answer for your question because I am quite sure that there are other treatments for this problem.\nMathematically, the function <pre><code>f(y) = y^(y >> 11)</code></pre> is invertible in the sense that the left-inversion, namely a function <pre><code>g</code></pre> so that <pre><code>y = g(f(y))</code></pre> exists, because <pre><code>f</code></pre> is an injective function. However that does not mean we can easily find the inversion function because it may be uncomputable, namely in this case we cannot give an algorithm calculating <pre><code>g</code></pre>. Practically, there may exist some computable methods to \"approximate\" it (maybe abstract interpretation ?).\nIn a more strict case (but maybe more practical), if the value of <pre><code>y</code></pre> is stored in 4 bytes and the value of <pre><code>f(y)</code></pre> is stored in less than 4 bytes then the function is trivally not invertible because of the pigeon-hole principle. Moreover, the computation of an arbitrary sequence of instructions is not invertible in general because of the information-lost along the execution, to see that we can consider an example (in pseudo-assembly code)\n<pre><code>f(y) = \n mov eax, y\n xor eax, eax\n return eax\n</code></pre>\nthen <pre><code>f(y)</code></pre> is not invertible because the output is always <pre><code>0</code></pre> regardless of the input. However if we can store some \"state values\" (i.e. not only the output and the instruction sequence) along the execution of instructions then the inversion is possible, this idea has been proposed everywhere, e.g. in GDB Reverse Debugging or in this paper.\nEdit: I got a mistake here because I thought ^ is an exponentation (so I doubt that the inversion is uncomputable in the general case) but in fact it is bitwise exclusive.\n",
            "votes": "5",
            "user": "Community",
            "time": "May 23, 2017 at 12:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Antimony",
                    "text": "<span class=\"comment-copy\">-1. The inverse is easily computed.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">You are absolutely right, the answer of @perror shows that clearly. In fact, when giving a response for the answer above, I thought that the operator ^ is exponentiation (so I doubt that it is uncomputable in general) but in fact it is bitwise exclusive.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "this python functions works for any value:\n<pre><code>def f_inv(x):\n    mask= (1<<11) - 1\n    a= []\n    while x>0:\n        a.append(x&mask)\n        x >>= 11\n    if not a:\n       return 0\n    z= a.pop()\n    while a:\n        z= (z<<11) | ((z&mask)^a.pop())\n\n    return z\n</code></pre>\nthe trick is to split the number in 11 bit chunks, then starting with the highest keep xorring with the previous (higher) chunk. and or everything together.\n",
            "votes": "2",
            "user": "Willem Hengeveld",
            "time": "Jul 5, 2014 at 10:00",
            "is_accepted": false,
            "comments": []
        }
    ]
}