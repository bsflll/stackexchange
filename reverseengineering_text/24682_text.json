{
    "title": "Get string from function and pass it to another program",
    "link": "https://reverseengineering.stackexchange.com/questions/24682/get-string-from-function-and-pass-it-to-another-program",
    "content": "I want to make a small tool that analyzes text from console in online game and I'm stuck at reading a string from a function and sending it to another program. I managed to find function that takes string as argument and calls function responsible for showing it in game and it looks something like this:\n<pre><code>void Game::processTextMessage(Otc::MessageMode mode, const std::string& text)\n{\n    g_lua.callGlobalField(\"g_game\", \"onTextMessage\", mode, text);\n}\n</code></pre>\nAlso, using Cheat Engine and x96dgb i found address of this function:\n\nString I need to capture is \"Czerw pozostawia po sobie: 3 robaki\". \nI tried .dll injection but I don't know how to hook to that function.\nAlso I found something similar to what I want to do: https://github.com/ur0/DotATranslator/blob/master/Injectee/dllmain.cpp\nbut I don't know what to change to make it work. What steps should I take?\n",
    "votes": "0",
    "answers": 1,
    "views": "120",
    "tags": [
        "strings",
        "dll-injection",
        "game-hacking"
    ],
    "user": "Dasmitian",
    "time": "Apr 11, 2020 at 0:55",
    "comments": [],
    "answers_data": [
        {
            "content": "Assuming you're trying to intercept function calls and manipulate / get the input to that function, you are going to need to hook it first.\nI'd recommend reading about function hooking (there's a plenty of information out there regarding this subject).\nIts basic idea is rather simple, given the start address of function to be hooked <pre><code>func01</code></pre> you override the first five bytes (of course you have to save them) with a <pre><code>JMP</code></pre> instruction that will lead to your own fake <pre><code>func01</code></pre> function that in it you'd do as you pleased with the argument, and when you're done, you call to the the original function (and here's the catch, you want to call a stub that will execute the first five bytes you were overriding and then jumps back to the original function's address plus five <pre><code><func01_addr + 5></code></pre>\nIf that's allowed (sorry if its not), there's a nice and easy-to-use hooking library called Mhook (but I'd first suggest getting some sense about the idea).\ngood luck\n",
            "votes": "1",
            "user": "stylo",
            "time": "Apr 11, 2020 at 6:51",
            "is_accepted": false,
            "comments": []
        }
    ]
}