{
    "title": "Reverse-engineering a weird 32-bit possibly not CRC checksum",
    "link": "https://reverseengineering.stackexchange.com/questions/30133/reverse-engineering-a-weird-32-bit-possibly-not-crc-checksum",
    "content": "I am trying to decode Arad/Master Meter utility water meter RF transmission.\nSo far, I had success with reading the meter serial number and counter reading.\nThe transmission looks like that:\n\n<pre><code>000000003e690aec7ac84bfa1c907300a80600000506cd192cc8f8\n</code></pre>\n\nwhere:\n00000000 is preamble.\n3e690aec7ac84b is fixed in time and the same for other meters in the neighborhood. Probably gearing ratio.\nfa1c9073 is Meter serial number. <pre><code>fa1c90 = 9444602</code></pre>, little endian <pre><code>73= 'S'</code></pre>\n00 no idea.\na80600 is the counter reading little endian = <pre><code>1704</code></pre>\n000 no idea.\n5 is fixed in time and the same for other meters in the neighborhood.\n06cd192cc probably some kind of CRC or checksum  - here is where I need help.\n8 is getting either 8 or 0 same for other meters in the neighborhood.\nf8 is fixed in time and the same for other meters in the neighborhood.\nRunning:\n<pre><code>reveng -w 32 -s 3E690AEC7AC84BDAB18C7300390E000005BFF1DB9F\n3E690AEC7AC84B13FE8B7300100500000507CBFECD\n3E690AEC7AC84BDAB18C73003B0E0000055C91EB1C\n3E690AEC7AC84B3EC68C7300720E000005C6E1CCD5\n</code></pre>\nI get immediately :\n\nno models found\n\nSo if I am not doing anything wrong, Reveng doesn't seem to find anything with brute force.\nAny other idea?\nHere is a list of different transmissions I collected:\n\n<pre><code>000000003e690aec7ac84bfa1c907300a206000005483eab4f28f8\n000000003e690aec7ac84bfa1c907300a306000005298634f988f8\n000000003e690aec7ac84bfa1c907300a4060000056d9fbad9f8f8\n000000003e690aec7ac84bfa1c907300a5060000050c27256f58f8\n000000003e690aec7ac84bfa1c907300a6060000058eff8a5ae0f8\n000000003e690aec7ac84bfa1c907300a706000005ef4715ec40f8\n000000003e690aec7ac84bfa1c907300a80600000506cd192cc8f8\n000000003e690aec7ac84b13fe8b73000f050000059576b83160f8\n000000003e690aec7ac84b13fe8b7300100500000507cbfecdb8f8\n000000003e690aec7ac84b3ec68c7300720e000005c6e1ccd5e8f8\n000000003e690aec7ac84b3ec68c7300730e000005a759536348f8\n000000003e690aec7ac84b3ec68c7300750e00000582f842f598f8\n000000003e690aec7ac84b3ec68c7300760e0000050020edc020f8\n000000003e690aec7ac84b3ec68c7300770e0000056198727680f8\n000000003e690aec7ac84b3ec68c7300780e00000588127eb608f8\n000000003e690aec7ac84bdab18c7300350e000005d4a3786a70f8\n000000003e690aec7ac84bdab18c7300360e000005567bd75fc8f8\n000000003e690aec7ac84bdab18c7300380e000005de494429e0f8\n000000003e690aec7ac84bdab18c7300390e000005bff1db9f40f8\n000000003e690aec7ac84bdab18c73003a0e0000053d2974aaf8f8\n000000003e690aec7ac84bdab18c73003b0e0000055c91eb1c58f8\n000000003e690aec7ac84bdab18c73003c0e0000051888653c28f8\n000000003e690aec7ac84bfa1c907300500600000533712209f0f8\n000000003e690aec7ac84bfa1c907300510600000552c9bdbf50f8\n000000003e690aec7ac84bfa1c9073005206000005d011128ae8f8\n000000003e690aec7ac84bfa1c9073005306000005b1a98d3c48f8\n</code></pre>\n",
    "votes": "2",
    "answers": 1,
    "views": "360",
    "tags": [
        "crc",
        "checksum",
        "rf"
    ],
    "user": "Avi",
    "time": "Mar 15, 2022 at 6:25",
    "comments": [],
    "answers_data": [
        {
            "content": "I still cannot directly comment and this is my only option to respond:\nhere is description of other parameters from same supplier, maybe same model. Some might be transmitted via RF such as battery status. Meter with 9 digits will consume some of the \"0\"s. Gives opportunity to improve your protocol description.\n\n06cd192cc probably some kind of CRC or checksum - here is where I need help.\n\nYou highlighted 9 nibbles. Very unlikely for CRC, for CRC-32 result is 8 nibbles.\n\n8 is getting either 8 or 0 same for other meters in the neighborhood\n\nMeans that it is unknown at the moment but changes and it is probably in use and included in Checksum. And the same maybe for final \"F8\".\nFor your data it is true that\n<pre><code>0x3e690aec7ac84bfa1c9073005**0**0600000533712209f0f8 ^ 0x3e690aec7ac84bfa1c9073005**1**0600000552c9bdbf50f8 == 0x3e690aec7ac84bfa1c9073005**2**06000005d011128ae8f8 ^ 0x3e690aec7ac84bfa1c9073005**3**06000005b1a98d3c48f8\n</code></pre>\nwhich is true for CRC. So it is not excluding CRC method.\nSo some options to play with, find right position and length and get a lucky punch with Reveng.\n",
            "votes": "1",
            "user": "dieter reichl",
            "time": "Mar 15, 2022 at 8:35",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Avi",
                    "text": "<span class=\"comment-copy\">Could you explain some more as I am new to CRC? Does * in your code line mean wildcard. Does ^ mean power?</span>",
                    "time": null
                },
                {
                    "user": "dieter reichl",
                    "text": "<span class=\"comment-copy\">the \"wildcards\" came from highlighting \"0\", \"1\" etc with bold, which looks a bit weird in code. Just to present difference better. \"^\" is function (at least in Python) for Xor.</span>",
                    "time": null
                },
                {
                    "user": "Avi",
                    "text": "<span class=\"comment-copy\">You are correct. My mistake. The counter should be shifted one nibble left. I have corrected that in my original post. Thank you.</span>",
                    "time": null
                }
            ]
        }
    ]
}