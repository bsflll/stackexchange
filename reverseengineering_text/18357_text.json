{
    "title": "Position-independent code dectection",
    "link": "https://reverseengineering.stackexchange.com/questions/18357/position-independent-code-dectection",
    "content": "Is it possible to detect whether a given executable is a PIC by looking at the disassembler's output? If not, what are other valid ways to go about this?\n",
    "votes": "2",
    "answers": 1,
    "views": "564",
    "tags": [
        "elf",
        "pie"
    ],
    "user": "Trey",
    "time": "May 25, 2018 at 6:11",
    "comments": [
        {
            "user": "Johann Aydinbas",
            "text": "What's the basis for the question? As is, it is a bit odd, so maybe if you explain your motivation it's possible to give a more helpful answer. If code is PIC, you usually see some typical patterns like <pre><code>call $+, pop</code></pre> to get the current address, or <pre><code>call xxx, pop</code></pre> to push some address on the stack.\n",
            "time": null
        },
        {
            "user": "Trey",
            "text": "@JohannAydinbas I don't really have a reason... I was just trying to understand the differences between ET_DYN and ET_EXEC(compiled with -fPIC) and that made me wonder whether I could detect this kind of thing\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Detection by analysing assembly\nIt will highly depend on the compiler used, but here are some constructions that will differ between position independent and position dependent code:\n\nif you spot a <pre><code>jmp</code></pre> to an absolute address, that will mean that it is PDC (only jumps relative to <pre><code>RIP</code></pre> will be used in PIC)\nwhen some data is referenced by absolute address, it is PDC\nas @Johann Aydinbas noticed, when you see patterns like <pre><code>cal $+, pop</code></pre> or <pre><code>call xxx, pop</code></pre> to push some absolute address onto the stack, it will likely be PIC\n\nDetection by opening with debugger\nYou may also take advantage of the fact, that when you load position independent program and check address of some function, <pre><code>main</code></pre> for example, it will change each time you load it (because of ASLR). The same won't be true for PDC - all addresses will remain the same.\nDetection by reading the ELF header\nWhy making your job hard analysing the executable, while it provides explicitly the information you need. As you noted in the comment, <pre><code>ET_EXEC</code></pre> value of <pre><code>e_type</code></pre> will be present in PDC, while <pre><code>ET_DYN</code></pre> will appear in PIC. And, according to the second answer to this question, this is the information used to determine whether <pre><code>ASLR</code></pre> may be used, in <pre><code>Linux</code></pre>.\nOther methods\nYou may of course use other tools for this purpose, like <pre><code>file</code></pre> or <pre><code>readelf</code></pre> for instance.\n",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        }
    ]
}