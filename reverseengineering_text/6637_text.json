{
    "title": "windbg: How to determine the opcode for an assembly language instruction or set of instructions",
    "link": "https://reverseengineering.stackexchange.com/questions/6637/windbg-how-to-determine-the-opcode-for-an-assembly-language-instruction-or-set",
    "content": "I am working on an assignment to perform an exploit using a rop chain.\nWhile I understand the basics behind rop, I don't know how to convert instructions like\n<pre><code>xchg eax, esp; retn;\n</code></pre>\nto their opcodes.\nI tried using:\n<pre><code>0:005> a\ninput> xchg eax,esp\n</code></pre>\nbut the address given just points to a totally different kind of instruction in my program.\nI believe it was an add command.\n",
    "votes": "5",
    "answers": 2,
    "views": "6k",
    "tags": [
        "windbg"
    ],
    "user": "dnraikes",
    "time": "Feb 4, 2015 at 6:16",
    "comments": [
        {
            "user": "dnraikes",
            "text": "@yyVob, thanks this really helped clear up the use of windbg to find the opcodes I need.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "RTA is an easy to use tool that allows you to enter either opcodes or mnemonics and will convert them from one to the other.\nIn the example below, I entered <pre><code>XCHG EAX,ESP</code></pre> and <pre><code>RETN</code></pre> on the right, and RTA produced <pre><code>94</code></pre> and <pre><code>C3</code></pre> on the left:\n\nIf, on the other hand, you really want to use WinDbg, then you need to do the following:\n\nLoad a target into WinDbg\nType a, Enter to enter Input mode\nType your mnemonics (for example, <pre><code>xchg eax,esp</code></pre>), Enter\nPress Enter again to escape Input mode\nType u, Enter to show the disassembly of what you just assembled\n\nâ€‹See below for an example:\n<pre><code>0:000> a\n778e05a6 xchg eax,esp\nxchg eax,esp\n778e05a7 \n\n0:000> u\nntdll!LdrVerifyImageMatchesChecksum+0x633:\n778e05a6 94              xchg    eax,esp\n</code></pre>\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Nov 15, 2014 at 16:24",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user1354557",
                    "text": "<span class=\"comment-copy\">Please note that using the <code>a</code> command with no parameters will start overwriting bytes at the instruction pointer. To create scratch space specifically for assembling instructions, use <code>.dvalloc</code>, then call <code>a</code> with the address of the allocated memory.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can use assembler. \nOr online assembler such as this\nOr you can use Ida's Edit-->Patch program-->Assemble submenu if you use Ida.\n",
            "votes": "0",
            "user": "w s",
            "time": "Nov 15, 2014 at 9:03",
            "is_accepted": false,
            "comments": []
        }
    ]
}