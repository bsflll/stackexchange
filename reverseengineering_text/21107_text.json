{
    "title": "Decode C# binary serialization data",
    "link": "https://reverseengineering.stackexchange.com/questions/21107/decode-c-binary-serialization-data",
    "content": "I am trying to decode what seems to be simple C# binary serialization to disk:\n\nhttps://github.com/malaterre/MMCPrivate/raw/master/sample1.raw\nhttps://github.com/malaterre/MMCPrivate/raw/master/sample2.raw\n\nI do not have access to the original DLL that generates this binary blob so I fail to understand how to process this file unless I have a full definition of all C# structures. If I had access to the original DLL I could reverse engineer the C# binary to find the structures, so how should I do in this case ?\nCode:\n<pre><code>using System;\nusing System.IO;\nusing System.Collections;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Runtime.Serialization;\n\npublic class Dump\n{\n    [STAThread]\n    static void Main() \n    {\n        Deserialize();\n    }\n\nstatic void Deserialize() \n{\n    // Declare the hashtable reference.\n    Hashtable addresses  = null;\n\n    // Open the file containing the data that you want to deserialize.\n    FileStream fs = new FileStream(\"input.dat\", FileMode.Open);\n    try \n    {\n        BinaryFormatter formatter = new BinaryFormatter();\n\n        // Deserialize the hashtable from the file and \n        // assign the reference to the local variable.\n        addresses = (Hashtable) formatter.Deserialize(fs);\n    }\n    catch (SerializationException e) \n    {\n        Console.WriteLine(\"Failed to deserialize. Reason: \" + e.Message);\n        throw;\n    }\n    finally \n    {\n        fs.Close();\n    }\n\n    // To prove that the table deserialized correctly, \n    // display the key/value pairs.\n    foreach (DictionaryEntry de in addresses) \n    {\n        Console.WriteLine(\"{0} lives at {1}.\", de.Key, de.Value);\n    }\n}\n}\n</code></pre>\nLeads to:\n<pre><code>$ mono ./Dump.exe\nFailed to deserialize. Reason: Unable to find assembly 'ApplicationObjects, Version=1.0.4073.26998, Culture=neutral, PublicKeyToken=null'.\n\nUnhandled Exception:\nSystem.Runtime.Serialization.SerializationException: Unable to find assembly 'ApplicationObjects, Version=1.0.4073.26998, Culture=neutral, PublicKeyToken=null'.\n</code></pre>\nReference:\n\nBinaryFormatter.Deserialize Method\n[MS-NRBF]: .NET Remoting: Binary Format Data Structure\n",
    "votes": "3",
    "answers": 1,
    "views": "5k",
    "tags": [
        "binary",
        "binary-format"
    ],
    "user": "tibar",
    "time": "Apr 16, 2019 at 6:46",
    "comments": [],
    "answers_data": [
        {
            "content": "Turns out this was barely a reverse engineer task since everything is already available on internet. Mainly this post is a great read:\n\nHow to analyse contents of binary serialization stream?\n\nAnd then you can even play with a python implementation:\n\nnrbf.py - .NET Remoting Binary Format reading library for Python 3.6\n",
            "votes": "4",
            "user": "tibar",
            "time": "Apr 16, 2019 at 6:44",
            "is_accepted": true,
            "comments": []
        }
    ]
}