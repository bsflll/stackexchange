{
    "title": "Can we hook the Nt or Zw functions using IAT hooking, or just inline hooking?",
    "link": "https://reverseengineering.stackexchange.com/questions/22066/can-we-hook-the-nt-or-zw-functions-using-iat-hooking-or-just-inline-hooking",
    "content": "So i was trying to hook the ZwQuerySystemInformation or NtZwQuerySystemInformation using IAT, but i found out that these are not inside the IAT inside the memory nor in the PE file\nbut maybe i am not importing them properly in my code? because in my sample code which I'm trying to hook I'm basically doing this to get its address : \n<pre><code>ZwQuerySystemInformation = (NTSTATUS(__stdcall*)(int, PVOID, ULONG_PTR, PULONG_PTR))GetProcAddress(GetModuleHandle(L\"ntdll.dll\"), \"NtQuerySystemInformation\");\n\nZwQuerySystemInformation(SystemProcessInformation, NULL, NULL, &size);\n</code></pre>\nSo my question : \n\nam i using the function wrong in my code and thats why its not IAT? do programs like task manager find the address of it and use it different?  \nis it possible to do IAT hooking with Nt and Zw functions? if not, why? I mean why its not getting included in IAT? doesn't the loader need to fix the addresses of functions just like any other library that we use?\nWhy can we use functions like Sleep() without doing stuff like above code and don't need to find its address, but when i try to use ZwQuerySystemInformation or the Nt one, i basically get a segment fault because it tries to access it from address 0 but compiler still recognizes it? if ntdll gets imported into all processes then why can't we get its address automatically?\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "windows",
        "assembly",
        "x86",
        "c"
    ],
    "user": "OneAndOnly",
    "time": "Sep 6, 2019 at 19:11",
    "comments": [
        {
            "user": "peter ferrie",
            "text": "They're usually not called directly, but instead via a Wrapper such as CreateSnapshot().  In that case, your only option is to use inline hooking of the exported address.\n",
            "time": null
        },
        {
            "user": "OneAndOnly",
            "text": "@peterferrie why are they wrapped around that API and where can i read more about it? also then how does this API get the address of Zw/Nt function?\n",
            "time": null
        },
        {
            "user": "dsasmblr",
            "text": "Consider this article: web.archive.org/web/20170722183726/https://www.osronline.com/…\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "Maybe you could also include information like what OS version, whether you are trying from 32-bit or 64-bit and so on ... besides, you clearly attempt to dynamically retrieve the function pointer, what has that got to do with the IAT hooking? I must be missing something obvious here. Last but not least ntdll.dll is a special beast indeed, much like kernel32.dll/kernelbase.dll (its Win32 subsystem counterpart, in a sense).\n",
            "time": null
        },
        {
            "user": "dsasmblr",
            "text": "Consider this article -- specifically, the first paragraph, which should clue you in on what to Google for next (but do read the whole short article, which explains what you're running into and why): docs.microsoft.com/en-us/windows-hardware/drivers/kernel/…\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "\"am i using the function wrong in my code and thats why its not IAT? do programs like task manager find the address of it and use it different?\"\nIt is in IAT, but in normal cases executables will never directly import anything from ntdll. Rather all the imports will be from higher level WinAPI modules such as kernel32 (i.e kernel32.VirtualQuery calls ntdll.NtQueryVirtualMemory).\n\"is it possible to do IAT hooking with Nt and Zw functions? if not, why? I mean why its not getting included in IAT? doesn't the loader need to fix the addresses of functions just like any other library that we use?\"\nYes, it's possible, but IAT hooking by its very nature will only redirect execution from the specific module you modify. You can do it through kernel32/kernelbase but it still won't catch anything outside of that.\n\"Why can we use functions like Sleep() without doing stuff like above code and don't need to find its address, but when i try to use ZwQuerySystemInformation or the Nt one, i basically get a segment fault because it tries to access it from address 0 but compiler still recognizes it? if ntdll gets imported into all processes then why can't we get its address automatically?\"\nYou can import from ntdll manually, you probably did it incorrectly if it resolved to nullptr.\n",
            "votes": "0",
            "user": "Pickle Rick",
            "time": "Sep 26, 2019 at 9:21",
            "is_accepted": true,
            "comments": []
        }
    ]
}