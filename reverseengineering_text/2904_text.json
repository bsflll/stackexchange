{
    "title": "Are those code snippets and file paths in a C++ binary some sort of standard debug information?",
    "link": "https://reverseengineering.stackexchange.com/questions/2904/are-those-code-snippets-and-file-paths-in-a-c-binary-some-sort-of-standard-deb",
    "content": "This C++ binary has code snippets and paths to sourcecode files everywhere, which is probably some sort of debug info. \n\nIs this something standard? (Is this RTTI)\nIf so, how is this called?\nAre there plugins/tools to help with this?\n",
    "votes": "12",
    "answers": 1,
    "views": "656",
    "tags": [
        "ida",
        "c++",
        "debugging-symbols"
    ],
    "user": "samuirai",
    "time": "Oct 9, 2013 at 19:39",
    "comments": [],
    "answers_data": [
        {
            "content": "It has the fingerprint of an <pre><code>assert</code></pre>:\n\nit's called directly after a test;\nit uses a number -- probably a source line number --, a string which points to a file name -- the source file -- and a string that describes an error condition;\nit does not return. (Can be inferred because the inspected value would lead to an erronous situation if the called function returned.)\n\n<pre><code>assert</code></pre> is a standard function in most (if not outright all!) standard libraries, and so if your decompiler could recognize which compiler was used, it would have assigned a standard label to <pre><code>sub_6E0D40</code></pre>. Since it didn't, you could trace that address and see if (a) it jumps immediately to an external routine such as Windows' native <pre><code>Assert</code></pre>, or (b) does what an assert does: outputting the error and immediately exiting.\n\nAddition: using the stack plus registers ecx and edx seem to indicate this sub is declared \"Microsoft <pre><code>__fastcall</code></pre>\" (wikipedia).\n",
            "votes": "15",
            "user": "Jongware",
            "time": "Oct 9, 2013 at 23:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">sub_6E0D40 is __fastcall, not __stdcall. See <a href=\"http://en.wikipedia.org/wiki/X86_calling_conventions#Microsoft_fastcall\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">@JasonGeffner: you're right, my (wrong) ref said ecx and edx are \"designated for use within the function\", which is quite the opposite. Edited.</span>",
                    "time": null
                }
            ]
        }
    ]
}