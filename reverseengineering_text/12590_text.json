{
    "title": "Multiple vendors Misfortune Cookie Router Authentication Bypass Exploit",
    "link": "https://reverseengineering.stackexchange.com/questions/12590/multiple-vendors-misfortune-cookie-router-authentication-bypass-exploit",
    "content": "I am working on an exploit over a month now I have a problem and cannot go further.\nhere is the link of the exploit:\nhttps://gist.github.com/doorbash/f454c698f192a0e5d1bf4da9c6869b67\nhttps://www.exploit-db.com/exploits/39739\nDescription:\nMisfortune Cookie is a critical vulnerability that allows an intruder to remotely take over an Internet router and use it to attack home and business networks.With a few magic cookies added to your request you bypass any authentication and browse the configuration interface as admin, from any open port.\n‌By sending <pre><code>Cxxx=yyy</code></pre> cookie to the router web interface <pre><code>yyy</code></pre> will be saved at memory address <pre><code>xxx * 0x28 + Offset</code></pre>.If we find <pre><code>Authentication Enable/Disable boolean address</code></pre> and <pre><code>offset</code></pre> we can add data for this firmware to the exploit's target list and bypass the authentication by sending the right cookie.\nHow I analyzed the firmwares:\nThe firmware I analyzed at first is TP-Link 8901G V3 3.0.1 Build 100901 Rel.23594. download it here and run <pre><code>binwalk -e V3 3.0.1 Build 100901 Rel.23594</code></pre> then open the largest file in extracted directory using IDA by selecting <pre><code>mipsb</code></pre> as the cpu architecture and <pre><code>0x80020000</code></pre> for base address.\nIf you search for Do not need string using Alt+T keys you will find a sb XXXX($gp)\nat the very first lines of the code you realize the li $gp,YYYYY instruction. the authentication address will be located by adding XXXX and YYYYY which in this case will be 0x803E1829\nNow we must discover how <pre><code>Cookie: CNNNN=MMM;</code></pre> alter memory contents:\nif you search for \"soapaction\" using Alt+T you will find this:\n\nGo to the sub process highlighted by red color.\n\nNow consider the number 0x6b28 as <pre><code>A = 0x6B28</code></pre>\nNow back and toward up:\n\nNow go to the top sub process:\n\nyou will find this:\n\nnow <pre><code>B = 0xA44</code></pre>, <pre><code>C = 0x1887C</code></pre> and <pre><code>D = 0x8041877C</code></pre>.\nand <pre><code>MAGIC_NUMBER = 0x16B88</code></pre> (I don't have any idea why but it works)\nNow <pre><code>OFFSET = A - B + C + D - MAGIC_NUMBER = 0x80420554</code></pre>\nnow call <pre><code>info(calc(0x8041877C,0x1887c,0xa44,0x6B28,0x16b88),0x803E1829)</code></pre> or <pre><code>info(0x80420554,0x803E1829)</code></pre> in util.py I attached the output is <pre><code>,107367749,13</code></pre> which is the data we need for this firmware in the exploit.\nthe process is very similar (and different and also easier in the TP-Link W8961ND V3 120830 download it here\n\n<pre><code>AuthenticationAddress = 0x803605B4\nA = 0x6B28\nB = 0x0 (move    $a0, $s1)\nC = 0x17E38\nD = 0x804234C8\nMAGIC_NUMBER = 0x16B88\nOFFSET = A-B+C+D-MAGIC_NUMBER = 0x8042B2A0\n</code></pre>\nWe call <pre><code>info(0x8042B2A0,0x803605B4)</code></pre> in util.py and output is <pre><code>,107353414,36</code></pre> which is tested on real device and works.\nTHE PROBLEM IS:\nfor TD_W961ND_V3_140305 download it here the firmware has \"Do not need\" and \"soapacation\" texts but IDA cannot find the pointing addresses to these strings.I could not find out why.\nThe modifications and bug fixes for this according to here is :\n\nAdd the security mechanism.\nFixed the problem router's time can't synchronize from PC successfully.\nBanned accessing the firmware upgrading page from WAN.\nFixed the problem that router failed to upload rom-0(Backup configuration).\nSolved the problem that the login interface can't save the password correctly in Chrome and Firefox.\nSolved the problem that we can’t visit CPE using “IP:Port” after we set up Virtual Server.\nForbidden access to the device through http://wan/lan ip/ or http://wan/lan ip/xxx.htm.\nFixed other bugs and problems.\n\nI am not sure if the security mechanism (#1) is what is making this issue or not.\nI also tried to compare 100901, 120830 and 140305 using binwalk entropy:\nbinwalk -E -J 120830 140305 100901\n100901:\n\n120830:\n\n140305:\n\nI know somethings wrong with 140305 (unusual wave forms at left) but could not come across any findings.\nUpdate 1:\nHere is how memory address <pre><code>0x800D53BC</code></pre> looks like in my IDA:\n\nAny idea or tip about how to fix this mess?\n",
    "votes": "4",
    "answers": 1,
    "views": "737",
    "tags": [
        "ida",
        "disassembly",
        "firmware"
    ],
    "user": "doorbash",
    "time": "Feb 25, 2018 at 9:34",
    "comments": [],
    "answers_data": [
        {
            "content": "According to TP-LINK the misfortune cookie was fixed only in firmware version TD-W8961ND_V3_150707. So, the TD_W961ND_V3_140305 is also vulnerable.\nSince it is a binary file you may not analyse the code part dealing with the <pre><code>soapaction</code></pre> string, but here is what I found for firmware 140305:\n\nUPDATE!\nYou can find the \"Do not need\" string at <pre><code>0x801a015a</code></pre>. For some reasons it is mips16 code and was referenced only from the command table as the <pre><code>pswauthen</code></pre> command handler. So, you have to change the code representation to mips16 with <pre><code>alt+g</code></pre> at the start of the handler and then press <pre><code>c</code></pre>.\n",
            "votes": "2",
            "user": "ebux",
            "time": "May 5, 2016 at 8:37",
            "is_accepted": true,
            "comments": [
                {
                    "user": "doorbash",
                    "text": "<span class=\"comment-copy\">Please see Update 1 in the question. thanks.</span>",
                    "time": null
                },
                {
                    "user": "ebux",
                    "text": "<span class=\"comment-copy\">I don't know why IDA could not found ASCII in your case, but you can use 'a' (create ASCII) to create strings or you may create a simple script, which does this job.</span>",
                    "time": null
                },
                {
                    "user": "doorbash",
                    "text": "<span class=\"comment-copy\">Thanks, what about \"Do not need\" string? any idea why there is no pointing address to it?</span>",
                    "time": null
                },
                {
                    "user": "ebux",
                    "text": "<span class=\"comment-copy\">See the update in my answer.</span>",
                    "time": null
                },
                {
                    "user": "doorbash",
                    "text": "<span class=\"comment-copy\">I saw it unfortunately I could not do what you did in update. IDA 6.8 still shows garbage, but well done I will set it as best answer when I worked on it again and managed to do it, thanks for your time. What version of IDA you got?</span>",
                    "time": null
                }
            ]
        }
    ]
}