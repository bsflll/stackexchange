{
    "title": "Tracing all functions in executable conditionally, to find function of interest",
    "link": "https://reverseengineering.stackexchange.com/questions/32853/tracing-all-functions-in-executable-conditionally-to-find-function-of-interest",
    "content": "I would like to alter the behavior of some executable (in my case, a videogame). One way of doing this is to hook function calls (e.g., a function like <pre><code>Player::ReceiveDamage</code></pre>) and adjust parameters/return values.\nI know how to inject code and how to hook functions. The challenge currently is to find the address of the function of interest. The source code of the target is not available, neither are debug symbols.\nAn approach I successfully used before is the following:\n\nFind all function addresses in the target executable (e.g., with IDA, radare2, Pyew, ...)\nWith the executable running, hook all functions\nBlack-list (and un-hook) functions that are called during moments that are not of interest\nWhite-list functions that are called during moments of interest\nRepeat steps (4,5) until function list is narrowed down sufficiently\n\nUnfortunately, I have misplaced the code I was using for this process. I can re-write it, but I noticed that there is already an enormous offering of tools and libraries that may do exactly what I need.\nPerformance is a challenge: logging all function calls in a videogame introduces significant overhead. I noticed previously that it would take some time for my old tool to black-list enough irrelevant functions for the target to become responsive. This likely makes Frida not a good choice, as it injects javascript.\nDoes anyone know of a performant tool/library, supporting Windows and x64, that I can use to find functions of interest in a target executable?\n",
    "votes": "2",
    "answers": 2,
    "views": "111",
    "tags": [
        "pe",
        "tools",
        "dynamic-analysis",
        "functions",
        "tracing"
    ],
    "user": "tcpie",
    "time": "Mar 30, 2024 at 19:54",
    "comments": [],
    "answers_data": [
        {
            "content": "You can use a binary dynamic instrumentation framework, such as:\n\nIntel Pin (and specifically the TracerPIN tool)\nFrida\nDynamoRIO\nDyninst\nValgrind\n",
            "votes": "1",
            "user": "tcpie",
            "time": "May 6, 2024 at 4:59",
            "is_accepted": true,
            "comments": [
                {
                    "user": "tcpie",
                    "text": "<span class=\"comment-copy\">Aha, the term I was looking for is \"dynamic binary instrumentation\"! Thank you very much. I've googled around a bit and indeed there appear to be some useful frameworks out there. I will update your answer to list a few of these.  For my use case probably these frameworks are overkill. I'll probably be quicker whipping up something myself compared to writing a plugin for one of those tools...</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "What I would do is the following steps:\n\nuse IDA Pro to get all functions names and addresses (hopefully names if you renamed any of them) in the binary and export it as a python dictionary. examples can be found here.\nInstall PyKd as described here and here.\nCreate a PyKd script to set conditional breakpoints to print something everytime they are hit and then continue execution, like:\n\n<pre><code>import pykd\nfuncList = { 'funcA': 0xAAAAAAAA,\n             'funcB': 0xBBBBBBBB, \n               ...\n           }\n\nfor funcName, funcAddr in funcList.items():\n   pykd.DbgCommand('bp ' + funcAddr + ' \".echo ' + funcName + ' executed; gc\"')\n</code></pre>\n\nExecute in WinDbg:\n\n<pre><code>.load pykd\n!py <path to script>\ng\n</code></pre>\nthis will trace each function during the execution with the function names from your IDA Pro database.\n",
            "votes": "0",
            "user": "rotem.salinas",
            "time": "May 6, 2024 at 20:58",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">With this method, for a large number of functions.. you may encounter a limit on the number of conditional breakpoints you're allowed to use. You can actually bypass this by patching both the <code>dbgeng.dll!AddBreakpoint</code> and <code>dbgeng.dll!InsertBreakpoints</code> functions. For v10.0.14321.1024, I've ended up using: <code>eb dbgeng+0005c055 ff; eb dbgeng+0005c7da ff</code></span>",
                    "time": null
                },
                {
                    "user": "Ali Rizvi-Santiago",
                    "text": "<span class=\"comment-copy\">However, for large numbers of breakpoints you'll encounter performance issues...where it actually feels worse than logarithmic time (unsure if this is still a thing in WinDbg preview). If you're using PyKd, you can trap on the STATUS_BREAKPOINT event and look up the address of the condition you want to execute with something better algorithmically.</span>",
                    "time": null
                }
            ]
        }
    ]
}