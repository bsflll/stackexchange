{
    "title": "While loop function disassembly x86",
    "link": "https://reverseengineering.stackexchange.com/questions/19978/while-loop-function-disassembly-x86",
    "content": "I am trying to convert this binary to C but I am having trouble with the while loop. What does\n<pre><code>sub esp, 8</code></pre> mean? as well as <pre><code>push [ebp+_a]</code></pre> ? I am able to get the esp 8 sometimes while changing the print statement. Why is this the case?\n\nWhat I have so far.\n<pre><code>    #include <stdio.h>\n\n    int main(int argc, char *argv[])\n\n{\n    int a = 9;\n\n    while (a) {\n\n        printf(\"%d, \");\n        --a;\n    }\n        puts(\"FIRE!\");\n\n    return 0;\n}\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "432",
    "tags": [
        "ida",
        "x86"
    ],
    "user": "Luke Snyder",
    "time": "Nov 27, 2018 at 4:23",
    "comments": [
        {
            "user": "user202729",
            "text": "You don't need to have the exact same assembly, just have the logic right. Correct?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When the printf function is called (or any other function), it takes all its arguments from the stack. In x86, According to cdecl arguments are pushed in reverse order. So, first the integer value a is pushed on to the top of the stack (<pre><code>push [ebp+_a]</code></pre>) and then the string <pre><code>\"%d ,\"</code></pre> is pushed on to the stack (<pre><code>push offset aD</code></pre>). While printf pops the arguments out, first it takes out the \"%d, \" and then it gets the value of a i.e., <pre><code>[ebp+_a]</code></pre>. The stack pointer should also be changed accordingly so that the printf function will get the right arguments. Hence the instruction <pre><code>sub esp, 8</code></pre> which changes the stack pointer(esp).\n",
            "votes": "1",
            "user": "0xVikas",
            "time": "Nov 27, 2018 at 10:10",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2347953",
                    "text": "<span class=\"comment-copy\">Actually, <code>sub esp, 8</code> is there to align the stack on a 16 byte boundary.</span>",
                    "time": null
                }
            ]
        }
    ]
}