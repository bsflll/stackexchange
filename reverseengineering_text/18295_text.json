{
    "title": "Basic question: how to input non-printable hex values in GDB / NC? [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/18295/basic-question-how-to-input-non-printable-hex-values-in-gdb-nc",
    "content": "This question already has answers here:\n                                \n                            \n\n\n\n\nManaging inputs for payload injection?\n\n                                (2 answers)\n                            \n\nClosed 6 years ago.\n\n\n\nI'm working on a CTF challenge that is an introduction to smashing the stack. I have the binary working in GDB, and can overwrite the correct part of the stack with printable characters. \nThe challenge, however, is that the binary expects 0xdeadbeef in the correct stack location - and I'm a bit stumped on how to input that value. I've seen examples online where python is used to supply hex values as the argument to the binary - but this particular binary runs, prints a query message, THEN expects input, instead of just reading an argument.\nWhat is the best way to handle this, initially in GDB to confirm my approach, and then using NC to receive the actual flag? I'm working on Ubuntu.\nApologies for asking a basic question, but this has been tripping me up.\nThank you!\n",
    "votes": "3",
    "answers": 1,
    "views": "11k",
    "tags": [
        "gdb",
        "hex"
    ],
    "user": "BronzeOtter",
    "time": "6 years ago",
    "comments": [
        {
            "user": "fpmurphy",
            "text": "<pre><code>0xdeadbeef</code></pre> is not non-printable.  It is what is commonly known as<pre><code>hexspeak</code></pre>\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "Go read this answer.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Well, you have several options to do so. These are the two simplest:\nSupplying the input through the pipeline:\n<pre><code>$ python -c \"print '\\xde\\xad\\xbe\\xef'\" | ./binary\n$ python -c \"print 0xdeadbeef\" | ./binary\n</code></pre>\nSupplying the input from within GDB:\n<pre><code>(gdb) r <<< $(python -c \"print '\\xde\\xad\\xbe\\xef'\")\n(gdb) r <<< $(python -c \"print 0xdeadbeef\")\n</code></pre>\n",
            "votes": "4",
            "user": "Megabeets",
            "time": "Sep 18, 2018 at 8:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}