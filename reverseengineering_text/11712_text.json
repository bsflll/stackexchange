{
    "title": "How can packers work despite mechanisms like Data Execution Prevention?",
    "link": "https://reverseengineering.stackexchange.com/questions/11712/how-can-packers-work-despite-mechanisms-like-data-execution-prevention",
    "content": "Modern operating systems have memory protections such as Data Execution Prevention, No Execute bit for Data, Read-only bit for text/code sections etc.\nI don't understand how packers work when these memory protections are in place.\nWhere do the packers unpack the compressed/encrypted binaries when the code pages are marked Read-Only and data pages are marked for No Execute?\n",
    "votes": "5",
    "answers": 1,
    "views": "328",
    "tags": [
        "packers"
    ],
    "user": "anilmwr",
    "time": "Jan 7, 2016 at 12:01",
    "comments": [],
    "answers_data": [
        {
            "content": "The unpacker will request a page of memory from the OS that is marked write and unpack the code into there. Once the unpacking is done it will use VirtualProtect on windows or mprotect on posix compliant systems to change the protection bits to read-only and execute (or allocate the page as read-write+execute in the first place and skip making it read+execute-only).\nIn other words the application gets enough control over the protection bits to do run-time code generation.\n",
            "votes": "10",
            "user": "ratchet freak",
            "time": "Jan 8, 2016 at 10:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">Or (for Windows), unpack into an existing PE section whose characteristics are marked as RWX, thus having the PE loader do the page protection work.</span>",
                    "time": null
                }
            ]
        }
    ]
}