{
    "title": "Reverse engineering Infostealer.Dyre",
    "link": "https://reverseengineering.stackexchange.com/questions/20092/reverse-engineering-infostealer-dyre",
    "content": "I'm a newbie to malware analysis and reverse engineering in general. I got hold of a <pre><code>Dyre</code></pre> malware sample from <pre><code>theZoo</code></pre> on GitHub and I've been trying to analyze it.\nI've put up my analysis report here. I looked up Symantec's report on the same malware family here. They've some additional information on the remote IP addresses that the malware connects to.\nWhen conducting dynamic analysis, I could see on Wireshark that the malware is trying to get the resource: <pre><code>/cho1017/W512600.52818BB853DEE114E367C21952160412/5/pub...</code></pre>. My VM was not connected to the Internet, so I don't know what that resource actually is. I'm not sure if that can be simulated with <pre><code>INetSim</code></pre>.\nCan static analysis help to identify the IP addresses mentioned in Symantec's report? I've been trying static analysis but I'm lost. Although I know what static analysis entails, I'm having a hard time understanding how to proceed from the <pre><code>start</code></pre> area of the code and look for network related code.\nIf any one has experience with this malware family, any help would be appreciated. Also, if possible I'd like to know the quality of the analysis report that I've put up. I'd like to make sure that I'm writing malware analysis reports the right way.\n",
    "votes": "0",
    "answers": 1,
    "views": "158",
    "tags": [
        "malware",
        "static-analysis"
    ],
    "user": "Nikhil",
    "time": "Dec 8, 2018 at 21:29",
    "comments": [
        {
            "user": "knowmalware",
            "text": "Which Dyre sample?  I see multiple in the Dyre.zip in theZoo\n",
            "time": null
        },
        {
            "user": "Nikhil",
            "text": "It's just this one: github.com/ytisf/theZoo/tree/master/malwares/Binaries/Dyre\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Static malware analysis can be rather straightforward.\nThe first step is finding the core code component. Malware usually unpacks itself, creates new processes, writes shellcode to processes and so on, so the first task is finding the final payload to analyze.\nThis is roughly what unpacking entails. It's also where a lot of public blogposts stop but in reality, nobody cares about the packer used for malware and I'm always confused why people write about the 5 outer layers which will most likely be different 2 hours later when the new build is distributed.\nOnce you located the main component (likely some injected thread/code block in explorer.exe or something) you load it into IDA. Sometimes it's a full PE file, sometimes you just find a \"shellcode\" block, doesn't matter.\nThe next two steps are:\n\nGetting the imports\nGetting the strings\n\nMalware almost never uses static imports via the IAT so even if you have a full PE file, odds are you don't actually see what APIs the malware uses. So then you will have to find how and where the malware resolves its important dynamically. This usually happens around the entry point so look around there.\nAnd the same goes for strings. It's very likely that the malware either decrypts all strings at runtime, or at least some crucial ones. For that reason, looking around for code that looks like string decryption routines or for data that could be encrypted strings is a good idea.\nAnd this is where you can usually start actually reversing the malware. Strings very often lead to interesting code (if you find a bunch of HTTP-related strings or a user agent, you can just check where they are used and are likely in the communication code), or you jump to relevant APIs right away if they are obvious (if you find InternetConnect or HttpSendRequest or connect/recv/send for example).\nIn any case, resolving imports and strings is pretty much always the first step and the stepping stone for further targeted analysis.\nThis is pretty general but pretty much every static malware analysis goes through these steps. The rest is just pure reversing, finding functions, understanding them, finding who uses them and so on, like a crossword puzzle.\n",
            "votes": "1",
            "user": "Johann Aydinbas",
            "time": "Dec 9, 2018 at 1:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Nikhil",
                    "text": "<span class=\"comment-copy\">I looked at the strings and they're all gibberish and there are very few imports, so there's a very good chance that it's packed. I'm also reading this book on Practical Malware Analysis by Honig and Sikorski. Thanks for the information that you provided!</span>",
                    "time": null
                },
                {
                    "user": "knowmalware",
                    "text": "<span class=\"comment-copy\">Practical Malware Analysis is good.  Check out Chapter 18.  The techniques are still relevant, but the tools are somewhat dated.  use <a href=\"http://www.ollydbg.de/version2.html\" rel=\"nofollow noreferrer\">OllyDbg v2.01</a> and the <a href=\"https://low-priority.appspot.com/ollydumpex/\" rel=\"nofollow noreferrer\">OllyDumpEx plugin</a>, and instead of ImpRec use <a href=\"https://github.com/NtQuery/Scylla\" rel=\"nofollow noreferrer\">Scylla Import Reconstructor</a></span>",
                    "time": null
                },
                {
                    "user": "Nikhil",
                    "text": "<span class=\"comment-copy\">Thanks @knowmalware, I'll take a look, I'm still on chapter 10.</span>",
                    "time": null
                }
            ]
        }
    ]
}