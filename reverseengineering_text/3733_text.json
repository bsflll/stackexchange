{
    "title": "Why cl.exe change the extern function name used in my code?",
    "link": "https://reverseengineering.stackexchange.com/questions/3733/why-cl-exe-change-the-extern-function-name-used-in-my-code",
    "content": "So basically I my nasm syntax asm code, I use some extern functions like this:\n<pre><code>extern _printf\nextern __imp__Sleep@4\n....\ncall _printf\ncall    [__imp__Sleep@4]\n</code></pre>\nThen I use nasm to assemble it into obj:\n<pre><code>nasm -f win32 test.asm\n</code></pre>\nThen I use IDA Pro to disassemble test.obj, I can see code like this:\n \nSee, extern function name like _printf has been kept.\nBut when I link this obj file:\n<pre><code>cl /MT z:\\\\windows\\\\test.obj /link kernel32.lib libcmt.lib /SUBSYSTEM:CONSOLE\n</code></pre>\nThen I use IDA Pro to disassemble test.exe, I can see code like this:\n\nSee, the function name of _printf has been changed.\nI know basically after static link, the code of _printf has been put into the test.exe, in the subroutine of sub_409C9B\nBut basically I have to make the name of extern declared functions unchangeable, because I need to reverse engineering the test.exe and do some modify/remove towards those functions, and once PE exe lost the name info, I can not locate those targeting functions.\nSo my question is:\nWhy cl.exe will change the name of those functions, and is there any way to stop the change(I mean keep the function name unchangeable during the link time)?\n",
    "votes": "2",
    "answers": 2,
    "views": "458",
    "tags": [
        "ida",
        "winapi",
        "nasm"
    ],
    "user": "lllllllllllll",
    "time": "Feb 20, 2014 at 18:01",
    "comments": [
        {
            "user": "0xec",
            "text": "That is why there exists signatures for IDA (Flirt) to detect such standard library functions. Apply them and see.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You've got some kind of XY-problem.\nThe truth is: it's IDA who so to say \"changes\" the name of (something she thinks is) a function from absolutely nothing to <pre><code>sub_{address}</code></pre>. Why on earth would <pre><code>PE-file</code></pre> have non-exported symbols stored in it? Some kind of masochism? To give a candy to reversers?\nThus, you have at least three ways of dealing with your problem:\n\npray and hope that IDA's FLIRT will heuristically recognize <pre><code>printf</code></pre>;\n<pre><code>link</code></pre> your program with debug-info: <pre><code>-debug</code></pre> which tells linker to generate <pre><code>pdb</code></pre>-file which IDA will query for all the symbols stored for your application;\ntell linker to <pre><code>-export:printf</code></pre> so that it's name will be in export directory and you can get it's address easily even programmatically.\n",
            "votes": "6",
            "user": "Community",
            "time": "Apr 23, 2014 at 13:27",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "When <pre><code>printf()</code></pre> is called as an external function, the Windows loader needs to look up the address of the <pre><code>printf()</code></pre> function by-name at run-time so that the caller can find the <pre><code>printf()</code></pre> code.\nWhen <pre><code>printf()</code></pre> is called as an embedded library function, the compiler already knows the address of the <pre><code>printf()</code></pre> function at compile-time, and thus doesn't need to embed the function's name in the executable.\nIf you want the <pre><code>printf()</code></pre> name to automatically show in your disassembly, either export debug symbols or stick with using external DLLs. Alternatively, you may be able to use IDA's FLIRT libraries to identify the <pre><code>printf()</code></pre> function in the embedded library code.\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Feb 20, 2014 at 18:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}