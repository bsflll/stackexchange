{
    "title": "How does IDA provide function names to dynamic calls?",
    "link": "https://reverseengineering.stackexchange.com/questions/21413/how-does-ida-provide-function-names-to-dynamic-calls",
    "content": "I'm trying to compare a binary (a basic hello world exe compiled with MinGW) within Immunity Debugger and IDA. In Immunity I notice a call to EAX which points to <pre><code>004019c0</code></pre>. \n\nLooking in IDA I notice this call is identified as <pre><code>___dyn_tls_init_callback</code></pre>. I want to better understand how IDA gets this name and applies to this address. \n\nIf I follow the function in IDA via xrefs I see a reference to the code with a label provided by IDA but I'm unsure where this name comes from. How can I figure out how IDA got this name? I'd like to understand further so I can do the work myself in Immunity.\n",
    "votes": "1",
    "answers": 0,
    "views": "169",
    "tags": [
        "ida"
    ],
    "user": "Tom",
    "time": "Jun 3, 2019 at 0:45",
    "comments": [
        {
            "user": "Biswapriyo",
            "text": "In short, IDA is disassembler + decompiler which Immunity isn't. That function is a part of C runtime and it's an indirect call.\n",
            "time": null
        }
    ],
    "answers_data": []
}