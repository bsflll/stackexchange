{
    "title": "Could someone explain how this ARM instructions works compared to the actual Objective-C code?",
    "link": "https://reverseengineering.stackexchange.com/questions/18822/could-someone-explain-how-this-arm-instructions-works-compared-to-the-actual-obj",
    "content": "I'm trying to understands how it works by decompiling my own Objective-C code. Here's the decompiled instruction:\n<pre><code>var_8= -8\nvar_4= -4\n\nSUB             SP, SP, #8\nMOVS            R2, #1\nSTR             R0, [SP,#8+var_4]\nSTR             R1, [SP,#8+var_8]\nMOV             R0, R2\nADD             SP, SP, #8\nBX              LR\n</code></pre>\nFrom my understanding (correct me if I'm wrong), by line:\n<pre><code>SP=SP-8\nMove 1 to R2\nStore R0 into SP+8+var_4\nStore R1 into SP+8+var_8\nMove R2 into R0\nSP=SP+8\nNext Function\n</code></pre>\nAnd the actual code:\n<pre><code>%hook SomeClass\n- (int)somemethod {\nreturn 1;\n}\n%end\n</code></pre>\nNow I don't understand why it needs <pre><code>STR R0, [SP,#8+var_4]</code></pre> and <pre><code>STR R1, [SP,#8+var_8]</code></pre> for, as I can't see it purposes. And if I were to <pre><code>return 0</code></pre>, a simple change to of <pre><code>MOVS R2, #1</code></pre> to <pre><code>MOVS R2, #0</code></pre> would do, wouldn't it? But that didn't works.\n",
    "votes": "1",
    "answers": 1,
    "views": "221",
    "tags": [
        "disassembly",
        "arm"
    ],
    "user": "Gregor Isack",
    "time": "Jul 17, 2018 at 12:06",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "possible dupe: reverseengineering.stackexchange.com/questions/4532/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Objective C methods are not called directly, but via a piece of trampoline code in the ObjC's runtime \"objc_msgSend\" function, which in turn calls a regular C function implementing the ObjC method.\nIn addition to the method parameters, the C function is passed two additional parameters in the first two parameter slows, which are R0 and R1 on ARM (see this description):\n\nR0: \"self\", a reference to the actual object that is executing the current method\n\nInside an instance method, self refers to the receiver (object) of the message that invoked the method, while in a class method self will indicate which class is calling.\n\nR1: \"_cmd\"\n\nThis points to the selector being sent, in your case this should point to a string \"somemethod\" (or a struct containing this string, not sure about the current ARM implementation).\n",
            "votes": "2",
            "user": null,
            "time": "Jul 17, 2018 at 17:41",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Gregor Isack",
                    "text": "<span class=\"comment-copy\">Thanks for the answer. But which line of the offset should I modify to make it <code>return 0</code>? Modifying <code>MOVS R2, #1</code> to <code>MOVS R2, #0</code> still <code>return 1</code> for me.</span>",
                    "time": null
                },
                {
                    "user": "mailwl",
                    "text": "<span class=\"comment-copy\">Probably you patch wrong binary. iOS usually has fat binaries (e.g. one 32-bit ARMv7 and another for 64 bit ARMv8). New devices has 64-bit processors, so if you has this, you need patch 64-bit ARMv8 binary (in the example code for 32-bit)</span>",
                    "time": null
                },
                {
                    "user": "Gregor Isack",
                    "text": "<span class=\"comment-copy\">@mailwl I'm patching a .dylib though, there's only one file.</span>",
                    "time": null
                },
                {
                    "user": "Gregor Isack",
                    "text": "<span class=\"comment-copy\">@mailwl you're right. I patched the wrong binary. A simple <code>file myfile.dylib</code> revealed it has two archs. Now it seems to working fine. Thanks for the head-ups :)</span>",
                    "time": null
                }
            ]
        }
    ]
}