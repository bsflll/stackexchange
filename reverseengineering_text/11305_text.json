{
    "title": "How to create function prototype that recognizes arguments passed by reference in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/11305/how-to-create-function-prototype-that-recognizes-arguments-passed-by-reference-i",
    "content": "I have a function prototype generated by IDA that looks like this:\n\nHowever, it looks like there is a struct being referenced at the instruction lea edi, [esp+290h+var_240]. I would like IDA to reference this passed address as an argument in its function prototype.\nI have tried the approach below, but it is clear that it does not work.\n\nWhat I would like to see is something like this\n\nAny help or suggestions would be greatly appreciated!\n",
    "votes": "3",
    "answers": 1,
    "views": "4k",
    "tags": [
        "ida",
        "x86",
        "calling-conventions"
    ],
    "user": "itsbriany",
    "time": "Nov 11, 2015 at 2:44",
    "comments": [],
    "answers_data": [
        {
            "content": "My guess is that the function signature should be something like:\n<pre><code>int __usercall Call_HTTP@<eax>(int x, int y, void* http_object@<edi>);\n</code></pre>\n\n<pre><code>__usercall</code></pre> means the calling convention for the function is not a standard one (like stdcall, cdecl, etc.) as the function passes two arguments on stack and one in edi.\n<pre><code>@<eax></code></pre> : function returns a value in eax register.\n<pre><code>int x</code></pre> and <pre><code>int y</code></pre> are passed on the stack.\n<pre><code>void* http_object@<edi></code></pre> : http_object is a void* passed through the edi register.\n\nYou can change the type of the <pre><code>http_object</code></pre> by adding a proper structure for this object to the known IDA structures and pass the real type instead of <pre><code>void*</code></pre>.\nFor more information on function signature, see the IDA help on Set function/item type.\nEdit\nThe right signature should be:\n<pre><code>int __userpurge Call_HTTP@<eax>(int x, int y, void* http_object@<edi>);\n</code></pre>\nAs stated by @itsbriany:\n\nfor <pre><code>__stdcall</code></pre> and <pre><code>__userpurge</code></pre> calling conventions, the callee cleans up the stack.\nin <pre><code>__cdecl</code></pre> and <pre><code>__usercall</code></pre> conventions, the caller cleans up the stack.\n",
            "votes": "7",
            "user": "Neitsa",
            "time": "Nov 12, 2015 at 10:27",
            "is_accepted": true,
            "comments": [
                {
                    "user": "itsbriany",
                    "text": "<span class=\"comment-copy\">Thanks, it works! I would also like to add that the calling convention would be <b><i>_userpurge</i></b> because the calling convention was originally <b>_stdcall</b>. This is because in <b><i>_stdcall</i></b> and <b>_userpurge</b>, the callee cleans up the stack. In <b><i>_cdecl</i></b> and <b>_usercall</b>, the caller cleans up the stack :)</span>",
                    "time": null
                },
                {
                    "user": "Neitsa",
                    "text": "<span class=\"comment-copy\">@itsbriany Oops, sorry for the error... Nice catch! I'll edit my post.</span>",
                    "time": null
                }
            ]
        }
    ]
}