{
    "title": "Extract driver from PE [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/5915/extract-driver-from-pe",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nMy exact question sounds like: \nAre there any tools for automated resources extraction such as driver or executable to the ready-to-go <pre><code>.sys</code></pre> or <pre><code>.exe</code></pre>/<pre><code>.msi</code></pre> ?\nI googled several ways, but they haven't solved my problem.\n\nExescope -- spoilt the output binary\n7zip -- produced some rubbish(i.e. I can not figure out how to use it to achieve the goal)\nUniversal Extractor -- same as 7zip\n\nAny tips will be appreciated.\n",
    "votes": "1",
    "answers": 2,
    "views": "1k",
    "tags": [
        "binary-analysis",
        "pe"
    ],
    "user": "see ya",
    "time": "10 years ago",
    "comments": [
        {
            "user": "Paul",
            "text": "angusj.com/resourcehacker\n",
            "time": null
        },
        {
            "user": "see ya",
            "text": "@Paul, thank you. Output is sufficent for draft disassembly, but a lot of resources in produced file seems to be cropped.\n",
            "time": null
        },
        {
            "user": "Paul",
            "text": "ResourceHacker reads from the RAT (Resource Address Table). So, any PEs you found that have self extracting PE which doesn't reside in the RAT (Excluding talking about obfuscated PEs) will likely to reside in the .data section. I don't know of any tools to automate searching PEs within .data section. This maybe off topic as it's not automated but you could do it yourself by doing doing signature scan on PE or DOS header. Here's a website for signatures within the PE: marcoramilli.blogspot.co.uk/2010/12/windows-pe-header.html\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There is already a ready made tool which scans for embedded PE within another PE. \nDownload Exeinfo PE and use the ripper option. It will automatically scan and dump any embedded PE within the master file.\nHowever, obviously, the embedded PE should not be compressed or encrypted in any way.\n",
            "votes": "1",
            "user": "0xec",
            "time": "Jul 22, 2014 at 15:44",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "pe-carv.py is script can be used to carve out portable executable\nfiles from a data stream.\n\nhttp://hooked-on-mnemonics.blogspot.com/2013/01/pe-carvpy.html\n\nIt relies on pefile by Ero Carrera to parse the portable executable\nfile format and calculate the file size. Since the script relies on\nthe portable executable file format, data that is appended to the end\nof the file (overlay) will not be carved out.\nThe algorithm of the\nscript is simple. Search for the strings of the MZ header in a data\nstream, if found read from the address to the end of the file, then\npass the buffer to pefile. If no exceptions are thrown by pefile then\nwe have a valid portable executable file. If an error occurs, search\nfor the next MZ header and then start the process again.\n",
            "votes": "0",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}