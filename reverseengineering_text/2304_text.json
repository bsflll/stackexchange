{
    "title": "NOP instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/2304/nop-instruction",
    "content": "I have recently learned that <pre><code>nop</code></pre> instruction is actually <pre><code>xchg eax, eax</code></pre>... what it does is basically exchanges <pre><code>eax</code></pre> with itself. \nAs far as CPU goes, does the exchange actually happen?\n",
    "votes": "8",
    "answers": 2,
    "views": "5k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "Cream Cracker",
    "time": "Jun 20, 2013 at 21:29",
    "comments": [
        {
            "user": "DCoder",
            "text": "At one time it did, and it was no longer a NOP.\n",
            "time": null
        },
        {
            "user": "Cream Cracker",
            "text": "@DCoder What do you mean?\n",
            "time": null
        },
        {
            "user": "DCoder",
            "text": "Read the page I linked to. There was a bug in some AMD's x64 processors where <pre><code>xchg EAX, EAX</code></pre> was actually executed... Most 32 bit instructions in x64 mode zero out the upper 332 bits of their operands , and this instruction did too.\n",
            "time": null
        },
        {
            "user": "Cream Cracker",
            "text": "@DCoder What about 32bit. Is it still relevant?\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "it doesn't have any effect on 32-bit.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There are several instructions, which could be used depending on the compiler. <pre><code>xchg eax, eax</code></pre> is byte code 90. It is a legit instruction, which takes up a single processing cycle. In addition, there are several other instructions, which could be used in place of <pre><code>xchg eax, eax</code></pre>: \n<pre><code>lea eax, [eax + 0x00]    byte code 8D 40 00\nmov eax, eax             byte code 89 C0\n</code></pre>\nSince all of those instructions are different length, compiler chooses one of the most appropriate versions depending on alignment requirements. \nRegarding compilers' choices, a few pointers:\n\nGAS (GNU Assembler, used by GCC) x86 NOP operations can be found in function i386_align_code()\nsimilarly, for LLVM it is in X86AsmBackend::writeNopData()\n",
            "votes": "8",
            "user": "j04n",
            "time": "Feb 9, 2018 at 20:08",
            "is_accepted": true,
            "comments": [
                {
                    "user": "peter ferrie",
                    "text": "<span class=\"comment-copy\">but they are probably less \"NOP-like\" than the xchg is.  Besides which, the documented multi-byte NOP is the \"0f 1f /0\" set.</span>",
                    "time": null
                },
                {
                    "user": "ahmd0",
                    "text": "<span class=\"comment-copy\">The only other <code>nop</code> instruction is <code>0F 1F /0</code> which is <code>NOP r/m16</code> and <code>NOP r/m32</code> on supported CPUs. It may take anywhere from 3 to 9 bytes in x86-64, as per <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf\" rel=\"nofollow noreferrer\">Intel doc</a> (page 4-163). So even though you can use <code>mov eax, eax</code> and others an an alternative, it has a downside vs. real <code>nop</code> in that it blocks CPU pipeline and lacks other hardware optimizations that are implemented in the <code>nop</code> instruction.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The short answer is \"Yes.\"  In fact, if you experiment by generating machine language op codes directly you will discover that there is a whole range of operations that are effectively NOPs, all of which take a single processor cycle to execute.\nWhile they are not technically \"Documented,\" you will find that very close to the 0x90,\n\n<pre><code>XCHG EAX, EAX</code></pre>\n<pre><code>XCHG EBX, EBX</code></pre>\n<pre><code>XCHG ECX, ECX</code></pre>\n<pre><code>XCHG EDX, EDX</code></pre>\n",
            "votes": "2",
            "user": "Evan Carroll",
            "time": "Feb 6, 2018 at 6:42",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Evan Carroll",
                    "text": "<span class=\"comment-copy\">I don't think this is is true. I think the non-EAX take more cycles (3 and not 1) and I think all the XCHG versions actually 0 the higher order 32 bits on a x86_64. <a href=\"https://stackoverflow.com/a/25053039/124486\">stackoverflow.com/a/25053039/124486</a></span>",
                    "time": null
                }
            ]
        }
    ]
}