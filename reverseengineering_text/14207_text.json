{
    "title": "What means sym prefix before functions name in radare2",
    "link": "https://reverseengineering.stackexchange.com/questions/14207/what-means-sym-prefix-before-functions-name-in-radare2",
    "content": "What means sym prefix in disassembly? For examle, <pre><code>sym.main</code></pre>?\n",
    "votes": "-1",
    "answers": 2,
    "views": "2k",
    "tags": [
        "radare2"
    ],
    "user": "Alex T",
    "time": "Dec 20, 2016 at 22:45",
    "comments": [
        {
            "user": "yaspr",
            "text": "RTFM ! wx 90 @@ sym.*  Writes a nop on every symbol (github.com/pwntester/cheatsheets/blob/master/radare2.md)\n",
            "time": null
        },
        {
            "user": "Alex T",
            "text": "Ok, wx 90 @@ sym.* writes a nop on every symbol. But what means sym? Acronym or what?\n",
            "time": null
        },
        {
            "user": "yaspr",
            "text": "Sym ==> symbol ! RTFM again.\n",
            "time": null
        },
        {
            "user": "Parthian Shot",
            "text": "<pre><code>What means sym prefix</code></pre> It means you need to understand file formats before you try to disassemble them.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "As pointed out by users in comments <pre><code>sym</code></pre> stands for <pre><code>symbol</code></pre>.\nFrom Wikipedia:\n\nA debug symbol is information that expresses which\n  programming-language constructs generated a specific piece of machine\n  code in a given executable module. Sometimes the symbolic information\n  is compiled together with the module's binary file, or distributed in\n  a separate file, or simply discarded during the compilation and/or\n  linking. This information enables a person using a symbolic debugger\n  to gain additional information about the binary, such as the names of\n  variables and routines from the original source code. This information\n  can be extremely helpful while trying to investigate and fix a\n  crashing application or any other fault.\n\nAs previously stated, a symbol may be used to referer to a specific address in the binary (i.e. <pre><code>sym.main</code></pre> => <pre><code>main function</code></pre>).\n",
            "votes": "2",
            "user": "shxdow",
            "time": "Dec 23, 2016 at 13:09",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Here are symbol prefixes with examples, as output by the Radare2 command \"axj\" from C:\\Windows\\system32\\gdi32.dll:\n\nsym.imp.* : \"sym.imp.KERNEL32.dll_UnhandledExceptionFilter\"\nsub.* : \"sub.KERNEL32.dll_RtlCaptureContext_614+410\" or \"sym.imp.ole32.dll_ReleaseStgMedium+56\" (Note the library name in upper- or lowercase)\nfcn.* : \"fcn.18000587c+41\"\nstr.* : \"str.._AUIDropTarget+584\" or \"str.PyShellExt::GetArguments___failed_to_lock_CF_HDROP_hGlobal+124\" or \"str.memset\" (One or two dots)\nsection.* : \"section..data+16\"\nswitch.* : \"switch.0x180004860\"\ncase.* : \"case.default.0x180004820\"\nresource.* : \"resource.1\"\n\nThe only explanation I could find is:\n\"Flags generally have a prefix in their name, such as str., sym., sub., fcn.\"\nThose names are called ‘flags’. Flags can be grouped into ‘flag spaces’. \nAs suggested, \"fs\" command displays:\n<pre><code>[0x180005218]> fs\n0  247 * strings\n1    5 * symbols\n2    8 * sections\n3    0 * segments\n4   79 * relocs\n5   79 * imports\n6    2 * resources\n7  104 * functions\n</code></pre>\nMore information about flags and flagspaces here:\nRadare2, basic commands, flags\n",
            "votes": "2",
            "user": "remi.chateauneu",
            "time": "Jan 4, 2019 at 8:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}