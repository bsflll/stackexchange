{
    "title": "How can I recover / locate non-virtual class methods at run-time?",
    "link": "https://reverseengineering.stackexchange.com/questions/8758/how-can-i-recover-locate-non-virtual-class-methods-at-run-time",
    "content": "I know how to find and hook virtual methods by crawling an object's RTTI.  I cannot find enough information about non-virtual class methods. \n\nIs there anyway to identify non-virtual class methods at run-time?  \nCan I use a class's symbol name to recover any information about it at run-time?\n",
    "votes": "1",
    "answers": 1,
    "views": "123",
    "tags": [
        "disassembly",
        "c++",
        "dynamic-analysis"
    ],
    "user": "question_asker_777",
    "time": "Apr 24, 2015 at 10:57",
    "comments": [],
    "answers_data": [
        {
            "content": "There's no sure-proof way to do it. Non-virtual methods look exactly like normal functions except they take an implicit 'this' pointer. If you are dealing with visual C++ compiled program then it will probably be a bit more obvious as usually it uses thiscall calling convention so you just need to watch for cases when the instance address is in ecx at function entry. See my article for more details.\nOf course, if you have symbols then it's very easy - just check for <pre><code>classname::</code></pre> prefix in the demangled function name.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Apr 24, 2015 at 11:40",
            "is_accepted": true,
            "comments": []
        }
    ]
}