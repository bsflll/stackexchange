{
    "title": "frida hook `loc_*` or `sub_*`",
    "link": "https://reverseengineering.stackexchange.com/questions/31100/frida-hook-loc-or-sub",
    "content": "Is it possible to hook a <pre><code>sub_...</code></pre> object in Frida ? I disassembled an <pre><code>arm64</code></pre> executable, when running the app on my iPhone, I can see a lot of classes also in the disassembled executable, but I can't reach these <pre><code>sub_...</code></pre> objects. If this is possible, I'd like to know how can I edit them to change a certain procedure (in my case <pre><code>b.ne</code></pre> to <pre><code>b.eq</code></pre>), and also if it is possible to hook some <pre><code>loc_...</code></pre> objects.\nThanks for all your answers.\n",
    "votes": "2",
    "answers": 1,
    "views": "570",
    "tags": [
        "disassemblers",
        "ios",
        "javascript",
        "frida",
        "assembler"
    ],
    "user": "hmngwn",
    "time": "Nov 7, 2022 at 19:18",
    "comments": [
        {
            "user": "Robert",
            "text": "Such methods don't have a name and thus need to be accessed using their address. You need to check the used base address of the used decompiler (IDA, Ghidra or want else?) Substract that from the shown address in the function name and in Frida at runtime add the base address of the module the function belongs to. That is the address you can hook in Frida. Frida has the capability to patch memory, check Frida API documentation. I assume you have to know the address and the new hex value of the encoded b.eq command.\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "An example for an method address calculation in the app main binary is shown here: reverseengineering.stackexchange.com/a/30881/1848\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Update:\nFirst, you need the base address of the module where your <pre><code>loc_...</code></pre> or <pre><code>sub_...</code></pre> is. To get it, do:\n<pre><code>var adr = Process.findModuleByName(\"YOURMODULENAME\")[\"base\"];\n</code></pre>\nThen, get the offset of your <pre><code>loc_...</code></pre> or <pre><code>sub_...</code></pre>. It is easy since they are named from it, like so: <pre><code>loc_342964</code></pre>. So now, add this offset to the base of your module like so:\n<pre><code>var n_adr = adr.add(ptr(0x342964));\n</code></pre>\nYou can ensure it is the correct address by displaying the instruction at the place of the address by:\n<pre><code>console.log(Instruction.parse(n_adr).toString(););\n</code></pre>\nIf it is not a procedure, use:\n<pre><code>console.log(Memory.ReadCString(n_adr););\n</code></pre>\nThe you can attach it like this:\n<pre><code>Interceptor.attach(n_adr, function() {\n    console.log(JSON.Stringify(this.context));\n});\n</code></pre>\nTo edit values, edit directly the <pre><code>this.context</code></pre> object. Ex:\n<pre><code>Interceptor.attach(n_adr, function() {\n    this.context.w0 = ptr(0x0);\n});\n</code></pre>\n",
            "votes": "1",
            "user": "hmngwn",
            "time": "Nov 26, 2022 at 17:30",
            "is_accepted": true,
            "comments": []
        }
    ]
}