{
    "title": "Vtables in objects with inheritance in IDA",
    "link": "https://reverseengineering.stackexchange.com/questions/32757/vtables-in-objects-with-inheritance-in-ida",
    "content": "I'm struggling to get object inheritance working in IDA.\nThe original structure is as follows:\n<pre><code>INoticeSource : INoticeSink\nIRTTITypeInfo : IUnknown, INoticeSource\n\nIPersist : IUnknown\nIPersistStream : IPersist\n\nAbstractClass : IPersistStream, IRTTITypeInfo\n</code></pre>\nThe compiler is MSVC, VS6.\nI recreated this structure with structs, using IDA's support for inheritance, with the lowest layers (INoticeSink, IUnknown) containing explicit declarartions of vtable variables, and the rest not having any.\nThis works (mostly) for the types preceding AbstractClass, or at least their size matches, I haven't verified that the vtables it uses are the correct ones.\nAll the vtables are named CLASSNAME_vtbl, the explicit vtable fields are named CLASSNAME_vftable, all according to the sparse IDA docs.\nThe issue comes when I try to reconstruct AbstractClass. The only way I was able to do it is by doing the following:\n<pre><code>struct __cppobj AbstractClass\n{\n  AbstractClass_vtbl *AbstractClass__vftable;\n  AbstractClass_0004_vtbl *IRTTITypeInfo__vftable;\n  AbstractClass_0008_vtbl *INoticeSink__vftable;\n  AbstractClass_000C_vtbl *INoticeSource__vftable;\n...\n}\n</code></pre>\nwhere the variables are the vtables for this particular class, the names containing their offsets agains as per the docs. As you can see, there are 4 of them, while IDA was using only 2 vtables with \"inheritance syntax\" used (one for each base class), which resulted in an object size of 8 bytes less and incorrect vtables.\nOf course, this would work, but not without drawback. Since I have all the vtable pointers in AbstractClass, any class that inherits it will inherit its vtable pointers, which will be incorrect. I would quite enojy it if I could in fact use the inhertiance features provided. Anyone knows how to make this work?\nEDIT: I can, in fact, get the right alignment of vtables, (I have to add one manually), but they are not the right vtables. IDA keeps using the vtables for the base classes, which is erroneous, and results in functions being resolved incorrectly. This is despite my having provided the structs with the correct names to replace them, supposedly.\n",
    "votes": "2",
    "answers": 0,
    "views": "178",
    "tags": [
        "ida",
        "disassembly",
        "c++"
    ],
    "user": "ZivDero",
    "time": "Feb 22, 2024 at 23:38",
    "comments": [
        {
            "user": "mimak",
            "text": "Vtable pointer offset usually stays the same for the subclasses, what i do is copy the base class structure into the subclass definition and swap the vmt pointer type so the offsets keep matching and the methods are resolved properly\n",
            "time": null
        },
        {
            "user": "ZivDero",
            "text": "@mimak While that certainly works, this means the whole structure of the class will have to be copied, including all the inherited fields, which is clumsy and annoying if I change how fields of the base class are mapped. Fow now, I've resorted to having a \"novtable\" version of the class that I include in both the actual class and the base classes, which fixes the issue I mentioned but means I have to make duplicate structs now.\n",
            "time": null
        }
    ],
    "answers_data": []
}