{
    "title": "Understanding ARM64 Obj-C Prolog",
    "link": "https://reverseengineering.stackexchange.com/questions/16393/understanding-arm64-obj-c-prolog",
    "content": "I'm trying to understand the differences between the following function prologs of a number of obj-c function decompilations.\nI know they store variables for the caller to use when the function returns. But why the differences?\nSample 1\n<pre><code>void * -[Issue ideal](void * self, void * _cmd)\nsub        sp, sp, #0x40\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\nadd        x29, sp, #0x30\nmov        x19, x0\n</code></pre>\nSample 2\n<pre><code>void * -[Issue path](void * self, void * _cmd)\nstp        x26, x25, [sp, #-0x50]!\nstp        x24, x23, [sp, #0x10]\nstp        x22, x21, [sp, #0x20]\nstp        x20, x19, [sp, #0x30]\nstp        x29, x30, [sp, #0x40]\nadd        x29, sp, #0x40\nmov        x19, x0\n</code></pre>\nSample 3\n<pre><code>void -[ContentView showPageThumb:page:data:guid:](void * self, void * _cmd, void * arg2, long long arg3, void * arg4, void * arg5)\nstp        x24, x23, [sp, #-0x40]!\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\nadd        x29, sp, #0x30\nmov        x20, x5\nmov        x21, x4\nmov        x22, x3\nmov        x19, x0\nmov        x0, x2\n</code></pre>\n",
    "votes": "1",
    "answers": 1,
    "views": "649",
    "tags": [
        "disassembly",
        "assembly",
        "arm"
    ],
    "user": "d123",
    "time": "Sep 24, 2017 at 18:02",
    "comments": [],
    "answers_data": [
        {
            "content": "I haven't touched this stuff for a while, but I'd say compiler is simply saving opcodes or following a complicated template, perhaps to do with optimisation. Notice that\n<pre><code>stp        x24, x23, [sp, #-0x40]!\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\n</code></pre>\ndoes the same job as \n<pre><code>sub        sp, sp, #0x40\nstp        x22, x21, [sp, #0x10]\nstp        x20, x19, [sp, #0x20]\nstp        x29, x30, [sp, #0x30]\n</code></pre>\nplus stores one additional register <pre><code>x24</code></pre> . This because the first example uses writeback addressing in <pre><code>[sp, #-0x40]!</code></pre>\nhttp://www.davespace.co.uk/arm/introduction-to-arm/addressing.html (a random google result on addressing modes in ARM). \nSame with your second example - it still allocates x50 bytes on the stack. The difference is rather superficial, they all do the same job. <pre><code>add</code></pre>,<pre><code>mov</code></pre>s are not part of prologue IIRC.\n",
            "votes": "1",
            "user": "Vitaly Osipov",
            "time": "Sep 24, 2017 at 11:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}