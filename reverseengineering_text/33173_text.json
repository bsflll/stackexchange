{
    "title": "Argument-containing register notation after argument renaming [radare2]",
    "link": "https://reverseengineering.stackexchange.com/questions/33173/argument-containing-register-notation-after-argument-renaming-radare2",
    "content": "I'm currently reverse-engineering a game, and I need useful register notations after function args renaming. Like that:\n<pre><code>lea rsi, [var_10h]                    ; const char *s                 <-- I NEED THIS\nmov edx, 4                            ; std::size_t count             <-- I NEED THIS\nmov rdi, r12                          ; file_compressorst& fc_obj     <-- I NEED THIS\ncall sym file_compressorst::write_file(void*, long) ; file_compressorst::write_file_2\n</code></pre>\nUnfortunately, I can achieve this only executing <pre><code>aaaa</code></pre> two times: before args renaming and after. And even in that case:\n\nit works eventually;\n<pre><code>fcn.*</code></pre> argument changes reset, and I get register notations only for <pre><code>sym.*</code></pre>.\n\nWhat I've tried\nI found out that <pre><code>aaaa</code></pre> command is actually a macro for:\n<pre><code>aa\naf@@@i\naf@ entry0\naf@@@s\nafva@@@F\naac\naar\navrr\naf @@ method.*\nafva@@@F\naaft\naanr\n/azs\naap\ne anal.types.constraint = true\n</code></pre>\nI tried every command listed above separately in case it helps to get the desired result. But none of that worked. And docs are not as helpful as I want.\nWhat am I not seeing that I need to see?\nCould someone help me with that?\n\nVersions:\n<pre><code>radare2 5.9.3 0 @ linux-x86-64\nbirth: git.5.9.3 2024-07-17__21:49:23\ncommit: 5.9.3\noptions: gpl release -O? cs:5 cl:2 make\n</code></pre>\n",
    "votes": "0",
    "answers": 0,
    "views": "20",
    "tags": [
        "disassembly",
        "radare2"
    ],
    "user": "listvennica",
    "time": "Aug 21, 2024 at 7:29",
    "comments": [],
    "answers_data": []
}