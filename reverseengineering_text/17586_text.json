{
    "title": "How can I circumvent rdtsc when used as an anti-debugger technique?",
    "link": "https://reverseengineering.stackexchange.com/questions/17586/how-can-i-circumvent-rdtsc-when-used-as-an-anti-debugger-technique",
    "content": "I using x86dbg and am working on unpacking a target. The unpacking stub appears to be using some anti-debugging techniques - most of which I can detour with a plugin. \nHowever, there are a lot of occurrences of rdtsc in the code. The code is being generated / unpacked throughout execution so I cannot simply search for all instances of the instruction.\nI have tried running a trace with a condition to break when rdtsc is found but it is simply way to slow and tedious; especially since rdtsc is sometimes used in loops and it isn't as simple as just noping them out since a comparison takes place much later in the stub (it is also hard to identify where due to the excessive junk code.)\nAny help would be greatly appreciated,\nThanks.\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "x86",
        "unpacking",
        "dynamic-analysis",
        "anti-debugging"
    ],
    "user": "Jeremy",
    "time": "Mar 3, 2018 at 11:43",
    "comments": [],
    "answers_data": [
        {
            "content": "there are a few fake rdtsc drivers floating around     \nor if you have windbg attached in kernel mode you can toggle cr4.TSD bit and catch the exception  iirc there is a script floating for that too but a fleeting google didn't land me that now  ill link it later \nedit anti rdtsc windbg script by vallejocc\nhere is a small demo \n<pre><code>kd> r cr4\ncr4=00000699\n\nkd> r cr4 = 69d\nkd> r cr4    \ncr4=0000069d\nkd> g    \n\n *** Unhandled exception **0xc0000096**, hit in C:\\Windows\\system32\\svchost.exe -k netsvcs:\n\n *** enter .exr 03C0F78C for the exception record\n ***  enter .cxr 03C0F7A0 for the context\n *** then kb to get the faulting stack\n\nBreak instruction exception - code 80000003 (first chance)\nntdll!RtlUnhandledExceptionFilter2+0x2ab:\n001b:7743d10d cc              int     3\n\nkd> .exr 03C0F78C\nExceptionAddress: 6dbb1358\n   ExceptionCode: c0000096\n  ExceptionFlags: 00000000\nNumberParameters: 0\n\nkd> .cxr 03C0F7A0\neax=1d218944 ebx=00000000 ecx=1ee17334 edx=0000021a esi=042708e0 edi=00000000\neip=6dbb1358 esp=03c0fa84 ebp=03c0fb08 iopl=0         nv up ei pl zr na pe nc\ncs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246\n001b:6dbb1358 0f31            rdtsc  <<<<<<\nkd> kb\n  *** Stack trace for last set context - .thread/.cxr resets it\n # ChildEBP RetAddr  Args to Child              \nWARNING: Frame IP not in any known module. Following frames may be wrong.\n00 03c0fb08 6dbb150f 04270808 002767b0 03c0fb3c 0x6dbb1358\n</code></pre>\n",
            "votes": "2",
            "user": "blabb",
            "time": "Mar 4, 2018 at 7:25",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jeremy",
                    "text": "<span class=\"comment-copy\">Thanks for this response. I think I am going to go the driver route at this point and if it causes some head-aches I may escalate to a kernel mode debugger. Thanks. I am looking at using this driver here <a href=\"http://deroko.phearless.org/ring0.html\" rel=\"nofollow noreferrer\">deroko.phearless.org/ring0.html</a></span>",
                    "time": null
                },
                {
                    "user": "blabb",
                    "text": "<span class=\"comment-copy\">i edited the post to include the antirdtsc winsbg script's link  derokos fakerdtsc is fine</span>",
                    "time": null
                }
            ]
        }
    ]
}