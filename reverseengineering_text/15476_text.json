{
    "title": "best c compiler on windows for reversing",
    "link": "https://reverseengineering.stackexchange.com/questions/15476/best-c-compiler-on-windows-for-reversing",
    "content": "One of the threads I have discovered in my reading about learning how to reverse engineer is to write \"small\" c programs compile them and then disassemble them to see how the c code gets translated into assembly.\nI am working on windows 7 64-bit, and have had problems getting visual studio installed. When I select one of the visual studio command prompts the environment never gets set correctly so the compilers are not available.\nSo my question is:\nShould I install mingw, mingw-w64, or cygwin to provide the best environment for this kind of testing/learning?\n",
    "votes": "0",
    "answers": 2,
    "views": "760",
    "tags": [
        "compilers"
    ],
    "user": "dnraikes",
    "time": "Jun 4, 2017 at 0:28",
    "comments": [
        {
            "user": "JAL",
            "text": "IMO: Install a linux VM and use the gcc or clang toolchain.  That's what I've done for reverse engineering and ctf exercises.\n",
            "time": null
        },
        {
            "user": "dnraikes",
            "text": "how different is the compiled code between linux and windows though?\n",
            "time": null
        },
        {
            "user": "JAL",
            "text": "stackoverflow.com/q/2067524/2415822\n",
            "time": null
        },
        {
            "user": "blabb",
            "text": "You could try enterprise wdk or ewdk  a big download but no installation just unzip open a cmd prompt and run the bat file in root folder ( you may need to pass correct include paths or write a small bat file to set them\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a question which leads to a very subjective answer. I would (and have) install MinGW and then use gcc to compile your C code. You don't even need all the Visual Studio bloatware stuff for what you want to accomplish. It'll be as simple as opening your favorite text editor, writing a C program (yes, you can still #include  and use the Win32 API just fine), and running gcc at the command prompt. You can even force a 32 bit binary with <pre><code>-m32</code></pre>, turn off stack canaries with <pre><code>-fno-stack-protector</code></pre>, and etc... If you desire, to practice.\nYou will also want to be using gdb galore. gdb also comes with MinGW so you're covered there as well. This method will be incredibly straightforward and easy. Text editor -> save, gcc, run, gdb, repeat. All can be done from the command prompt. This is as easy as you can get on either Linux or Windows.\nFor some reason, there is a tendency to believe that you must either use Visual Studio on Windows or switch to Linux. This simply isn't the case and for what you are trying to accomplish, both could be overkill and both will definitely take some time, especially if you've never used either. However, if you are interested in working with or learning a Linux environment, and have no problem setting up a virtual machine, you could install Linux on a VM and then you will already have all the tools you need installed. Linux and C do go hand-in-hand and many programmers prefer Linux for this reason amongst others.\n",
            "votes": "2",
            "user": "the_endian",
            "time": "Jun 4, 2017 at 2:34",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Rup",
                    "text": "<span class=\"comment-copy\">\"This is as easy as you can get on either Linux or Windows.\" - no it isn't. You could work in an IDE, like Visual Studio :-p There you can save, compile, run and step into a debugger all in a single keypress.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Kris Kaspersky's (RIP) book called Hacker Disassembly Uncovered (freely available in chm format, just google for it) has a whole chapter just on that topic - he shows different code snippets (starting with really simple ones and then goes to floating points, virtual functions tables and other C++ constructs) under different compilers and does a line-by-line disassembly with in-depth insights.\nThis book does exactly what you're asking for.\n",
            "votes": "1",
            "user": "NirIzr",
            "time": "Jun 6, 2017 at 23:17",
            "is_accepted": false,
            "comments": []
        }
    ]
}