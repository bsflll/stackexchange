{
    "title": "Base address of shared objects from ldd output",
    "link": "https://reverseengineering.stackexchange.com/questions/1994/base-address-of-shared-objects-from-ldd-output",
    "content": "I'm on a Linux machine with ASLR disabled. Running <pre><code>ldd</code></pre> on a binary gives me the following result :\n<pre><code>linux-gate.so.1 =>  (0xb7fe1000)\nlibc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xb7e5c000)\n/lib/ld-linux.so.2 (0xb7fe2000)\n</code></pre>\nDoes this mean that <pre><code>libc.so.6</code></pre> will be loaded at the address <pre><code>0xb7e5c000</code></pre>? I'm trying to build a ROP chain for an old CTF challenge and I'd like to get gadgets from the library. I'm looking to know the base address of the library so that I can add it to the offsets of the gadgets.\n",
    "votes": "8",
    "answers": 2,
    "views": "6k",
    "tags": [
        "linux",
        "libraries",
        "dynamic-linking"
    ],
    "user": null,
    "time": "May 3, 2013 at 20:31",
    "comments": [
        {
            "user": "perror",
            "text": "If you want to create a ROP just for recreational purpose, you may just compile your binary with the <pre><code>-static</code></pre> option. It will statically link the <pre><code>libc</code></pre> to the executable and, thus, increase drastically the number of potential gadgets.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@blahfish: not worth its own answer, but have a look over this\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In fact, <pre><code>ldd</code></pre> is loading the libraries on-the-fly to list what libraries are needed. So, on this run, you can say that <pre><code>libc.so.6</code></pre> has been loaded at <pre><code>0xb7e5c000</code></pre>, but you have no warranty that it will always be the case. Even with no ASLR, it is mainly depending on the loading order of the libraries that might vary from one run to another.\nNevertheless, assuming you have no ASLR, and speaking about the <pre><code>libc</code></pre>, which will be very likely to be the first loaded library anyway, you can safely assume that it will loaded at this address most of the time.\n",
            "votes": "10",
            "user": "perror",
            "time": "May 3, 2013 at 21:20",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Yes, the base address of <pre><code>libc.so.6</code></pre> should be <pre><code>0xb7e5c000</code></pre> for that binary. You can verify this by catting <pre><code>/proc/<pid>/maps</code></pre> while your application is running.\n",
            "votes": "6",
            "user": "devttys0",
            "time": "May 3, 2013 at 16:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">Hmmm. That contradicts perror answer...</span>",
                    "time": null
                },
                {
                    "user": "devttys0",
                    "text": "<span class=\"comment-copy\">perror gave a much more detailed answer, obviously; he posted it as I was typing mine, else I would have left well enough alone. :)  I don't see much of a contradiction though; as he said, with libc and no ASLR, this address should be the same. Pre-ASLR ret2libc and ROP exploits generally rely on the address of libc not changing.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">@Mellowcandle: I agree with devttys0, our both answers end up with the same conclusion. I did just try to be more accurate on what hypothesis were to be taken into account (and why).</span>",
                    "time": null
                },
                {
                    "user": "Mellowcandle",
                    "text": "<span class=\"comment-copy\">I agree with you. Deleting my comment...</span>",
                    "time": null
                }
            ]
        }
    ]
}