{
    "title": "IOS ASLR address calculation with delta offset (ARM64)",
    "link": "https://reverseengineering.stackexchange.com/questions/30720/ios-aslr-address-calculation-with-delta-offset-arm64",
    "content": "I am learning <pre><code>LLDB</code></pre> to debug ios apps, I have a jailbroken iPhone IOS 14.3 and a debugserver.\nScreenshot of start connect to remote process:\n\nSections of my process(image dump sections hidenseek):\n\nNext, I calculated the delta at the address from the disassembled unity engine as, <pre><code>Delta = end of PAGEZERO - start of TEXT</code></pre>\nThis is the address of the function where I want to put a breakpoint:\n\nHence, <pre><code>Delta = 0x104a60000 - 0x10000000</code></pre> = <pre><code>0x4a60000</code></pre>\nThen I consider the address, it will be equal to <pre><code>delta + offset</code></pre> in the disassembler,\n\nbut it turns out to be an unknown address, I did the same as in the training video.\nWhat am I doing wrong? How to calculate the correct address?\nI would be glad for any help.\n",
    "votes": "3",
    "answers": 1,
    "views": "280",
    "tags": [
        "disassembly",
        "ios",
        "lldb",
        "arm64"
    ],
    "user": "qazwsx135",
    "time": "Aug 8, 2022 at 0:23",
    "comments": [
        {
            "user": "raspiduino",
            "text": "<pre><code>I did the same as in the training video.</code></pre> Which video?\n",
            "time": null
        },
        {
            "user": "qazwsx135",
            "text": "youtu.be/_i_v6pWqDQQ\n",
            "time": null
        },
        {
            "user": "qazwsx135",
            "text": "in the video, the situation is approximately the same, but the addresses that I get are completely different from those in the debugger\n",
            "time": null
        },
        {
            "user": "raspiduino",
            "text": "From this, try <pre><code>disas -a 0x5e409a8</code></pre>. You might also consider reading this, the ASLR section (but I don't fully understand his/her command in lldb)\n",
            "time": null
        },
        {
            "user": "Robert",
            "text": "Most you your screen shots just show terminal content. Such content should better be posted as text. Just copy and paste it into your question and format it as code. Screen shots are bad for readability and also bad if you want later search it as image content can't be searched.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "you can set a breakpoint using lldb on <pre><code>func.013e09a8</code></pre> like this:\n<pre><code>b -a 0x013e09a8 -s AppExecutableName\n</code></pre>\nNo manual ASLR calculations required. If you continue in <pre><code>lldb</code></pre> with <pre><code>con</code></pre> you should see something like:\n<pre><code>    frame #0: 0x013e19a8 AppExecutableName`___lldb_unnamed_symbol139640$$AppExecutableName\nAppExecutableName`___lldb_unnamed_symbol139640$$AppExecutableName:\n->  0x013e19a8 <+0>:  stp    x22, x21, [sp, #-0x30]!\n    0x013e19ac <+4>:  stp    x20, x19, [sp, #0x10]\n    0x013e19a0 <+8>:  stp    x29, x30, [sp, #0x20]\n    0x013e19a4 <+12>: add    x29, sp, #0x20            ; =0x20\n</code></pre>\nThe formula for ASLR shift is now:\n<pre><code>p/x 0x013e19a8-0x013e09a8\n</code></pre>\nFrom this point provided your executable doesn't change (presumably by the means of AppStore autoupdate) you can also revisit this function with a symbolic breakpoint if you want to:\n<pre><code>b ___lldb_unnamed_symbol139640$$AppExecutableName\n</code></pre>\nTo convert the other way round i.e. the ASLR shifted address to the <pre><code>0x100000000</code></pre> base one (suitable for disassembler) use:\n<pre><code>image lookup -a 0x013e19a8\n</code></pre>\n",
            "votes": "2",
            "user": "Kamil.S",
            "time": "Dec 5, 2022 at 20:22",
            "is_accepted": false,
            "comments": []
        }
    ]
}