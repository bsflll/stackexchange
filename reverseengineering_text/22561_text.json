{
    "title": "Break when exe send tcp packet",
    "link": "https://reverseengineering.stackexchange.com/questions/22561/break-when-exe-send-tcp-packet",
    "content": "When I debug <pre><code>.exe</code></pre> file with IDA, I want to put a breakpoint before the <pre><code>.exe</code></pre> sends a TCP packet.\nWhen I listen with ProcMon I can see that this <pre><code>.exe</code></pre> sends and receives TCP packets.\n\nI look at the <pre><code>.exe</code></pre> file import tab, and put a breakpoint at <pre><code>send</code></pre> function, but that doesn't trigger.\nI looking at the line at ProcMon when I see <pre><code>tcp send</code></pre> in stack tab, and see:\n\n<pre><code>frame 0 ,module ntoskrnl.exe  , Location CcMdlWriteAbout + 0x....\nframe 1 ,module tcpip.sys , Location tcpip.sys + 0x....\nframe 2 ,module tcpip.sys , Location tcpip.sys + 0x....\n</code></pre>\netc.\nHow can I find the function in the <pre><code>.exe</code></pre> file that sends TCP packets? I want to put breakpoint there.\n",
    "votes": "1",
    "answers": 1,
    "views": "208",
    "tags": [
        "ida",
        "dynamic-analysis",
        "networking"
    ],
    "user": "joif doi",
    "time": "Apr 23, 2024 at 11:42",
    "comments": [],
    "answers_data": [
        {
            "content": "If you can  see the send event in ProcMon, just double click it and check the Stack tab to see what API the program used to perform it. Note that the stack trace usually includes the kernel part; youâ€™ll need to skip it and look at the user-mode calls (skip the system libraries too except the one called directly by the process).\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Nov 17, 2019 at 13:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "joif doi",
                    "text": "<span class=\"comment-copy\">in ProcMon Stack tab I see only ntosknl.exe  , and the rest is <code>.sys</code> Modules</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@joifdoi there <i>should</i> be some user-mode code in there unless the send actually originates in a driver... which is possible but unlikely</span>",
                    "time": null
                },
                {
                    "user": "Ivan",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky what exact stack should we see in ProcMon? AFAIK for example <code>socket.send()</code> in python will call the needed syscall under the hood, and ProcMon will not be able to track what caused the call except it somehow knows debug symbols of program or maybe the app is built without stripping the debug info</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@Ivan on Windows, raw syscalls are not used by user-mode programs. <code>WS2_32.dll</code> <code>send()</code> will likely be used in such case.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky it depends on the program, I reckon. True it may not be syscalls (which are tricky to wield correctly because their numbers vary across patch levels), but it could conceivably be use IOCTLs to talk to <code>\\Device\\Afd</code> (or similar) and achieve similar functionality as through the usual UM APIs. However, my guess here would be that another module is making the actual call, if the breakpoint on the module itself doesn't trigger. Of course chances are the program behaves differently under a debugger and this being the cause for the bpx not triggering.</span>",
                    "time": null
                }
            ]
        }
    ]
}