{
    "title": "Does x86 instruction SHL/SHR actually rotate the bits?",
    "link": "https://reverseengineering.stackexchange.com/questions/15167/does-x86-instruction-shl-shr-actually-rotate-the-bits",
    "content": "I was debugging a program. When the register di=0x01, cl=0x11,\nThe instruction \"shl  di,cl\" will actually make di=0x1.\nShouldn't the bits that slide off the end disappear?\n",
    "votes": "0",
    "answers": 3,
    "views": "2k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "user15580",
    "time": "Jul 17, 2017 at 18:24",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "how are your debugging it?\n",
            "time": null
        },
        {
            "user": "mrexodia",
            "text": "They do not rotate. For rotation you have <pre><code>rol</code></pre> and <pre><code>ror</code></pre>. The instruction <pre><code>shr</code></pre> does however keep the sign bit if it's set.\n",
            "time": null
        },
        {
            "user": "julian",
            "text": "CLI is an instruction (\"Clear Interrupt\"), not a register. What is \"cli=0x11\" supposed to mean?\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "I also think your observation is incorrect.  I don't know of any circumstances in which \"shl di,cl\" causes di to be unchanged when cl has any of the low 4 bits set.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "(Disregarding the example in the question as it clearly has typos.)\nThe higher bits of the shift amount are ignored, unless you're running your program on an original 8086: See \"IA-32 Architecture Compatibility\" at the bottom of the page.\n",
            "votes": "2",
            "user": "Leo B.",
            "time": "Apr 18, 2017 at 16:03",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Full disclosure: I am the author of the following article.\nAccessing and Modifying Upper Bits in x86 and x64 Registers\nThe aim of the article is to provide the reader with a detailed, example- and code-laden explanation of exactly how the shift and rotate instructions work in both x86 and x64 contexts. The examples therein are directly applicable to OP's inquiry.\n",
            "votes": "1",
            "user": "dsasmblr",
            "time": "Jul 18, 2017 at 17:42",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "SHL and SHR work using the following syntax dest, count\nnow di is a 16 bit register and CL is basically the count (3)\nso you are right it should be zeroed out and you can prove this by using a online x86 emulator\nhttp://carlosrafaelgn.com.br/asm86/\nand enter the following asm instructions:\nmov di, 01h\nmov cl, 11h\nshl di, cl\nso i dont know what would make it behave this way.\n",
            "votes": "0",
            "user": "TJ Nel",
            "time": "Jul 18, 2017 at 14:13",
            "is_accepted": false,
            "comments": []
        }
    ]
}