{
    "title": "objdump: can't disassemble for architecture UNKNOWN!",
    "link": "https://reverseengineering.stackexchange.com/questions/18341/objdump-cant-disassemble-for-architecture-unknown",
    "content": "I am trying to use <pre><code>objdump -d fileName</code></pre> on a s-rec file and it returns unknown architecture, however it recognizes <pre><code>fileName: file format srec</code></pre>\nI looked at <pre><code>objdump --help</code></pre> and under supported targets srec and symbolsrec is listed. \nI have tried\n<pre><code>objdump -d -M srec myFile</code></pre>\n<pre><code>objdump -d -m srec myFile</code></pre>\nWhat is the best way to tackle this? Alternatives?\n",
    "votes": "6",
    "answers": 2,
    "views": "32k",
    "tags": [
        "disassembly"
    ],
    "user": "0siris",
    "time": "May 23, 2018 at 22:00",
    "comments": [],
    "answers_data": [
        {
            "content": "SREC (aka S-Record) format is similar to raw binary - it contains just the byte values but, unlike ELF, no metadata about the CPU or OS used.\nIf you know the CPU used, you can pass it to <pre><code>objdump</code></pre> with the <pre><code>-m</code></pre> switch, e.g.:\n<pre><code>objdump -m arm -D file.srec</code></pre>\nNormally <pre><code>objdump</code></pre> should recognize the format automatically but you can also specify it explicitly with <pre><code>-b srec</code></pre>\nCommon CPUs used with these files include former Motorola series such as 6800/6812 (and derived Freescale's HC12), 68K/Coldfire but sometimes also others, e.g. 8051\nUse <pre><code>objdump -i</code></pre> to list the processors and file formats supported by your build . You may need to make a custom binutils build to support your target CPU.\n",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "May 23, 2018 at 19:05",
            "is_accepted": true,
            "comments": [
                {
                    "user": "0siris",
                    "text": "<span class=\"comment-copy\">Thank you very much for your time, as a matter of fact my target is the Motorola series. Using <code>objdump -i</code> I don't see it listed, so I might have to go the custom build path...</span>",
                    "time": null
                },
                {
                    "user": "kuch3n",
                    "text": "<span class=\"comment-copy\">You're were using a .srec file not the binary file itself. Either use the binary or use suggested <code>-b srec</code> argument: <i>Specify that the object-code format for the object files is bfdname. This option may not be necessary; objdump can automatically recognize many formats.</i>   In other words, you specify the format of the binary not the targeted architecture. S-Record or srec format: <a href=\"https://de.wikipedia.org/wiki/S-Record\" rel=\"nofollow noreferrer\">de.wikipedia.org/wiki/S-Record</a></span>",
                    "time": null
                }
            ]
        },
        {
            "content": "In case this ends up being useful for anyone else, I had the same exact error, but it was in a cross-compilation project. My problem was that my CMake toolchain was erroneously setting CMAKE_OBJDUMP to /usr/bin/objdump instead of /usr/bin/arm-none-eabi-objdump. I fixed this by forcing my toolchain.cmake file to use /usr/bin/arm-none-eabi-objdump and /usr/bin/arm-none-eabi-objcopy, by adding these lines to my toolchain.cmake BEFORE any calls to find_program(...):\n<pre><code>unset(CMAKE_OBJCOPY CACHE)\nunset(CMAKE_OBJDUMP CACHE)\n</code></pre>\nMy CMake version is 3.16.3. I submitted a bug report for this here: https://gitlab.kitware.com/cmake/cmake/-/issues/20787\n",
            "votes": "1",
            "user": "Mark Betters",
            "time": "Jun 3, 2020 at 21:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}