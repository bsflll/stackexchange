{
    "title": "Tools for annotating/describing disassembly [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/2381/tools-for-annotating-describing-disassembly",
    "content": "This question already has answers here:\n                                \n                            \n\n\n\n\nHow do you store your data about a binary while performing analysis?\n\n                                (5 answers)\n                            \n\nClosed 11 years ago.\n\n\n\nWhen using IDA Pro, there are a number of features that can be used to make reading the disassembled code far easier - renaming variables, defining data structures, colouring blocks of code, moving blocks of code about (in addition to the graph, which is very useful).\nIf you use a conventional disassembler, this isn't available.\nTraditionally, I would use a combination of printed out code and pencil along with annotated text files to analyse the disassembly, but I feel this is a long way from what IDA Pro provides.\nAre there any tools to make this job easier? I am not looking for alternative graphical disassemblers to IDA as there will always be times when you are limited to the output from tools such as objdump or proprietary command line utilities.\n",
    "votes": "2",
    "answers": 1,
    "views": "1k",
    "tags": [
        "tools",
        "disassembly"
    ],
    "user": "Cybergibbons",
    "time": "11 years ago",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "\"there will always be times when you are limited to text listings\" -- I'm not sure I agree with this. Aside from people posting short snippets of assembly code on forums such as this one from time to time, I find I'm never \"limited to text listings.\" Can you provide more context regarding the situations in which you find yourself?\n",
            "time": null
        },
        {
            "user": "PSS",
            "text": "Are you trying to find improved ways to document your work ? Please clarify.\n",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "PSS, I'm looking for tools to help read, annotate, describe and work with disassembled code.\n",
            "time": null
        },
        {
            "user": "Cybergibbons",
            "text": "Jason Geffner, if I objdump some code from a hex file, all I am left with is a text listing of disassembly.\n",
            "time": null
        },
        {
            "user": "Jason Geffner",
            "text": "@Cybergibbons - If you want to annotate a disassembly then you should be using IDA, not objdump. A big part of reverse engineering is using the right tool for the right job.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I agree with comments above. IDA Pro does offer everything one might need to annotate your work and keep it organized. IDA Pro offers four types of comments: \n\nRegular Comments. Regular comments are placed at the end of each assembly line and pretty straight forward to use. In order to insert regular comment you could just right-click in the right margin of the assembly or press colon (:) hot key.\nRepeatable Comments. Repeatable comment is a comment which automatically appears in multiple locations. It behaves in cross-reference like manner. For example, repeatable comment put on <pre><code>je short 121212</code></pre> would not only show next to the instruction, but will also propagate to <pre><code>121212</code></pre> address. Basically, original comment gets echoed to the referenced location. One can place repeatable comment by pressing semicolon (;) hotkey.\nAnterior and Posterior Lines. Anterior and posterior lines are full-line comments, which one can place before or after disassembly line. These type of comments is not prefixed with semicolon character.\nFunction Comment. Function comments are comments grouped on the top or the bottom of the function. Those are very useful to create notes on function prototypes. Function comments are created by highlighting function name and creating regular comment or repeatable comment. Please note, in case you create repeatable comment, it will get echoed to every location the function is called from.\n\nIt almost feels like you are trying to find ways to improve your workflow. What makes the most sense to me is to have your workflow organized in certain predetermined and structured way, get consistent with it, and constantly improve on it.\nSeveral things might help you organize your workflow:\n\nCreate predefined sub-directory for each project you work with. You can create an empty template sub-directory structure, which you can copy to new project. It will stay consistent  through out different projects and will make it very easy to store, navigate and search for stuff. Think of what makes sense to you. Ultimately, it needs to make sense to you and work for you. \nCreate report template. Again, you can have it anyway you like it. The important thing is to have a template. You can build and improve on it as you go. As an example, I have my working version of a report divided into two main sub-sections: static analysis and execution. I describe everything 'stationary' about a binary in my static analysis. In addition, I use 'execution' section to describe what happens whenever binary runs. \nMaintain notes in organized manner. You can run a file where you maintain your notes in a structured way. Again, it is very much arbitrary thing. Whatever works for you. I prefer not to clutter IDA with excessive comments. For example, I like to create C-style representation of stuff. I usually keep it at the end of the 'notes' file. Other comments go in front. \n\nEventually, we are users, who 'drive' tools. \nRemember, at times a great tool is as good as one who uses it ;)\n",
            "votes": "5",
            "user": "PSS",
            "time": "Jun 30, 2013 at 2:21",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Cybergibbons",
                    "text": "<span class=\"comment-copy\">Thanks, this is a great answer. Can you load arbitrary disassembly into IDA? All three microcontrollers I am working with at the moment aren't supported, and writing a new processor module seems very time consuming.</span>",
                    "time": null
                },
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">I am not sure. I never had to deal with anything that IDA doesn't support in my line of work. It is a great question to ask next though :)</span>",
                    "time": null
                },
                {
                    "user": "Jason Geffner",
                    "text": "<span class=\"comment-copy\">\"writing a new processor module seems very time consuming\" - You may want to take a look at <a href=\"http://www.hexblog.com/?p=116\" rel=\"nofollow noreferrer\">hexblog.com/?p=116</a> - still time consuming, but hopefully less so.</span>",
                    "time": null
                },
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">@cybergibbons You should consider opening another question and provide specifics on what microcontroller you are working with.</span>",
                    "time": null
                }
            ]
        }
    ]
}