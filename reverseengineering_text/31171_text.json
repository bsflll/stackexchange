{
    "title": "How can I verify section -> segment mapping for ELFs on linux?",
    "link": "https://reverseengineering.stackexchange.com/questions/31171/how-can-i-verify-section-segment-mapping-for-elfs-on-linux",
    "content": "I'm looking at at ELF on linux and I have <pre><code>readelf --segments ./myELF</code></pre> which shows:\n<pre><code>Program Headers:\n  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align\n  PHDR           0x000040 0x0000000000400040 0x0000000000400040 0x0001f8 0x0001f8 R   0x8\n  INTERP         0x000238 0x0000000000400238 0x0000000000400238 0x00001c 0x00001c R   0x1\n      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]\n  LOAD           0x000000 0x0000000000400000 0x0000000000400000 0x000ad8 0x000ad8 R E 0x200000\n  LOAD           0x000e00 0x0000000000600e00 0x0000000000600e00 0x000250 0x000260 RW  0x200000\n  DYNAMIC        0x000e10 0x0000000000600e10 0x0000000000600e10 0x0001e0 0x0001e0 RW  0x8\n  NOTE           0x000254 0x0000000000400254 0x0000000000400254 0x000044 0x000044 R   0x4\n  GNU_EH_FRAME   0x000940 0x0000000000400940 0x0000000000400940 0x00004c 0x00004c R   0x4\n  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10\n  GNU_RELRO      0x000e00 0x0000000000600e00 0x0000000000600e00 0x000200 0x000200 R   0x1\n\n Section to Segment mapping:\n  Segment Sections...\n   00     \n   01     .interp \n   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame \n   03     .init_array .fini_array .dynamic .got .got.plt .data .bss \n   04     .dynamic \n   05     .note.ABI-tag .note.gnu.build-id \n   06     .eh_frame_hdr \n   07     \n   08     .init_array .fini_array .dynamic .got \n</code></pre>\nI am trying to confirm whether or not the segments shown here correspond directly with the segment numbers shown in the section-segment mapping below such that segment 03 which contains <pre><code>.init_array .fini_array .dynamic .got .got.plt .data .bss </code></pre> corresponds with the fourth segment down in the top table which is of type <pre><code>LOAD</code></pre> and will thus definitely RW at runtime? What is another way to learn about the segment/section mapping at runtime? I know for example that I can use <pre><code>vmmap</code></pre> in <pre><code>gdb-gef</code></pre> at runtime to view where things are located in the process' virtual memory, but it seems that output shows a different set of memory spaces than the specific concept of \"segments\" or \"sections\".\n",
    "votes": "3",
    "answers": 1,
    "views": "464",
    "tags": [
        "linux",
        "gdb",
        "elf"
    ],
    "user": "the_endian",
    "time": "Nov 24, 2022 at 16:53",
    "comments": [],
    "answers_data": [
        {
            "content": "What you're seeing in <pre><code>gdb</code></pre> with the <pre><code>vmmap</code></pre> command is the region allocations. To determine which region a section has been loaded in you can use the <pre><code>maintenance info sections</code></pre> command.\nFor example:\n<pre><code>gef➤  vmmap \n[ Legend:  Code | Heap | Stack ]\nStart              End                Offset             Perm Path\n0x00000000400000 0x00000000401000 0x00000000000000 r-x /home/...\n0x00000000600000 0x00000000601000 0x00000000000000 r-- /home/...\n0x00000000601000 0x00000000602000 0x00000000001000 rw- /home/...\n</code></pre>\nThe writable region starts at 0x00000000601000.\n<pre><code>gef➤  maintenance info sections\nExec file: `/home/...', file type elf64-x86-64.\n...\n [23]     0x00601040->0x00601044 at 0x00001040: .data ALLOC LOAD DATA HAS_CONTENTS\n [24]     0x00601044->0x00601048 at 0x00001044: .bss ALLOC\n...\n</code></pre>\nOnly the <pre><code>.data</code></pre> and <pre><code>.bss</code></pre> sections are within the writable region at runtime.\n",
            "votes": "2",
            "user": "Mega Tonnage",
            "time": "Nov 25, 2022 at 1:11",
            "is_accepted": false,
            "comments": [
                {
                    "user": "the_endian",
                    "text": "<span class=\"comment-copy\">Thanks. So one followup here - my ELF has a situation where the .got shows this when I run <code>maintenance info sections</code>: <code>[21] 0x00600ff8-&gt;0x00601000 at 0x00000ff8: .got ALLOC LOAD DATA HAS_CONTENTS</code>, however, in the <code>vm</code> readout, the permission is only <code>r--</code>. So now I'm wondering why the <code>maint info sections</code> listing doesn't also show the <code>READONLY</code> tag? I would expect that tag would be applied since according to <code>vm</code> that memory is in fact only readonly, but it's not. See reference example: <code>0x00400520-&gt;0x00400722 at 0x00000520: .text ALLOC LOAD READONLY CODE HAS_CONTENTS</code></span>",
                    "time": null
                },
                {
                    "user": "Mega Tonnage",
                    "text": "<span class=\"comment-copy\">I'm not sure... just guessing, the GOT is fixed up by the loader so it does need to be writable at least at some point while the process is being started.</span>",
                    "time": null
                }
            ]
        }
    ]
}