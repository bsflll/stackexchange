{
    "title": "How to deal with this “lea” instructions generated by objdump?",
    "link": "https://reverseengineering.stackexchange.com/questions/4288/how-to-deal-with-this-lea-instructions-generated-by-objdump",
    "content": "So basically I am using <pre><code>objdump</code></pre> to disassemble a binary from `GNU Coreutils\", on 32 bit Linux x86.\nIn the disassembled code, I found one \"broken\" instruction like this:\n<pre><code> 804bb49:   8d 04 ed 00 00 00 00    lea    0x0(,%ebp,8),%eax\n</code></pre>\nI asked a related question about a very similar instruction here, in that question, I think it should be a jump table related instruction, but how about this one ? I am quite confused..\nCould anyone give me some help?\n",
    "votes": "3",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly",
        "assembly",
        "objdump"
    ],
    "user": "lllllllllllll",
    "time": "Apr 28, 2017 at 12:54",
    "comments": [
        {
            "user": "yaspr",
            "text": "You should update your question & be more precise. I cannot seem to understand what you mean by \"broken\" from the code you provided.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I don't know what makes you think this instruction is \"broken\" - the fact that there is a comma right after a bracket, without a parameter in between? In this case, the disassembler just doesn't show the parameter because it's \"zero\" (more precisely, it specifies \"no register\" where \"any processor register\" would be allowed).\nWhat happens here is: when addressing memory locations, the processor has a mode where it adresses \n\na base offset\nplus the content of one processor register\nplus the content of another processor register, multiplied by an integer that can be 1,2,4 or 8\n\nThis calculation is quite fast, as it's done in special hardware in the address bus subsystem.\nThe <pre><code>lea</code></pre> (load effective address) instruction is a special kind of RAM access -- it calculates the address of the operand, but then, it moves the address, not the data at that address, into the destination register.\nSo your 'broken' instruction moves a base offset of 0, plus \"no\" first register, plus 8 times the content of ebp, into eax. The same could have been done by moving ebp to eax and multiplying by 8, or moving and shifting left by 3 bits, but the <pre><code>lea</code></pre> instruction is probably a bit faster (because, as i said, it's done in specialized address bus hardware), so the compiler used that one to save a few cycles. Nothing is broken here.\nYou might want to take a look at a i386 assembler reference when disassembling, the indirect adressing is quite well explained in the OS X Assembler reference, scroll down to \"Indirect Memory Operands\".\n",
            "votes": "5",
            "user": "Guntram Blohm",
            "time": "May 8, 2014 at 8:38",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "what does broken mean \nthe instruction in either this post or in your earlier post do not seem to be broken \nif you are confused with AT&T syntax then you can ask objdump to disassemble in intel syntax\na better explanation of broken can get a better answer \n<pre><code>root@box:/home/dsl/gcctests/test# cat testjt.c \nvoid naked (void)\n{\n        asm( \".globl _naked\n\");\n        asm( \"_naked:\n\");\n        asm( \"jmp *0x80509e4(,%eax,4)\");\n        asm( \"lea 0x0(,%ebp,8),%eax\");\n        asm( \"ret\");\n}\nint main (void)\n{\n        naked();\n        return 0;\n}\n\n\nroot@box:/home/dsl/gcctests/test# objdump -t ./testjt | grep _naked\n08048357 g       .text  00000000              _naked\n\n\nroot@box:/home/dsl/gcctests/test# objdump -d --disassembler-option=intel  ./testjt | grep -A 2 _naked\n\n\n08048357 <_naked>:\n 8048357:       ff 24 85 e4 09 05 08    jmp    DWORD PTR [eax*4+134547940]\n 804835e:       8d 04 ed 00 00 00 00    lea    eax,[ebp*8]\n\n\nroot@box:/home/dsl/gcctests/test#  \n</code></pre>\n",
            "votes": "5",
            "user": "blabb",
            "time": "May 8, 2014 at 9:04",
            "is_accepted": false,
            "comments": []
        }
    ]
}