{
    "title": "Which BHC error correction code produces non-zero code for all-zero data input",
    "link": "https://reverseengineering.stackexchange.com/questions/33288/which-bhc-error-correction-code-produces-non-zero-code-for-all-zero-data-input",
    "content": "I am reversing a raw flash image (Micron MT29F16G08ABACA), and I am currently stuck trying to find the correct ECC algorithm.\nWhat I know thus far:\n\n1 page = 4096 bytes data + 224 bytes OOB (out of band) data\nThe 224 OOB consists of 32 bytes unknown data and 192 bytes (8 * 24) of ECC data\nThe 4096 bytes page is split in 512 byte sections, every section corresponding to 24 bytes of ECC data\nAccording to the datasheet, the ECC algorithm can correct up to 8 bits per section of 540 bytes (512 + 24 ECC + 4 byte unknown OOB).\n\n\nMinimum required ECC 8-bit ECC per 540 bytes of data\n\n\nA block of 512 zero bytes results in ECC <pre><code>13 79 62 F8 E0 97 77 B9 C5 AD 81 19 81 DE 84 BF 18 B6 54 53 B4 79 21 42</code></pre>\nA block of 512 FF bytes results in ECC full of FF.\n\nMy guess would be a BCH ECC algorithm. But all BHC algorithms I could find result in an all-zero ECC code corresponding with an all-zero data input.\nI did find this relevant github project (github.com/cyberdong/bch_encoder_decoder), which appears to contain a leaked ECC algorithm for the same family of Micron Nand Flash devices.\nBut even this encoder is generating an all-zero ECC code for an all-zero data input.\nWhich ECC algorithm could this be?\nIs it possible to have a BCH encoder to generate a non-zero ECC code for an all-zero data input?\n",
    "votes": "0",
    "answers": 0,
    "views": "55",
    "tags": [
        "encryption",
        "flash",
        "unknown-data",
        "checksum"
    ],
    "user": "Suske Lambik",
    "time": "Nov 3, 2024 at 15:45",
    "comments": [],
    "answers_data": []
}