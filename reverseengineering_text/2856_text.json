{
    "title": "How to Attach debugger or start analysis of process that is debugging itself?",
    "link": "https://reverseengineering.stackexchange.com/questions/2856/how-to-attach-debugger-or-start-analysis-of-process-that-is-debugging-itself",
    "content": "I need and advice on how to start an analysis, connect with debugger to a process that is already debugging itself. Are there any tools/plugins/techniques that might help during the analysis?\nUPDATE\nIf I connect to the parent process with a debugger then I'll be able to see the Debug events that are being processed. How can I see/monitor what is going on in the child (debug-gee) process?\n",
    "votes": "8",
    "answers": 2,
    "views": "2k",
    "tags": [
        "windows",
        "anti-debugging"
    ],
    "user": "PhoeniX",
    "time": "Oct 11, 2013 at 13:19",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "I don't have a solution, but you may want to look at this plugin.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Call <pre><code>NtSuspendProcess()</code></pre> on the child process.\nInject code into the parent process to call <pre><code>DebugActiveProcessStop()</code></pre> on the child process.\nAttach your debugger to the child process.\nCall <pre><code>NtResumeProcess()</code></pre> on the child process.\n",
            "votes": "6",
            "user": "Jason Geffner",
            "time": "Sep 29, 2013 at 16:53",
            "is_accepted": false,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Thanks! The problem is that removing the parent from  the loop will break the logic chain as it is responsible for proper execution of the child. I'll update my first question.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "After some hands on experience here what I can suggest regarding debugging self-debugging processes. Here I take the assumption that the self-debugging is implemented based on Windows Debug APIs. So, here are my findings:\nIn \"debugger\" process: \n\nAttach/run with your debugger the process you want to study\nLook for a call to CreateProcess API with the flags DEBUG_ONLY_THIS_PROCESS or DEBUG_PROCESS\nFollow to the closest call to WaitForDebugEvent. Usually this will be a loop for processing of all the debug event that will come from the debug-gee.\nOnce the event processing region was found, all is needed is to check what event exactly is being processed. Check your event according to MSDN\nIn several cases there will be pair call to Get/SetThreadContext. So analyzing the structure before the SetThreadContext is called, one can actually see what region of the debug-gee was altered (if you did not know it already). \nAfter all the alternations, there will be finally call to ContinueDebugEvent/ZwContinue. Until it was called the debug-gee is in freeze for the inspection.\n\nIn \"debug-gee\" process:\n\nAttach WinDbg to it in non-invasive mode to inspect what was changed.\nMake your notes before continue.\n\nHope this will help.\nYour comments are more than welcome.\n",
            "votes": "2",
            "user": "PhoeniX",
            "time": "Oct 11, 2013 at 9:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}