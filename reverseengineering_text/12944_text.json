{
    "title": "Has anyone tried ptrace_attaching android unity apps for anti debugging?",
    "link": "https://reverseengineering.stackexchange.com/questions/12944/has-anyone-tried-ptrace-attaching-android-unity-apps-for-anti-debugging",
    "content": "I am trying to <pre><code>ptrace_attach</code></pre> the main process and its threads (<pre><code>/proc/<pid>/task</code></pre>) of an android unity app to avoid malicious users debugging the app(which is a game). \nI developed a ndk library that forks from main process and <pre><code>ptrace_attach</code></pre> the parent process(being the main process) inside the <pre><code>JNI_OnLoad()</code></pre> function. After that periodically checks the <pre><code>/proc/<pid>/task</code></pre> folder to attach newly created threads. \nThe problem is, \nthis works well in normal apps but when I try to run this inside an app made with unity, the main process stops and screen becomes black or white not responding. But if you delay attaching a few seconds just enough to see the animation working on the screen, attaching works fine.\nCode is roughly something like this:\n<pre><code>if(!fork())\n{\n     parentPid = getppid();\n\n     // attach parent process\n     if(ptrace(PTRACE_ATTACH,parentPid,0,0)<0)\n          exit(-1);\n     ptrace(PTRACE_SETOPTIONS, parentPid, 0, PTRACE_O_TRACEEXEC| PTRACE_O_TRACEVFORKDONE|PTRACE_O_TRACESYSGOOD |PTRACE_O_TRACEFORK |PTRACE_O_TRACEVFORK |PTRACE_O_TRACECLONE );\n\n     while(true)\n     {\n          // get signal from processes\n          stoppedPid = waitpid(-1,&stat_loc, 0);\n\n          ...\n\n          // check if stoppedPid need to be attached\n          // if so, attach\n          ptrace(PTRACE_ATTACH,stoppedPid,0,0);\n\n          ...\n\n          // else, just continue the stopped process\n          ptrace(PTRACE_CONT,stoppedPid,0,0);\n     }\n }\n</code></pre>\nMaybe I should adjust the <pre><code>ptrace_setoptions</code></pre> ?\nThanks in advance :)\n",
    "votes": "1",
    "answers": 1,
    "views": "1k",
    "tags": [
        "android",
        "anti-debugging"
    ],
    "user": "Jaewon Min",
    "time": "Jun 28, 2016 at 1:19",
    "comments": [
        {
            "user": "Jaewon Min",
            "text": "I forgot to add that this happens in android 6.0.0\n",
            "time": null
        },
        {
            "user": "Jaewon Min",
            "text": "Also with different options for waitpid like __WALL etc\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Well somethings I found out - \nWhen I <pre><code>ptrace_attach</code></pre> the main process of the target app and wait for signals, \nI get SIGSEGV signal while app loads and just hangs there(because forked process cannot handle SIGSEGV). In the java code, it seems SIGSEGV occurs while calling View related functions. \nI guess UnityPlayer or Android app loader handles SIGSEGV smoothly while app loading time. Therefore, if you get a SIGSEGV, simply detaching it and attaching again does not hang the app.\n",
            "votes": "0",
            "user": "Jaewon Min",
            "time": "Jul 6, 2016 at 9:22",
            "is_accepted": true,
            "comments": []
        }
    ]
}