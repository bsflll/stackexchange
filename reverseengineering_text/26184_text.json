{
    "title": "Analyzing raw binary without ELF header in IDA Pro",
    "link": "https://reverseengineering.stackexchange.com/questions/26184/analyzing-raw-binary-without-elf-header-in-ida-pro",
    "content": "I am trying to analyze and disassemble a raw binary that does not have an ELF header using IDA Pro.\nI have been trying to convert to code using MakeCode, but have not gotten anywhere as the binary is quite large.\nI know it is supposed to be a 32 bit LSB binary, and Ghidra decompiles the same raw binary without any problems. However, I do prefer the IDA decompiler to Ghidra which is why I am trying to make it work in IDA as well.\nThe main problem is that the list of functions is missing (due to missing headers of course), but this does not seem to be a problem for Ghidra.\nIs it possible to get the same result in IDA as I get in Ghidra? If so, how? What is the correct way to analyze raw binaries in IDA Pro / Hex-Rays?\n",
    "votes": "0",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "ghidra",
        "hexrays"
    ],
    "user": "Nicolai Prebensen",
    "time": "Oct 27, 2020 at 10:27",
    "comments": [],
    "answers_data": [
        {
            "content": "Yes, it's possible.\nIn order to do that you should choose on the landing page the correct architecture:\n\nThe file will open without any functions, in it's raw form.\nThen go to the beginning of the file, press the left mouse button, hold <pre><code>shift</code></pre> key, and scroll to the bottom of the file.\nWhen all the disassembly is selected press <pre><code>c</code></pre> button and choose analyze/force on the pop-up. That should do the trick.\n",
            "votes": "0",
            "user": "macro_controller",
            "time": "Oct 27, 2020 at 11:42",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Nicolai Prebensen",
                    "text": "<span class=\"comment-copy\">Thank you for providing an answer. I set the processor type to <code>Intel 80686p</code> to represent a somewhat similar CPU to Ghidras <code>Intel/AMD 32-bit x86</code>, and that somewhat worked, but after the analysis I had to convert certain labels to functions manually with <code>p</code>.   The pseudocode after decompilation in IDA is still lacking certain parts that Ghidra has though.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\"><a href=\"https://www.hex-rays.com/blog/igor-tip-of-the-week-04-more-selection/\" rel=\"nofollow noreferrer\">hex-rays.com/blog/igor-tip-of-the-week-04-more-selection</a></span>",
                    "time": null
                },
                {
                    "user": "Nicolai Prebensen",
                    "text": "<span class=\"comment-copy\">Thank you Igor. Although I did not accomplish my goal since I am working with a custom CTF challenge file, this and the response of @macro_controller seems to be the correct answer to this question.</span>",
                    "time": null
                }
            ]
        }
    ]
}