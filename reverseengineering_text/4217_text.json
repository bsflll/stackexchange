{
    "title": "ARM shellcode for linux - svc 0 vs svc 1",
    "link": "https://reverseengineering.stackexchange.com/questions/4217/arm-shellcode-for-linux-svc-0-vs-svc-1",
    "content": "Checking out Linux <pre><code>ARM</code></pre> shellcode I see that the system call is made by using the <pre><code>svc 1</code></pre> instruction. However, I have also seen examples where they use <pre><code>svc 0</code></pre> as the instruction that calls the system call.\nEvidently, system calls in Linux on <pre><code>ARM</code></pre> can be performed using both <pre><code>svc 0</code></pre> and <pre><code>svc 1</code></pre>. Why is this the case as opposed to architectures such as <pre><code>x86</code></pre>. Are the kind of interrupts generated by both these instructions the same?\n",
    "votes": "6",
    "answers": 1,
    "views": "7k",
    "tags": [
        "arm",
        "shellcode"
    ],
    "user": null,
    "time": "Apr 30, 2014 at 20:03",
    "comments": [
        {
            "user": "Vitaly Osipov",
            "text": "It's the same interrupt. The #imm parameter part (0, 1 etc) is ignored by Linux IIRC.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I suppose you should check this part of the <pre><code>ARM</code></pre> documentation, and this description of <pre><code>svc</code></pre> and its parameters. By cross referencing the two links you'll find an answer to your question.\nFrom the links above you'll be able to understand what the parameter of the <pre><code>svc</code></pre> instruction represents. It is supposed to be ignored by the <pre><code>CPU</code></pre> but the exception handler can use that parameter to determine the service being requested : <pre><code>ARM</code></pre> instruction if the value is between 0 & 16777215, or <pre><code>Thumb</code></pre> instruction if the value is between 0 & 255.\nThe thumb instruction set is a compact 16bit encoding for ARM instructions. It was mainly designed & implemented for compact code-density. You can check the Wikipedia page about the <pre><code>ARM</code></pre> architecture for more information, but I would recommend you going through the <pre><code>ARM</code></pre> documentation for accurate technical details.\n",
            "votes": "3",
            "user": "yaspr",
            "time": "May 2, 2014 at 11:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xea",
                    "text": "<span class=\"comment-copy\">could you add a short answer derived from those links ?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">Here we go :done !</span>",
                    "time": null
                }
            ]
        }
    ]
}