{
    "title": "ARM system crashes after changing stack address",
    "link": "https://reverseengineering.stackexchange.com/questions/16931/arm-system-crashes-after-changing-stack-address",
    "content": "-- Edit with latest update on the problem, it is not solved yet :( --\nWhile playing with an ARM embedded Linux system (Version 3.8.13), out of curiosity, I created a small \"debug\" kernel module.\nThis \"debug\" module branches a specific flow in another kernel module to a function in this \"debug\" module, which executes some logic and then resumes execution peacefully.\nTo avoid clutter of the stack area, the first executed logic is changing SP to point at an empty area inside the \"debug\" module code section.\nThe system crashes couple of seconds after executing <pre><code>mov sp, r2</code></pre>, and entering an infinite loop. (<pre><code>r2</code></pre> holds the address to the empty area).\nNote that the crash happens before the \"debug\" module executes any stack-related opcode (or actually any other opcode, for that matter).\nSo I conducted the following checks:\n\nMade sure the address is 4-byte aligned\nChanged area to write-able, and big enough to hold a full context switch that is saved on the stack (about 0x300 bytes)\nChanging <pre><code>sp</code></pre> value by small amounts (+-0x100) - did not crash the system\nChanging <pre><code>sp</code></pre> to some arbitrary value - crashed the system.\nChanging <pre><code>sp</code></pre> momentarily and then immediately restoring its value does not crash the system\nChanging <pre><code>sp</code></pre> momentarily, executing an STMFD operation and then immediately restoring <pre><code>sp</code></pre>'s value does not crash the system!\n\nFrom the last test, it's pretty clear that when a context-switch happens, some values are being saved on the stack. If it points to that free area, the system crashes\nIt seems that there isn't any problem with using stack operations on the free area, but yet when some context-switch happens, the system crashes.\nFeasible ideas\n\nIs there a constraint on possible values of the <pre><code>sp</code></pre> register? (Kernel configuration, perhaps? Specific bits of the address?)\nThe code section has some sort of protection against being used as a stack when used outside of the current module?\nContext-switch requires more than 0x300 bytes of space?\n\nThanks!\n",
    "votes": "2",
    "answers": 1,
    "views": "194",
    "tags": [
        "debugging",
        "linux",
        "arm",
        "stack"
    ],
    "user": "Tals",
    "time": "Dec 12, 2017 at 8:29",
    "comments": [
        {
            "user": "xvk3",
            "text": "You say \"The system crashes right after executing mov sp, r2\". Yet you are able to \"momentarily\" change sp.\n",
            "time": null
        },
        {
            "user": "Tals",
            "text": "Yes, what I meant that executing <pre><code>mov sp, r2</code></pre> and then entering a loop crashes the system after couple of seconds, where executing <pre><code>mov r3, sp</code></pre>, <pre><code>mov sp, r2</code></pre> and then <pre><code>mov sp, r3</code></pre> does not crash the system at all. I added a clarification in my post.\n",
            "time": null
        },
        {
            "user": "xvk3",
            "text": "Are there equal numbers of push-pop / call-ret pairs in the loop? Is the stack pointer preserved between each loop iteration?\n",
            "time": null
        },
        {
            "user": "Tals",
            "text": "Said loop is just a branch to the same address of the loop. Like I mentioned in the post - there aren't any stack-related opcodes executed after any of my tests.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "If you are setting the stack pointer to a point in the code section, most likely that page does not have write access permission enabled so when the processor starts to write on the stack you immediately generate a permission data abort fault.\nYou need to set the stack pointer to a valid page in memory which has read/write permissions set instead of read-only. Take a look at the memory access control section under the virtual memory system architecture chapter for the ARM architecture reference manual.\n",
            "votes": "1",
            "user": "cimarron",
            "time": "Dec 7, 2017 at 20:33",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Tals",
                    "text": "<span class=\"comment-copy\">That sounded like a possibility so I set the SP to that empty spcae, pushed two values and then immediately restored its value. <b><i>The system did not crash</i></b>. This means that the code page is writable and stack operations are working.</span>",
                    "time": null
                },
                {
                    "user": "cimarron",
                    "text": "<span class=\"comment-copy\">Can you post the kernel panic you are getting?</span>",
                    "time": null
                },
                {
                    "user": "Tals",
                    "text": "<span class=\"comment-copy\">In this specific embedded system the panics are written to a specific file. For some reason nothing is written on these crashes...Best guess is that since SP has been changed, whatever tries to dump the kernel panic message tries to access data from it, fails, and crashes itself.</span>",
                    "time": null
                }
            ]
        }
    ]
}