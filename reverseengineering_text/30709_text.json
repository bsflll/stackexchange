{
    "title": "Getting \"Flow analysis was incomplete, some code may be missing\" on WinDbg",
    "link": "https://reverseengineering.stackexchange.com/questions/30709/getting-flow-analysis-was-incomplete-some-code-may-be-missing-on-windbg",
    "content": "I wanted to perform static analysis on the Win32 function <pre><code>CreateFileW</code></pre>, so I loaded <pre><code>kernel32.dll</code></pre> using WinDbg and perform the command <pre><code>uf kernel32!CreateFileW</code></pre>.\nBut I am seeing the following output instead.\n<pre><code>0:000> uf kernel32!CreateFileW\nFlow analysis was incomplete, some code may be missing\nkernel32!CreateFileW:\n00000001`80024b60 ff2582d50500    jmp     qword ptr [kernel32!_imp_CreateFileW \n(00000001`800820e8)]\n0:000> uf kernel32!_imp_CreateFileW\nNo code found, aborting\n</code></pre>\nDid I made any mistake?\n",
    "votes": "2",
    "answers": 1,
    "views": "159",
    "tags": [
        "windows",
        "x86-64",
        "windows-10"
    ],
    "user": "caramel1995",
    "time": "Jul 29, 2022 at 16:43",
    "comments": [],
    "answers_data": [
        {
            "content": "kernel32!CreateFileW is just a thunk in latest windows\nwhich can be observed by the import call\n<pre><code>jmp     qword ptr [kernel32!_imp_CreateFileW (00000001`800820e8)]\n</code></pre>\nThe Function is implemented in kernelbase!CreateFileW\nYou cannot disassemble a pointer like you do\n<pre><code>uf kernel32!_imp_CreateFileW\n</code></pre>\nx64 uses RIP relative Addressing\nyou have to add the size of instruction to the Symbols Address and add the Relative Address in the Instruction and dereference the pointer to get the correct value for performing uf\nAddress Of Symbol\n<pre><code>0:000> x KERNEL32!CreateFileW\n00007ffb`d7744b60 KERNEL32!CreateFileW (CreateFileW)\n</code></pre>\nlength of instruction = 6 (ff25eac50500)\n<pre><code>0:000> u KERNEL32!CreateFileW l1\nKERNEL32!CreateFileW:\n00007ffb`d7744b60 ff25eac50500    jmp     qword ptr [KERNEL32!_imp_CreateFileW (00007ffb`d77a1150)]\n</code></pre>\nRip Relative Constant in instruction\n<pre><code>0:000> ? dwo(KERNEL32!CreateFileW+2)\nEvaluate expression: 378346 = 00000000`0005c5ea\n</code></pre>\naddup and dereference the vale and perform uf on that offset\n<pre><code>0:000> ln poi(dwo(KERNEL32!CreateFileW+2)+KERNEL32!CreateFileW+6)\n(00007ffb`d6db9d30)   KERNELBASE!CreateFileW   |  (00007ffb`d6db9db0)   KERNELBASE!CreateFileInternal\nExact matches:\n0:000>\n</code></pre>\nwindbg already resolves the pointer  either 00000001<pre><code>800820e8 in your post or  00007ffb</code></pre>d77a1150 in my answer\nyou can directly dereference it to perform uf on the resultant offset\n<pre><code>0:000> ln poi(00007ffb`d77a1150)\n(00007ffb`d6db9d30)   KERNELBASE!CreateFileW   |  (00007ffb`d6db9db0)   KERNELBASE!CreateFileInternal\nExact matches:\n</code></pre>\n",
            "votes": "1",
            "user": "blabb",
            "time": "Aug 12, 2022 at 20:15",
            "is_accepted": false,
            "comments": []
        }
    ]
}