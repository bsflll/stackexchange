{
    "title": "What is 0xCC between each functions?",
    "link": "https://reverseengineering.stackexchange.com/questions/32547/what-is-0xcc-between-each-functions",
    "content": "First, sorry for my bad english.\nWhat I know about 0xCC instruction is a breakpoint instruction.\nBut, when I see x64 binary, each functions are seperate by multiple 0xCC instructions.\nI think x64 uses 0xCC instructinon as not only breakpoint but also function's serperator.\nSo, what 0xCC instruction means in this case? If this instruction are really means function's seperator, does it always placed between each function at least 1 single 0xCC instruction? (at least call in code section which is going to the function in code section)\nThe reason why I ask this question is, I want to make my code to verifying every binary's call instruction automatically, but some call instruction pointing invalid function. (this invalid functions are made by packer)\nWhat I considering is, if every functions are seperate by 0xCC in x64 binary, (call_address - 1) must be 0xCC and this can be one of my verifying condition.\nI hope for your guide. thank you.\n",
    "votes": "2",
    "answers": 1,
    "views": "280",
    "tags": [
        "x86-64",
        "packers"
    ],
    "user": "schnabel",
    "time": "Dec 5, 2023 at 13:15",
    "comments": [
        {
            "user": "mimak",
            "text": "it serves as a padding since the functions have various lengths - common alignments are 8-, 16- and 32B, depending on the compiler/comptime settings\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Compilers may align function addresses to some boundary as part of the optimization process.\nWhen doing this, the gap between functions is filled with padding bytes that might accidentally run as code, should something go wrong with the program's flow.\nMost common are <pre><code>0xcc</code></pre> for debug build binaries for easier debugging and <pre><code>0x00</code></pre> for release builds where a debugger is not expected to be attached.\n",
            "votes": "3",
            "user": "Yotamz",
            "time": "Dec 5, 2023 at 16:26",
            "is_accepted": true,
            "comments": []
        }
    ]
}