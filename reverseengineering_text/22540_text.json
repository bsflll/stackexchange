{
    "title": "Call function by ebp",
    "link": "https://reverseengineering.stackexchange.com/questions/22540/call-function-by-ebp",
    "content": "When I looking at exe file with Ida I see \n<pre><code>call dword ptr [ebp -70p]</code></pre>\nWhat is that? Why this function calling by ebp and not <pre><code>call sub_0xabcd</code></pre>\nHow can I know which function is that to enter to this function and see what happen there?\n",
    "votes": "2",
    "answers": 2,
    "views": "721",
    "tags": [
        "ida",
        "windows",
        "functions",
        "register"
    ],
    "user": "ffz37097.eanok.com",
    "time": "Nov 14, 2019 at 18:31",
    "comments": [
        {
            "user": "ffz37097.eanok.com",
            "text": "@Biswapriyo How can I know if this pointer to function(maybe in another dll). What should I see when I will looking at <pre><code>ebp -70p</code></pre>. ?  By the way why dword indicative for poiner to function?\n",
            "time": null
        },
        {
            "user": "ffz37097.eanok.com",
            "text": "@Biswapriyo why x64dbg is better than ida? Ida can debug exe file too...\n",
            "time": null
        },
        {
            "user": "Biswapriyo",
            "text": "I have moved my comments to the answer. You may remove the comments.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "There could be a huge number of reasons for this ranging from something as innocuous as a method pointer being a local variable to obfuscation (highly unlikely with the assembly you showed). As for how to follow it, you can either BP the call and follow it or track the frame pointer to see what it's set to.\n",
            "votes": "1",
            "user": "Pickle Rick",
            "time": "Nov 15, 2019 at 4:36",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "<pre><code>call</code></pre> instruction with local variable suggests it may be function pointer.\nBut function pointer can be used in many cases. The simplest example is a raw\nC style function pointer.\n\nMSVC command used: <pre><code>cl.exe /MDd file.c</code></pre>\nEnvironment: Intel X86\nSample C code:\n\n<pre><code>#include <stdio.h>\n\nvoid func(int a) {\n    printf(\"%d\n\", a);\n}\n\nint main(void) {\n    void (*func_ptr)(int) = &func;\n    (*func_ptr)(10);\n}\n</code></pre>\n\nIDA assembly view with only with function pointer call:\n\n<pre><code>mov     dword ptr [ebp-4], offset func  ; move function pointer to stack\npush    10                              ; push 10 for first parameter\ncall    dword ptr [ebp-4]               ; call the function pointer\nadd     esp, 4\n</code></pre>\n\nOther cases:\n\nThe function pointer can be returned by calling <pre><code>GetProcAddress()</code></pre>\nfunction which gets the address of an exported function.\nThe function pointer may be a method of an instantiated object.\nIt may be a virtual method which may be resolved at runtime.\nIt may be a real function call but the binary is dumped from memory before\nthe function import is resolved (video).\n\n\n\nHow to know what happen there? Load it in a debugger. Set a breakpoint in that\nindirect call and follow its execution procedure. Judge other subroutines also.\n",
            "votes": "1",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": false,
            "comments": []
        }
    ]
}