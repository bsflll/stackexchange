{
    "title": "Why is the ecx register used during an inc instruction",
    "link": "https://reverseengineering.stackexchange.com/questions/4641/why-is-the-ecx-register-used-during-an-inc-instruction",
    "content": "Here's code that performs some arithmetics.\n<pre><code>int main(void) {\n    int i = 3;\n    i++;\n    i+= 2;\n    return 0;\n}\n</code></pre>\nI compiled it using 32-bit <pre><code>tcc</code></pre> with the following command\n<pre><code>tcc -o hello.exe hello.c\n</code></pre>\nI, then, disassembled it using IDA free edition, and after some time staring at the <pre><code>start</code></pre> of the instructions I realized that the main function that I was looking for is in a subroutine, and going there I see this:\n<pre><code>sub_401000 proc near\n\nvar_4= dword ptr -4\n\npush    ebp               \nmov     ebp, esp           \nsub     esp, 4            // allocate 4 bytes on the stack for var i\nnop\n\nmov     eax, 3            // i = 3 instructions\nmov     [ebp+var_4], eax  // \n\nmov     eax, [ebp+var_4]  // i++ instructions\nmov     ecx, eax          // \ninc     eax               // \nmov     [ebp+var_4], eax  //\n\nmov     eax, [ebp+var_4]  // i+=2 instructions\nadd     eax, 2            //   \nmov     [ebp+var_4], eax  //  \n\nmov     eax, 0           \njmp     $+5              \nleave\nretn\nsub_401000 endp\n</code></pre>\nI've added my understanding of what's going on in comments on the right for the body of the method that I am interested in.\nFor example, incrementing the variable would involve moving a value onto a register and then operating on it. I would expect <pre><code>i++</code></pre> to look something like\n<pre><code>mov     eax, [ebp+var_4]\ninc     eax             \n</code></pre>\nBut the actual instructions involved an extra move\n<pre><code>mov     eax, [ebp+var_4]  \nmov     ecx, eax         // <----- ?\ninc     eax               \n</code></pre>\nIn the add instruction, the extra move isn't there. When I modified the code with a decrement operation, I see that extra move as well.\nIs there some purpose for this move from <pre><code>eax</code></pre> to <pre><code>ecx</code></pre> ?\nUPDATE:\nI am still reading about registers, and from what I've read <pre><code>ecx</code></pre> is used as a counter, but from this code it isn't obvious what it's being used for, if anything.\n",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "assembly",
        "x86"
    ],
    "user": "MxLDevs",
    "time": "Jun 19, 2014 at 20:49",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "possible duplicate of Why are values passed through useless copies?\n",
            "time": null
        },
        {
            "user": "Guntram Blohm",
            "text": "The counter feature of ecx is used with rep/loop instructions, which is certainly not the case here. I'd guess it's an artifact of postincrement, where the value of the expression is the unchanged value. When the compiler compiles the <pre><code>i++</code></pre> expression, it puts the old value into ecx in case some outer expression needs it; without optimizations, it never realizes there is no outer expression. Would be interesting to know if the instruction disappears when you use <pre><code>++i</code></pre> instead.\n",
            "time": null
        },
        {
            "user": "MxLDevs",
            "text": "@GuntramBlohm the instruction indeed does not appear if it were <pre><code>++i</code></pre> instead.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "TCC was written to be fast and simple without most optimizations. It compiles the program in only one pass and use a very limited number of registers (eax, ecx and edx, I think). So don't suppose for it to be efficient and don't surprise when it does something \"stupidly\".\n\nOn x86, three temporary registers are used. When more registers are needed, one register is spilled into a new temporary variable on the stack.\n\nhttp://bellard.org/tcc/tcc-doc.html#SEC31\n\nTCC generates code in a single pass, and does not perform most of the optimizations performed by other compilers such as GCC. TCC compiles every statement on its own, and at the end of each statement register values are written back to the stack and must be re-read even if the next line uses the values in registers (creating extraneous save/load pairs between statements). TCC uses only some of the available registers (e.g., on x86 it never uses ebx, esi, or edi because they need to be preserved across function calls).[4]\n\nhttps://en.wikipedia.org/wiki/Tiny_C_Compiler#Compiled_program_performance\n",
            "votes": "3",
            "user": "phuclv",
            "time": "Jun 20, 2014 at 8:38",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "The comment of Guntram Blohm is right. The original value of <pre><code>i</code></pre> is stored into <pre><code>ecx</code></pre> for a possible later use.\nISO/IEC 9899:TC3 (C99) ---\n6.5.2.4 Postfix increment and decrement operators:\n\nThe result of the postfix ++ operator is the value of the operand.\n  After the result is obtained, the value of the operand is incremented.\n  (That is, the value 1 of the appropriate type is added to it.) See\n  the discussions of additive operators and compound assignment for\n  information on constraints, types, and conversions and the effects of\n  operations on pointers. The side effect of updating the stored value\n  of the operand shall occur between the previous and the next sequence\n  point.\n\nThe sequence points are described in Annex C of the document.\nTCC performs only few optimizations, the code is generated in a single pass and every C statement is compiled on its own. It seems that the compiler is almost as simple as possible so it does not store any state during the compilation if it is not necessary.\nWhen TCC encountered the sequence point before <pre><code>++</code></pre> it did not know about the <pre><code>++</code></pre> operation. Performing the side-effect of the <pre><code>++</code></pre> operator later after evaluating the <pre><code>++</code></pre> operation would mean to store a state information. It seems that the author of TCC selected the simplest approach - to perform the side-effect together with the evaluation of the <pre><code>++</code></pre> operator.\nThe original value of the <pre><code>i</code></pre> variable (before incrementing) can possibly be used again in the same expression so it is saved to the <pre><code>ecx</code></pre> register and the result of the postfix increment operation is stored to the variable on the stack immediately (<pre><code>mov [ebp+var_4], eax</code></pre>). It does not matter that the value in <pre><code>ecx</code></pre> is not used later. This is the disadvantage due to the simplicity of TCC. For example you can notice that the code loads the value of <pre><code>i</code></pre> from stack to <pre><code>eax</code></pre> even if the value is in <pre><code>eax</code></pre> already.\nExample of code which additionally uses the original value of <pre><code>i</code></pre>:\n<pre><code>j = i++ + i * 3;\n</code></pre>\nThe assembly code:\n<pre><code>13: 8b 45 fc        mov eax, DWORD PTR [rbp-0x4]    // load i to eax\n16: 48 89 c1        mov ecx, eax                    // store the original value of i for later use\n19: 83 c0 01        add eax, 0x1                    // increment the value (the side effect of ++)\n1c: 89 45 fc        mov DWORD PTR [rbp-0x4], eax    // store it to i - everything between \"=\" and \"+\" is done at this point including the side-effect of i++\n1f: 8b 45 fc        mov eax, DWORD PTR [rbp-0x4]    // load i to eax (Now it is the incremented value.)\n22: ba 03 00 00 00  mov edx, 0x3                    // load value 3 for the multiplication\n27: 0f af c2        imul    eax, edx                // multiply\n2a: 01 c1           add ecx, eax                    // add the original value of i (the result of i++)\n2c: 89 4d f8        mov DWORD PTR [rbp-0x8], ecx    // store the result to j\n</code></pre>\nAt <pre><code>1f</code></pre> the incremented value of <pre><code>i</code></pre> is being used but it is also possible to use the original value of <pre><code>i</code></pre> there and still be in adherence with C99 because the sequence point after <pre><code>i++</code></pre> was not encountered yet. In this case the sequence points are right before and after the statement.\n",
            "votes": "4",
            "user": "pabouk - Ukraine stay strong",
            "time": "Jun 20, 2014 at 18:39",
            "is_accepted": false,
            "comments": [
                {
                    "user": "supercat",
                    "text": "<span class=\"comment-copy\">A recursive-descent parser wouldn't need to do anything fancy to have a \"generate code for expression whose result is ignored\", \"generate code for expression and branch to X if zero and Y if zero (using a dummy value for X or Y to indicate fall-through)\", and have those fall through to \"generate code for expression whose result is used\", or a combination of \"generate code for expression whose result is used\" followed by \"test result against zero and branch to X or Y\".  Separating things out in that fashion would be the easiest way to efficiently handle...</span>",
                    "time": null
                },
                {
                    "user": "supercat",
                    "text": "<span class=\"comment-copy\">...things like comparison operations and short-circuit evaluation, so that <code>if (a==b &amp;&amp; c==d)</code> doesn't get processed with code equivalent to <code>if ( (((a==b)?1:0) ? ((c==d)?1:0) : 0) != 0)</code>.  Having the \"evaluate expression whose result is ignored\" look for expressions of the form \"++x\"., \"x++\", \"--x\", and \"x--\" and special-case those would be a simple optimization with a large payoff.</span>",
                    "time": null
                }
            ]
        }
    ]
}