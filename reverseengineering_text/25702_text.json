{
    "title": "Buffer space in C",
    "link": "https://reverseengineering.stackexchange.com/questions/25702/buffer-space-in-c",
    "content": "I was wondering if there is some way to get information about buffer size via reversing the binary, created in C language. can we also know how many buffers we have created while writing that script.\nI am doing Vulserver Excercise. check it out here on this article--> [Article][1]\nwant to know if the commands have buffer size to store given arguments.\n[1]: https://captmeelo.com/exploitdev/osceprep/2018/06/28/vulnserver-gter.html\n",
    "votes": "0",
    "answers": 1,
    "views": "215",
    "tags": [
        "disassembly",
        "c",
        "buffer-overflow"
    ],
    "user": "lucky thandel",
    "time": "Aug 20, 2020 at 4:13",
    "comments": [
        {
            "user": "macro_controller",
            "text": "Please give us an example or code/assembly snippet of a buffer you are trying to get its size.\n",
            "time": null
        },
        {
            "user": "lucky thandel",
            "text": "@macro_controller happy now?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Buffers on the heap are usually easy to spot. Just look for calls to <pre><code>malloc</code></pre> and similar functions, and find the corresponding argument for the buffer size.\nBuffers on the stack are a little harder to spot, but can often be identified. Usually, you can see the stack pointer address will be decremented to make room for the new buffer. This amount will sometimes not be the exact buffer size, but will be close.\n",
            "votes": "1",
            "user": "multithr3at3d",
            "time": "Aug 19, 2020 at 17:25",
            "is_accepted": false,
            "comments": []
        }
    ]
}