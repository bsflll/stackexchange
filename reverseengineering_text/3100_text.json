{
    "title": "Loading Windows executable - unexpected data appended at beginning sections after loading in memory",
    "link": "https://reverseengineering.stackexchange.com/questions/3100/loading-windows-executable-unexpected-data-appended-at-beginning-sections-afte",
    "content": "Few days after asking the question I realised I misinterpreted my original findings. It seems .rdata section on file is copied directly to memory, but then first 36 bytes are overwritten by loader with IAT RVA. The erroneous question about added 96 bytes is result of me not noticing that the sequence of bytes I was checking in my tests is repeated on the file. \nWhat I just said still might not be 100% accurate. The investigation will continue for the next few days.\nOriginal Question\nI'm trying to write a program to analyse Windows executables. I was assuming that sections in executable file are directly copied to memory. I have noticed strange behaviour in several programs. \nOne example is <pre><code>crackme12.exe</code></pre>. When I check with debugger <pre><code>.rdata</code></pre> section loaded into memory, I can see that for some reason 96 bytes have been added at the beginning of a section loaded into memory that was not there in the executable file. I have spent 2 days trying to read Windows executable documentation, but I can't find explanation why is it happening.\nAdditional Info\nI'm trying to load this file on Linux under Wine. \nDebugger I use is called OllyDbg. \nFile download link: http://www.reversing.be/easyfile/file.php?show=20080602192337264\nI'm trying to write the program in Common Lisp. This is the link to the test file: https://github.com/bigos/discompiler/blob/master/test/lisp-unit.lisp\nI have tried to load the same crackme under Windows and got another surprise.\nScreen-shot at \nhttps://github.com/bigos/discompiler/blob/fc3d8432f10c8bd5dfd14a8b5e2b113331db15df/my-reference/images/differences%20between%20lin%20and%20win.png shows Windows and Wine side by side. \nFrom address x402060, highlighted in the screen-shot in red shows data copied from section on the file. On loading operating system inserted 96 bytes. To my surprise Wine loader has inserted different data. When you compare differences between Wine and Windows you will see that first two lines differ. Can somebody enlighten me what is happening?\nConclusion\nIt turns out that Import Table RVA and IAT RVA were placed at addresses between x402000 and x402060. So it looks like loader copies section to memory after those tables.\nI have added some code to my little program and got following output:\nRVAs: (((320 \"Import Table RVA\" 8228) (324 \"Import Table Size\" 60)\n        \"in memory from\" \"402024\" \"to\" \"402060\")\n       ((328 \"Resource Table RVA\" 16384) (332 \"Resource Table Size\" 1792)\n        \"in memory from\" \"404000\" \"to\" \"404700\")\n       ((408 \"IAT RVA\" 8192) (412 \"IAT Size\" 36) \"in memory from\" \"402000\"\n        \"to\" \"402024\"))\n",
    "votes": "9",
    "answers": 1,
    "views": "581",
    "tags": [
        "windows",
        "static-analysis",
        "pe",
        "executable"
    ],
    "user": "ruby_object",
    "time": "Dec 10, 2013 at 4:39",
    "comments": [
        {
            "user": "Ange",
            "text": "It might be related with the loading process: relocations, imports, exports... we need the sample, or a more accurate description.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is the Import Address Table, which contains the virtual addresses for the imported functions.\nSince the DLLs have been loaded at different addresses (7bxxxxxx in one case, 76xxxxxx in the other), the Import Address Table is filled with different DWORD values.\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Nov 30, 2013 at 0:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}