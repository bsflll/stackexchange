{
    "title": "Limited U-Boot options, any memory reading possibilities here?",
    "link": "https://reverseengineering.stackexchange.com/questions/21897/limited-u-boot-options-any-memory-reading-possibilities-here",
    "content": "Within this very stripped down firmware I'm looking at (hikvision camera misrepresented), this is all I have to work with. No other firmware exists, and the <pre><code>open-seasame</code></pre> command presents an encrypted challenge, so no root.\nIs there anything in this list that pokes at the ability to dump the firmware via uboot ?\nThere are pads for a micro-SD card, but I haven't soldered anything up or tested / probed it with a scope.\n<pre><code>The following commands are supported:\nboot    erase   help    reset\nsaveenv printenv        setenv  upbs\nformat  update  upfusb  upf\nupdatebusb      updateb gos     go\nmii     gpio    ping\nUse help to get help on a specific command\n</code></pre>\n",
    "votes": "3",
    "answers": 2,
    "views": "850",
    "tags": [
        "memory",
        "hardware"
    ],
    "user": "J.Hirsch",
    "time": "Aug 15, 2019 at 12:32",
    "comments": [],
    "answers_data": [
        {
            "content": "Well I come up with two way.\n\nThe first one is a difficult way. I've looked up some resource and found that the <pre><code>upf</code></pre> command on Hikvision camera should be able to update the firmware, and it's using TFTP to load the firmware into 0x02000000 address.\nRef: https://ipcamtalk.com/threads/hikvision-g1-5-5-firmware-exploring-the-cam-attempting-unlock.40814/\nhttps://ipcamtalk.com/threads/unrestricted-root-shell-on-g1-cameras.23213/\nSo, you can use <pre><code>upf</code></pre> command to receive file from your computer, and then load it to memory at 0x02000000, before the load finished, you can interrupt the update operation by cutting off the connection, so you can return to the uboot prompt and do other operations, and the transmitted data will still be there in the memory.\nThen there's also a <pre><code>go</code></pre> command, which can bring the processor to execute the address you supply.\nTo wrap them all, you can use the technique decribed above to load arbitary data into a fixed memory address, and then you can control the processor to execute arbitary address, so you can write shellcode to read from nand and print them.\nThe second one is a easier way. You can try to have a look at the printenv's output, and there may be some interesting environment variable controlling the updating progress and boot progress. There's chance you can upload a custom small rom without overwriting the original one.\n\nAnyway, I'd suggest you use a debugger like JTAG to dump the memory, which is much more easier except you have to do some soldering.\n",
            "votes": "3",
            "user": "Misty",
            "time": "Aug 15, 2019 at 18:36",
            "is_accepted": true,
            "comments": [
                {
                    "user": "J.Hirsch",
                    "text": "<span class=\"comment-copy\">I don't see a JTAG port on the board, but that doesn't mean there isn't. I'm sure the chip has one I'll just have to figure out if the pins go somewhere for it. <a href=\"https://imgur.com/gallery/JcgsEPE\" rel=\"nofollow noreferrer\">imgur.com/gallery/JcgsEPE</a> <code>HKVS # printenv  ipaddr=192.0.0.64  serverip=192.0.0.128  gatewayip=0.0.0.0  netmask=255.255.255.0  ethaddr=94:e1:ac:00:55:0e  loadaddr=0x00208000  bootfile=hImage  bootcmd=null  bootargs=console=ttyS0  bootdelay=2  dbg=8  chip_id=1</code></span>",
                    "time": null
                },
                {
                    "user": "Misty",
                    "text": "<span class=\"comment-copy\">Well the <code>console=ttyS0</code> suggest that it's a Linux kernel, maybe you can try setting the <code>init=</code> param, so you can execute any possiible executable on the firmware :)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The go command in uboot allows you to specify an address and provide arguments. You could potentially use this invoke a printf(), providing a pointer to a format string and a pointer to what you wish to read.\n",
            "votes": "0",
            "user": "Colt VanWinkle",
            "time": "Aug 16, 2019 at 14:35",
            "is_accepted": false,
            "comments": []
        }
    ]
}