{
    "title": "Where to find address of registers populated in a binary",
    "link": "https://reverseengineering.stackexchange.com/questions/19828/where-to-find-address-of-registers-populated-in-a-binary",
    "content": "This question might sound very naive, however, I got stuck when one of my friends asked me where can I find the address of an initialized register in the stack.\nFor e.g., <pre><code>info registers</code></pre> in gdb gives us a list of registers and their corresponding values which are basically stored into it.\nIs there any command or way in which I could find the addresses where the registers are actually located? If yes could someone please direct me towards it.\nI am glad my friend asked me this question since it was something which I didn't notice earlier because there had not been a time where there was any need of the address where the registers are located.\n",
    "votes": "0",
    "answers": 1,
    "views": "321",
    "tags": [
        "debugging",
        "x86"
    ],
    "user": "Jiger Jain",
    "time": "Nov 6, 2018 at 9:05",
    "comments": [
        {
            "user": "Paweł Łukasik",
            "text": "Registers are on the CPU. Not in the binary\n",
            "time": null
        },
        {
            "user": "Jiger Jain",
            "text": "Thanks for pointing out @PawełŁukasik, I meant what would be the address in the memory for the registers used in binary.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "@JigerJain I'm fairly certain you may be misunderstanding something here. Registers are named locations of a dedicated size residing in the CPU (as pointed out by Paweł). That is, while the registers comprise a big part of the state of a CPU, they are not on the stack (which is usually in memory). However, you may want to edit your question to explain better what you need. I have a hunch you may be interested in stuff like the return address on the stack or the <pre><code>push</code></pre>-ed register values (not registers). You really need to edit your question to make clear what you want.\n",
            "time": null
        },
        {
            "user": "Jiger Jain",
            "text": "Thanks, @0xC0000022L! (and @PawelLukasik as well) Now I got it, it was a basic understanding of registers on CPU and not the stack! Silly me, nevertheless glad to get a nice explanation.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Thanks, @0xC0000022L and @Paweł Łukasik.\nI got the answer, as you guys pointed out that, registers are on CPU and not in the stack. Which states that it is usually stored in memory and not on the stack.\nIt was a doubt and I am glad that I got a clarification. Thus would like to post it as an answer.\n",
            "votes": "0",
            "user": "Jiger Jain",
            "time": "Nov 18, 2018 at 19:26",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Jongware",
                    "text": "<span class=\"comment-copy\">\"On CPU\" is <i>not</i> the same as \"in memory\". The stack is always in memory but the current value of a register – <i>any</i> of them – is <i>not</i> kept in memory. (This is for the common, exact usage of the term 'memory' as an <i>addressable location in ROM or RAM</i>, not something vague-like as \"it is what the computer is thinking about\".) The \"on CPU\" that Pawel referred to is, quite literally, <i>on the silicon chip</i> of the CPU itself.</span>",
                    "time": null
                },
                {
                    "user": "Jiger Jain",
                    "text": "<span class=\"comment-copy\">@usr2564301 Gotcha! Thanks for the clarification.</span>",
                    "time": null
                }
            ]
        }
    ]
}