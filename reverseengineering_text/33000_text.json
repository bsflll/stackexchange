{
    "title": "C disassembly - bitwise operations with 0x7FFFFFFFFFFFFFFF and 0x8000000000000000",
    "link": "https://reverseengineering.stackexchange.com/questions/33000/c-disassembly-bitwise-operations-with-0x7fffffffffffffff-and-0x800000000000000",
    "content": "I am using IDA to reverse engineer x86_64 binary file written in C. And pretty often I meet the following in IDA's pseudocode:\n\n<pre><code>(int64)v7 | 0x8000000000000000LL</code></pre>\n<pre><code>(int64)v7 & 0x7FFFFFFFFFFFFFFFLL</code></pre>\n\nWhile researching I figured out that:\n\n0x7FFFFFFFFFFFFFFF is 9223372036854775807, which is signed long MAX value in C\n0x8000000000000000 is -9223372036854775808, which is signed long MIN value in C\n\nBut I can't wrap my head around how to translate these bitwise operations with MIN and MAX into \"normal\" C coding pattern.\nCan anybody please explain ?\n",
    "votes": "2",
    "answers": 1,
    "views": "149",
    "tags": [
        "ida",
        "disassembly",
        "c"
    ],
    "user": "day_that_i_die",
    "time": "Nov 4, 2024 at 9:36",
    "comments": [
        {
            "user": "jsotola",
            "text": "the two functions set and clear the sign bit ... there is no reason to translate the two values to decimal\n",
            "time": null
        },
        {
            "user": "jsotola",
            "text": "what do you mean by <pre><code>\"normal\" C coding pattern</code></pre>?\n",
            "time": null
        },
        {
            "user": "day_that_i_die",
            "text": "Could you please explain how these functions set and clear sign bit ?\n",
            "time": null
        },
        {
            "user": "jsotola",
            "text": "research <pre><code>C bitwise operators</code></pre>\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "When you see such masks - remember these key rules for bitwise arithmetic\nAssume X is unknown, & is bitwise AND, | is bitwise OR\n\nX & 1 = X\nX & 0 = 0\nX | 0 = X\nX | 1 = 1\n\nNow look at the mask and its operation. In this case\n<pre><code>v7 | 0x8000000000000000LL</code></pre>\nThe mask\n<pre><code>In [1]: 0x8000000000000000 == 1 << 63\nOut[1]: True\n</code></pre>\nSo in this case a 64 bit number - with the most significant bit (MSB) set and all other 0s\n<pre><code>index - 63 62 61 ... 2 1 0\nbits  - 1  0  0  ... 0 0 0\n</code></pre>\nThe operation here is <pre><code>|</code></pre> - the bitwise OR\nWe don't know <pre><code>v7</code></pre> - we can assume it to be X. For individual bits <pre><code>X_i</code></pre> for <pre><code>i</code></pre> index\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\nWhen bitwise OR is done -\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\n</code></pre>\nWith the rules mentioned above - we can operate <pre><code>X | 1 = 1</code></pre>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1 \n</code></pre>\nfor the rest unknown bits <pre><code>X | 0 = X</code></pre>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 1    0    0    ... 0   0   0\nresult- 1    X_62 X_61 ... X_2 X_1 X_0 \n</code></pre>\nWe can see that all of the bits of <pre><code>result</code></pre> is the same as <pre><code>v7</code></pre> except the MSB which is now 1.\nTherefore, <pre><code>v7 | 0x8000000000000000LL</code></pre> sets the MSB of <pre><code>v7</code></pre>\nSimilarly for <pre><code>v7 & 0x7FFFFFFFFFFFFFFFLL</code></pre>\nThe mask is 0x7FFFFFFFFFFFFFFFLL, which has all bits set to 1 except for the most significant bit (MSB), which is 0.\n<pre><code>index - 63   62   61   ... 2   1   0\nbits  - 0    1    1    ... 1   1   1\n</code></pre>\nWe want to perform the bitwise AND operation between <pre><code>v7</code></pre> and the mask.\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\nWhen we perform the bitwise AND operation:\nFor each bit position, we apply the rule <pre><code>X & 1 = X</code></pre> and <pre><code>X & 0 = 0</code></pre>\n<pre><code>index - 63   62   61   ... 2   1   0\nbitsX - X_63 X_62 X_61 ... X_2 X_1 X_0\nmask  - 0    1    1    ... 1   1   1\nresult- 0    X_62 X_61 ... X_2 X_1 X_0\n</code></pre>\nThe result retains all bits of <pre><code>v7</code></pre> except the MSB, which is now 0. Therefore, <pre><code>v7 & 0x7FFFFFFFFFFFFFFFLL</code></pre> clears the MSB of <pre><code>v7</code></pre>\nIn signed values the MSB dictates the sign of the number - a set MSB means -ve and unset means a +ve number.\nNow if <pre><code>v7</code></pre> is a signed value - we can see the change in values with this python snippet\n<pre><code>In [9]: x = 0xabcdef1234567890\n\nIn [10]: ctypes.c_uint64(x & 0x7FFFFFFFFFFFFFFF)\nOut[10]: c_ulong(3156441775323117712)\n\nIn [11]: (ctypes.c_int64(x & 0x7FFFFFFFFFFFFFFF).value)\nOut[11]: 3156441775323117712\n\nIn [12]: ctypes.c_int64(x).value\nOut[12]: -6066930261531658096\n</code></pre>\nWith the MSB cleared the signed and unsigned values of the result is same.\n<pre><code>In [13]: (ctypes.c_int64(x | 0x8000000000000000).value)\nOut[13]: -6066930261531658096\n\nIn [14]: (ctypes.c_uint64(x | 0x8000000000000000).value)\nOut[14]: 12379813812177893520\n\nIn [15]: x\nOut[15]: 12379813812177893520\n</code></pre>\nWith the MSB set - the number stays as is if it was a signed negative earlier.\n",
            "votes": "1",
            "user": "sudhackar",
            "time": "Jun 4, 2024 at 8:12",
            "is_accepted": false,
            "comments": []
        }
    ]
}