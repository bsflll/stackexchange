{
    "title": "Change program's codepage / charset",
    "link": "https://reverseengineering.stackexchange.com/questions/5864/change-programs-codepage-charset",
    "content": "I dont have any experience with assembler or reversing code. I need to change charset of .exe program to support turkish characters. I have opened it in Ollydbg do some tests. \n\nThere are several blocks like this. I tried to change binary <pre><code>6A 01</code></pre> to <pre><code>6A A2</code></pre> which should change to <pre><code>162</code></pre> (turkish charset) but instead turned to negative value. Also there are some codes like this one. Is changing <pre><code>CP_ACP</code></pre> to <pre><code>CP_UTF8</code></pre> gonna work ? \nEither way, is it possible to edit like this and get program support charset ?\n",
    "votes": "0",
    "answers": 1,
    "views": "471",
    "tags": [
        "disassembly",
        "ollydbg"
    ],
    "user": "safarov",
    "time": "Jul 16, 2014 at 9:13",
    "comments": [],
    "answers_data": [
        {
            "content": "I tried to change binary 6A 01 to 6A A2 which should change to 162 (turkish charset) but instead turned to negative value.\n\nUsually the instruction set reference is a huge help if you don't understand how instructions behave. In this case, I'd say you will need to use <pre><code>68</code></pre> (<pre><code>PUSH imm32</code></pre>) instead of <pre><code>6A</code></pre> (<pre><code>PUSH imm8</code></pre>). The <pre><code>imm8</code></pre> is sign-extended when pushed onto the stack. Note that you'll have to either shift the following function code by 3 bytes (which are the difference in sizes between <pre><code>imm32</code></pre> and <pre><code>imm8</code></pre> operands). Depending on the compiler used, its options, and the function size, there may be pad bytes after the function which can be used exactly for that. Watch out for e.g. jump tables, if there are any -- they may need to be patched as well.\nIf it is not possible to shift the code, you can make use of code space somewhere else in the executable -- usually, the last page in <pre><code>.text</code></pre> is not fully used; move instructions that do not fit there and make a jump, like:\n<pre><code>...\nPUSH EDI\nPUSH EDI\nPUSH A2 ; Your patched insn; 5 bytes\n...\nPUSH 190\nPUSH EDI\nPUSH EDI\n; So we need 2 extra bytes here\n; Moving CALL gives 6, patched PUSH takes 3, patched JMP takes 5\n; Moving two PUSHes along with CALL solves the problem\nJMP _somewhere_ ; Takes 5 bytes, opcode E9 disp32\nPUSH Game5_4.... ; back is here\n</code></pre>\nAnd then, in the newly coded part (<pre><code>_somewhere_</code></pre>):\n<pre><code>PUSH EDI\nPUSH EAX\nCALL DWORD PTR DS:[<&GDI32.CreateFontA>]\nJMP back\n</code></pre>\n\nIs changing <pre><code>CP_ACP</code></pre> to <pre><code>CP_UTF8</code></pre> gonna work ?\n\nI don't know, to be honest. Depends a lot on other code. Making the program support something it was not designed for is a big ordeal. It might work, it might not, it might end up being buggy.\n",
            "votes": "2",
            "user": "perror",
            "time": "Jul 15, 2014 at 19:54",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user11773",
                    "text": "<span class=\"comment-copy\">@safarov Please accept this answer then. It is good to mark a problem as solved. Thank you</span>",
                    "time": null
                }
            ]
        }
    ]
}