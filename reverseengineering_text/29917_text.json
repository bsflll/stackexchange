{
    "title": "How to extract specific data from memory",
    "link": "https://reverseengineering.stackexchange.com/questions/29917/how-to-extract-specific-data-from-memory",
    "content": "I'm totally new to this reverse engineering stuff.\nI'm working on my own project and trying to parse poker games from PokerStars application. I have already done with injecting my DLL to the app, but I don't know what to do next.\nI got module base address, created a hexdump function, and tried to go along process virtual memory, but it takes enormous amount of time. For now, I only found a region of memory where some source code is located. I've seen on GitHub project of PokerStars bot, so I know that it's possible to find in memory data I need, but I really don't know how. Can you give me advice?\nAlso, the game is open in another window, so I suppose the main program creates another thread for it. So how can I find the base address of this thread?\n",
    "votes": "1",
    "answers": 1,
    "views": "707",
    "tags": [
        "memory",
        "dll-injection"
    ],
    "user": "Euler-Maskerony",
    "time": "Jan 25, 2022 at 9:31",
    "comments": [],
    "answers_data": [
        {
            "content": "In order to \"extract\" (the specific) data from another process you need the correct memory address(es) and preferably it's datatype(s) and size of the datatype. (e.g. signed/unsigned int at location 0x[....])\nYou should also consider (depending on the datatype and algorithm), that such addresses can change during runtime (and/or upon starting your program)\nSome addresses and their (context) values are fixed, and can always reside on the same location in memory. (e.g. mapping, declared constants, etc.)\n(However a new build/patch of the program can change such addresses)\nBe careful of possible pointers that you need to follow, until you got the\nfinal address where the value resides.\nSome addresses may also be inaccessible, invalid or restricted to read from.\n(Depending on OS, etc.)\n(e.g. this might be the case if it's a java process or differences between x86 and x86_64 processes)\nYou don't need to inject a DLL in order to just read data from a foreign process.\nInjecting a DLL is primarily used to execute (your) code in that process' space, which includes handles, etc.\nPlease be careful if you intent to (over)write values in foreign processes.\nThis can be detected and might crash/damage processes/files if not careful.\nFor now, without much effort and hassle, I recommend using CheatEngine to learn and get the right \"base address\" for your desired value.\n(Careful: CheatEngine might inject in foreign processes and might be detected)\nInfos and how to:\nhttps://en.wikipedia.org/wiki/Cheat_Engine\nhttps://www.wikihow.com/Use-Cheat-Engine\nIf you keep learning memory structure, mapping, PE header, etc.\nyou will be able find a way to automate the process of getting the right base address upon each start. (until a new build/patch has been made)\n",
            "votes": "1",
            "user": "Ben",
            "time": "Jan 26, 2022 at 11:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}