{
    "title": "Encrypted Mach-o binary cannot be disassembled/traced with GDB",
    "link": "https://reverseengineering.stackexchange.com/questions/2540/encrypted-mach-o-binary-cannot-be-disassembled-traced-with-gdb",
    "content": "I'm trying to analyze an encrypted Mach-O binary (non-iPhone one), and I am observing the following strange behaviors:\n\nwhen I load this binary into GDB and try to disassemble the code at the address indicated by the entry point, GDB returns garbage instead of any meaningful asm.\nthe same happens with radare2\nHopper disassembler shows the same entry point address but delivers a clear disassembly.\n\nI've tried to execute this application in GDB - nothing works at all.\nSurprisingly, executing this app from terminal works plenty well.\nI'm afraid that my target has been packed/compressed/obfuscated in some way GDB/radare2 cannot cope with. Surprisingly, Hopper processes it pretty well.\nUnfortunately, I don't own a full version of the Hopper. Moreover, I would like to be able to debug this app in GDB. Is there any way to do this?\nHas anyone else run into something like this? If so, how should I proceed?\n",
    "votes": "12",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "gdb",
        "hopper",
        "mach-o",
        "radare2"
    ],
    "user": "user1815381",
    "time": "Apr 30, 2022 at 14:52",
    "comments": [
        {
            "user": "Igor Skochinsky",
            "text": "What is the binary? How do you get the \"address indicated by the entry point\" and how do you disassemble code? Show us some screenshots or text dumps. The more details, the better.\n",
            "time": null
        },
        {
            "user": "user1815381",
            "text": "Ok, the binary I'm trying to analyze is the part of the Mac OS system software. It appears to be the one of the so-called \"Apple-protected\" binaries. I've recently found several descriptions of this protection: osxbook.com/book/bonus/chapter7/binaryprotection and even a command-line tool claiming to be able to remove such an encryption here: tumblr.alanquatermain.me/post/97884723/â€¦ I've just tried that out but it produces even more garbage...\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "What port are you using ? MacPort or another port ?\n",
            "time": null
        },
        {
            "user": "perror",
            "text": "Is radare2 using <pre><code>libbfd</code></pre> ? I thought it was using his own library to manage binary format, no ?\n",
            "time": null
        },
        {
            "user": "user1815381",
            "text": "Radare2 uses its own Mach-O parser which doesn't seem to support encrypted binaries. Unfortunately, it contains bugs: the disassembly listing is shifted by four bytes. I'm about to submit an appropriate bug report.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Actually, GDB rely on the GNU binutils to open and disassemble the binary. So, the management of the binary format is done through <pre><code>libbfd.so</code></pre>.\nUsually, MacOS X binutils comes with the Mach-O management, but it might be that you are using a buggy package. Or, you may also try to open a Mach-O on another system than MacOS X, and on other systems the Mach-O support is extremely rarely added to the default package. \nThe best way to get the Mach-O support (and all possible formats and architectures in GNU binutils) is to compile the package with the option <pre><code>--enable-targets=all</code></pre>.\nPersonally, I am using a Debian unstable. and I am used to recompile the whole package taken from sources. Here are the steps to follow:\n\nAdd the following line to your <pre><code>/etc/apt/sources.list</code></pre>:\n<pre><code>deb-src ftp://ftp.debian.org/debian/ unstable main contrib\n</code></pre>\nUpdate your list of packages:\n<pre><code>su -c 'apt-get update'\n</code></pre>\nGet the packages needed to compile the <pre><code>binutils</code></pre> packages:\n<pre><code>su -c 'apt-get build-dep binutils'\n</code></pre>\nGet the sources of the <pre><code>binutils</code></pre> packages:\n<pre><code>apt-get source binutils\n</code></pre>\nGo into the <pre><code>binutils</code></pre> source directory:\n<pre><code>cd binutils-x.x.x/\n</code></pre>\nIn <pre><code>binutils-x.x.x/debian/rules</code></pre> rewrite the following line like this (remove all other targets):\n<pre><code> multiarch_targets = all\n</code></pre>\nBuild the packages (this might take quite a while):\n<pre><code>dpkg-buildpackage -rfakeroot -us -uc\n</code></pre>\nInstall the <pre><code>binutils-multiarch</code></pre> package:\n<pre><code>dpkg -i binutils-multiarch_x.x.x_amd64.deb\n</code></pre>\n",
            "votes": "10",
            "user": "perror",
            "time": "Sep 15, 2013 at 21:40",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "Many thanks for your answer!\nI did some more research and found the following out:\n\nbecause my target is a part of the Macintosh system, the so-called \"Apple binary protection\" protects that from being disassembled/debugged directly.\n\notool -l [target]\" reveals the following information:\n<pre><code>Load command 0\n  cmd LC_SEGMENT\n  cmdsize 532\n  segname __TEXT\n  vmaddr 0xb8000000\n  vmsize 0x001df000\n  fileoff 0\n  filesize 1961984\n  maxprot 0x00000007\n  initprot 0x00000005\n  nsects 7\n flags 0x8          <-------- \"WARNING: encrypted!!!\"\n</code></pre>\nTherefore, I need to find a way to decrypt the binary before trying to use GDB on it. I've read that it's possible to do manually using GDB, dd and any suitable hex editor but I couldn't find any stepwise instructions.\nThis tool claims to be able to do the decryption:\nhttp://tumblr.alanquatermain.me/post/97884723/apple-binary-protection-tool\nbut it doesn't work for me.\nHas anyone else here ever dealt with such a binary?\nMany thanks in advance!\nHere some more descriptions of this protection schema:\n<Link>\nhttp://reverse.put.as/2009/06/30/how-to-dump-an-apple-protected-binary/\nUPDATE: I've finally managed to decrypt my target using this tool: http://www.insanelymac.com/forum/topic/285375-apb-decrypt-for-mountain-lion-lion-and-snow-leopard-apple-protected-binary-decryptor/\nGDB shows a correct disassembly with \"disas 0xb800e5c4\" where 0xb800e5c4 indicates the entry point. While the decrypted binary works when launched from terminal, stepping and running inside of GDB still doesn't work though...\n",
            "votes": "9",
            "user": "Glorfindel",
            "time": "May 14, 2022 at 20:37",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">Don't post comments as answers. If necessary, edit your question to add details.</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">I agree with Igor, and moreover, this is another question. Please fill another question and start from the beginning.</span>",
                    "time": null
                }
            ]
        }
    ]
}