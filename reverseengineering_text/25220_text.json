{
    "title": "Problems with relocation when unpacking",
    "link": "https://reverseengineering.stackexchange.com/questions/25220/problems-with-relocation-when-unpacking",
    "content": "I'm trying to learn how to do basic unpacking EXEs. I've read into how the PE header works, sections, the IAT and I already know a fair bit about assembly. \nI started with compressing my simple x64.exe with UPX and attempted to manually unpack it.\nI stepped through the stub code, established where the extracted original code goes (.UPX0 section), found the OEP and IAT. With this, I was able to use Scylla to dump the process and correctly rebuild the IAT. \nHowever, when I ran the unpacked exe it failed. I decided to debug the unpacked exe and realised the code attempts to address a static variable that was originally stored in the .data section but is now invalid and generates a memory violation exception (crashing the program). \nAnyway to my frustration I realised that I needed to fix up the relocations as the original .reloc section had been lost. I painstakingly stepped through the UPX code and identified where the addresses that needed to be relocated were. I use PE explorer to rebuild the .reloc section manually. However, I gave up after 6 address when I realised there was a total of 100 to go through!\nMy question is, is there a tool that can automatically fix up the relocations (much like Scylla does with the IAT) or am I stuck doing it manually? \nMany thanks\nZ\n",
    "votes": "1",
    "answers": 3,
    "views": "1k",
    "tags": [
        "unpacking",
        "packers",
        "address",
        "upx",
        "import-reconstruction"
    ],
    "user": "Zeller33",
    "time": "Jun 5, 2020 at 20:02",
    "comments": [],
    "answers_data": [
        {
            "content": "i found a tool for unpacking UPX x64.exe it work for me.\nit is called XVolkolak v0.22  i found it here: http://ntinfo.biz/index.html\nits a universal tool so it can unpack other packers to.\nGood luck.\nHave a nice day.\n",
            "votes": "2",
            "user": "Luffe",
            "time": "Dec 14, 2020 at 13:29",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "AFAIK there is no existing tool but you should be able to create one using the approach used by DOS unpackers:\n\nRun the binary once, dump it at the entry point\nRun it second time, forcing the load base to be different (e.g. map some memory at the preferred load base, or reboot to reinitialize ASLR). Capture a second dump. \nCompare two dumps. The locations with differences should be the relocations. Create a relocation table for them. \n\nSpecifically for UPX, thereâ€™s an easier way: the relocation table is stored in a predefined format so you just need to find and parse it. See the UPX source code for more info.\n",
            "votes": "1",
            "user": "Igor Skochinsky",
            "time": "Jun 7, 2020 at 9:05",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Zeller33",
                    "text": "<span class=\"comment-copy\">good ideas, thanks, shame there isn't an easy tool</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Note that you do not have to take care of relocations if you just hard code the image base and remove the <pre><code>.reloc</code></pre> section.\nTypically EXE files didn't use to be relocatable at all because they don't need to because they have their own address space. With the introduction of ASLR, EXE files got a <pre><code>.reloc</code></pre> table for security but they still work just as well without one.\nSo if you have a dump of a file that has been relocated, just \"fix\" that image base in the PE header and remove the <pre><code>.reloc</code></pre> section and your binary should work.\n",
            "votes": "0",
            "user": "Johann Aydinbas",
            "time": "Nov 5, 2020 at 3:49",
            "is_accepted": false,
            "comments": []
        }
    ]
}