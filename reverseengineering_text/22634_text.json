{
    "title": "Struct reconstruction in decompilers",
    "link": "https://reverseengineering.stackexchange.com/questions/22634/struct-reconstruction-in-decompilers",
    "content": "I'm testing several decompilers about struct reconstruction, given the following <pre><code>C</code></pre> example:\n<pre><code>struct S {\n    int x;\n    int y;\n    long z;\n    long t;\n};\n\nint foo(struct S s) {\n    return s.x + s.y + s.z + s.t;\n}\n\nint main() {\n    struct S s;\n    s.x = 10; s.y = 15; s.z = 20; s.t = 25;\n    return foo(s);\n}\n</code></pre>\ncompiled without any optimization (even no stripping) using <pre><code>clang</code></pre> as a 64-bit ELF, i.e. the ABI is <pre><code>System V x86-64</code></pre>.\nI've supposed that this is a trivial case so the decent decompilers should give correct results, they are not unfortunately.\nFollowing result is given by <pre><code>IDA 7.4.191122</code></pre>:\n<pre><code>int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  __int64 v3; // r8\n  __int64 v4; // r9\n\n  return foo(*(__int64 *)&argc, (__int64)argv, (__int64)envp, 20LL, v3, v4, 0xF0000000ALL, 20, 25);\n}\n\n__int64 __fastcall foo(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, int a8, int a9)\n{\n  return (unsigned int)(a9 + a8 + HIDWORD(a7) + a7);\n}\n</code></pre>\nNext, <pre><code>JEB 3.7.0</code></pre>:\n<pre><code>unsigned long main() {\n  return foo();\n}\n\nunsigned long foo() {\n  unsigned int v0 = v1 + v2;\n  return (unsigned long)(((unsigned int)(((long)v0 + v3 + v4)));\n}\n</code></pre>\nand <pre><code>Ghidra 9.1</code></pre>\n<pre><code>void main(void)\n{\n  foo();\n  return;\n}\n\nulong foo(void)\n{\n  int param_7;\n  undefined8 param_7_00;\n  int iStack000000000000000c;\n  long param_8;\n  long param_9;\n\n  return (param_7 + iStack000000000000000c) + param_8 + param_9 & 0xffffffff;\n}\n</code></pre>\nI cannot say that the results are \"good\", they are not even correct. Did I miss some configuration for these decompilers?\nEdit: Because of request from @Tobias, I've added assembly code for the functions (and changed <pre><code>main</code></pre> into <pre><code>bar</code></pre>):\nThis is <pre><code>foo</code></pre>:\n<pre><code>0x0         55                                   push rbp\n0x1         48 89 e5                             mov rbp, rsp\n0x4         48 8d 45 10                          lea rax, [rbp+0x10]\n0x8         8b 08                                mov ecx, [rax]\n0xa         03 48 08                             add ecx, [rax+0x8]\n0xd         48 63 d1                             movsxd rdx, ecx\n0x10        48 03 50 10                          add rdx, [rax+0x10]\n0x14        48 03 50 18                          add rdx, [rax+0x18]\n0x18        48 0f be 40 04                       movsx rax, byte ptr [rax+0x4]\n0x1d        48 01 c2                             add rdx, rax\n0x20        89 d0                                mov eax, edx\n0x22        5d                                   pop rbp\n0x23        c3                                   ret\n\n</code></pre>\nand <pre><code>bar</code></pre>:\n<pre><code>0x30        55                                   push rbp\n0x31        48 89 e5                             mov rbp, rsp\n0x34        48 83 ec 40                          sub rsp, 0x40\n0x38        c7 45 e0 0a 00 00 00                 mov dword ptr [rbp-0x20], 0xa\n0x3f        c7 45 e8 0f 00 00 00                 mov dword ptr [rbp-0x18], 0xf\n0x46        48 c7 45 f0 14 00 00 00              mov qword ptr [rbp-0x10], 0x14\n0x4e        48 c7 45 f8 19 00 00 00              mov qword ptr [rbp-0x8], 0x19\n0x56        c6 45 e4 1e                          mov byte ptr [rbp-0x1c], 0x1e\n0x5a        48 8d 45 e0                          lea rax, [rbp-0x20]\n0x5e        48 8b 08                             mov rcx, [rax]\n0x61        48 89 0c 24                          mov [rsp], rcx\n0x65        48 8b 48 08                          mov rcx, [rax+0x8]\n0x69        48 89 4c 24 08                       mov [rsp+0x8], rcx\n0x6e        48 8b 48 10                          mov rcx, [rax+0x10]\n0x72        48 89 4c 24 10                       mov [rsp+0x10], rcx\n0x77        48 8b 40 18                          mov rax, [rax+0x18]\n0x7b        48 89 44 24 18                       mov [rsp+0x18], rax\n0x80        e8 7b ff ff ff                       call foo\n0x85        48 83 c4 40                          add rsp, 0x40\n0x89        5d                                   pop rbp\n0x8a        c3                                   ret\n</code></pre>\n",
    "votes": "4",
    "answers": 2,
    "views": "905",
    "tags": [
        "decompilation",
        "elf",
        "struct"
    ],
    "user": "Ta Thanh Dinh",
    "time": "Dec 6, 2019 at 14:28",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "This question (Are decent decompilers really bad in reconstructing structs, or I missed some config?) is really eliciting opinions, which is discouraged. But seeing the question got an answer (accepted by you) of what seems to be the underlying question, there's no need for me to intervene. Just keep in mind that asking for opinions is usually a bad sign for a question on RE.SE (and other SE sites).\n",
            "time": null
        },
        {
            "user": "Ta Thanh Dinh",
            "text": "You are right. I've rephrased the question. Sorry.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "The default compilation options do not embed full debugging information, and a small structure passed by value is indistinguishable from a bunch of individual arguments passed in registers (see the ABI spec). You will get a slightly better output if you enable DWARF debug info generation (<pre><code>-gdwarf</code></pre>). At least IDA can make use of DWARF info to import types, apply function arguments and local variable information:\n<pre><code>int __cdecl foo(S s)\n{\n  return LODWORD(s.t) + LODWORD(s.z) + s.y + s.x;\n}\nint __cdecl main(int argc, const char **argv, const char **envp)\n{\n  S v4; // [rsp+0h] [rbp-40h]\n\n  *(_QWORD *)&v4.x = 0xF0000000ALL;\n  v4.z = 20LL;\n  v4.t = 25LL;\n  return foo(v4);\n}\n</code></pre>\n",
            "votes": "3",
            "user": "Igor Skochinsky",
            "time": "Nov 29, 2019 at 13:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thank you for <code>DWARF</code> debug info. But I'm not sure about the indistingguishability of struct passing. The System V ABI x86-64 (Section 3.2.3) says that a struct of more than 8 bytes or containing unaligned data will be of MEMORY class, i.e. its fields will be passed/returned via stack.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Why did the decompiler recognize that <code>rdi</code>, <code>rsi</code>, ... are not initiialized in <code>main</code>, so they would not be used as parameters for <code>foo</code>?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There are several things in your example that makes it hard to decompile.\n<pre><code>s</code></pre> is the first, and only, local (so on the stack) variable in main(). main() is troublesome, as it's more or less a vararg-function if you read the C++ standard, and as you can see atleast IDA guesses that you have three arguments on the stack.\nYou use both int and long in your struct definition, which may or may not create either padding of the stack or masking in the generated code. It can also be one way where you declare it (main) and another way when passing it by value to a (leaf-)function.\nAnd, foo() is a leaf-function, meaning it will have a red-zone on the stack that could possibly be used.\nTry putting <pre><code>s</code></pre> on the heap instead, and you will probably see a very different result :)\nWhat does the disassembly look like?\nEdit: Oh the disassembly really drives the point home! The point being that LLVM depends on how well-suited the IR is to optimization, as before optimization the code looks like someone who licks rocks built it from lego. And then threw the rock at it :D No wonder it confuses decompilers :) Look at that funny byte-size \"bonus parameter\" and the \"nonsensical\" movsx-instructions for example.\nAnyways, serious face-time again. The red zone isn't used. The prologue isn't even needed as nothing is stored on the stack, all calculations are done on RCX and RAX. Now that you've gotten rid of any stack-variables in main(), the thing tripping you up is that you're passing a small, stack-allocated, structure by value. What in C looks like passing a single blob as argument is actually treating each field like a separate argument. I am guessing both IDA and Ghidra would be able to make sense of this if it wasn't for the \"alignment\"(?)-byte thrown in there. Or perhaps not, as the assembly might still look like it's passing four separate arguments on the stack :|\nTl;dr: clang generates really strange code unless optimized. Coupled with passing a stack-allocated struct by value it will confuse the hell out of both decompilers and sleepy reverse engineers such as myself. Take this opportunity to kick the habit of passing structs by-value and learn to love the const-refs ;)\n",
            "votes": "5",
            "user": "Tobias",
            "time": "Nov 30, 2019 at 12:28",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Thank you, I've added disassembled code. I've changed <code>main</code> to a normal function <code>bar</code> to avoid the troubesomeness of <code>main</code>.</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">I've never thought of <code>red-zone</code> (I didn't know it). Indeed, <code>far</code> seems to use <code>red-zone</code> since there is no stack frame allocation in the function (no substraction from <code>rsp</code>). But I still don't understand why it makes difficult to decompilers: are local variables still based on <code>rbp</code>?</span>",
                    "time": null
                },
                {
                    "user": "Ta Thanh Dinh",
                    "text": "<span class=\"comment-copy\">Change <code>main</code> to <code>bar</code> does not help, the results are more or less the same. But putting <code>s</code> on heap gives a more clear result, it is expected.</span>",
                    "time": null
                },
                {
                    "user": "Tobias",
                    "text": "<span class=\"comment-copy\">@TaThanhDinh As I really don't know if you get notified on updated answers: I updated the answer.</span>",
                    "time": null
                },
                {
                    "user": "Tobias",
                    "text": "<span class=\"comment-copy\">@ta-thanh-dinh I just realized I didn't reply to the question about local variables and <code>RBP</code>; No, frame pointers are rarely used in x86-64 code, as both the IA64 and AMD64 ABIs define functions, and their stack layouts, strict enough that you don't really need one in most cases.</span>",
                    "time": null
                }
            ]
        }
    ]
}