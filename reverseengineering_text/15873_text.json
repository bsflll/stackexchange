{
    "title": "Inverse And operation",
    "link": "https://reverseengineering.stackexchange.com/questions/15873/inverse-and-operation",
    "content": "I'm trying to write a keygen to a crack me that I'm learning from and I got stuck. What happens there is pretty simple:\nLet's say that I entered the password: \"12121212\"\n<pre><code>XOR DWORD PTR DS:[ECX+EAX],1234567\nAND BYTE PTR DS:[ECX+EAX],0E\nADD ECX,4\nCMP ECX,8\n</code></pre>\nAs we can see, the first <pre><code>DWORD</code></pre> of the password (<pre><code>0x32313231</code></pre>, notice that x86 processors use little-endian layout) is being <pre><code>XORed</code></pre> with <pre><code>0x1234567</code></pre> so <pre><code>0x32313231 ^ 0x1234567</code></pre> results with <pre><code>0x56771233</code></pre>.\nThen there is an <pre><code>AND</code></pre> operation on the first byte (<pre><code>0x56</code></pre>) of the manipulated password and <pre><code>0xe</code></pre> which results with <pre><code>0x6</code></pre>. After that, the program repeats the operations, this time on the second <pre><code>DWORD</code></pre> of the password.\nMy question is: I know I can reverse <pre><code>XOR</code></pre> but is it possible with <pre><code>AND</code></pre> operation?\n",
    "votes": "4",
    "answers": 2,
    "views": "3k",
    "tags": [
        "disassembly",
        "assembly",
        "c",
        "patch-reversing",
        "xor"
    ],
    "user": "Xozu",
    "time": "Jul 21, 2017 at 14:08",
    "comments": [],
    "answers_data": [
        {
            "content": "While there's no way to know with 100% certainty what was the original value before the AND operation, you can find some possible values producing the same result, and sometimes that's enough. \nBasically, for <pre><code>x & N = z</code></pre>, you can start from <pre><code>z</code></pre> and set any bits to <pre><code>1</code></pre> where you have are 0 in <pre><code>N</code></pre>. <pre><code>z</code></pre> itself will always work too.\nFor example, if we know that <pre><code>x & 0xE == 6</code></pre>, then at any of the following values of <pre><code>x</code></pre> will work: 6,7, 0x16, 0x17, 0x26, 0x27 and so on.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Jul 21, 2017 at 16:19",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Xozu",
                    "text": "<span class=\"comment-copy\">This answer helps me a lot!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "The answer is no. Unlike bitwise <pre><code>XOR</code></pre>, bitwise <pre><code>AND</code></pre> can't be reversed:\n<pre><code>0 & 1 = 0\n0 & 0 = 0\n</code></pre>\nBoth <pre><code>AND</code></pre> and <pre><code>OR</code></pre> are not reversible. This is in contrast to <pre><code>XOR</code></pre> and <pre><code>NOT</code></pre> operators which are reversible.\n",
            "votes": "5",
            "user": "Megabeets",
            "time": "Jul 21, 2017 at 13:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}