{
    "title": "Tools for statistical analysis of binary streams",
    "link": "https://reverseengineering.stackexchange.com/questions/23036/tools-for-statistical-analysis-of-binary-streams",
    "content": "I'm in the process of decoding the semantics of an unknown binary stream1. I've come to a point where I understand the overall structure: A <pre><code>tag</code></pre> byte, followed by a size field, and a blob of bytes of that size, e.g. <pre><code>80 02 42 0a</code></pre> (type: 0x80, size: 2 bytes, data: 66, 10).\nTo help me drill deeper I'm looking for a tool that allows me to extract the individual chunks of data, run queries against those, and arbitrarily transform the results. I'm looking for simple queries (like \"all packets with a specific tag\"), but also need more complex filters (e.g. \"distribution of all size values for packets with a specific tag\").\nAre there any tools that allow me to easily perform those queries, given the following requirement?\n\nNeeds to understand the overall stream structure.\nNeeds to have basic decoding capabilities (e.g. to extract base128-encoded <pre><code>varint</code></pre>s as used by Protocol Buffers).\nNeeds customizable filters (e.g. by tag, size, or data).\n[Optional] Ability to control display of data, like 64-bit FILETIME values.\n[Optional] Ability to render graphs.\nNeeds to run on Windows (preferably free).\n\n\n1 The data is streamed off of an embedded device. I have access to fully self-contained chunks of that data as binary files.\n",
    "votes": "0",
    "answers": 0,
    "views": "229",
    "tags": [
        "binary-analysis",
        "tools"
    ],
    "user": "IInspectable",
    "time": "Jan 17, 2020 at 20:58",
    "comments": [
        {
            "user": "Dvd848",
            "text": "You might be able to use WireShark if you write a custom dissector. Kaitai Struct might be helpful as well. Here's a basic script that allows converting from a Kaitai Struct to a Wireshark LUA dissector: github.com/joushx/kaitai-to-wireshark\n",
            "time": null
        },
        {
            "user": "IInspectable",
            "text": "@dvd: \"Stream\" was possibly a misleading term. I do have fully self-contained chunks of the stream available as files, so I'm not looking to analyze network traffic. I also played with Kaitai Struct today. It's a great tool, but it will only become useful to me, once I know the meaning of the data. I'm not there yet. Right now I'm looking at <pre><code>tag</code></pre> <pre><code>size</code></pre> <pre><code><blob of data></code></pre>. I don't understand <pre><code><blob of data></code></pre> yet, and I need help with that. To get there, I need to test hypotheses, by collecting statistical data.\n",
            "time": null
        },
        {
            "user": "Dvd848",
            "text": "WireShark isn't limited to network traffic, it can dissect any data given the correct dissector (try using it to open a PNG file for example). However, if all else fails and you can't find a better tool or strategy, it might be useful to think of your data as a network stream nonetheless. Write a simple script to combine all of the different binary files to a pcap file, where the data of each packet is the contents of a single binary file. Then, create a basic dissector that is able to dissect \"tag, size, blob\". You can then use WireShark's/tshark's filtering capabilities for analysis/stats.\n",
            "time": null
        },
        {
            "user": "IInspectable",
            "text": "@dvd: I got it eventually to work, writing a tool to convert the binary stream into a pcap file, and jotting up a Lua dissector. While helpful in finding patterns I wasn't even looking for, Wireshark ultimately turned out not to be suitable for the task. It really is meant for communication protocols, and that's really where it shines. I went on to write up a custom tool that does what I need. The advice was still helpful.\n",
            "time": null
        },
        {
            "user": "Dvd848",
            "text": "Impressive! Glad to hear you were able to solve your problem.\n",
            "time": null
        }
    ],
    "answers_data": []
}