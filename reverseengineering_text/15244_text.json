{
    "title": "How to use radare2 to disassemble an executable file?",
    "link": "https://reverseengineering.stackexchange.com/questions/15244/how-to-use-radare2-to-disassemble-an-executable-file",
    "content": "I have a cgywin executable file (shall be in PE format) and would like to disassemble it to get the assembly code on the text section using radare2, most of the examples disassemble per instruction instead of a whole file.\nI typed <pre><code>radare2 filename</code></pre> then, <pre><code>pdf</code></pre>, it said\n<pre><code>p:Cannot find function at 0x100401000\n</code></pre>\nWhat am I missing?\nAny help is really appreciated.\n",
    "votes": "9",
    "answers": 3,
    "views": "33k",
    "tags": [
        "disassembly",
        "radare2"
    ],
    "user": "lsamarahan",
    "time": "Apr 28, 2017 at 12:40",
    "comments": [],
    "answers_data": [
        {
            "content": "I aggregate all usefull information from the last responses and did an improvement.\nYou can solve your problem in 3 steps:\n\nUse rabin2.exe to inspect .text section size and virtual address\nrabin2.exe -S [filename]\n\n\n\n\nThen load the file with radare2 and seek to vaddress obtained in last step\nradare2.exe -d [filename]\n[0x14000aadc]> s [vaddress] # [vaddress] = 0x140001000 in my case\n\nAnd then lastly, print in assembly code format from the seek position to the seek position + [size of .text section] to the stdout.\n[0x140001000]> pd [vsize] > out.txt # [vsize] = 0x28000 in my case\n\n\nIn my case the first 30 lines of my out.txt resulted in this:\n",
            "votes": "1",
            "user": "Pedro Correia",
            "time": "Jan 6, 2023 at 5:00",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "First, you have to understand that the <pre><code>pdf</code></pre> command is used to disassemble functions, so you first have to look for function starting points (I think that they are using symbols and some others heuristics to find it). \nTo get an automatic analysis of the functions, just type <pre><code>aaa</code></pre> first. It will run most of the required analysis on the executable. Then, type <pre><code>pdf</code></pre>.\nIf you just want a raw disassembly without function analysis, then type just <pre><code>pd</code></pre>.\nThe logic behind the radare commands is that each character of the command has a meaning and build tree-like command family. \nFor example, the '<pre><code>p</code></pre>' is for the 'printing' command family. Try to type <pre><code>p?</code></pre>, you will get the following:\n<pre><code>[0x00005430]> p?\n|Usage: p[=68abcdDfiImrstuxz] [arg|len] [@addr]\n| p=[?][bep] [blks] [len] [blk]  show entropy/printable chars/chars bars\n| p2 [len]                       8x8 2bpp-tiles\n| p3 [file]                      print stereogram (3D)\n| p6[de] [len]                   base64 decode/encode\n| p8[?][j] [len]                 8bit hexpair list of bytes\n| pa[edD] [arg]                  pa:assemble  pa[dD]:disasm or pae: esil from hexpairs\n| pA[n_ops]                      show n_ops address and type\n| p[b|B|xb] [len] ([skip])       bindump N bits skipping M\n| pb[?] [n]                      bitstream of N bits\n| pB[?] [n]                      bitstream of N bytes\n| pc[?][p] [len]                 output C (or python) format\n| pC[d] [rows]                   print disassembly in columns (see hex.cols and pdi)\n| pd[?] [sz] [a] [b]             disassemble N opcodes (pd) or N bytes (pD)\n| pf[?][.nam] [fmt]              print formatted data (pf.name, pf.name $<expr>)\n| ph[?][=|hash] ([len])          calculate hash for a block\n| p[iI][df] [len]                print N ops/bytes (f=func) (see pi? and pdi)\n| pm[?] [magic]                  print libmagic data (see pm? and /m?)\n| pr[?][glx] [len]               print N raw bytes (in lines or hexblocks, 'g'unzip)\n| p[kK] [len]                    print key in randomart (K is for mosaic)\n| ps[?][pwz] [len]               print pascal/wide/zero-terminated strings\n| pt[?][dn] [len]                print different timestamps\n| pu[?][w] [len]                 print N url encoded bytes (w=wide)\n| pv[?][jh] [mode]               show variable/pointer/value in memory\n| p-[?][jh] [mode]               bar|json|histogram blocks (mode: e?search.in)\n| px[?][owq] [len]               hexdump of N bytes (o=octal, w=32bit, q=64bit)\n| pz[?] [len]                    print zoom view (see pz? for help)\n| pwd                            display current working directory\n</code></pre>\nThen, the second letter (<pre><code>d</code></pre>) stands for 'disassemble', try <pre><code>pd?</code></pre>:\n<pre><code>[0x00005430]> pd?\n|Usage: p[dD][ajbrfils] [sz] [arch] [bits] # Print Disassembly\n| NOTE: len  parameter can be negative\n| NOTE:      Pressing ENTER on empty command will repeat last pd command and also seek to end of disassembled range.\n| pd N       disassemble N instructions\n| pd -N      disassemble N instructions backward\n| pD N       disassemble N bytes\n| pda        disassemble all possible opcodes (byte per byte)\n| pdb        disassemble basic block\n| pdc        pseudo disassembler output in C-like syntax\n| pdC        show comments found in N instructions\n| pdk        disassemble all methods of a class\n| pdj        disassemble to json\n| pdr        recursive disassemble across the function graph\n| pdf        disassemble function\n| pdi        like 'pi', with offset and bytes\n| pdl        show instruction sizes\n| pds[?]     disassemble summary (strings, calls, jumps, refs) (see pdsf and pdfs)\n| pdt        disassemble the debugger traces (see atd)\n</code></pre>\nAs you can see, <pre><code>pdf</code></pre> stands for 'disassemble function'.\nBut, if you want a raw disassembly of a memory area, then <pre><code>pd</code></pre> is probably what you need. It disassembly blindly from the current address up to a certain windows of memory. If you want to disassemble at a precise address, then use <pre><code>pd @0xdeadbeef</code></pre>.\n",
            "votes": "15",
            "user": "perror",
            "time": "Apr 28, 2017 at 8:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "lsamarahan",
                    "text": "<span class=\"comment-copy\">Yes, I managed to play around with the 'pd' of my executable file. My file has a .text section 6.5K (byte?), how shall i extract the entire .text section and dump to an output file? I shall know the last address of text section in order to do this? thanks!</span>",
                    "time": null
                },
                {
                    "user": "perror",
                    "text": "<span class=\"comment-copy\">You can enlarge the window of the <code>pd</code> command by typing <code>pd nb_instr @addr</code>. For example: <code>pd 1000 @deadbeef</code>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "print disassembly size redirect output_filename\n\n<pre><code>pd</code></pre> : print disassembled code\n<pre><code>$s</code></pre> : size of the executable is assigned to this variable by radare2\n<pre><code>></code></pre> : redirect output to file\noutput_filename : output written to this file\n\nthus, try:\n<pre><code>pd $s >myfile.asm\n</code></pre>\nOr, (s)eek to beginning of .text section then (p)rint(D)isassemble N bytes\nN computed from the end of the .text section address (section_end..text) minus the beginning .text section address (section..text):\n<pre><code>s section..text\npD section_end..text-section..text > myfiles.txt\n</code></pre>\nIf your executable has multiple sections, you will need to add the section number after the name (e.g., section..text.0).  Find the name of the sections by listing them all (S)ection list:\n<pre><code>S\n</code></pre>\nP.S. I'm just learning how to use radare2 myself.\n",
            "votes": "6",
            "user": "Hi-Angel",
            "time": "Jul 31, 2019 at 7:15",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Hi-Angel",
                    "text": "<span class=\"comment-copy\">While on it: I think you wanted not <code>S</code> but <code>iS</code>. There's no <code>S</code> command, but <code>iS</code> does show info about sections available.</span>",
                    "time": null
                }
            ]
        }
    ]
}