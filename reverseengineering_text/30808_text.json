{
    "title": "Finding the main function on Windows compiled executables",
    "link": "https://reverseengineering.stackexchange.com/questions/30808/finding-the-main-function-on-windows-compiled-executables",
    "content": "For a C/C++ program compiled on Windows using the x86 architecture, what is the best way to find the main function within disassembled code without relying on signatures such as FLIRT?\nI've found various answers to questions similar to this, but they're answering questions that are far more specific to the OPs use-case. I often see that searching for three (console) or four (GUI) pushes somewhere within the CRT libraries is recommended, but this sometimes is too weak of an indication for me (envp is optional, weird startup wrapping libraries, etc.)\nAre there any more solid ways to look for the main(), WinMain or DllMain() functions in Windows PE files?\n",
    "votes": "2",
    "answers": 0,
    "views": "527",
    "tags": [
        "disassembly",
        "windows",
        "x86",
        "c"
    ],
    "user": "Soyboii",
    "time": "Aug 21, 2022 at 8:31",
    "comments": [
        {
            "user": "dingo_kinznerhook",
            "text": "I see your question is related to reverseengineering.stackexchange.com/questions/19754/â€¦ but I agree it is different because you're asking for a stronger heuristic than was given there.\n",
            "time": null
        },
        {
            "user": "dingo_kinznerhook",
            "text": "I doubt you will find an answer to this that works in every circumstance, hence the reason you always find answers that are specific to the use case. If you can generate another program using the same compiler and startup wrapping libraries as your RE target, look at how you can identify main() on that program and see if you can identify some pattern that will reliably point you to main(). Sorry if that's not much help.\n",
            "time": null
        }
    ],
    "answers_data": []
}