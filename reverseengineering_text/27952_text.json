{
    "title": "Is it possible to extract the header files used by a Mach-O 64-bit SDK Binary?",
    "link": "https://reverseengineering.stackexchange.com/questions/27952/is-it-possible-to-extract-the-header-files-used-by-a-mach-o-64-bit-sdk-binary",
    "content": "I have a Mach-O 64 bit SDK that I've opened up with JEB (community edition) and I'd like to know if it's even possible to see things like the header files (.h) used/referenced by the binary.\nThe reason is I'm trying to understand what sort of sensitive information can be extracted from the binary other than just running strings on it. I know the header files used to compile the binary contain information that is sensitive but I can't determine if that information is visible (or even included?) or not when the binary ships out.\n",
    "votes": "0",
    "answers": 0,
    "views": "142",
    "tags": [
        "x86-64",
        "mach-o",
        "jeb"
    ],
    "user": "Tikiyetti",
    "time": "Jul 5, 2021 at 19:31",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "Hi and welcome to RE.SE. What you want may (I am no macOS buff) work via proxy by looking for the dylib dependencies. However, this doesn't include static libs obviously. Also exactly what you want is impossible. Not even the compiler sees the headers, the preprocessor does prior to the compiler receiving compilation units. Also your target software may not necessarily be written with C/C++, so the notion of header files may not apply. Also your question is rather subjective as it hinges on your definition of \"sensitive\".\n",
            "time": null
        },
        {
            "user": "Tikiyetti",
            "text": "Thank you so much for clarifying for me if the header files were included or not in the binary. I wasn't sure so I didn't know if my question would even make sense. To answer your questions though, I do have access to all the .h and .m files and I know the source lang is C. Yes what constitutes \"sensitive\" is up to me. Since I know what's in the header files I know what I am looking for when analyzing the binary. I want to know if what I see in the header files can be found simply by reversing the binary file.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "In all likelihood it can. Very likely <pre><code>strings</code></pre> will be sufficient, but you may want to include looking for various Unicode encodings, too. If we're talking numeric constants, these can be found, yes. Debug symbols - if not split from the binary - are a bigger concern in this scenario.\n",
            "time": null
        },
        {
            "user": "Tikiyetti",
            "text": "Thank you for your reply. So far strings hasn't turned up any of the strings that I know exist in the header files. Tried from both Jeb and cli just in case. I've also run <pre><code>objdump --syms myBinary | grep -i debug</code></pre> and there is a significant amount of output from that but it's just a file path with the word \"debug\" in it so I don't believe debug symbols were included at compilation time. If I search for an explicit string that I know exists in the header files, and it doesn't return, is that enough to say it can't be extracted from the binary? I feel like there would be more to it than that.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "You realize, though, that the strings from headers would also have to be referenced somewhere, right? Unless you're giving the wrong arguments to <pre><code>strings</code></pre> (e.g. when looking for strings below the default length threshold) you should be seeing those referenced in the resulting binary (unless some sort of compile-time obfuscation was being employed).\n",
            "time": null
        }
    ],
    "answers_data": []
}