{
    "title": "ROP exploitation in x86_64 linux",
    "link": "https://reverseengineering.stackexchange.com/questions/3726/rop-exploitation-in-x86-64-linux",
    "content": "I am working on return oriented programming exploitation on a x86_64 Linux.\nHowever, my research leads to impossibility of ROP exploitation in 64-bit Linux machine because all of code segments are loaded in null byte leading addresses.\nIs it true?\n<pre><code>Gdb,Sections:\n(gdb) i file\n    `/home/******/Desktop/BOF/lib64', file type elf64-x86-64.\n    Entry point: 0x400ffc\n    0x0000000000400190 - 0x00000000004001b0 is .note.ABI-tag\n    0x00000000004001b0 - 0x00000000004001d4 is .note.gnu.build-id\n    0x00000000004001d8 - 0x00000000004002f8 is .rela.plt\n    0x00000000004002f8 - 0x0000000000400312 is .init\n    0x0000000000400320 - 0x00000000004003e0 is .plt\n    0x00000000004003e0 - 0x0000000000494808 is .text\n    0x0000000000494810 - 0x000000000049614c is __libc_freeres_fn\n    0x0000000000496150 - 0x00000000004961f8 is __libc_thread_freeres_fn\n    0x00000000004961f8 - 0x0000000000496201 is .fini\n    0x0000000000496220 - 0x00000000004b6224 is .rodata\n    0x00000000004b6228 - 0x00000000004b6230 is __libc_atexit\n    0x00000000004b6230 - 0x00000000004b6288 is __libc_subfreeres\n    0x00000000004b6288 - 0x00000000004b6290 is __libc_thread_subfreeres\n    0x00000000004b6290 - 0x00000000004c32ac is .eh_frame\n    0x00000000004c32ac - 0x00000000004c33b9 is .gcc_except_table\n    0x00000000006c3ea0 - 0x00000000006c3ec0 is .tdata\n    0x00000000006c3ec0 - 0x00000000006c3ef8 is .tbss\n    0x00000000006c3ec0 - 0x00000000006c3ed0 is .init_array\n    0x00000000006c3ed0 - 0x00000000006c3ee0 is .fini_array\n    0x00000000006c3ee0 - 0x00000000006c3ee8 is .jcr\n    0x00000000006c3f00 - 0x00000000006c3ff0 is .data.rel.ro\n    0x00000000006c3ff0 - 0x00000000006c4000 is .got\n    0x00000000006c4000 - 0x00000000006c4078 is .got.plt\n    0x00000000006c4080 - 0x00000000006c56f0 is .data\n    0x00000000006c5700 - 0x00000000006c8308 is .bss\n    0x00000000006c8308 - 0x00000000006c8338 is __libc_freeres_ptrs\n\n    0x0000000000400190 - 0x00000000004001b0 is .note.ABI-tag\n    0x00000000004001b0 - 0x00000000004001d4 is .note.gnu.build-id\n    0x00000000004001d8 - 0x00000000004002f8 is .rela.plt\n    0x00000000004002f8 - 0x0000000000400312 is .init\n    0x0000000000400320 - 0x00000000004003e0 is .plt\n    0x00000000004003e0 - 0x0000000000494808 is .text\n    0x0000000000494810 - 0x000000000049614c is __libc_freeres_fn\n    0x0000000000496150 - 0x00000000004961f8 is __libc_thread_freeres_fn\n    0x00000000004961f8 - 0x0000000000496201 is .fini\n    0x0000000000496220 - 0x00000000004b6224 is .rodata\n    0x00000000004b6228 - 0x00000000004b6230 is __libc_atexit\n    0x00000000004b6230 - 0x00000000004b6288 is __libc_subfreeres\n    0x00000000004b6288 - 0x00000000004b6290 is __libc_thread_subfreeres\n    0x00000000004b6290 - 0x00000000004c32ac is .eh_frame\n    0x00000000004c32ac - 0x00000000004c33b9 is .gcc_except_table\n    0x00000000006c3ea0 - 0x00000000006c3ec0 is .tdata\n    0x00000000006c3ec0 - 0x00000000006c3ef8 is .tbss\n    0x00000000006c3ec0 - 0x00000000006c3ed0 is .init_array\n    0x00000000006c3ed0 - 0x00000000006c3ee0 is .fini_array\n    0x00000000006c3ee0 - 0x00000000006c3ee8 is .jcr\n    0x00000000006c3f00 - 0x00000000006c3ff0 is .data.rel.ro\n    0x00000000006c3ff0 - 0x00000000006c4000 is .got\n    0x00000000006c4000 - 0x00000000006c4078 is .got.plt\n    0x00000000006c4080 - 0x00000000006c56f0 is .data\n    0x00000000006c5700 - 0x00000000006c8308 is .bss\n    0x00000000006c8308 - 0x00000000006c8338 is __libc_freeres_ptrs\n</code></pre>\n",
    "votes": "6",
    "answers": 1,
    "views": "3k",
    "tags": [
        "exploit",
        "buffer-overflow",
        "x86-64"
    ],
    "user": "user40387",
    "time": "Feb 26, 2014 at 15:21",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "It depends on the bug you're exploiting. You're talking about simple strcpy/strcat/sprintf/... bugs, right?\n",
            "time": null
        },
        {
            "user": "user40387",
            "text": "Yes,but what is the difference? in all of bugs(if it is non pie) we have addresses like above...please see also : v0ids3curity.blogspot.de/2013/07/â€¦ (i cant understand how we can use rop gadgets that contains null bytes in their addresses)\n",
            "time": null
        },
        {
            "user": "joxeankoret",
            "text": "You can build ROP gadgets with null bytes in the addresses. Yes. Indeed, it's been a while I don't need to filter out 0x00 characters in my exploit payloads because it's been a while since I don't exploit a pure string manipulation problem (i.e., only binary formats and stuff).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This comes down to the type of bug you are exploiting. If your payload cant contain null bytes (a vulnerable strcpy), this can become an issue, however not all bugs have this constraint. Take for example a bug in how a filetype is parsed, which allows null bytes. \nAlso there is the possibility of a series of bugs to be used, for example, the idea of heap spraying. Generally you spray the heap doing other \"legitimate\" things, such as in this write up by corelancoder. His shell code, which would be your ROP chain, is part bitmap files that he consecutively loads to \"spray the heap\", while the bug is actually triggered by javascript and doesn't actually contain the shellcode.\nIf you want to just work on ROP, and not worry about byte limitations, i'd suggest writing a simple harness to test your shellcode.\nEDIT Sorry wrong harness. This one is clearly 64-bit specific.\n<pre><code>#include <stdio.h>\n#include <stdlib.h>\n\nint data[10000000];\n\nvoid start_rop(char * rop)\n{\n        __asm(\"mov (%rax),%rsp\"); //move contents of first argument into the stack pointer\n}\n\nint main(int argc, char * argv)\n{\n\n        char  code[] = \"AAAAAAAA\";\n        char * malloc_code = (char *)malloc(sizeof(code));\n        memcpy(malloc_code,&code,sizeof(code));\n\n        start_rop(malloc_code);\n\n        free(malloc_code);\n        return 0;\n}\n</code></pre>\n",
            "votes": "6",
            "user": "jbh",
            "time": "Feb 20, 2014 at 19:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user40387",
                    "text": "<span class=\"comment-copy\">I think the above code isnt related to rop.Its just a C stub function for testing shellcodes also it can not be used for new kernels because data sections is not executable anymore.</span>",
                    "time": null
                },
                {
                    "user": "jbh",
                    "text": "<span class=\"comment-copy\">You are completely correct, I copied over the wrong harness. Fixed in answer.</span>",
                    "time": null
                }
            ]
        }
    ]
}