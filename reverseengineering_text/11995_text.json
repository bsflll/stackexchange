{
    "title": "Recovering variable name in debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/11995/recovering-variable-name-in-debugger",
    "content": "This question somehow relates to my previous question, but now I have a binary which is not stripped.\nLet's say I have the following code snippet\n<pre><code>QString my_variable(\"almafa\");\nqDebug() << my_variable;\n</code></pre>\nBefore calling the <pre><code><<</code></pre> operator I expect that either <pre><code>rsi</code></pre> or <pre><code>rdi</code></pre> to contain the address of <pre><code>my_variable</code></pre>. Correct me if I am wrong.\n<pre><code>   0x0000000000400aca <+100>:    lea    -0x60(%rbp),%rdx\n   0x0000000000400ace <+104>:    lea    -0x50(%rbp),%rax\n   0x0000000000400ad2 <+108>:    mov    %rdx,%rsi\n   0x0000000000400ad5 <+111>:    mov    %rax,%rdi\n   0x0000000000400ad8 <+114>:    callq  0x400d40 <QDebug::operator<<(QString const&)>\n</code></pre>\n<pre><code>strings a.out | grep my_variable</code></pre> returns <pre><code>my_variable</code></pre>, so it is present in the executable. Is it somehow possible to ask <pre><code>gdb</code></pre> (or any other linux debugger) what is the variable name which belongs to a given address?\n<pre><code>my_variable</code></pre> is recognized by <pre><code>gdb</code></pre> since command <pre><code>print my_variable</code></pre> is working.\n",
    "votes": "0",
    "answers": 2,
    "views": "2k",
    "tags": [
        "gdb"
    ],
    "user": "robert",
    "time": "Apr 13, 2017 at 12:49",
    "comments": [],
    "answers_data": [
        {
            "content": "I was trying amritanshu's answer using the following code:\n<pre><code>int z;\nint main() \n{\n    int x;\n    x = 5;\n    z = 6;\n    return 0; \n}\n</code></pre>\nPlease note that z is a global variable and x is a local variable.  I ran the program in gdb, paused execution of the program at the line x = 5. When I used the command\n<pre><code>info address z\n</code></pre>\nI got the following response:\n<pre><code>Symbol \"z\" is static storage at address 0x601030.\n</code></pre>\nAnd when I typed:\n<pre><code>info symbol 0x601030\n</code></pre>\nGDB displayed:\n<pre><code>z in section .bss\n</code></pre>\nSo, the info symbol address command worked for me when examining a global variable.  But, I wasn't able to do the same thing for the local variable x.  I determined the address of x using the following command:\n<pre><code>print &x\n</code></pre>\nWhen I used the address that was displayed in the info symbol command, GDB displayed\n<pre><code>No symbol matches ...\n</code></pre>\nSo, it may depend on whether the address your examining is used for a global or local variable.  As a workaround, you can try using the command info locals, and then use the print &variable command on each local variable that is displayed.     \nGDB documentation on the info commands related to examining the symbol table can be found at Examining the Symbol Table.\n",
            "votes": "1",
            "user": "ashleydc",
            "time": "Mar 17, 2016 at 15:28",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "To identify the nearest symbol for a given address you can try \"info\" command:\ninfo symbol address\n",
            "votes": "0",
            "user": "amritanshu",
            "time": "Feb 11, 2016 at 17:52",
            "is_accepted": false,
            "comments": []
        }
    ]
}