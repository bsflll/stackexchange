{
    "title": "Can I force GDB breakpoints and disassemble?",
    "link": "https://reverseengineering.stackexchange.com/questions/25616/can-i-force-gdb-breakpoints-and-disassemble",
    "content": "Sorry English isn't my first language.\nI noticed something when setting breakpoints in GDB. It appears that they are ignored if symbols aren't loaded.\nI have found it weird how GDB behaves when there are no symbols at all loaded and if I want to debug something I am having to set a break point at __libc_start_main@plt and nexti until I reach a the main binary.  I also noticed that I cannot disassemble there in the main binary either (I receive this odd message \"No function contains program counter for selected frame.\"), but that aside it break points are essentially ignored. I have found an odd work around and that is setting\n<pre><code>set *0x56555878 = 0xcc \n</code></pre>\nMy questions are:\n\nWhy does GDB behave so weirdly without symbols?\nWhy do normal for breakpoints fail to be recognized?\nIs setting my desired breakpoints to 0xcc and then resting; Is this a good practice?\nIs there a better way to set breakpoints?\nWhy can I not disassemble without Why can I not disassemble without symbols?\n\nEdit: It looks like I cannot set *breakpoints in glibc but I can when I land in int main() program , But while in the int main() , I lose ability to disassemble.\n",
    "votes": "0",
    "answers": 1,
    "views": "1k",
    "tags": [
        "debugging",
        "c++",
        "gdb",
        "breakpoint",
        "debugging-symbols"
    ],
    "user": "LUser",
    "time": "Aug 6, 2020 at 15:12",
    "comments": [],
    "answers_data": [
        {
            "content": "gdb is primarily a Source Level Debugger\nto set a bp on an address instead of symbol use *\n<pre><code>(gdb) break main\nBreakpoint 1 at 0x100401094: file mingtest.cpp, line 4.\n(gdb) break *0x100401094\nNote: breakpoint 1 also set at pc 0x100401094.\nBreakpoint 2 at 0x100401094: file mingtest.cpp, line 4.\n(gdb)\n</code></pre>\nyou can disassemble using address, length at any arbitrary addresss\n<pre><code>(gdb) disassemble 0x100401094,+0x10\nDump of assembler code from 0x100401094 to 0x1004010a4:\n   0x0000000100401094 <main(int, char**)+20>:   mov    edx,DWORD PTR [rbp+0x10]\n   0x0000000100401097 <main(int, char**)+23>:   lea    rcx,[rip+0x1f62]        # 0x100403000\n   0x000000010040109e <main(int, char**)+30>:   call   0x100401110 <printf>\n   0x00000001004010a3 <main(int, char**)+35>:   mov    DWORD PTR [rbp-0x4],0x0\nEnd of assembler dump.\n(gdb)\n</code></pre>\n",
            "votes": "4",
            "user": "blabb",
            "time": "Aug 7, 2020 at 23:14",
            "is_accepted": false,
            "comments": []
        }
    ]
}