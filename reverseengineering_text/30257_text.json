{
    "title": "x64dbg placing a on write breakpoint on a dynamic allocated address",
    "link": "https://reverseengineering.stackexchange.com/questions/30257/x64dbg-placing-a-on-write-breakpoint-on-a-dynamic-allocated-address",
    "content": "I am currently trying to reverse the registration scheme of a crackme. I found the jump instruction that decides if the title of the program says “registered” or “unregistered” by simply searching for stringreferences. The compare looks like that:\n<pre><code>cmp byte ptr ds:[eax+0x1620], 0x0\n</code></pre>\nThe address contained in <pre><code>eax</code></pre> is always a different one, which makes it hard to set a breakpoint on the compared address. I already tried to track back <pre><code>eax</code></pre>, but that obviously results in hours of work without any result.\nDoes anybody know a technique to get the part in the disassembly where the program decides whether I am registered or not?\nThanks in advance.\nBtw. I am not asking for a crack. I often come across compares like that, and they always discourage me because I don't know what to do there.\nSorry for the broken English.\n",
    "votes": "1",
    "answers": 0,
    "views": "439",
    "tags": [
        "disassembly",
        "assembly",
        "x64dbg",
        "crackme"
    ],
    "user": "Gero B.",
    "time": "Apr 14, 2022 at 13:29",
    "comments": [
        {
            "user": "Luca D'Amico",
            "text": "I doubt you will get an answer to your question, as piracy is not condoned here. Even if that company went out of business, this still a borderline question :( The answer isn't hard anyway, you could just have a quick google search.\n",
            "time": null
        },
        {
            "user": "Gero B.",
            "text": "You are right. I changed the text to a crackme. Could you please tell me the answer if it isn't hard to find. I tried google search for hours and the only recommendations were memory or hardware breakpoints, which obviously won't work here.\n",
            "time": null
        },
        {
            "user": "Luca D'Amico",
            "text": "Hardware breakpoints on memory access is the correct answer. I suspect that the address here, is from another module. You can follow it in dump and then check in what module it is located (using the Memory Map tab).\n",
            "time": null
        },
        {
            "user": "Gero B.",
            "text": "Okay thanks! It breaks at the right spot but still only sometimes as i already assumed because the address is dynamic. Is there anyway to prevent that?\n",
            "time": null
        },
        {
            "user": "Luca D'Amico",
            "text": "You haven't event told me if that's another module... I can only guess what's going one here.. Probably it is due to ASLR, so check the \"dll can move\" flag (that, if set, will relocate the executable at random). Please be more specific and clear with your questions, otherwise I can only give you a guess.\n",
            "time": null
        }
    ],
    "answers_data": []
}