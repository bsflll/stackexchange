{
    "title": "Analyzing an APK without tools [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/12556/analyzing-an-apk-without-tools",
    "content": "Closed. This question needs details or clarity. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Add details and clarify the problem by editing this post.\n\n\nClosed 8 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI know you can unpack APKs with apktool and the likes, however we're doing an exercise at uni where we're supposed to get some info like permissions declared and permissions used from some APKs without using tools. Not really sure where to start. I'm guessing I'll need to unzip and apply some public-private signing.\n",
    "votes": "0",
    "answers": 1,
    "views": "253",
    "tags": [
        "android",
        "apk"
    ],
    "user": "Michiel Ariens",
    "time": "8 years ago",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "You need to be a bit more specific what your problem is. Yes, an APK is a zip file, so you can unzip it. But isn't <pre><code>unzip</code></pre> a tool as well? No, you don't need to apply any signing as long as you aren't trying to generate a new modified APK. To see permissions, you need to check Android.xml, but inside an APK, this isn't a text XML file, it has a binary encoding. Are you allowed to use a tool to convert that back to readble XML?\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Amazing exercise.\nHere are the steps you can do broadly:\n\nUnzip the <pre><code>apk</code></pre> file (APK files are compressed <pre><code>zip</code></pre> files)\nAll the <pre><code>xml</code></pre> files including the <pre><code>AndroidManifest.xml</code></pre> are encoded in a binary format, also better known as <pre><code>AXML</code></pre>\nParse the <pre><code>AXML</code></pre> files by writing your own scripts. See examples AXML Parser in GO and AXML Parser in C\nyou would find <pre><code>classes.dex</code></pre> file which is a <pre><code>DEX</code></pre> file or better known as Dalvik Executable\nThe Dalvik opcode might come handy, if you can read the hex-version of the dexfile and write your own script\nIf you have installed android sdk properly, there is a tool <pre><code>dexdump</code></pre> which comes by default in it\nIn order to use the tool the following command can help\n<pre><code>$ dexdump -d classes.dex\n000418: 2b02 0c00 0000               |0000: packed-switch v2,0000000c // +0x0c\n00041e: 12f0                         |0003: const/4 v0, #int -1 // #ff\n000420: 0f00                         |0004: return v0\n000422: 1220                         |0005: const/4 v0, #int 2 // #2\n000424: 28fe                         |0006: goto 0004 // -0002\n000426: 1250                         |0007: const/4 v0, #int 5 // #5\n000428: 28fc                         |0008: goto 0004 // -0004\n00042a: 1260                         |0009: const/4 v0, #int 6 // #6\n00042c: 28fa                         |000a: goto 0004 // -0006\n00042e: 0000                         |000b: nop // spacer\n000430: 0001 0300 faff ffff 0500 ... |000c: packed-switch-data (10 units)\n</code></pre>\n",
            "votes": "1",
            "user": "perror",
            "time": "Apr 29, 2016 at 11:39",
            "is_accepted": true,
            "comments": []
        }
    ]
}