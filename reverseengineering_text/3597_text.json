{
    "title": "What is the meaning of this code generated by IDA Pro?",
    "link": "https://reverseengineering.stackexchange.com/questions/3597/what-is-the-meaning-of-this-code-generated-by-ida-pro",
    "content": "Test platform is Linux 32 bit.\nI use IDA Pro to disassembly the basename from coreutils 8.5\n compiled by gcc 4.6.3\nHere is a code snippet generated by IDA Pro\n<pre><code>           call    _i686_get_pc_thunk_bx                                 \n           add     ebx, 292Eh\n           sub     esp, 18h\n           mov     eax, ds:(__dso_handle_ptr - 804DFF4h[ebx]\n           test    eax, eax\n           jz      short loc_804B6F8\n           mov     eax, [eax]\n\n     loc_804B6DB:\n           mov     [esp+1Ch+var_14], eax\n           mov     eax, [esp+1Ch+arg_0]\n           mov     dword [esp+1Ch+var_18], 0\n           mov     [esp+1Ch+var_1C], eax\n           call    __cxa_atexit\n           add     esp, 18h\n           pop     ebx\n           retn\n\n     loc_804B6F8:\n           xor     eax, eax\n           jmp     short loc_804B6DB\n</code></pre>\nI don't understand this line:\n<pre><code>mov     eax, ds:(__dso_handle_ptr - 804DFF4h[ebx]\n</code></pre>\nand after searching the code, I can only find this:\n<pre><code>        __dso_handle    dd 0\n</code></pre>\nin the .data section.\nSo my questions are:\n\nWhat is the meaning of this line..?  Is it like a version checking stuff..?\nCan I just safely remove this line without affecting the functionality of the code..?\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ida",
        "disassembly",
        "assembly",
        "disassemblers",
        "nasm"
    ],
    "user": "lllllllllllll",
    "time": "Feb 7, 2014 at 21:12",
    "comments": [
        {
            "user": "0xC0000022L",
            "text": "You should really add more context!\n",
            "time": null
        },
        {
            "user": "PhoeniX",
            "text": "Can you please post at least the whole <pre><code>main</code></pre> of basename?\n",
            "time": null
        },
        {
            "user": "lllllllllllll",
            "text": "@ph0sec Thank you and I can modify the question later. But basically I modify my IDC scripts to directly generate nasm syntax asm, then this problem gone....\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You are looking at binary that is compiled as position-independent code. The <pre><code>call    _i686_get_pc_thunk_bx</code></pre> and the following addition to <pre><code>ebx</code></pre> shows just that. If you take a look at the disassembly, you'll see that the address of the <pre><code>add ebx, 292Eh</code></pre> plus 0x292E will result in the first address of the GOT. That why in the next line, _dso_handle_ptr is addressed in such a \"funny\" way.\nIDA however is nice enough to show you this in the disassembly as you would normally only see 0xSOMEADDR[ebx]. \nIn terms of the second question: that line retrieves a global variable, puts it into <pre><code>eax</code></pre> and then checks if it is zero or not. So, you should not just \"delete\" that line since then the <pre><code>test eax, eax</code></pre> would use some old value of <pre><code>eax</code></pre> (which I am sure you will not like all that much).\n",
            "votes": "8",
            "user": "sqrtsben",
            "time": "Feb 6, 2014 at 23:13",
            "is_accepted": true,
            "comments": []
        }
    ]
}