{
    "title": "Disassemble using an emulator",
    "link": "https://reverseengineering.stackexchange.com/questions/4821/disassemble-using-an-emulator",
    "content": "I learned the disassembly challenges from this link. The following six challenges are listed in that article:\n\nData embedded in the code regions\nVariable instruction size\nIndirect branch instructions\nFunctions without explicit CALL sites within the executable's code segment\nPosition independent code (PIC) sequences\nHand crafted assembly code.\n\nHowever, I am thinking about the following disassembly method which seems to solve the above challenges. Assuming we have an executable to be disassembled, an input set that can has 100% coverage of the code, and an emulator (e.g. QEMU). Then, we can instrument the emulator to output each instruction executed by the emulated CPU and the corresponding memory address. After that, we can translate each instruction to assembly instruction, and the whole program is now disassembled. \nCould you please tell me why this idea will not/will work?\n",
    "votes": "7",
    "answers": 4,
    "views": "2k",
    "tags": [
        "disassembly",
        "emulation"
    ],
    "user": "ZillGate",
    "time": "Jul 25, 2014 at 21:29",
    "comments": [],
    "answers_data": [
        {
            "content": "an input set that can has 100% coverage of the code\n\nThis may be very difficult to achieve, especially if the code behavior depends on something that you don't directly control (time, memory, OS version/environment, random number generator etc.). Additional observations:\n\nactually executing all that code may take more time than you can afford\nexecuting some parts of the code may require conditions you cannot satisfy (e.g. a specific hardware peripheral)\nyou will miss code which is present in binary but never executes (dead code). In some cases such code can reveal additional information about the binary\nyour approach may discover all code, but it will likely miss a lot of data.\n\nHowever, it does not mean that the approach is completely useless. In fact there's already been some work in this area. For example, check out the S2E (Selective Symbolic Execution) project:\nhttps://sites.google.com/site/dslabepfl/proj/s2e\n\nConceptually, S2E is an automated path explorer with modular path analyzers: the explorer drives the target system down all execution paths of interest, while analyzers check properties of each such path (e.g., to look for bugs) or simply collect information (e.g., count page faults). Desired paths can be specified in multiple ways, and one can either combine existing analyzers to build a custom analysis tool, or write new analyzers using the S2E API.\nS2E helps make analyses based on symbolic execution practical for large software that runs in real environments, without requiring explicit modeling of these environments.\n",
            "votes": "10",
            "user": "Community",
            "time": "Jun 17, 2020 at 9:54",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "Can we use dynamic analysis (or just emulator) to achieve 100% code coverage?\n\nNo, if I was right, it equals to Turing Halting problem.\n\nemulator based disassemble approach\n\nI am afraid this may not be a very new idea, and code coverage is a big issue.\nBut it is always possible that you find a different angle and make some contributions in related area.\nAn interesting paper in last year's tier-one security conference CCS 2013 Obfuscation Resilient Binary Code Reuse through even push related ideas future. \nIt leverages an emulator to disassemble code, dynamic taint analysis to lift concrete value into symbols, and somehow re-use the disassembled asm code (embedded in C code.)\nI wish it could be helpful\n",
            "votes": "5",
            "user": "lllllllllllll",
            "time": "Oct 14, 2014 at 20:30",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "If you want a simple answer. Code coverage. If you only trace called/executed code, how do you know you found all the code. \nEmulation is good to understand code when it has memory altering behavior or to understand code. Like in one of my projects I knew I had some double math functions implemented in software. So running an emu to see the results was useful to see the results to identify division verse addition functions. But the emu if started from the entry point would get into an infinite loop as the external\nInterrupts did not fire at the expected times.\n",
            "votes": "2",
            "user": "Simeon Pilgrim",
            "time": "Jul 10, 2014 at 3:43",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ZillGate",
                    "text": "<span class=\"comment-copy\">Thanks! For the code coverage, many programs are shipped with a test suite. And we could assume that they can cover most of the code.</span>",
                    "time": null
                },
                {
                    "user": "Simeon Pilgrim",
                    "text": "<span class=\"comment-copy\">@zillgate That would be a very flawed assumption</span>",
                    "time": null
                },
                {
                    "user": "broadway",
                    "text": "<span class=\"comment-copy\">In practice, test suites often cover a very small percentage of the basic blocks. Much smaller than one would hope.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Dis-assembly as a technique isn't a problem As long as you know the boundaries of your binary file (where the data/code starts) and you know the Instrustion Set.\nIf you know you have UNIX ELF file on x86, you can just run <pre><code>objdump</code></pre> on it to get disassembled output:\n<pre><code>objdump -d <file></code></pre>\nTheir research was on security. They wanted to read the code boundaries, understand what certain sections of code do and then overwrite some of them. It's much harder problem (e.g.: when do you know the fragment being overwritten isn't actually supposed to be there?)\n",
            "votes": "1",
            "user": "Wojciech A. Koszek",
            "time": "Jul 10, 2014 at 2:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "ZillGate",
                    "text": "<span class=\"comment-copy\">Thank you! But if disassembly as a technique isn't a problem, then why the article in the question mentioned those challenges? And based on that article, there must be some binary cases that objdump cannot correctly disassemble, right?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">\"As long as you know the boundaries of your binary file (where the data/code starts)\" - that's <b>exactly</b> the problem that is difficult to solve when you only have the raw binary</span>",
                    "time": null
                },
                {
                    "user": "ZillGate",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky By \"only have the raw binary\", do you mean the binary cannot be executed? If so, then the emulator idea won't work, and we need to use linear sweeping or recursive traversal...</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@ZillGate: no, I mean we have an executable but we don't know the boundaries where exactly is data and where's code (besides the entrypoints). E.g. <code>objdump</code> suggested by Wojciech has issues when you have jumptables intermixed with code.</span>",
                    "time": null
                },
                {
                    "user": "Wojciech A. Koszek",
                    "text": "<span class=\"comment-copy\">@ZillGate You'll get overall understanding of what program is doing that way, but since the program doesn't execute all its code always, you won't be able to fully reconstruct (its source code).  Direction which you're thinking about is right, but it's hard to make it work well.  <b>For example:</b> QEMU accepts disk images or ELF files.If you have an ELF file it means you can use better tools than QEMU for binary analysis.   Disk image assumes you're running without an OS..</span>",
                    "time": null
                }
            ]
        }
    ]
}