{
    "title": "Is it possible ( or how) to dump source code/machine code from memory?",
    "link": "https://reverseengineering.stackexchange.com/questions/13447/is-it-possible-or-how-to-dump-source-code-machine-code-from-memory",
    "content": "I am actually working for the side of software protection. But in order to properly protect my source code ( be it .Net or C++), I would need to understand what is achievable ( and not achievable) from hacker's point of view .\nI can protect/obfuscate/encrypt/virtualize my code all the way I want, but when the source code is loaded into the memory, it will have to be unprotected in order to run. So at this point of time, can hacker dump the source code out from the memory, and thus recover my source code in full, unadulterated fashion? \nIf yes, how this can be done? Using what tools?\nEdit: from my finding, it seems that this is doable, and there are protection tools that can prevent this, such as Agile.Net:\n\nMethod Level Code Encryption - Encrypts all the MSIL code and keeps it\n  in a secure storage. When the assembly is loaded Agile.NET binds to\n  the .NET runtime engine and manages decrypting the MSIL on a per\n  method basis. Agile.NET creates a runtime environment that executes\n  the original MSIL code by decrypting one method at a time, this\n  important virtue minimizes the exposure of MSIL code in memory thus\n  prevents dumping the code from physical memory.\n\nBut I have no idea how, can anyone shed some lights on this?\n",
    "votes": "1",
    "answers": 1,
    "views": "2k",
    "tags": [
        "c++",
        "memory",
        ".net"
    ],
    "user": "Graviton",
    "time": "Sep 7, 2016 at 11:20",
    "comments": [
        {
            "user": "Jongware",
            "text": "Review your knowledge of the compilation process. Unless you are actively compiling your source code, it will never reside in memory.\n",
            "time": null
        },
        {
            "user": "Graviton",
            "text": "Why am I downvoted?\n",
            "time": null
        },
        {
            "user": "Graviton",
            "text": "@RadLexus, would you like to expand your comment into a proper answer?\n",
            "time": null
        },
        {
            "user": "Graviton",
            "text": "@RadLexus, I'm not too sure about the validity of your claim; see the updated question\n",
            "time": null
        },
        {
            "user": "Fernando Gonzalez Sanchez",
            "text": "For .NET you can use any of ILSpy, Reflector or DotPeek to retrieve C# code from a .DLL or .EXE (as long as it is 100% managed code).\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Just to be clear: You can not reconstruct source code from .net or c++ binaries. You can try to recover it using heuristics, embedded symbols and knowledge about the assembler, but you already lost the necessary information in translation.\nYou should differentiate between packing and obfuscation.\nPacking means you encrypt (and / or compress) parts of your compiled code and have a decryption / unpacking stub at the beginning, fetching the encrypted blocks and unpacking them. This can be often observed in the case of malicious software. In this case, you can dump the memory right after the decryption process and it will be unencrypted.\nThere are more sophisticated means of packing like VM-packing, which increase the challenge of dumping the data noticeably, but there has been a lot of research in this area. That being said, something like a general unpacker does not exist.\nObfuscation on the other hand alters the code directly in a fashion which makes it still able to be executed. For example, a common technique is obfuscating the control flow though the use of spaghetti code, e.g. inserting unnecessary branches and jumps. These operations can principally not be undone and increase the challenge of reversing significantly.\n-> You can not hide the logic you want to execute from the machine you want it to run on. You can only make it harder for humans to figure out what your code does.\n",
            "votes": "4",
            "user": "Nordwald",
            "time": "Sep 7, 2016 at 9:45",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Graviton",
                    "text": "<span class=\"comment-copy\">\"you can dump the memory right after the decryption process and it will be unencrypted\"-- so this means that the <b>packed</b> source code <i>can</i> be unpacked, by dumping it out from the memory using appropriate decompilers?</span>",
                    "time": null
                },
                {
                    "user": "Graviton",
                    "text": "<span class=\"comment-copy\">If yes, how? any tools/resources to recommend?</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">You can dump the <b>machine code</b> at any time utilizing an debugger. Other common tools are the Process Explorer or dumping the whole memory using a virtual machine.</span>",
                    "time": null
                },
                {
                    "user": "Graviton",
                    "text": "<span class=\"comment-copy\">Norward, how do you view the claim that MSIL code in memory can be exposed ( see my updated question), is it possible, and if yes, how it can be done?</span>",
                    "time": null
                },
                {
                    "user": "Nordwald",
                    "text": "<span class=\"comment-copy\">All memory can be dumped. The advantage of function-level-encryption is that you decrypt each function just before it is executed. To be able to dump the whole code, you would need to dump the memory at each function call or decrypt the code yourself (reverse the encryption). Code which shall be executed has to reside in memory.</span>",
                    "time": null
                }
            ]
        }
    ]
}