{
    "title": "Determining the number of instructions executed by a driver",
    "link": "https://reverseengineering.stackexchange.com/questions/6329/determining-the-number-of-instructions-executed-by-a-driver",
    "content": "How can I measure the number of instructions a Windows (or Linux or XNU) kernel driver/module executed after, say, an IOCTL or a SYSCALL? My only ideas are the following:\n\nUsing WinDBG or remote GDB, debug the whole operating system, put breakpoints in each basic block/function/instruction of the driver or step-trace inside it. Very slow and likely going to cause problems due to the large number of breakpoints to be added.\nFrom user-land, use instructions like RDTSC to try to \"measure\" the number of (non different) instructions executed by checking the times it took to execute it. Likely going to give \"false\" results for many reasons (i.e., the very same call to a syscall or ioctl can take different times for many different reasons).\n\nAny idea or option in any of the mentioned kernels to determine the number of instructions and, preferably, the number of different instructions executed?\n",
    "votes": "0",
    "answers": 2,
    "views": "454",
    "tags": [
        "kernel-mode",
        "instrumentation"
    ],
    "user": "joxeankoret",
    "time": "Sep 27, 2014 at 16:27",
    "comments": [
        {
            "user": "blabb",
            "text": "if you haven't yet done give wt (watch and trace ) command a spin in windbg it does this counting stuff in the statistics it provides at the end of tracing a complete function may be you can leverage it with a custom windbg extension\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I'd recommend using Bochs. It'll allow you to write code to count the number of instructions (and/or number of different instructions) executed between a <pre><code>SYSCALL</code></pre>/<pre><code>SYSRET</code></pre>, <pre><code>SYSENTER</code></pre>/<pre><code>SYSEXIT</code></pre>, etc.\n",
            "votes": "4",
            "user": "Jason Geffner",
            "time": "Sep 27, 2014 at 16:55",
            "is_accepted": true,
            "comments": [
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">Yes, I think it's the best one can one as of today. Slow as hell, but probed to work. Thanks!</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can also give a try to pin. There is even an example in the documentation explaining exactly what you want to do.\n",
            "votes": "-2",
            "user": "jvoisin",
            "time": "Oct 4, 2014 at 11:25",
            "is_accepted": false,
            "comments": [
                {
                    "user": "joxeankoret",
                    "text": "<span class=\"comment-copy\">Sure, tell me how to use Intel PIN, which is a completely user-land toolkit, in Kernel.</span>",
                    "time": null
                }
            ]
        }
    ]
}