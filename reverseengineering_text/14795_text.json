{
    "title": "How to add standard symbolic constants with bitwise operators (like ORs)",
    "link": "https://reverseengineering.stackexchange.com/questions/14795/how-to-add-standard-symbolic-constants-with-bitwise-operators-like-ors",
    "content": "I am working with IDA and I have the <pre><code>OpenProcess</code></pre> function receiving <pre><code>dwDesireAccess</code></pre> of <pre><code>0x410</code></pre>:   \n\nAccording to MSDN we can see that <pre><code>0x410</code></pre> is the result of <pre><code>OR</code></pre> between two access rights:  \n<pre><code>PROCESS_QUERY_INFORMATION (0x0400)\nPROCESS_VM_READ (0x0010)\n</code></pre>\nHow can I set a standard symbolic constant such as\n<pre><code>PROCESS_QUERY_INFORMATION | PROCESS_VM_READ</code></pre> ?    \nI must do it manually (with \"Manual...\")?  \nThis is only what I have:\n",
    "votes": "4",
    "answers": 1,
    "views": "3k",
    "tags": [
        "ida",
        "debugging-symbols"
    ],
    "user": "E235",
    "time": "Mar 2, 2017 at 18:52",
    "comments": [],
    "answers_data": [
        {
            "content": "You could create a bitfield enum. Since the enum containing <pre><code>PROCESS_VM_READ</code></pre> already exists in the MSSDK type library, we are going to copy that and modify it to become a bitfield.\n\nGo to the enums subview, then right click and Add enum... (press Insert on Windows).\n\nClick Add standard enum by symbol name.\n\nFind <pre><code>PROCESS_VM_READ</code></pre>, then click OK.\n\nA new enum called <pre><code>MACRO_PROCESS</code></pre> should be added. Expand it (CtrlNumpad + or right click â†’ Unhide)\nDelete the enum member <pre><code>PROCESS_ALL_ACCESS</code></pre> (press U when selecting it).\n\nRight click and choose Edit enum... (CtrlE).\nCheck Bitfield, then click OK. (This step will fail if you don't perform step 5)\n\n\nNow the MACRO_PROCESS bitfield should appear when you hit M on 410h, and should appear as something like\n<pre><code>mov     eax, PROCESS_VM_READ or PROCESS_QUERY_INFORMATION\n</code></pre>\n",
            "votes": "6",
            "user": "kennytm",
            "time": "Mar 3, 2017 at 6:51",
            "is_accepted": true,
            "comments": [
                {
                    "user": "E235",
                    "text": "<span class=\"comment-copy\">great answer ! Why you delete <code>PROCESS_ALL_ACCESS</code> ?</span>",
                    "time": null
                },
                {
                    "user": "kennytm",
                    "text": "<span class=\"comment-copy\">@E235: See step 7's description.</span>",
                    "time": null
                },
                {
                    "user": "E235",
                    "text": "<span class=\"comment-copy\">Any idea why it will fail ?  I want to understand because maybe I will have a case when I will need also this last parameter.</span>",
                    "time": null
                },
                {
                    "user": "Eran Zimmerman Gonen",
                    "text": "<span class=\"comment-copy\">I think the problem is the intersecting masks (which I think default to the values themselves). If in the code you ever have the value 1F0FFFh, it will be replaced by a bitwise OR of all other constants. You could also define it as a standalone constant (e.g. an enum containing only that, might be a better way). Unless there are some hidden options here, this bitfields feature feels a bit unfinished (unless you don't have any duplicates or intersections).</span>",
                    "time": null
                }
            ]
        }
    ]
}