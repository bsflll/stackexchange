{
    "title": "jmp $+5, why the jump",
    "link": "https://reverseengineering.stackexchange.com/questions/27656/jmp-5-why-the-jump",
    "content": "I am looking at some code that has <pre><code>jmp $+5</code></pre> instruction at the beginning of the entry code in a library, right after pushing registers to the stack. I understand that <pre><code>jmp $+5</code></pre> puts IP at the next instruction but why is the jump there at all? Without it, the next instruction would have been executed anyway. The only thing that comes to mind is that it is PIE related and jump with displacement of 0 that could potentially be a non-zero value, but this code is a part of a big \"blob\" and I don't think its individual parts would be relocatable, at least not to a point where the jump displacement would be non-zero.\nThe compiler is GCC 3.7?, linux 32 bit\n<pre><code>Version needs section '.gnu.version_r' contains 2 entries:\n Addr: 0x0000000000017e0c  Offset: 0x017e0c  Link: 3 (.dynstr)\n  000000: Version: 1  File: libgcc_s.so.1  Cnt: 1\n  0x0010:   Name: GCC_3.0  Flags: none  Version: 7\n</code></pre>\nThanks\n",
    "votes": "1",
    "answers": 1,
    "views": "329",
    "tags": [
        "disassembly",
        "intel"
    ],
    "user": "Igor",
    "time": "May 12, 2021 at 16:31",
    "comments": [
        {
            "user": "R4444",
            "text": "it really depends on compiler and its optimization capabilities\n",
            "time": null
        },
        {
            "user": "Igor",
            "text": "What does? Are you talking about this \"I don't think its individual parts would be relocatable, at least not to a point where the jump displacement would be non-zero.\"? I'll add compiler info to the post if that helps\n",
            "time": null
        },
        {
            "user": "peter ferrie",
            "text": "It could be a hook for instrumentation.\n",
            "time": null
        },
        {
            "user": "Michael Karcher",
            "text": "+1 for \"hook point for instrumentation\"\n",
            "time": null
        },
        {
            "user": "Igor",
            "text": "I think @peterferrie comment is the best explanation for this so far. Makes sense as a hook for instrumentation, or a test harness, or maybe a way to change initialization in some environments. Could just modify the binary to get different behavior without having to rebuild.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Are you sure you encounter <pre><code>JMP $+5</code></pre>? A common x86 function prologue pattern has <pre><code>CALL $+5</code></pre> in the position you describe. In addition to continuing at the next instruction, it also pushes the address of the next instruction to the stack. It is usually followed by <pre><code>POP EBX</code></pre> to put that address into ebx and then <pre><code>ADD EBX, $const</code></pre> to modify EBX so it contains a specific reference address, IIRC the beginning of the function slots in the GOT.\nThe important point about this instruction sequence is that it works independently of the base address of the code, as <pre><code>JMP NEAR</code></pre> (opcode E9) and <pre><code>CALL NEAR</code></pre> contain relative addresses, so $+5 is always encoded the same way, no matter where the instruction is located. The add instruction then adds/subtracts the fixed distance between that instruction and the GOT.\n",
            "votes": "1",
            "user": "Michael Karcher",
            "time": "May 17, 2021 at 21:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor",
                    "text": "<span class=\"comment-copy\">Yes, it is a <code>jmp</code> instruction. The opcode is<code>e9 00 00 00 00  jmp    $+5</code></span>",
                    "time": null
                }
            ]
        }
    ]
}