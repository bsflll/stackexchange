{
    "title": "How to retrieve generically memory reads of an input and determine all relevant offsets?",
    "link": "https://reverseengineering.stackexchange.com/questions/23367/how-to-retrieve-generically-memory-reads-of-an-input-and-determine-all-relevant",
    "content": "I would like to record all memory read operations that are performed by an application on a given input file, to help infer which specific parts of an input are relevant for the specific execution that opens the input. \nI'm trying to achieve this for Windows applications, whereas the applications itself can be <pre><code>x86</code></pre> or <pre><code>x64</code></pre>, and the input is not of a specific format (e.g. solution should not only work with <pre><code>JPG</code></pre>, but also <pre><code>PNG</code></pre> or <pre><code>XYZ</code></pre>). The solution is intended to work for applications without access to the source code (binaries only, no symbols).\nAn example\nInput <pre><code>foo.bar</code></pre>:\n\nInput file is <pre><code>100</code></pre> bytes long, binary format.\n\nProgram n:\n\nCan be called like <pre><code>> Program.exe foo.bar</code></pre>, or through File > Open > foo.bar\nOpens foo.bar and parses offsets <pre><code>x</code></pre>, <pre><code>y</code></pre>, and <pre><code>z</code></pre> and does something with it (e.g. convert to something else, output somewhere, do some arithmetic with it and return result, etc.). For input <pre><code>foo.bar2</code></pre>, the offsets that are worked with might be different.\n\nPotential problems I can think of:\n\nIf the developer uses something like <pre><code>fseek (SetFilePointer?)</code></pre>, they would go directly to the relevant offset within the input. However, in many cases it might be more likely to open the whole input/file and then go to offsets based on other specific values within that input by using something like <pre><code>offset_n+34</code></pre>.\nThere are multiple methods how an input file can be opened or accessed by an application (<pre><code>OpenFile</code></pre>, <pre><code>CreateFileA/W</code></pre>, <pre><code>MapViewOfFile</code></pre>, <pre><code>OpenFileMappingA</code></pre>, etc.)\nSpeed might be an issue if there are many read operations (however, in my case I don't care too much about performance).\n\nAs per my current understanding, what I could do as a start is to:\n1) Research the specific Windows APIs for file opening/handling\n2) Set a breakpoint on them and retrieve the parameters\n3) From here on, how can I determine or map the specific offsets within an input and the program access on it?\nIs there any script or tool that already does something like this, e.g. by relying on WinDbg or DBI frameworks like DynamoRIO or PIN?\nIf not, I'd really appreciate if someone can point me towards specific resources or key words that would help me in better understand how to approach this problem and come up with a pratical solution. Any help would be much appreciated.\n",
    "votes": "3",
    "answers": 0,
    "views": "86",
    "tags": [
        "debugging",
        "dynamic-analysis"
    ],
    "user": "MmM",
    "time": "Mar 1, 2020 at 17:59",
    "comments": [
        {
            "user": "macro_controller",
            "text": "I think a general concept you are talking about called <pre><code>taint analysis</code></pre>.\n",
            "time": null
        }
    ],
    "answers_data": []
}