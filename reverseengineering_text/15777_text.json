{
    "title": "Finding other segments of a manually mapped DLL having found the .text segment",
    "link": "https://reverseengineering.stackexchange.com/questions/15777/finding-other-segments-of-a-manually-mapped-dll-having-found-the-text-segment",
    "content": "I've been able to locate the .text section of the module, knowing the base address of that section and its size how would I be able to find the other segments of the DLL, like .rdata, .data, .bss, etc.\n",
    "votes": "0",
    "answers": 1,
    "views": "257",
    "tags": [
        "dll"
    ],
    "user": "John Wayne",
    "time": "Jul 8, 2017 at 15:49",
    "comments": [],
    "answers_data": [
        {
            "content": "You'll make 2 assumptions: \n\nall virtual memory allocations are done with 4k (0x1000) incremental\n<pre><code>.text</code></pre> section will (in most cases) be places after the PE header\n\nSo, your goal would be to find the DLL's PE header and parse it to find all the parameters of the other sections, assuming they are present. Using above assumptions, you would:\n\nDecrement your known base address by 0x1000\nCheck that this new address is valid (i.e <pre><code>VirtualQuery</code></pre>)\nCheck for presence of <pre><code>MZ</code></pre> signature starting the address from (1)\n\n\nIf found, parse the header and you can calculate the offsets based on the header data - you already know where <pre><code>.text</code></pre> located, extrapolate for other sections the same way.\n\nRepeat for reasonable amount of times till you find the header.\n",
            "votes": "1",
            "user": "PhoeniX",
            "time": "Jul 7, 2017 at 4:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">but you said that you already know where .text is located, no? So why to go the long way. Other sections will be in near proximity of it.</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">Another problem, is to distinguish between the sections. Do you have more information beside .text base address and its size?</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">The section does not have PE header so I dot know what you are looking at. You can try and filter out all shared memory regions as most dlls will have that type of mapping and look for RE or RWE regions with private allocation. Once you have enumerated all candidates, you will still have trouble to zero on sections if you do not have PE header. With .rdata you might have some luck if the DLL imports functions, as there you should find imported function names.</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">The only thing that comes to my mind is to use heuristics: a. all other sections will follow the .text one. b. VQ will show the same state for each group of pages, so this way you can get the size and base. c. In most cases you can find a big zeroed region at the end of the section, before the new begins, this could help too. Again, without further information - PE header, code analysis of .text section it will be hard to get where you want with 100% validity, because each section is just chunk of raw data without any metadata.</span>",
                    "time": null
                },
                {
                    "user": "PhoeniX",
                    "text": "<span class=\"comment-copy\">I mean, if you can find some information in .text section that refers to data in .rdata (strings, constants, data patterns and etc.) then you can use it in your search of other sections.</span>",
                    "time": null
                }
            ]
        }
    ]
}