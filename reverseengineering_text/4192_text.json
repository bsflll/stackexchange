{
    "title": "At which address on the stack or in memory is eax stored after the malloc call? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/4192/at-which-address-on-the-stack-or-in-memory-is-eax-stored-after-the-malloc-call",
    "content": "Closed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking for help reverse-engineering a specific system are off-topic unless they demonstrate an understanding of the concepts involved and clearly identify a specific problem.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nHere is my <pre><code>objdump -d</code></pre> snippet with the malloc call and surrounding code.  This binary is stripped.  \n<pre><code>dbgLab.bin:     file format elf32-i386\n\n\n080483d0 <malloc@plt>:\n 80483d0:   ff 25 04 a0 04 08       jmp    *0x804a004\n 80483d6:   68 08 00 00 00          push   $0x8\n 80483db:   e9 d0 ff ff ff          jmp    80483b0 <printf@plt-0x10>\n\n\nDisassembly of section .text:\n\n\n 804853e:   55                      push   %ebp\n 804853f:   89 e5                   mov    %esp,%ebp\n 8048541:   83 e4 f0                and    $0xfffffff0,%esp\n 8048544:   83 ec 20                sub    $0x20,%esp\n 8048547:   c6 44 24 1f cf          movb   $0xcf,0x1f(%esp)\n 804854c:   c7 04 24 0d 00 00 00    movl   $0xd,(%esp)\n 8048553:   e8 78 fe ff ff          call   80483d0 <malloc@plt>\n 8048558:   89 44 24 18             mov    %eax,0x18(%esp)\n 804855c:   83 7d 08 02             cmpl   $0x2,0x8(%ebp)\n 8048560:   7f 0c                   jg     804856e <strncmp@plt+0x12e>\n 8048562:   c7 04 24 ff ff ff ff    movl   $0xffffffff,(%esp)\n 8048569:   e8 92 fe ff ff          call   8048400 <exit@plt>\n 804856e:   8b 45 0c                mov    0xc(%ebp),%eax\n 8048571:   83 c0 04                add    $0x4,%eax\n 8048574:   8b 00                   mov    (%eax),%eax\n 8048576:   c7 44 24 08 0d 00 00    movl   $0xd,0x8(%esp)\n</code></pre>\n",
    "votes": "2",
    "answers": 2,
    "views": "3k",
    "tags": [
        "ida",
        "decompilation",
        "debuggers",
        "gdb",
        "objdump"
    ],
    "user": null,
    "time": "11 years ago",
    "comments": [
        {
            "user": "joxeankoret",
            "text": "Sorry, but I think you should first start learning the very-very-very basics before making questions that are vague and unclear.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "A call to <pre><code>malloc</code></pre> returns the address of the allocated memory in the <pre><code>eax</code></pre> register on <pre><code>x86</code></pre>, <pre><code>rax</code></pre> on <pre><code>x86_64</code></pre>, and <pre><code>r0</code></pre> on <pre><code>ARM</code></pre>. Nothing is pushed on the stack. Check the line following the call to <pre><code>malloc</code></pre> & you'll understand !\nYou should check the calling conventions of your platform too. \nSuppose you have this in your code :\n<pre><code>      int *p = malloc(sizeof(int) * 4);\n</code></pre>\nIf you translate this line into assembly you'll get what follows : \n<pre><code>      call   80483d0 <malloc@plt>\n      mov    %eax,0x18(%esp)\n</code></pre>\nThe <pre><code>malloc</code></pre> call returns in <pre><code>eax</code></pre> the address of allocated memory block. In the C code, this address is assigned to <pre><code>p</code></pre> which is a local variable located on the stack. And that's what the following assembly does : <pre><code>mov %eax,0x18(%esp)</code></pre>.\n",
            "votes": "6",
            "user": "yaspr",
            "time": "Apr 28, 2014 at 16:11",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user4466",
                    "text": "<span class=\"comment-copy\">so the line after the <code>malloc</code> says this  <code>mov %eax,0x18(%esp)</code>.  Where is the location 0x18(%esp) what address in memory is this?  I can use <code>gdb</code> to find out what esp is at that point in the program by setting a break point.</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">You're gonna have to debug your program by setting a breakpoint at 804855c and printing the register values. What you want is the value in <code>eax</code>, that's what the <code>malloc</code> function returned. <code>0x18(%esp)</code> is the address of the pointer variable used in the program.</span>",
                    "time": null
                },
                {
                    "user": "user4466",
                    "text": "<span class=\"comment-copy\">So the value in <code>eax</code> that <code>malloc</code> returns is not stored in memory anywhere or moved to a memory location?</span>",
                    "time": null
                },
                {
                    "user": "yaspr",
                    "text": "<span class=\"comment-copy\">The <code>malloc</code> return value is the address where the allocated memory is. The <code>mov %eax, 0x18(%esp)</code> stores the value in <code>eax</code> (the <code>malloc</code> return value) in <code>0x18(esp)</code> which is the location of the pointer variable (which is on the stack) used to store the return value of <code>malloc</code> in the program.</span>",
                    "time": null
                },
                {
                    "user": "user4466",
                    "text": "<span class=\"comment-copy\">thank you very much for your help. I was wondering if you would be willing to assist me with a homework assignment for my digital forensics class but I do not want to post all my questions publicly is there another way I can contact you without flooding stackexchange 24/7?  I do not want you to give me the answers I just want to be able to ask questions and have you guide me with hints/tips.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Normally, return values are stored in <pre><code>eax</code></pre>. Structures and Floats/Doubles may be exceptions, depending on the <pre><code>ABI</code></pre> & the compiler used, but for <pre><code>malloc</code></pre>, <pre><code>eax</code></pre> is the return value. So nowhere on the stack.\nIn your specific case:\n<pre><code> 8048553:   e8 78 fe ff ff          call   80483d0 <malloc@plt>\n 8048558:   89 44 24 18             mov    %eax,0x18(%esp)\n</code></pre>\nThe <pre><code>eax</code></pre> register is stored on the stack, in some local variable that is 24 (hex 18) bytes \"above\" the stack pointer. There is no way to determine the name of that local variable name from the <pre><code>objdump</code></pre>.\nPlease, next time, try to ask your question in a way that is better to understand - for example \"My function that calls malloc stores the result somewhere, what does that instruction do ?\" and post only the relevant code.\n",
            "votes": "5",
            "user": "yaspr",
            "time": "May 2, 2014 at 16:29",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user4466",
                    "text": "<span class=\"comment-copy\">thank you very much I will edit the question so it is a better reflection of what I want.</span>",
                    "time": null
                }
            ]
        }
    ]
}