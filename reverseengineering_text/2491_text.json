{
    "title": "How to use fastloghook in immunity debugger",
    "link": "https://reverseengineering.stackexchange.com/questions/2491/how-to-use-fastloghook-in-immunity-debugger",
    "content": "How does fastloghook work in immunity debugger pycommand section? i cant figure it out. Everything i try does not work and i know this code is a mess. I seriously dont understand fastloghook which makes me crazy when bphook worked so nicely. I need an explanation :/\n<pre><code>#!/usr/bin/env python\n\nimport immlib\nimport struct\nfrom immlib import FastLogHook\n\ndef main(args):\n\n\"\"\"\n    Will hook and run its own assembly code then return control\n\"\"\"\n\nimm = immlib.Debugger()\n\n# Set name\nName = \"hippie\"\n\nfast = imm.getKnowledge(Name)\n\nif fast:\n    hook_list = fast.getAllLog()\n    imm.log(str(hook_list))\n        imm.log(\"%s\" item[1[0]])\n\n# Instantiate fastloghook\nfast = immlib.FastLogHook(imm)\n\n# Primary address to hook on to\nfast.logFunction(imm.getAddress(\"msvcrt.strcpy\"))\n\n# Takes register and offset. dereference parameters from the stack\n# or capture data at a known offset from a register\nfast.logBaseDisplacement('ESP', 0x4)\nfast.logBaseDisplacement('ESP', 0x8)\n\n# Tracks the value of a specific register when the hook is hit\nfast.logRegister(\"ESP\")\n\n# Logs known memory offset at hook time\n# fast.logDirectMemory()\n\n# Set the hook\nfast.Hook()\n\n# Save data so we can retrieve results later\nimm.addKnowledge(Name, fast, force_add=1)\n\nreturn \"LogBPHook installed\"`\n</code></pre>\n",
    "votes": "5",
    "answers": 1,
    "views": "2k",
    "tags": [
        "python",
        "immunity-debugger"
    ],
    "user": "user2464",
    "time": "Jul 17, 2013 at 2:35",
    "comments": [],
    "answers_data": [
        {
            "content": "FastLogHook is one of the 13 hook types that Immunity Debugger comes with. Essentially, the purpose of this type of hook is to use tiny assembly stub to transfer execution to a hook function in order to log particular registers and/or memory locations. FastLogHook is essentially an python object, which allows us to setup hard hook relatively easy.\nThe definition of setup is as following:\n<pre><code>debugger  = immlib.Debugger()\nfast_hook = immlib.FasLogHook(debugger)\n\nfast_hook.logFunction(address, number_of_arguments)\nfast_hook.logRegister(register)\nfast_hook.logDirectMemory(address)\nfast_hook.logBaseDisplacement( register, offset ) \n</code></pre>\nlogFunction() returns us the address of the original instruction we need to overwrite with the jump to our hook function. It is absolutely required. \nlogRegister(), logDirectMemory(), and logBaseDisplacement() are methods to track specific values of particular register, memory location, or certain offset from the register respectively at hook time. \nFastLogHook will not interrupt the execution and smoothly log the results to debugger object. BpHook on the other hand is totally different type of a hook. When BpHook is called, it will halt execution.\n",
            "votes": "6",
            "user": "PSS",
            "time": "Jul 17, 2013 at 4:19",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user2464",
                    "text": "<span class=\"comment-copy\">oh now i feel really stupid, i thought that immunity debugger after first script run invoked the script by it self and logged the result to my log window. But i have to run the script again to get result back to me.</span>",
                    "time": null
                },
                {
                    "user": "PSS",
                    "text": "<span class=\"comment-copy\">Exactly. As far as your script goes. logFunction has the following prototype logFunction(address, number_of_arguments). If number_of_arguments is nothing, like you have, it will most likely try to hook the exit of the function. In order to hook the entry point you need to provide number of args as 2. Also, logDirectMemory(address) requires an address to log. Yours missing that part as well.</span>",
                    "time": null
                }
            ]
        }
    ]
}