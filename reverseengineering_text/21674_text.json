{
    "title": "Why won't IDA let me name this variable?",
    "link": "https://reverseengineering.stackexchange.com/questions/21674/why-wont-ida-let-me-name-this-variable",
    "content": "I went to stack view and named it counter, and now it appears at the top of my function, although it didn't until I named it. \n\nThe name didn't propagate over to the program, as you can see in the mov instruction in this block.\n",
    "votes": "0",
    "answers": 1,
    "views": "292",
    "tags": [
        "ida"
    ],
    "user": "gerbik",
    "time": "Jul 14, 2019 at 20:11",
    "comments": [
        {
            "user": "Avery3R",
            "text": "IDA doesn't look like it's resolving stack variable references. Try to right click on one of the <pre><code>[esp+XXh]</code></pre> operands and see if you can select variable\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "First of all, <pre><code>[esp+5Ch]</code></pre> is not the value of counter. The numbers next to the names of variables / arguments on stack are offsets with respect to <pre><code>ebp</code></pre>. \nSo <pre><code>[ebp-5Ch]</code></pre> is the value of the variable counter.\nAnd since the variables are accessed via <pre><code>esp</code></pre>, not <pre><code>rbp</code></pre> and there is stack aligning instruction (<pre><code>and esp, FFFFFFF0</code></pre>), I guess IDA is not sure if that instruction will change <pre><code>esp</code></pre> or not, so it won't rename <pre><code>[esp + offset]</code></pre> to an argument or variable, since <pre><code>esp</code></pre> could have different values modulo <pre><code>16</code></pre> (i.e. <pre><code>and esp, FFFFFFF0</code></pre> will not change <pre><code>esp</code></pre> if <pre><code>esp = 11111110</code></pre>, but will change it when <pre><code>esp = 11111118</code></pre>) and thus different values with respect to <pre><code>ebp</code></pre>.\n",
            "votes": "0",
            "user": "bart1e",
            "time": "Jul 14, 2019 at 20:44",
            "is_accepted": true,
            "comments": [
                {
                    "user": "eyal karni",
                    "text": "<span class=\"comment-copy\">Never seen stack alignment instruction before. Is it common?</span>",
                    "time": null
                },
                {
                    "user": "bart1e",
                    "text": "<span class=\"comment-copy\">It will be called almost in every <code>main</code> function while compiling with GCC. See <a href=\"https://reverseengineering.stackexchange.com/questions/21414/elf-x86-why-is-return-address-pushed-twice/21417#21417\" title=\"elf x86 why is return address pushed twice\">reverseengineering.stackexchange.com/questions/21414/â€¦</a></span>",
                    "time": null
                },
                {
                    "user": "eyal karni",
                    "text": "<span class=\"comment-copy\">Yeh I do reversing on Windows. Thanks, though</span>",
                    "time": null
                }
            ]
        }
    ]
}