{
    "title": "Ghidra not decompiling very simple ARM64 program",
    "link": "https://reverseengineering.stackexchange.com/questions/30238/ghidra-not-decompiling-very-simple-arm64-program",
    "content": "I'm trying to learn how Ghidra works by using it to analyze a very simple ELF file written in Assembly, compiled on a raspberry pi 4 (ARM64)\nMy Assembly code looks like this:\n<pre><code>.global _start\n\n_start:\n    mov x0, #0x1\n    ldr x1, =helloworld\n    mov x2, #0xb\n    mov x8, #0x40\n    svc 0\n\n    mov x0, #0x0\n    mov x8, #93\n    svc 0\n\n.data\nhelloworld: .ascii \"Hello World\"\n</code></pre>\nI am compiling it like this:\n<pre><code>$ as -o hello.o hello.s\n$ ld -o hello hello.o\n</code></pre>\nIt is producing this executable:\n<pre><code>$ file hello\nhello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, not stripped\n</code></pre>\nIt runs just fine:\n<pre><code>$ ./hello\nHello World\n</code></pre>\nNow I am taking this ELF file and throwing it in to Ghidra and analyzing it and I'm getting an error. As shown below, there is nothing in the decompiled window, and in the bookmark window it shows:\n<pre><code>Bad Instruction: Unable to resolve constructor at ..\n</code></pre>\n\nI was hoping someone could spot what I'm doing wrong because this seems like it would be very straightforward.\n",
    "votes": "3",
    "answers": 1,
    "views": "2k",
    "tags": [
        "ghidra",
        "decompile",
        "arm64"
    ],
    "user": "JohnnyBoy",
    "time": "Apr 7, 2022 at 22:27",
    "comments": [
        {
            "user": "Luca D'Amico",
            "text": "I might be wrong, but I think that Ghidra can't decompile SuperVisor Call.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Ghidra can't know what parameters the supervisor call is using. it only know that it is supervisor call 0. all other register loading and setting are ignored in the decompiler, because it can't connect them to anything.\nafter that, it reach PTR_hello_world, and surprised to find that it is not code. because there is nothing to stop it from disassmbling. (such as a ret instruction) so it complain about bad instruction. that give you the red x on the left, the \"bad instruction\" on the bottom right, and \"halt_baddata\" in the decompiler.\n",
            "votes": "1",
            "user": "Shmuel Fomberg",
            "time": "Aug 4, 2024 at 13:02",
            "is_accepted": false,
            "comments": [
                {
                    "user": "hippietrail",
                    "text": "<span class=\"comment-copy\">This is exactly the case I was commenting on on another thread as being the <a href=\"https://reverseengineering.stackexchange.com/questions/33056/what-is-the-fallthrough-option-in-ghidra-for#comment49758_33059\">opposite of \"fallthrough\"</a>.</span>",
                    "time": null
                },
                {
                    "user": "hippietrail",
                    "text": "<span class=\"comment-copy\">Well it <i>doesn't</i> know but that doesn't mean it <i>can't</i> know. It would need a source of that knowledge. It might be possible via a Ghidra extension. Many disassemblers can handle syscalls and traps etc. ReSource for the Amiga could do it 30 years ago.</span>",
                    "time": null
                }
            ]
        }
    ]
}