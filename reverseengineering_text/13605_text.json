{
    "title": "Immunity Debugger - !mona suggest",
    "link": "https://reverseengineering.stackexchange.com/questions/13605/immunity-debugger-mona-suggest",
    "content": "I have been going through some tutorials for exploit development that use the <pre><code>!pvefindaddr</code></pre> command to help with creating unique patterns and discovering the offset.\nI know that mona has replaced <pre><code>pvefindaddr</code></pre> - but from what I can see in the examples I am following the <pre><code>!pvefindaddr suggest</code></pre> command gives you an exploit suggestion in perl, while <pre><code>!mona suggest</code></pre> basically writes you a metasploit module.\nI looked at the options with:\n<pre><code>!mona help suggest</code></pre>\nAnd there don't seem to be many options available. Is it possible to get suggest to offer you exploits written in any format other than a metasploit module? I couldn't seem to get <pre><code>pvefindaddr</code></pre> working in immunity - I'm assuming it doesn't really work anymore as mona has replaced it, so I wondered if mona had any flexibility?\nI tried asking this in security stack exchange and was pointed here!\n",
    "votes": "2",
    "answers": 1,
    "views": "2k",
    "tags": [
        "exploit",
        "immunity-debugger",
        "metasploit"
    ],
    "user": "user3046771",
    "time": "Sep 28, 2016 at 10:35",
    "comments": [],
    "answers_data": [
        {
            "content": "<pre><code>mona.py</code></pre> only supports automatically generating Metasplpoit modules. You can't get it to output the exploitation code in any other form.\n\npvefindaddr already suggested a payload layout based on that information, mona takes things one step further. In fact, it will attempt to produce a full blown Metasploit module, including all necessary pointers and exploit layout. \n\nThis is probably partially because in order to function, the <pre><code>suggest</code></pre> command uses the <pre><code>findmsp</code></pre> command which requires a \"Metasploit pattern\" (hence the name \"find msp\"), a textual pattern that uses a sequence of characters in a way that never repeats the same 4 bytes offset, making it extremely easy to identify the offset of each part of the pattern. This pattern is extensively used in the Metasploit Framework to ease exploit development.\n\nThis command will automatically run findmsp (so you have to use a cyclic pattern to trigger a crash), and then take that information to suggest an exploit skeleton\n\nThere are a few things you can do:\n\nYou can always carve out the code out of the Metasploit module, or rewrite it in a different language (such as perl).\nUse the <pre><code>findmsp</code></pre> command directly (as mentioned, <pre><code>suggest</code></pre> internally uses it to get the information needed for the exploit), it will provide you the details of affects memory regions, pointers, registers and so on, so you could build the exploit yourself.\n\nAt crash time, simply run findmsp and you will get the following information:\n  \nLocations where the cyclic pattern can be found (looks for the first bytes of a pattern) and how long that pattern is\nRegisters that are overwritten with 4 byte of a cyclic pattern and the offset in the pattern to overwrite the register\nRegisters that point into a cyclic pattern, the offset, and the remaining size of the pattern\nSEH records overwritten with 4 bytes of a cyclic, offset, and size\nPointers on the current thread stack, into a cyclic pattern (offset + size)\nParts of a cyclic pattern on the stack, the offset from the begin of the pattern and the size of the pattern.\n\n\nIn all cases, findmsp will search for normal pattern, uppercase,lowercase, and unicode versions of the cyclic pattern.\n\nFinally, <pre><code>pvefindaddr</code></pre> is probably not working with your version of Immunity Debugger because it's newer that versions supported by <pre><code>pvefindaddr</code></pre>. Since it's now deprecated it is no longer updated with newer releases of Immunity Debugger. You could fetch an older version and use that instead.\n",
            "votes": "3",
            "user": "NirIzr",
            "time": "Sep 28, 2016 at 10:32",
            "is_accepted": true,
            "comments": [
                {
                    "user": "user3046771",
                    "text": "<span class=\"comment-copy\">Hey, thanks for the comprehensive answer! Tells me everything I need to know :-)</span>",
                    "time": null
                }
            ]
        }
    ]
}