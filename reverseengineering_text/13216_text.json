{
    "title": "Decompiling or Feature to Help Reverse FPU Instructions?",
    "link": "https://reverseengineering.stackexchange.com/questions/13216/decompiling-or-feature-to-help-reverse-fpu-instructions",
    "content": "I've been running into a lot of FPU instructions from an old program I am trying to reverse engineer. It tends to be rather difficult to reverse when there is a huge section of FPU instructions, just the way the FPU operates. It uses a stack for registers so the positions of values is constantly changing. You can't just look back and see what value was set into the register as you would have to go back and track all the loads and pops. I've tried some decompilers and most of them don't decompile the FPU assembly, it just leaves it as assembly. Any help to simplify the task of reversing FPU instructions would be appreciated.\n",
    "votes": "0",
    "answers": 1,
    "views": "87",
    "tags": [
        "decompile"
    ],
    "user": "user3901459",
    "time": "Aug 5, 2016 at 19:09",
    "comments": [],
    "answers_data": [
        {
            "content": "In fact, the Hex-Rays decompiler supports FPU instructions.\n",
            "votes": "2",
            "user": "Igor Skochinsky",
            "time": "Aug 6, 2016 at 9:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "user3901459",
                    "text": "<span class=\"comment-copy\">That's too expensive for me, $600 for a cut down version that doesn't support x64 and then $1200 if you want 64-bit support. Too bad there's no personal licenses.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">@user3901459: you are wrong, there <i>are</i> personal (named) licenses.</span>",
                    "time": null
                }
            ]
        }
    ]
}