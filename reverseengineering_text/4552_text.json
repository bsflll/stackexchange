{
    "title": "How can I figure where my router stores it's configuration across reboots?",
    "link": "https://reverseengineering.stackexchange.com/questions/4552/how-can-i-figure-where-my-router-stores-its-configuration-across-reboots",
    "content": "I'm currently researching my home router (D-Link 2760-U) which has a (kind-of) proprietary ISP firmware. What I'm trying to achieve is understanding how the router is persisting it's configuration settings across reboots.\n<pre><code>mount</code></pre> output:\n<pre><code>/dev/mtdblock0 on / type squashfs (ro,relatime)\n/proc on /proc type proc (rw,relatime)\ntmpfs on /var type tmpfs (rw,relatime,size=420k)\ntmpfs on /mnt type tmpfs (rw,relatime,size=16k)\nsysfs on /sys type sysfs (rw,relatime)\n</code></pre>\nI did <pre><code>nvram show</code></pre> and it does contain some wireless configuration such as the encryption in use, wireless modes, pre-shared key but that's about it. Obviously the router has other configurations (such as DNS, PPP, Port forwards etc) that must be stored elsewhere. \nAs it can be observed, all mounted filesystems are volatile and thus configuration cannot be stored in them.\nWhere can the information be saved besides filesystem and NVRAM? How do I go about finding this out?\n",
    "votes": "2",
    "answers": 1,
    "views": "290",
    "tags": [
        "linux",
        "firmware",
        "embedded"
    ],
    "user": "Kinetic",
    "time": "Jun 6, 2014 at 9:30",
    "comments": [
        {
            "user": "Guntram Blohm",
            "text": "Is the output of <pre><code>nvram show</code></pre> some kind of ascii, or binary stuff that needs a command like <pre><code>strings</code></pre> to read? If it's binary, the other configuration might be right there but unreadable.\n",
            "time": null
        },
        {
            "user": "Kinetic",
            "text": "Nope, it shows readable ASCII variables and value strings.\n",
            "time": null
        },
        {
            "user": "6EQUJ5",
            "text": "What is the output of <pre><code>cat /proc/mtd</code></pre>?\n",
            "time": null
        },
        {
            "user": "Kinetic",
            "text": "<pre><code>dev:    size   erasesize  name</code></pre> <pre><code>mtd0: 00608000 00608000 \"Physically mapped flash\"</code></pre>. /dev/ has mtd[0-1] and mtdblock[0-7].\n",
            "time": null
        },
        {
            "user": "6EQUJ5",
            "text": "It could be helpful if you posted the entire output in the question...\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I have played with at least one (not a D-Link) Linux-based router that stored its configuration in a bare <pre><code>mtd</code></pre> partition and accessed it using a proprietary binary.  It compressed the data using LZMA or something but within that, you could see passwords in clear-text (not good!)\nD-Link actually have a very good GPL source code system, go to http://tsd.dlink.com.tw/downloads2008list.asp?SourceType=download&OS=GPL and type in 2760 and you can download the entire buildroot and source for that router.\nEven if they happen to use some non-standard proprietary mechanism for saving configuration, you should be able to get some idea of where it is hidden from examining the GPL sources...\n",
            "votes": "1",
            "user": "6EQUJ5",
            "time": "Jun 8, 2014 at 12:02",
            "is_accepted": true,
            "comments": [
                {
                    "user": "Kinetic",
                    "text": "<span class=\"comment-copy\">Thanks a lot for the infos, I will totally stay some nights up  on this =]</span>",
                    "time": null
                },
                {
                    "user": "Kinetic",
                    "text": "<span class=\"comment-copy\">Found it! It's in userspace/private/libs/cms_core/libcmscore.so_DSL-2760-U_save in a function called cmsMgm_saveConfigToFlash. Basically loads the configuration file into memory and sends an IOCTL message with the pointer. Still need to crack this case completely (kernel stuff, yay) but this is a huge breakthrough, thank you so much!</span>",
                    "time": null
                }
            ]
        }
    ]
}