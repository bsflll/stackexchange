{
    "title": "How much Cryptography knowledge is important for reverse engineering? [closed]",
    "link": "https://reverseengineering.stackexchange.com/questions/3480/how-much-cryptography-knowledge-is-important-for-reverse-engineering",
    "content": "Closed. This question is opinion-based. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\n\n\nClosed 11 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nIs understanding of Cryptography really important for a reverse engineer? \nThanks.\n",
    "votes": "7",
    "answers": 2,
    "views": "3k",
    "tags": [
        "cryptography"
    ],
    "user": "Pranit Kothari",
    "time": "11 years ago",
    "comments": [
        {
            "user": "Ange",
            "text": "this question is on hold as it depends too much on opinions: if you reverse engineer cryptographic functions, then yes. if never, then no ;)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "It is more and more important for practical reverse-engineering. It is now present in malware, the example of Stuxnet, Flame and others are quite typical of the usage of cryptography in such context. And, it is also present in most protection schemes because a lot of techniques use cryptography to protect the code and data. Just consider software such as Skype or iTunes which are relying on cryptography to protect their protocol or to hide information in the executable.\nSo, indeed, it would be really a problem if you do not understand a bit cryptography when reversing. And, by \"understanding cryptography\", I mean at least to be able to recognize the code of classical cipher algorithms at assembly level such as DES, AES, SHA-1, SHA-3, and so on. And, also to know classical flaws and cryptanalysis techniques for weak crypto (such as frequency analysis).\nA good way to learn about the cryptography needed for reverse-engineering would be to implement (with the help of existing codes found on the Net) your own cryptographic library with classical ciphers and look at the generated assembly. If you do not have the patience to do so, just look at the crypto-lib of OpenSSL, get it compiled and look at the code and the assembly.\nOf course, more you know about it, more you will be efficient when facing it.\n",
            "votes": "7",
            "user": "perror",
            "time": "Jan 19, 2014 at 17:11",
            "is_accepted": true,
            "comments": []
        },
        {
            "content": "I'd say it's a very useful tool to have in the arsenal, but your use of it will depend upon your ultimate goals. Personally, I use it a fair bit on binary application assessments, but that's not the case for everyone. As I said, it largely depends on what you want to be doing.\nAt the end of the day, you will see cryptography being used in applications if you end up doing reverse engineering work. Understanding and breaking that cryptography may or may not be part of your job, but it's always nice to have at least a basic understanding of the field. It's always a nice +1 on your resume, too.\nIn terms of what you should learn, I'd say avoid the \"classic cipher\" stuff and go straight for the meat and potatoes. I can count on one hand the number of times I've had to break a simple custom transposition cipher or substitution cipher in a real product. They're just not used in reality, and if the client is using such awful \"crypto\" then that's already a major issue to flag to them - breaking it becomes a moot point.\nYou want to be looking into:\n\nSimple xor ciphers (one-time pad, two-time pad, repeated key xor)\nStream ciphers\nUse of initialisation vectors (IVs) to avoid key re-use issues\nStream cipher malleability\nBlock ciphers\nBlock cipher padding\nBlock cipher modes of operation (Cipher Block Chaining especially)\nIssues with Electronic Code Book (ECB) mode\nIVs in block ciphers\nMalleability in CBC\nPadding oracle attacks\nCompression oracle attacks (e.g. CRIME)\nHash functions (MD5, SHA1, etc.)\nHash collisions and the birthday paradox\nMessage Authentication Codes (e.g. HMAC construction)\nAsymmetric cryptography (e.g. RSA)\nKey exchange mechanisms (e.g. Diffie-Hellman)\nHybrid cryptosystems (i.e. using asymmetric to send key, symmetric to encrypt)\nThe list of common issues around SSL/TLS and PKI:\n\nNot validating CA properly\nNot validating common name properly\nNot validating expiry or valid from dates\nAllowing weak ciphers (e.g. NULL, DES)\nAllowing weak certificate signatures (e.g. MD5)\netc... (see OWASP for more)\n\n\nThe list is pretty big, but it's stuff you can pick up from Wikipedia and other various places online at your own pace. If you understand half of the topics above at a level strong enough to identify a weak implementation, then you're very much on track. Almost every single product I've ever done work that has used crypto has had an issue in that list.\n",
            "votes": "13",
            "user": "Polynomial",
            "time": "Jan 20, 2014 at 10:07",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Pranit Kothari",
                    "text": "<span class=\"comment-copy\">+1: Yet to go through all the details of your answer, but seems to be detailed and useful.</span>",
                    "time": null
                }
            ]
        }
    ]
}