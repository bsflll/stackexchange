{
    "title": "Reverse-obfuscated Java code [duplicate]",
    "link": "https://reverseengineering.stackexchange.com/questions/14547/reverse-obfuscated-java-code",
    "content": "This question already has answers here:\n                                \n                            \n\n\n\n\nWhat is a good Java decompiler and deobfuscator?\n\n                                (7 answers)\n                            \n\nClosed 8 years ago.\n\n\n\nAny idea how to reverse obfuscated java code !?\n",
    "votes": "-2",
    "answers": 1,
    "views": "4k",
    "tags": [
        "java",
        "decompiler",
        "jar"
    ],
    "user": "H.BENIZID",
    "time": "8 years ago",
    "comments": [
        {
            "user": "julian",
            "text": "reverseengineering.stackexchange.com/questions/1370/â€¦\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Decompilation is useful for reverse engineering, but in most cases, you won't be able to recompile the results, because compilation and decompilation are lossy processes and obfuscation exacerbates that.\nIf you understand Java bytecode, a good way to edit JARs is to use a bytecode assembler/disassembler such as Krakatau. Since this operates directly at the level of compiled bytecode, you can edit any Java classfiles, no matter how obfuscated, and you don't have to worry about compiler errors.\n",
            "votes": "0",
            "user": "Antimony",
            "time": "Feb 1, 2017 at 21:47",
            "is_accepted": true,
            "comments": []
        }
    ]
}