{
    "title": "What do square brackets do in IDA's pseudocode representation?",
    "link": "https://reverseengineering.stackexchange.com/questions/22191/what-do-square-brackets-do-in-idas-pseudocode-representation",
    "content": "I've been a bit stumped recently on my decomp work. I've not dealt with C in depth nor have I dealt with IDA's pseudocode system very much at all. I understand asm, but because of how IDA merges instructions together in its pseudocode system, I'm having some trouble finding out how this translates.\nIn my pseudocode I have the following line:\n<pre><code>// v1 is a pointer to RDI (stored as a single in pseudocode)\n// v7 is a pointer to R8 (stored as a single in pseudocode)\n// v10 is XMM1 (single)\n\nv1[1818] = (float)(v10 * (float)(*v7 - v7[1])) + v7[1];\n</code></pre>\nI'm having trouble understanding what the square brackets do. I was thinking that it was an offset (e.g. \"set the data at the location of v1 in memory + 1818i64 bytes to...\") but the asm doesn't match up with that addr. What's the difference between setting <pre><code>v1 =</code></pre> vs setting <pre><code>v1[1818] =</code></pre>?\n",
    "votes": "0",
    "answers": 1,
    "views": "840",
    "tags": [
        "ida",
        "assembly",
        "x86-64"
    ],
    "user": "Eti the Spirit",
    "time": "Sep 26, 2019 at 3:14",
    "comments": [
        {
            "user": "sudhackar",
            "text": "In C they denote an array access. To correspond with assembly you might have to multiply the index with size of one member of the array.\n",
            "time": null
        },
        {
            "user": "Eti the Spirit",
            "text": "Ah-ha! Yes, you were right. That was my mistake. I forgot to multiply 1818 by the size of the value (4 in this case, since it's a single). Suppose I'm just too used to the asm usage of [], yeah? I found the line <pre><code>movss dword ptr [rdi+1C68h], xmm1</code></pre> -- <pre><code>rdi+1C68h</code></pre> is indeed the right location after doing RDI+(4*1818i16).\n",
            "time": null
        },
        {
            "user": "sudhackar",
            "text": "If your problem is solved, please write a short answer, accept it and close this question.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "I've found out how this works. I had the right idea, but I had made the mistake of assuming it was n bytes ahead, failing to factor in the size of the actual value at hand.\nSince the specific type of <pre><code>v1</code></pre> was a single, this means I had to multiply the <pre><code>1818</code></pre> by <pre><code>4</code></pre> bytes. Looking at the corresponding ASM, <pre><code>movss   dword ptr [rdi+1C68h], xmm1</code></pre>, I can see that <pre><code>rdi+1C68h</code></pre> comes out to <pre><code>v1</code></pre> (rdi) + <pre><code>7272i64</code></pre> or <pre><code>rdi+1C68h</code></pre> - it checks out.\n",
            "votes": "2",
            "user": "Eti the Spirit",
            "time": "Sep 26, 2019 at 15:50",
            "is_accepted": true,
            "comments": []
        }
    ]
}