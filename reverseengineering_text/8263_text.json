{
    "title": "Understanding Motorola ColdFire instructions.",
    "link": "https://reverseengineering.stackexchange.com/questions/8263/understanding-motorola-coldfire-instructions",
    "content": "I have a coldfire sequence from IDAPro that looks like this:\n<pre><code>sub_29be8:\n\nvar_8 = -8\nvar_2 = -2\narg_0 = 8\narg_6 = $E\n\nlink a6, #-4;  \nmove.l a2, -(sp)\nmovea.l arg_0(a6),a2\ntst.w arg_6(a6)\nbne.s loc_29c00\nbset #5, $1e(a2)\nbra.s loc_29c14\n\n....\n</code></pre>\nIn the documentation here, I'm having some issues with understanding what exactly the documentation is saying.  \n<pre><code>LINK Ay,#<displacement> W \nSP – 4→SP; //subtract SP by 4 and set into SP\nAy → (SP); //set address pointed to in Ay and set into value of SP\nSP→Ay, SP + dn → SP  //set SP into Ay, add the offset specified by <displacement> and set into SP</code></pre>\nAre ALL of these steps executed for the <pre><code>LINK</code></pre> instruction, or are these the possibilities based on some processor states that I haven't found out about yet?  (This appears to be setting up the stack for a function call.)  \nThe next question I have about the sequence is the second instruction, <pre><code>move.l a2, -(sp)</code></pre>\nThis appears to be moving a <pre><code>longword</code></pre> from a2 into the stack pointer, HOWEVER the negation looks odd to me.  It appears to be \"move address in a2 into SP and then multiply its value by -1\" but I could also see the parenthesis being used as specifying an order of operations to be applied to the address.\n",
    "votes": "1",
    "answers": 1,
    "views": "630",
    "tags": [
        "ida",
        "motorola"
    ],
    "user": "avgvstvs",
    "time": "Feb 17, 2015 at 20:56",
    "comments": [
        {
            "user": "Jongware",
            "text": "Your second question is explained in (uh) about any 68K documentation: it's just a pre-decrement. If you are familiar with x86 code: it's a push, but to any A-register, and 'you' need to decrement the address yourself, or it'll just store the new value.\n",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "@Jongware, I'm using the ColdFire User Manual, and the only reference to \"predecrement\" in the entire 700+ pages was a description of the algorithm used by the MASK instruction.  I had to dig up a different \"programmer's reference\" to get more detail.\n",
            "time": null
        },
        {
            "user": "avgvstvs",
            "text": "Gave me the answer to <pre><code>LINK</code></pre> as well.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "Answer to the <pre><code>LINK</code></pre> question was provided on page 119 here.\nPre/Post decrement operations are described on page 44.\n",
            "votes": "1",
            "user": "avgvstvs",
            "time": "Feb 17, 2015 at 21:24",
            "is_accepted": false,
            "comments": []
        }
    ]
}