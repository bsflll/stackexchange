{
    "title": "Strange DWORD/QWORD C++ Strings in decompilation",
    "link": "https://reverseengineering.stackexchange.com/questions/30340/strange-dword-qword-c-strings-in-decompilation",
    "content": "I have never seen something like this before but I assume this is some kind of way C++ allocates dynamic strings. In my decompilation listing in Ghidra I see something like:\n<pre><code>  local_14 = DAT_00404004 ^ (uint)&stack0xfffffff0;\n  local_70 = 0x2120302e;\n  local_90 = 0x636c6557;\n  uStack140 = 0x20656d6f;\n  uStack136 = 0x45206f74;\n  uStack132 = 0x7972636e;\n  local_6c = 0xa20;\n  local_80 = 0x6f697470;\n  uStack124 = 0x694b206e;\n  uStack120 = 0x76206172;\n  uStack116 = 0x322e342e;\n  local_6a = 0;\n  local_28 = 0x203a656d;\n  plea_str = 0x61656c50;\n  uStack60 = 0x69206573;\n  uStack56 = 0x7475706e;\n  uStack52 = 0x756f7920;\n  local_30 = 0x616e726573752072;\n  local_24 = 0;\n  local_60 = 0x656c500a;\n  uStack92 = 0x20657361;\n  uStack88 = 0x75706e69;\n  uStack84 = 0x6f792074;\n  local_48 = 0x3a64726f;\n  local_50 = 0x7773736170207275;\n  local_20 = 0x656d6f636c65570a;\n  local_44 = 0x20;\n  local_18 = 0x20;\n  local_d0 = 0xa2e6e;\n  local_f0 = 0x6f72570a;\n  uStack236 = 0x7020676e;\n  uStack232 = 0x77737361;\n  uStack228 = 0x2e64726f;\n  local_e0 = 0x656c5020;\n  uStack220 = 0x20657361;\n  uStack216 = 0x20797274;\n  uStack212 = 0x69616761;\n  your_str = 0x72756f59;\n  uStack156 = 0x65737520;\n  uStack152 = 0x6d616e72;\n  uStack148 = 0x203a65;\n  local_c0 = 0x72756f59;\n  uStack188 = 0x73617020;\n  uStack184 = 0x726f7773;\n  uStack180 = 0x203a64;\n  local_b0 = 0x766e490a;\n  uStack172 = 0x64696c61;\n  uStack168 = 0x6d616e20;\n  uStack164 = 0xa2165;\n</code></pre>\nI am not totally sure what <pre><code>local_14</code></pre> is doing either. But each of these locals is a string as you can tell from the bytes. Hovering over them gives the string (in reverse). I'd like to find a way to combine these in a way that makes them make more sense but despite my best efforts I cannot type them correct to get ghidra to recognize what they are and their relationship. What is the best way to handle these strings to clean up my decompilation?\n",
    "votes": "1",
    "answers": 1,
    "views": "677",
    "tags": [
        "c++",
        "ghidra",
        "strings"
    ],
    "user": "John S.",
    "time": "Apr 28, 2022 at 6:01",
    "comments": [
        {
            "user": "tkausl",
            "text": "<pre><code>local_14</code></pre> might be some sort of SEH or cookie handling. The others are probably a single <pre><code>char[]</code></pre> misinterpreted to many ints. Try to change the type of the lowest stack-address to an char array.\n",
            "time": null
        },
        {
            "user": "0xC0000022L",
            "text": "You need some experience for that, but most (if not all) of the individual octets of these values are within the ASCII printable range. Whenever I see this in IDA I try <pre><code>R</code></pre> to validate my assumption and then act accordingly. But with Ghidra I have no idea.\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "This is a standard method for the C and C++ compilers to build static strings directly on the stack. This method will be used by the compiler when compiling this code:\n<pre><code>#include <cstdio>\n\nint main() {\n    char str1[] = \"hello world from some string that is constructed directly on the stack\";\n    printf(\"%s\n\", str1);                                                                  \n    return 0;\n}\n</code></pre>\nResult in Ghidra:\n<pre><code>undefined8 main(void)\n\n{\n    long in_FS_OFFSET;\n    long local_58;\n    undefined8 uStack80;\n    undefined8 uStack72;\n    undefined8 uStack64;\n    undefined8 uStack56;\n    undefined8 uStack48;\n    undefined8 uStack40;\n    undefined8 uStack32;\n    undefined4 uStack24;\n    undefined2 uStack20;\n    undefined uStack18;\n    long lStack16;\n    \n    lStack16 = *(long *)(in_FS_OFFSET + 0x28);\n    local_58 = 0x6f77206f6c6c6568;\n    uStack80 = 0x6d6f726620646c72;\n    uStack72 = 0x747320656d6f7320;\n    uStack64 = 0x61687420676e6972;\n    uStack56 = 0x6e6f632073692074;\n    uStack48 = 0x6465746375727473;\n    uStack40 = 0x6c74636572696420;\n    uStack32 = 0x656874206e6f2079;\n    uStack24 = 0x61747320;\n    uStack20 = 0x6b63;\n    uStack18 = 0;\n    puts((char *)&local_58);\n    if (lStack16 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    // WARNING: Subroutine does not return\n        __stack_chk_fail();\n    }\n    return 0;\n}\n</code></pre>\nThe only way I could find to make the output a little less noisy is to change the type of the variable that holds the beginning of each string to <pre><code>char[N]</code></pre> where N is the size of the string. In I've retyped the <pre><code>local_58</code></pre> variable to <pre><code>char[71]</code></pre> and I got this:\n<pre><code>undefined8 main(void)\n\n{\n    long lVar1;\n    long in_FS_OFFSET;\n    char local_58 [71];\n    \n    lVar1 = *(long *)(in_FS_OFFSET + 0x28);\n    local_58._0_8_ = 0x6f77206f6c6c6568;\n    local_58._8_8_ = 0x6d6f726620646c72;\n    local_58._16_8_ = 0x747320656d6f7320;\n    local_58._24_8_ = 0x61687420676e6972;\n    local_58._32_8_ = 0x6e6f632073692074;\n    local_58._40_8_ = 0x6465746375727473;\n    local_58._48_8_ = 0x6c74636572696420;\n    local_58._56_8_ = 0x656874206e6f2079;\n    local_58._64_4_ = 0x61747320;\n    local_58._68_2_ = 0x6b63;\n    local_58[70] = '\\0';\n    puts(local_58);\n    if (lVar1 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    // WARNING: Subroutine does not return\n        __stack_chk_fail();\n    }\n    return 0;\n}\n</code></pre>\nIt's still noisy, but at least now it uses just 1 variable for a string, and it's easier to rename the variables.\n",
            "votes": "2",
            "user": "antekone",
            "time": "May 5, 2022 at 8:04",
            "is_accepted": true,
            "comments": []
        }
    ]
}