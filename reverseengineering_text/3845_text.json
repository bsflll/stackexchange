{
    "title": "GCC Loop optimization",
    "link": "https://reverseengineering.stackexchange.com/questions/3845/gcc-loop-optimization",
    "content": "I have been looking at some simple C code and the different output from GCC using different optimization levels.\nC code\n<pre><code>#include <stdio.h>\n\nint main() {\n    int i = 0;\n\n    while(i<10) {\n            printf(\"Hello\n\");\n            i++;\n    }\n\n    i = 0;\n\n    while(i<10) {\n            printf(\"i: %d\n\", i);\n            i++;\n    }\n</code></pre>\n}\nWhen I compile the code using <pre><code>-Os</code></pre> or <pre><code>-O2</code></pre> the first loop works a bit differently. It it decrements instead of incrementing, and it is in two different ways. I am wondering why it decrements instead of incrementing like in the code, and the the small difference between <pre><code>-Os</code></pre> and <pre><code>-O2</code></pre>.\n-Os compiled\n<pre><code>0x400486 <main+6>       mov     edi,0x40068c\n0x40048b <main+11>      call    0x400450 <puts@plt>\n0x400490 <main+16>      dec     ebx\n0x400492 <main+18>      jne     0x400486 <main+6>\n</code></pre>\n-O2 compiled\n<pre><code>0x400490 <main+16>      mov    edi,0x40069c\n0x400495 <main+21>      call   0x400450 <puts@plt>\n0x40049a <main+26>      sub    ebx,0x1\n0x40049d <main+29>      jne    0x400490 <main+16> \n</code></pre>\n",
    "votes": "5",
    "answers": 2,
    "views": "2k",
    "tags": [
        "disassembly"
    ],
    "user": "Sindre Smistad",
    "time": "Mar 11, 2014 at 6:04",
    "comments": [],
    "answers_data": [
        {
            "content": "By decrementing, compiler can make use of <pre><code>jne</code></pre> (jump if not equal/zero) which does the comparison (to zero) and jump in a single instruction. In case of incrementing, it would have to do a <pre><code>cmp/test</code></pre> (with 10) and then a conditional jump like <pre><code>jnz/jne</code></pre>. I believe it is a part of optimization.\n<pre><code>-Os</code></pre> flag optimizes to bring down the code size. The code generated using <pre><code>-Os</code></pre> uses <pre><code>dec ebx</code></pre> instead of <pre><code>sub ebx, 0x1</code></pre>, since <pre><code>dec ebx</code></pre> is a 2-byte instruction while <pre><code>sub ebx, 0x1</code></pre> is a 3-byte instruction (Note the address at which the next instruction begins). That explains the small difference.\n",
            "votes": "7",
            "user": "pank4j",
            "time": "Mar 11, 2014 at 7:16",
            "is_accepted": true,
            "comments": [
                {
                    "user": "PlasmaHH",
                    "text": "<span class=\"comment-copy\">This does explain the difference in one direction, but not the other; it seems that there must be an advantage of <code>sub</code> over <code>dec</code> otherwise O2 would not have chosen it.</span>",
                    "time": null
                },
                {
                    "user": "Sindre Smistad",
                    "text": "<span class=\"comment-copy\">With a little research I think I found the reason why <b>O2</b> uses <b>sub</b> instead of <b>dec</b>. <a href=\"http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf\" rel=\"nofollow noreferrer\">IntelÂ® 64 and IA-32 Architectures Optimization Reference Manual</a> In table C-19 in appendix C <b>add/sub</b> has a lower latency.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Because I can't comment, I'll try to fix some inaccuracies in pnak4j's answer.\n<pre><code>dec ebx</code></pre> is really a 1-byte instruction (I don't know why it appears to be 2-bytes). <pre><code>DEC</code></pre> sets the <pre><code>ZF</code></pre> flag accordingly to the result of (<pre><code>ebx-1</code></pre>) when: zero or not zero. Then, <pre><code>JNE</code></pre> does the jump if not zero (<pre><code>JNE</code></pre>/<pre><code>JNZ</code></pre> are the same). <pre><code>JMP</code></pre> is not a conditional jump, therefore it would not make much sense after <pre><code>CMP</code></pre>/<pre><code>TEST</code></pre>.\n",
            "votes": "5",
            "user": "perror",
            "time": "Mar 11, 2014 at 7:50",
            "is_accepted": false,
            "comments": [
                {
                    "user": "pank4j",
                    "text": "<span class=\"comment-copy\">By <code>jmp</code>, I meant a conditional jump. An unconditional jump doesn't make much sense after a compare. It has been edited. Thanks.</span>",
                    "time": null
                },
                {
                    "user": "PlasmaHH",
                    "text": "<span class=\"comment-copy\"><code>dec ebx</code> is <code>0xff 0xcb</code></span>",
                    "time": null
                }
            ]
        }
    ]
}