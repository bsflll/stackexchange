{
    "title": "Is IDA pulling my leg - or can REX.W sometimes not be determined in static analysis?",
    "link": "https://reverseengineering.stackexchange.com/questions/18695/is-ida-pulling-my-leg-or-can-rex-w-sometimes-not-be-determined-in-static-analy",
    "content": "NB: I normally dabble with disassembly (i.e. mnemonics) and only ever look at the raw opcodes when I can't avoid it.\nI have the following line of disassembly of a Windows x64 kernel mode driver, created by IDA Pro 7.1.180227:\n<pre><code>xor     edx, edx\n</code></pre>\nNow I know for a fact that this is in preparation of passing the second parameter to a function via <pre><code>rdx</code></pre>. I also know that the intention of that code is to set said pointer argument to <pre><code>NULL</code></pre>.\nThe opcode is <pre><code>33 D2</code></pre>. And cross-referencing that with the reference or looking at it in ODA yields the same as with IDA: <pre><code>xor edx, edx</code></pre>.\nNow what itches me wrong with this disassembly is that <pre><code>rdx</code></pre>, as a superset of <pre><code>edx</code></pre>, is used elsewhere on that exact code path to store other pointers. So in theory the upper double-word of <pre><code>rdx</code></pre> could be \"dirty\".\nAnd going by the fact that this is x64 code, I'd expect this to read <pre><code>xor rdx, rdx</code></pre>. Why is that not how it's presented in the disassembly?\n\nNow I understand that, as per section 3.6.1 (Table 3-4) of the Intel SDM (05/2018) the REX.W Prefix of the opcode can affect the operand size.\nFor this opcode neither the operand-size (66h) nor the address-size (67h) prefix are present.\nSo going by the Intel SDM (section \"XORâ€”Logical Exclusive OR\") I should indeed be dealing with opcode <pre><code>33 /r</code></pre> or instruction <pre><code>XOR r32, r/m32</code></pre>, confirming IDAs translation of the opcode. Referring to section 2.1.5 (\"Addressing-Mode Encoding of ModR/M and SIB Bytes\") of the Intel SDM gives us a clue as to how the operand (<pre><code>D2</code></pre>) is encoded and so gives us, from Table 2-2 (\"32-Bit Addressing Forms with the ModR/M Byte\"): <pre><code>EDX/DX/DL/MM2/XMM2</code></pre> as operand.\nFigures.\nHowever, that would mean that the \"dirty\" upper double-word in <pre><code>rdx</code></pre> would not be zeroed out and thus a garbled/truncated pointer would end up being passed. Given this is kernel mode code, the consequences should be clear.\nI just can't believe that the compiler would make such mistake. So what am I missing?\n",
    "votes": "5",
    "answers": 1,
    "views": "1k",
    "tags": [
        "ida",
        "x86-64",
        "assembly"
    ],
    "user": "0xC0000022L",
    "time": "Jul 5, 2018 at 14:16",
    "comments": [
        {
            "user": "NirIzr",
            "text": "Could you include some related code? say, code using E/RDX, additional code manipulating it prior to XOR instruction, etc. I've recently encountered a similar issue where after some more thorough investigation the upper half of RDX was indeed always zero, making this an unexploitable bug by the developer.\n",
            "time": null
        },
        {
            "user": "Peter Cordes",
            "text": "duplicate of stackoverflow Why do x86-64 instructions on 32-bit registers zero the upper part of the full 64-bit register?, and see also What is the best way to set a register to zero in x86 assembly: xor, mov or and? which explains that 32-bit operand-size is always best (e.g. <pre><code>xor r10d, r10d</code></pre> is not shorter than <pre><code>xor r10,r10</code></pre>, but Silvermont only recognizes 32-bit operand size as a zeroing idiom!)\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "In x86-64, any operation that affects only the lower 32 bits of a register automatically zeros out the upper 32 bits.\nThe relevant part in the Intel Architecture manual is in Volume 1, 3.4.1.1, which states:\n\nWhen in 64-bit mode, operand size determines the number of valid bits\n  in the destination general-purpose register:\n\n64-bit operands generate a 64-bit result in the destination general-purpose register.\n32-bit operands generate a 32-bit result, zero-extended to a 64-bit\n  result in the destination general-purpose register.\n8-bit and 16-bit operands generate an 8-bit or 16-bit result. The upper 56 bits or 48 bits (respectively) of the destination general-purpose register are\n  not modified by the operation. If the result of an 8-bit or 16-bit\n  operation is intended for 64-bit address calculation, explicitly\n  sign-extend the register to the full 64-bits.\n\n\nThus both forms give the same result, and <pre><code>xor edx, edx</code></pre> is one byte shorter than <pre><code>xor rdx, rdx</code></pre>, so the compiler prefers it.\n",
            "votes": "15",
            "user": "jakobbotsch",
            "time": "Jul 5, 2018 at 14:31",
            "is_accepted": true,
            "comments": [
                {
                    "user": "jakobbotsch",
                    "text": "<span class=\"comment-copy\">By the way, this also gives other intricacies. For example the NOP instruction is normally 0x90, which is actually <code>xchg eax, eax</code>. But in 64-bit mode this is not a NOP, because it zeros the upper 32 bits. So <code>xchg eax, eax</code> has different encodings in 64-bit and 32-bit mode.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I read about that somewhere, but I did not make the connection.</span>",
                    "time": null
                },
                {
                    "user": "jakobbotsch",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky Yes, that's what I meant. They had to find a new encoding for <code>xchg eax, eax</code> since that wouldn't be a NOP on x64.</span>",
                    "time": null
                },
                {
                    "user": "Peter Cordes",
                    "text": "<span class=\"comment-copy\">@Joshua: Right, I think what Jakob meant to say is that <i>assemblers</i> can't use the <code>0x90</code> short form for <code>xchg eax,eax</code> in the asm source, and have to use the <code>xchg r, r/m32</code> form with a ModRM byte (<a href=\"http://felixcloutier.com/x86/XCHG.html\" rel=\"nofollow noreferrer\">felixcloutier.com/x86/XCHG.html</a>).  But fun fact, 16 and 64-bit operand sizes can still use <code>0x90</code> with a 66 or REX.W prefix.  NASM does assemble <code>xchg ax,ax</code> to <code>66 90</code> in 64-bit mode.</span>",
                    "time": null
                },
                {
                    "user": "jakobbotsch",
                    "text": "<span class=\"comment-copy\">@PeterCordes Exactly. I phrased that badly, but we got there in the end!</span>",
                    "time": null
                }
            ]
        }
    ]
}