{
    "title": "Importing C header file with memory location definitions",
    "link": "https://reverseengineering.stackexchange.com/questions/6651/importing-c-header-file-with-memory-location-definitions",
    "content": "Bear with me as I am new to IDA and have not managed to find an answer to my question on google or other related outlets.\nI am reversing a firmware blob from an ARM device of which I have a c header file defining various memory locations as follows:\n<pre><code>#define IO_LCD_OUT 0x4000000\n</code></pre>\nIs there a way I can load this header file into IDA in order to redefine immediate values?\nFor Example, instead of:\n<pre><code>MOV     R12, #0x4000000\n</code></pre>\nCould IDA instead print:\n<pre><code>MOV     R12, IO_LCD_OUT\n</code></pre>\nAre there other ways to acheive this outcome aside from how I am trying to approach this? I have the header file with memory locations defined and would like to load that information into ida!\nI have tried to parse it using File -> Load File -> Parse C Header File and have had no luck!\n",
    "votes": "7",
    "answers": 2,
    "views": "2k",
    "tags": [
        "ida"
    ],
    "user": "Thomas",
    "time": "Nov 18, 2014 at 14:44",
    "comments": [
        {
            "user": "Jason Geffner",
            "text": "What error message(s) are you getting when you try <pre><code>Parse C Header File</code></pre>?\n",
            "time": null
        },
        {
            "user": "Thomas",
            "text": "I'm not getting any error messages, it loads the file perfectly fine. I just don't know how to change the way the immediate values are displayed. When I right click 0x4000000 for example, there are no options that allow me to define it as the variable in the header file\n",
            "time": null
        }
    ],
    "answers_data": [
        {
            "content": "You can use custom enumerations here.\n\nGo to Enums list (Shift+F10).\nAdd a new enum for you list of constants (Ins)\nAdd constant(s) to the list (N), e.g. name <pre><code>IO_LCD_OUT</code></pre> and value <pre><code>0x4000000</code></pre>\nNow you should be able to replace these constants in the disassembly, using M or the context menu.\n\nYou can speed up things by:\n\nGenerating an IDC file from the header to build the enum programmatically (use functions <pre><code>AddEnum</code></pre> and <pre><code>AddConstEx</code></pre>). The <pre><code>h2enum.idc</code></pre> script might work too.\nConverting those defines to a C style <pre><code>enum</code></pre>, parsing the header, then using the imported enum from your disassembly (you will need to first perform <pre><code>Synchronize to idb</code></pre> step in the Local Types).\n",
            "votes": "5",
            "user": "Igor Skochinsky",
            "time": "Nov 18, 2014 at 12:23",
            "is_accepted": true,
            "comments": [
                {
                    "user": "w s",
                    "text": "<span class=\"comment-copy\">Will you have ability to cross reference addresses mentioned in defined constants ( for example #define IO_LCD_OUT 0x4000000 ) ? If yes, how is it possible ?</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">No, currently cross-references to enums are not maintained, though we're considering adding this feature.</span>",
                    "time": null
                },
                {
                    "user": "Orwellophile",
                    "text": "<span class=\"comment-copy\">@IgorSkochinsky How can one perform <code>Synchronize to idb</code> from IDAPython?</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Importing header files will not do this work because there is no general way to find out meaning of any defined constant.\nYou'll need to do some manual work for it.\nI handling this problem as follows (it requires some IDA scripting, but it should be easy):\n\nFor all required memory regions (for example LCD) data segment should be created by using <pre><code>idc.AddSeg</code></pre> IDAPython api or via IDA UI. Addresses of those regions can be gathered from datasheets or by analysis of header files.\nAll those address-meaning-defines should be extracted from header files and converted to global variable names by <pre><code>idc.MakeName</code></pre> IDAPython api.\nBinary should be reanalyzed (Options-->General-->Analisys-->Reanalyze program). If addresses are still not recognized, you will need to write IDAPython script that converts these addresses to offsets by <pre><code>idc.OpOff</code></pre> IDAPython api. \n\nAs far as I know there is no general solution for this problem in IDA for now.\n",
            "votes": "3",
            "user": "w s",
            "time": "Nov 18, 2014 at 7:38",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">When the values are referring to memory and are not just flags or whatnot, this is probably the better approach.</span>",
                    "time": null
                }
            ]
        }
    ]
}