{
    "title": "How do I reverse-engineer .so files found in Android APKs?",
    "link": "https://reverseengineering.stackexchange.com/questions/4624/how-do-i-reverse-engineer-so-files-found-in-android-apks",
    "content": "I know how to reverse-engineer normal Android APKs using tools like <pre><code>apktool</code></pre> and <pre><code>dex2jar</code></pre>, but I don't know how to work with obfuscation.\nWhen I extract everything from APK, I get some Smali files (I tried JD-GUI, but the strings contained random names. Probably obfuscated using ProGuard.), some resource files, and a \".so\" files in the <pre><code>/lib</code></pre> directory.\n\nHow do I analyze the \".so\" file? I know that SO files are kind of DLLs of the Linux world, but what are the tools that can be used to analyze SO files? Any links to videos would be very helpful.\nAlso, how would I get around if there were a JAR file instead of an SO file in the APK?\n\nI know this largely constitutes learning by myself, but I really don't know what to look or where to look. Some examples would be really helpful. Thanks!\n",
    "votes": "95",
    "answers": 9,
    "views": "322k",
    "tags": [
        "disassembly",
        "binary-analysis",
        "obfuscation",
        "android",
        "deobfuscation"
    ],
    "user": "Pervy Sage",
    "time": "Oct 26, 2023 at 9:45",
    "comments": [],
    "answers_data": [
        {
            "content": "The .so file is a compiled library, in most cases from C or C++ source code. .so stands for Shared Object, it doesn't have anything to do with obfuscation, it just means someone wrote parts of the app in C.\nIn some cases, there is existing C code and it's just easier for the programmer to build a JNI interface to call the library from Java; in other cases, the programmer wants the speed advantage that compiled C has over Java. And of course, if I want to hide how some part of my application works, writing that in C and compiling it to a .so makes it much harder to reverse.\nIf you want to reverse an Android .so, these are the options you have:\n\nBuy the commercial version of IDA Pro. The demo versions will not do, as they can't disassemble ARM code. This is expensive, but by far the best tool to work with unknown object code.\nIf the app includes versions of the .so for different hardware, and if it has a library for Android on x86, you can use the free IDA 5.1 version to disassemble it.\nIf you have access to a Linux system, get a gcc toolchain for ARM that includes <pre><code>objdump</code></pre>, and use <pre><code>objdump --disassemble</code></pre> to get a huge text file containing disassembled code. Then, have fun with that text file. There might be gcc toolchains for ARM targets that run on Windows as well, but I never tried.\nYou could also upload the .so file to http://onlinedisassembler.com/ to get a disassembled file, if you don't want to install a gcc toolchain.\n\nBeware, though, in all of these cases, you need a thorough understanding of the ARM processor architecture, assembler language, JNI conventions, and compiler ABI to make any sense of the disassembly. Prepare for many long nights if you're inexperienced.\n",
            "votes": "106",
            "user": "Andrew T.",
            "time": "Oct 10, 2023 at 5:18",
            "is_accepted": true,
            "comments": [
                {
                    "user": "phuclv",
                    "text": "<span class=\"comment-copy\">Android has x86 version so I think the OP can grab the same .so file from x86 image and decompile it</span>",
                    "time": null
                },
                {
                    "user": "Dr.jacky",
                    "text": "<span class=\"comment-copy\">Unfortunately onlinedisassembler.com has limitation. Maximum upload size is 256KB.</span>",
                    "time": null
                },
                {
                    "user": "dcow",
                    "text": "<span class=\"comment-copy\"><a href=\"https://inguma.eu/projects/bokken\" rel=\"nofollow noreferrer\">Bokken</a> supports ARM too, right?</span>",
                    "time": null
                },
                {
                    "user": "IgorGanapolsky",
                    "text": "<span class=\"comment-copy\">~\"<b>Then, have fun with that text file.</b>\"  What do you mean?  What is the best way to inspect this text file sensibly.</span>",
                    "time": null
                },
                {
                    "user": "Igor Skochinsky",
                    "text": "<span class=\"comment-copy\">In fact, the demo version of IDA does support ARM (freeware doesn't).</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Besides Guntram's suggestions, check out the retargetable decompiler aka retdec. It can decompile the binary to Python or C code. At least for me, it reads easier than pure assembly (and it works for ARM binaries).\nIt works very well for sketching you the rough workings of the shared object.\nA plugin for select IDA versions exists, but the main limitation is that it doesn't support 64-bit code.\n",
            "votes": "26",
            "user": "0xC0000022L",
            "time": "Aug 10, 2018 at 20:23",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Krypton",
                    "text": "<span class=\"comment-copy\">it's not really good. Hexrays decompiler for the win.</span>",
                    "time": null
                },
                {
                    "user": "IgorGanapolsky",
                    "text": "<span class=\"comment-copy\">@Krypton Why is it ~\"<b>not really good</b>\"?</span>",
                    "time": null
                },
                {
                    "user": "Krypton",
                    "text": "<span class=\"comment-copy\">Hexrays decompiler works with IDA Pro. And IDA is the best reversing tool out there. This combo means much more than just a decompiler.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can also try a dynamic approach by hooking APIs and observing arguments and return values. This will allow you to look at data going into crypto APIs, which may help a lot when dealing with network protocols. Check out the Frida instrumentation toolkit for an open source cross-platform solution (Android, iOS, Windows, Mac and Linux). There's a tutorial showing how to build an interactive instrumentation tool in a few minutes, which injects code into the “Yo” app on iOS and plots network connections using Google Maps.\n",
            "votes": "14",
            "user": "Ole André Vadla Ravnås",
            "time": "Jun 27, 2014 at 23:06",
            "is_accepted": false,
            "comments": [
                {
                    "user": "IgorGanapolsky",
                    "text": "<span class=\"comment-copy\">Frida would disassemble .so files?</span>",
                    "time": null
                },
                {
                    "user": "Sam",
                    "text": "<span class=\"comment-copy\">Frida intercepts calls to native libraries so you can have a look at what goes in and what comes out.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "Use android-ndk, https://developer.android.com/ndk/downloads/index.html.\nYou can use the toolchains inside the ndk to perform the type of disassembling you want to. For e.g. if I decompile an apk and get a .so library out of it, I will do :\n<pre><code>./android-ndk-r15b/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-objdump -T \"SAMPLE.so | less</code></pre>\nTo get an <pre><code>objdump</code></pre>.\n",
            "votes": "12",
            "user": "Shailesh Mota",
            "time": "Jul 20, 2017 at 15:00",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "You can also reverse-engineer APK files directly on an android device.\n\nJava part: Show Java\n.so files: Android disassembler.\n\n(Disclaimer: I 'm the developer)\nVersion 1.4.2 release.\nAndroid-Disassembler\nDisassemble ANY files including android shared libraries (aka .so files) (NDK, JNI), windows PE files(EXE, DLLs, SYSs, etc..), linux executables, object files, ANY files you want like pictures, audios, etc(for fun) entirely on Android. Capstone-based disassembler application on android.\nFeatures\n\nShows details of elf files.\nShows symbol table(functions or objects' ,... names) of elf files.\nDisassembles the code sections.\nHas various export options of the disassembly. (Reloadable raw file, compilable txt file, analytic text files, json, and  reloadable database)\nSupports projects.\nSupports directly launching from file browsers.\nSupports many ABIs(arm,x86,x64,MIPS,PowerPC,...)\nJump to address by symbols' names, or a hex address.\nSyntax colorizing.\nSupport PE and other bin formats.\nSort symbols if needed.\nNo need to press <pre><code>Disassemble</code></pre> button!\nColorize PUSH/POP instructions.\nColorize ARM arch instructions better.\nAdded Follow Jump menu for jump instructions.(With BackStack)\nCan override auto parse setup\n\nWhat's new\n\nYou can copy an instruction to the clipboard.\nIt now parses IAT, EAT of PE headers.\nFixed bugs.\n\nMaterials about assemblies\n\nARM\nARM BlackHat\nIntel\nWiki\n\nOpen Source\nThis app used\n - Capstone \n - Storage-Chooser\n - Colorpickerview\n - Java-binutils\n - PECOFF4J.\nThanks\nhttps://reverseengineering.stackexchange.com/a/20124/23870\nXRefs\nhttps://reverseengineering.stackexchange.com/a/18203/23870\nRelated link(RE thread)\n",
            "votes": "6",
            "user": "Hyeonseo Yang",
            "time": "Jan 2, 2019 at 1:54",
            "is_accepted": false,
            "comments": [
                {
                    "user": "Sam",
                    "text": "<span class=\"comment-copy\">Why would I want to do this on an Android device?</span>",
                    "time": null
                },
                {
                    "user": "Hyeonseo Yang",
                    "text": "<span class=\"comment-copy\">@Sam hmm, why not? You can even develop apps on android! (I do) :) (One possible advantage, it doesn't require copying files to PC)</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can also try the Snowman tool: https://derevenets.com/.\nNB: the original author appears to have \"pulled\" it. Several forks exist, e.g. this one not connected to original) or these.\n\nSnowman is a native code to C/C++ decompiler\n\nIt supports ARM, x86, and x86-64 architectures as specified on their website.\n",
            "votes": "4",
            "user": "0xC0000022L",
            "time": "Oct 10, 2023 at 11:00",
            "is_accepted": false,
            "comments": [
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">Why not give the author a chance and notify him/her of the issues? Software defects are not god-given, so they can be fixed. But users need to report them so this can happen.</span>",
                    "time": null
                },
                {
                    "user": "0xC0000022L",
                    "text": "<span class=\"comment-copy\">I think <a href=\"https://github.com/yegord/snowman/commit/fe63b86664b0e3110f7b805663f61801407dad13\" rel=\"nofollow noreferrer\">this commit</a> (probably a PR) prompted the author to scrap his repo?! Last good commit is <a href=\"https://github.com/yegord/snowman/commit/6fed71ccb650ebd1db1141676e1af8166835819e\" rel=\"nofollow noreferrer\">6fed71ccb650ebd1db1141676e1af8166835819e</a>.</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "You can try Ghidra.\n\nGhidra is a software reverse engineering (SRE) framework created and maintained by the National Security Agency Research Directorate. This framework includes a suite of full-featured, high-end software analysis tools that enable users to analyze compiled code on a variety of platforms including Windows, macOS, and Linux. Capabilities include disassembly, assembly, decompilation, graphing, and scripting, along with hundreds of other features. Ghidra supports a wide variety of processor instruction sets and executable formats and can be run in both user-interactive and automated modes. Users may also develop their own Ghidra plug-in components and/or scripts using Java or Python.\n",
            "votes": "2",
            "user": "Andrew T.",
            "time": "Oct 26, 2023 at 9:44",
            "is_accepted": false,
            "comments": [
                {
                    "user": "IgorGanapolsky",
                    "text": "<span class=\"comment-copy\">How to open <b>.so</b> file in Ghidra?</span>",
                    "time": null
                },
                {
                    "user": "sjas",
                    "text": "<span class=\"comment-copy\">drag and drop ..</span>",
                    "time": null
                }
            ]
        },
        {
            "content": "There is already an answer by the creator of frida, but I just wanted to add that, specifically, we can use the convenience tool <pre><code>frida-trace</code></pre> with a .so file, e.g.\n<pre><code>frida-trace -Ui 'nameOfYourLib.so!*' -p <PID>\n</code></pre>\nto dynamically see what's getting called (entry and exit moments) in that .so file during runtime as you run the app normally (it will filter out to trace only functions within nameOfYourLib.so). This could, for example, be used in conjunction with a static disassembler to find interesting functions to explore deeper.\n",
            "votes": "1",
            "user": "auspicious99",
            "time": "Nov 23, 2021 at 18:39",
            "is_accepted": false,
            "comments": []
        },
        {
            "content": "According to this blog post, GikDbg seems like an Ollydbg mod to debug native Android libraries.\nUnfortunatly, the website of GikDbg doesn't exist anymore.\n",
            "votes": "0",
            "user": "Sam",
            "time": "Jan 1, 2019 at 23:45",
            "is_accepted": false,
            "comments": []
        }
    ]
}